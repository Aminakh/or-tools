#summary Getting Started
#labels Phase-Deploy

<wiki:toc max_depth="1" />

=Getting the source=

Please visit http://code.google.com/p/or-tools/source/checkout to checkout the sources of or-tools.

=Content of the Archive=

Upon untarring the given operation_research tar file, you will get the following structure:
or-tools/
|| LICENSE-2.0.txt || Apache License ||
|| Makefile || Main Makefile ||
|| README || This file ||
|| algorithms/ || A collection of OR algorithms (non graph related) ||
|| base/ || Directory containing basic utilities ||
|| bin/  || Where all binary files will be created ||
|| csharp/ || Directory containing C# examples and a visual studio 2010 solution to build them ||
|| constraint_solver/ || The main directory for the constraint solver library ||
|| com/ || The main directory for the java code, and the C# library code ||
|| dependencies/ || Where third_party code will be downloaded and installed ||
|| gen/ || The root directory for all generated code (java classes, protocol buffers) ||
|| examples/ || C++ examples ||
|| graph/ || Standard OR graph algorithms ||
|| lib/ || Where libraries and jar files will be created ||
|| linear_solver/ || The main directory for the linear solver wrapper library ||
|| makefiles/ || Directory that contains sub-makefiles ||
|| objs/ || Where C++ objs files will be stored ||
|| python/ || Python examples ||
|| tools/ || Binaries and scripts needed by various platforms ||
|| util/ || More utilities needed by the constraint solver || 

=Installation on unix platforms =

For linux users, please intall zlib-devel, bison, flex, autoconf, libtool, python-setuptools, and python-dev. 

The command on ubuntu is the following:
{{{
sudo apt-get install bison flex python-setuptools python-dev autoconf libtool zlib-devel
}}}
The fedora command is:
{{{
 sudo yum install subversion bison flex python-setuptools python-dev autoconf libtool zlib-devel
}}}

If you wish to use glpk, please download glpk from http://ftp.gnu.org/gnu/glpk/glpk-4.47.tar.gz and put the archive in or-tools/dependencies/archives.
If you have the license, please download ziboptsuite-2.1.0.tgz from http://zibopt.zib.de/download.shtml and  put the archive in or-tools/dependencies/archives.

If you wish to use .NET, you need to install mono.
On linux platforms, just install the mono-devel package. You need a recent one (at least 2.8 I believe) to work correctly. If mono is not supported on your platform, you can install it using the procedure for Mac OS X.

On Mac OS X, you need 64 bit support. Thus you need to build mono by hand. Copy the mono archive http://download.mono-project.com/sources/mono/mono-2.10.8.1.tar.gz to dependencies/archives.
You can use {{{dependencies/install/bin/gmcs}}} to compile C# files and {{{dependencies/install/bin/mono}}} to run resulting .exe files.

run:
{{{
   make third_party
   make install_python_modules
}}}  

If you are on opensuse and maybe redhat, the {{{make install_python_module}}} will fail.
One workaround is described on this page http://stackoverflow.com/questions/4495120/combine-user-with-prefix-error-with-setup-py-install.

If you have root privilieges, you can replace the last line and install the python modules for all users with the following command:
{{{
  cd dependencies/sources/google-apputils
  sudo python2.7 setup.py install
}}}

It should create the Makefile.local automatically.

Please note that the command:
{{{  
  make clean_third_party
}}}

will clean all downloaded sources, all compiled dependencies, and Makefile.local.
It is useful to get a clean state, or if you have added an archive in dependencies.archives.

=Installation on Windows=

Create the or-tools svn copy where you want to work. 

Install python from http://www.python.org/download/releases/2.7/

Install java JDK from http://www.oracle.com/technetwork/java/javase/downloads/jdk-7u2-download-1377129.html

You need to install python-setuptools for windows. Please fetch it from http://pypi.python.org/pypi/setuptools#files .

If you wish to use glpk, please download glpk from http://ftp.gnu.org/gnu/glpk/glpk-4.47.tar.gz and put the archive in or-tools/dependencies/archives.

Then you can download all dependencies and build them using:

{{{
   make third_party
}}}  

then edit Makefile.local to point to the correct python and java installation. Afterwards, to use python, you need to install google-apputils.

{{{
  cd dependencies/sources/google-apputils
  c:\python27\python.exe setup.py install
}}}

Please note that the command:
{{{  
  make clean_third_party
}}}

will clean all downloaded sources, all compiled dependencies, and Makefile.local. It is useful to get a clean state, or if you have added an archive in dependencies.archives.

=Running tests=

You can check that everything is running correctly by running:
{{{
  make test
}}}

If everything is OK, it will run a selection of examples from all technologies in C++, python, and java.
On windows, it will also run C# examples.

=Compiling libraries and running examples=

==Compiling libraries==

All build rules use make (gnu make), even on windows. A make.exe binary is provided in the tools sub-directory.

You can query the list of targets just by typing

{{{make}}}

You can then compile the library, examples and python wrapping for the constraint solver, the linear solver wrappers, and the algorithms:

{{{make all}}}


To compile in debug mode, please use

{{{make DEBUG=-g all}}}

or

{{{make DEBUG="/Od /Zi" all}}}

under windows.


You can clean everything using

{{{make clean}}}

When everything is compiled, you will find under operations_research:
  * some static libraries (libcp.a, libutil.a and libbase.a, and more)
  * One binary per C++ example (e.g. nqueens)
  * C++ wrapping libraries (_pywrapcp.so, linjniwrapconstraint_solver.so)
  * Java jars (com.google.ortools.constraintsolver.jar...)

==C++ examples==

You can execute C++ examples just by running then:

{{{./bin/magic_square }}}


==Python examples==

For the python examples, as we have not installed the constraint_solver module, we need to use the following command:

on windows:
{{{set PYTHONPATH=%PYTHONPATH%;<path to or-tools>}}}, then {{{c:\Python27\python.exe python/sample.py}}}.

On unix:
{{{PYTHONPATH= <python_binary> python/<sample.py>}}}

As in

{{{PYTHONPATH= python2.6 python/golomb8.py}}}

There is a special target in the makefile to run python examples. The above example can be run with

{{{
  make rpy EX=golomb8
}}}

==Java examples==

You can run java examples with the 
{{{ run_<name> makefile}}} target as in:

{{{make run_RabbitsPheasants}}}

There is a special target in the makefile to run java examples. The above example can be run with

{{{
  make rjava EX=RabbitsPheasants
}}}

==.NET examples==

If you have .NET support compiled in, you can build .NET libraries with the command: {{{make csharp}}}.

You can compile C# examples typing: {{{make csharpexe}}}.

To run a C# example, on windows, just type the name 

{{{
  bin\csflow.exe
}}}

On unix, use the mono interpreter:

{{{
  mono bin/csflow.exe
}}}

There is a special target in the makefile to run C# examples. The above example can be run with

{{{
  make rcs EX=csflow
}}}