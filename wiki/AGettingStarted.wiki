#summary Getting Started
#labels Phase-Deploy

<wiki:toc max_depth="1" />

=Content of the Archive=

Upon untarring the given operation_research tar file, you will get the following structure:
or-tools/
|| LICENSE-2.0.txt || Apache License ||
|| Makefile || Makefile for unix platform (ubuntu linux, mac os X) ||
|| Makefile.msv || Makefile for Microsoft Visual Studio ||
|| README || This file ||
|| algorithms/ || A collection of OR algorithms (non graph related) ||
|| base/ || Directory containing basic utilities ||
|| constraint_solver/ || The main directory for the constraint solver library ||
|| examples/ || C++ examples ||
|| graph/ || Standard OR graph algorithms ||
|| objs/ || Where C++ objs files will be stored ||
|| python/ || Python examples ||
|| util/ || More utilities needed by the constraint solver || 

=Installing under Ubuntu Linux and Mac OS X with a binary archive for dependencies =

This library has been tested under Ubuntu Linux 10.04, 10.10, and Mac OS X Snow Leopard (10.6) with xcode 3.2.x.
It is known not to compile with xcode 3.1.x running under Mac OS X Leopard (10.5).

First, create the or-tools svn copy where you want to work. All dependencies will be placed at the same level, along side this directory.

For linux users, please intall swig, python-setuptools python-dev
{{{
sudo apt-get install swig python-setuptools python-dev
}}}

For Mac OS X users, please install xcode from the apple developer site:

http://developer.apple.com/technologies/tools/xcode.html

Then uncompress the archive in the same directory you will create the or-tools svn repository.

{{{
tar xvzf google-or-tools-dependencies-<OS specific>.tar.gz
}}}

Go into google-apputils-0.1

run 

{{{
python setup.py install
}}}

=Installing under Ubuntu Linux and Mac OS X=

This library has been tested under Ubuntu Linux 10.04, 10.10, and Mac OS X Snow Leopard (10.6) with xcode 3.2.x.
It is known not to compile with xcode 3.1.x running under Mac OS X Leopard (10.5).

First, create the or-tools svn copy where you want to work. All dependencies will be placed at the same level, along side this directory.

For linux users, please intall swig, python-setuptools python-dev
{{{
sudo apt-get install swig python-setuptools python-dev
}}}

For Mac OS X users, please install xcode from the apple developer site:

http://developer.apple.com/technologies/tools/xcode.html

First, you will need to install the google-gflags library, compile it
and install it. It can be obtained at the following address:

http://code.google.com/p/google-gflags/

By default, the makefile assumes the installation path is
../gflags-1.4 from the Makefile, thus at the same level as the
or-tools directory.

Then you need to install zlib. You can fetch it at http://www.zlib.net/ The makefile default path is ../zlib-1.2.5 from the location of the or-tools Makefile.

Then you need to install protocol buffers. You can fetch them at http://code.google.com/p/protobuf/ . The makefile default path is ../protobuf-2.3.0 from the location of the or-tools Makefile.

Finally, you need to install google-apputils from:
http://code.google.com/p/google-apputils-python/

Download, untar and then run python setup.py install.

Please edit the top of the makefile to accommodate your installation.

You can then compile the library, examples and python wrapping:


{{{make cpexe pycp}}}


To compile in debug mode, please use


{{{make DEBUG=-g cpexe pycp}}}


You can clean everything using


{{{make clean}}}


When everything is compiled, you will find under operations_research:
  * some libraries (libcp.a, libutil.a and libbase.a, and more)
  * One binary per C++ example (e.g. nqueens)
  * A C++ wrapping library (_pywrapcp.so)

You can execute C++ examples just by running then:

{{{./magic_square }}}


For the python examples, as we have not installed the constraint_solver module, we need to use the following command:

{{{PYTHONPATH= <python_binary> python/<sample.py>}}}

As in

{{{PYTHONPATH= python2.6 python/golomb8.py}}}

This has been tested with python 2.5 and 2.6.
The wrapping using SWIG has been tested with SWIG 1.3.40 and 1.3.31.

=Installing under generic Unix/Linux=

First you need to compile the C++ libraries:
  # Create a repertory that will hold all source code. I will refer to this as `_work_`.
  # Create the `_work_/install` repertory.
  # Download google-gflags from http://code.google.com/p/google-gflags/ and untar in `_work_/install`
  # Step into `_work_/install/gflags-1.4` and run the following command:
    * `./configure --prefix=_work_/gflags-1.4`
    * `make`
    * `make install`
  # You will need zlib, you have two options:
    * use the stock library in the distribution
    * Modify the makefile ZLIB_INC and ZLIB_LIB to reflect where to find zlib.h and zlib.so
    * *or*
    * get library from http://www.zlib.net/ 
    * untar under `_work_/install`
    * Step into `_work_/install/zlib-1.2.5`
    * run `./configure --prefix=_work_/zlib-1.2.5`
    * `make`
    * `make install`
Download protobuf  from http://code.google.com/p/protobuf/ and untar in `_work_/install`
  # Step into `_work_/install/gprotobuf-2.3.0` and run the following command:
    * `./configure --prefix=_work_/protobuf-2.3.0`
    * `make`
    * `make install`
Then you can compile the python library.

You will need 3 things: swig, python.h and python dev packages, and python_apputils.

Finally, you need to install google-apputils from:
http://code.google.com/p/google-apputils-python/

Download, untar it into `_work_/install/google-apputils-0.1` (Create the google-apputils-0.1 directory first as the archive does not have a leading directory) and then run `python setup.py install`.
It will install different packages include python-gflags.

Please edit the top of the makefile to accommodate your installation (in particular make sure PYTHON_INC and SWIG_BINARY are correct)

You can then compile the library, examples and python wrapping:


{{{make cpexe pycp}}}


To compile in debug mode, please use


{{{make DEBUG=-g cpexe pycp}}}


You can clean everything using


{{{make clean}}}


When everything is compiled, you will find under operations_research:
  * some libraries (libcp.a, libutil.a and libbase.a, and more)
  * One binary per C++ example (e.g. nqueens)
  * A C++ wrapping library (_pywrapcp.so)

You can execute C++ examples just by running then:

{{{./magic_square }}}


For the python examples, as we have not installed the constraint_solver module, we need to use the following command:

{{{PYTHONPATH= <python_binary> python/<sample.py>}}}

As in

{{{PYTHONPATH= python2.6 python/golomb8.py}}}

This has been tested with python 2.5 and 2.6.
The wrapping using SWIG has been tested with SWIG 1.3.40 and 1.3.31.

=Installing under Microsoft Windows=

First, download the or-tools source code using the svn command found at:
http://code.google.com/p/or-tools/source/checkout

Then install dependencies. They will all be installed alongside the or-tools directory:

First, you will need to download the google-gflags library. It can be obtained at the following address:

http://code.google.com/p/google-gflags/downloads/detail?name=gflags-1.4.zip

Decompress alongside the or-tools directory.

To install google gflags libraries on windows:
  * go in `<gflags_dir>`/vsprojects/libgflags
  * load the libgflags.vcproj project
  * You may have to upgrade it on the fly if you are using Visual Studio 2010.
  * If you want to build in 64 bit mode (recommended), follow the instructions here:
      http://code.google.com/p/google-gflags/source/browse/trunk/README_windows.txt
  * Select Release mode, select win32 or x64
  * Build the solution.

Please modify the Makefile.msv in or-tools to point to the source of the gflags source directory.

Then you need to install zlib.
First get the archive at: http://zlib.net/zlib125.zip

install the zlib source archive, step into it.  

First put the correct makefile.msc in win32. You can get it at:
 http://or-tools.googlecode.com/svn/resources/Makefile.msc

Then open a command prompt from the visual studio tools menu, with the correct environment (win32 or x64). Then go to the zlib directory, and run:

{{{nmake -f win32/Makefile.msc}}}

directly at this point. 

Then you need to install protocol buffers. You can fetch them at  http://code.google.com/p/protobuf/downloads/detail?name=protobuf-2.3.0.zip

The makefile default path is ../protobuf-2.3.0 from the location of the or-tools Makefile.msv.
To install do the following:
   * Unzip the archive
   * rename the directory protobuf-src-2.3.0
   * go into the protobuf-src-2.3.0/vsprojects subdirectory.
   * load the sln and compile the project in release mode (win32 and x64). Please ignore the errors. You will need the protoc executable and the libprotobuf libraries.
   * go into the protobuf-src-2.3.0/vsprojects directory, run the extract_includes.bat script
   * Create the protobuf-2.3.0 directory at the same level as or-tools
   * move the protobuf-src-2.3.0/vsprojects/include directory into the protobuf-2.3.0 directory
   * create protobuf-2.3.0/lib directory and move protobuf-src-2.3.0/vsprojects/Release/`*`.lib into this directory
   * create protobuf-2.3.0/bin directory and move protobuf-src-2.3.0/vsprojects/Release/protoc.exe into this directory.

Then modify the Makefile.msv in or-tools to point to the root of the protobuf source tree.

You can then compile the library and examples :

{{{nmake -f Makefile.msv cpexe}}}

To compile in debug mode, please use

{{{nmake -f Makefile.msv DEBUG="/Od /Zi" cpexe}}}

If needed, the command to clean everything is:

{{{nmake -f Makefile.msv clean}}}

When everything is compiled, you will find under or-tools:
a few libraries (including cp.lib, util.lib, base.lib) 
One binary per C++ example (e.g. nqueens.exe)

You can execute C++ examples just by running then:

{{{magic_square.exe}}}

To use Python, you need to install python and swigwin and some dependencies:

This has been tested with swigwin-2.0.0 available from there:

http://prdownloads.sourceforge.net/swig/swigwin-2.0.0.zip

and python from 

http://www.python.org/download/releases/2.7/

You need to install google-apputils from:
http://code.google.com/p/google-apputils-python/

Download, create a google-apputils-0.1 directory, untar the archive in this directory, and then run python setup.py install.

You may need to install python-setuptools for windows. Please fetch it from http://pypi.python.org/pypi/setuptools#files .


Now, build the python wrapping:

{{{nmake -f Makefile.msv pycp}}}

Set the correct environment variable

{{{set PYTHONPATH=%PYTHONPATH%;<path to or-tools>}}}

and run the examples as in:

{{{python.exe python\simple_meeting.py}}}