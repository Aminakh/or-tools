#summary Getting Started
#labels Phase-Deploy

<wiki:toc max_depth="1" />

=Getting the source=

Please visit http://code.google.com/p/or-tools/source/checkout to checkout the sources of or-tools.

=Content of the Archive=

Upon untarring the given operation_research tar file, you will get the following structure:
or-tools/
|| LICENSE-2.0.txt || Apache License ||
|| Makefile || Main Makefile ||
|| README || This file ||
|| bin/  || Where all binary files will be created ||
|| dependencies/ || Where third_party code will be downloaded and installed ||
|| examples/com/ || Directory containing all java samples ||
|| examples/csharp/ || Directory containing C# examples and a visual studio 2010 solution to build them ||
|| examples/cpp/ || C++ examples ||
|| examples/python/ || Python examples ||
|| examples/tests/ || Unit tests ||
|| lib/ || Where libraries and jar files will be created ||
|| makefiles/ || Directory that contains sub-makefiles ||
|| objs/ || Where C++ objs files will be stored ||
|| src/algorithms/ || A collection of OR algorithms (non graph related) ||
|| src/base/ || Directory containing basic utilities ||
|| src/com/ || Directory containing java and C# source code for the libraries ||
|| src/constraint_solver/ || The main directory for the constraint solver library ||
|| src/gen/ || The root directory for all generated code (java classes, protocol buffers, swig files) ||
|| src/graph/ || Standard OR graph algorithms ||
|| src/linear_solver/ || The main directory for the linear solver wrapper library ||
|| src/util/ || More utilities needed by various libraries || 
|| tools/ || Binaries and scripts needed by various platforms ||

=Installation on unix platforms =

For linux users, please intall zlib-devel, bison, flex, autoconf, libtool, python-setuptools, and python-dev. 

The command on ubuntu is the following:
{{{
sudo apt-get install bison flex python-setuptools python-dev autoconf libtool zlib-devel
}}}
The fedora command is:
{{{
 sudo yum install subversion bison flex python-setuptools python-dev autoconf libtool zlib-devel
}}}

If you wish to use glpk, please download glpk from http://ftp.gnu.org/gnu/glpk/glpk-4.47.tar.gz and put the archive in or-tools/dependencies/archives.
If you have the license, please download ziboptsuite-2.1.1.tgz from http://zibopt.zib.de/download.shtml and  put the archive in or-tools/dependencies/archives.

If you wish to use .NET, you need to install mono.
On linux platforms, just install the mono-devel package. You need a recent one (at least 2.8 I believe) to work correctly. If mono is not supported on your platform, you can install it using the procedure for Mac OS X.

On Mac OS X, you need 64 bit support. Thus you need to build mono by hand. Copy the mono archive http://download.mono-project.com/sources/mono/mono-2.11.1.tar.gz to dependencies/archives.
You can use {{{dependencies/install/bin/gmcs}}} to compile C# files and {{{dependencies/install/bin/mono}}} to run resulting .exe files.

run:
{{{
   make third_party
   make install_python_modules
}}}  

If you are on opensuse and maybe redhat, the {{{make install_python_module}}} will fail.
One workaround is described on this page http://stackoverflow.com/questions/4495120/combine-user-with-prefix-error-with-setup-py-install.

If you have root privilieges, you can replace the last line and install the python modules for all users with the following command:
{{{
  cd dependencies/sources/google-apputils
  sudo python2.7 setup.py install
}}}

It should create the Makefile.local automatically.

Please note that the command:
{{{  
  make clean_third_party
}}}

will clean all downloaded sources, all compiled dependencies, and Makefile.local.
It is useful to get a clean state, or if you have added an archive in dependencies.archives.

=Installation on Windows=

Create the or-tools svn copy where you want to work. 

At this point, you must choose if you are going to compile in 32 or 64 bit mode. If windows is 32 bit, you have no choice but to use the 32 bit version.
If windows is 64 bit, you can choose. We recommend compiling in 64 bit mode. This choice affects the following steps. You must install the corresponding java and python versions. 
You must also use a same compilation terminal from the visual studio tools menu.

Install python from http://www.python.org/download/releases/2.7/

Install java JDK from http://www.oracle.com/technetwork/java/javase/downloads/jdk-7u2-download-1377129.html

You need to install python-setuptools for windows. See the installation instructions at: http://pypi.python.org/pypi/setuptools#windows

If you wish to use glpk, please download glpk from http://ftp.gnu.org/gnu/glpk/glpk-4.47.tar.gz and put the archive in or-tools/dependencies/archives.

Then launch a terminal from the visual studio tools menu (32 or 64 bit according to your installation, this must be consistent with the java and python versions installed before) and use it to launch the following commands:

Then you can download all dependencies and build them using:

{{{
   make third_party
}}}  

then edit Makefile.local to point to the correct python and java installation. For instance, on my system, it is:
{{{
WINDOWS_JDK_DIR = c:\\Program Files\\Java\\jdk1.7.0_02
WINDOWS_PYTHON_VERSION = 27
WINDOWS_PYTHON_PATH = C:\\python27
}}}

Please note that you should not put "" aroud the jdk path to take care of the space. This is taken care of in the makefiles.

Afterwards, to use python, you need to install google-apputils.

{{{
  cd dependencies/sources/google-apputils
  c:\python27\python.exe setup.py install
}}}

Please note that the command:
{{{  
  make clean_third_party
}}}

will clean all downloaded sources, all compiled dependencies, and Makefile.local. It is useful to get a clean state, or if you have added an archive in dependencies.archives.

=Compiling libraries and running examples=

==Compiling libraries==

All build rules use make (gnu make), even on windows. A make.exe binary is provided in the tools sub-directory.

You can query the list of targets just by typing

{{{make}}}

You can then compile the library, examples and python, java, and .NET wrappings for the constraint solver, the linear solver wrappers, and the algorithms:

{{{make all}}}


To compile in debug mode, please use

{{{make DEBUG=-g all}}}

or

{{{make DEBUG="/Od /Zi" all}}}

under windows.


You can clean everything using

{{{make clean}}}

When everything is compiled, you will find under or-tools/bin and or-tools/lib:
  * some static libraries (libcp.a, libutil.a and libbase.a, and more)
  * One binary per C++ example (e.g. nqueens)
  * C++ wrapping libraries (_pywrapcp.so, linjniwrapconstraint_solver.so)
  * Java jars (com.google.ortools.constraintsolver.jar...)
  * C# assemblies

==C++ examples==

You can execute C++ examples just by running then:

{{{./bin/magic_square }}}


==Python examples==

For the python examples, as we have not installed the constraint_solver module, we need to use the following command:

on windows:
{{{set PYTHONPATH=%PYTHONPATH%;<path to or-tools>\src}}}, then {{{c:\Python27\python.exe example\python\sample.py}}}.

On unix:
{{{PYTHONPATH=src <python_binary> examples/python/<sample.py>}}}

As in

{{{PYTHONPATH=src python2.6 examples/python/golomb8.py}}}

There is a special target in the makefile to run python examples. The above example can be run with

{{{
  make rpy EX=golomb8
}}}

==Java examples==

You can run java examples with the 
{{{ run_<name> makefile}}} target as in:

{{{make run_RabbitsPheasants}}}

There is a special target in the makefile to run java examples. The above example can be run with

{{{
  make rjava EX=RabbitsPheasants
}}}

==.NET examples==

If you have .NET support compiled in, you can build .NET libraries with the command: {{{make csharp}}}.

You can compile C# examples typing: {{{make csharpexe}}}.

To run a C# example, on windows, just type the name 

{{{
  bin\csflow.exe
}}}

On unix, use the mono interpreter:

{{{
  mono bin/csflow.exe
}}}

There is a special target in the makefile to run C# examples. The above example can be run with

{{{
  make rcs EX=csflow
}}}

=Running tests=

You can check that everything is running correctly by running:
{{{
  make test
}}}

If everything is OK, it will run a selection of examples from all technologies in C++, python, java, and C#.