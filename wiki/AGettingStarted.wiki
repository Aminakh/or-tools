#summary Getting Started
#labels Phase-Deploy

<wiki:toc max_depth="1" />

=Content of the Archive=

Upon untarring the given operation_research tar file, you will get the following structure:
or-tools/
|| LICENSE-2.0.txt || Apache License ||
|| Makefile || Main Makefile ||
|| README || This file ||
|| algorithms/ || A collection of OR algorithms (non graph related) ||
|| base/ || Directory containing basic utilities ||
|| constraint_solver/ || The main directory for the constraint solver library ||
|| com/ || The main directory for the java code ||
|| dependencies/ || Where third_party code will be downloaded and installed ||
|| gen/ || The root directory for all generated code (java classes, protocol buffers) ||
|| examples/ || C++ examples ||
|| graph/ || Standard OR graph algorithms ||
|| linear_solver/ || The main directory for the linear solver wrapper library ||
|| makefiles/ || Directory that contains sub-makefiles ||
|| objs/ || Where C++ objs files will be stored ||
|| python/ || Python examples ||
|| tools/ || Binaries and scripts needed by various platforms ||
|| util/ || More utilities needed by the constraint solver || 

=Automatic installation on unix platforms =

This is the recommended way on unix platforms.

For linux users, please intall bison, flex, autoconf, libtool, python-setuptools, and python-dev. The command on ubuntu is the following:
{{{
sudo apt-get install bison flex python-setuptools python-dev autoconf libtool
}}}

Please download glpk from http://ftp.gnu.org/gnu/glpk/glpk-4.47.tar.gz and put the archive in or-tools/dependencies/archives.
If you have the license, please download ziboptsuite-2.1.0.tgz from http://zibopt.zib.de/download.shtml and  put the archive in or-tools/dependencies/archives.
run:
{{{
   make third_party
   make install_python_modules
}}  

If you have root privilieges, you can replace the last line and install the python modules for all users with the following command:
{{{
  cd dependencies/sources/google-apputils
  sudo python2.7 setup.py install
}}}

It should create the Makefile.local automatically.

=Installing with a binary archives for dependencies =

Dependencies have been created for visual studio 10 (32 bit).

First, create the or-tools svn copy where you want to work. All dependencies will be placed at the same level, along side this directory.

Then uncompress the archives (generic dependencies, glpk, and cbc) from  in the same directory you will create the or-tools svn repository.

{{{
tar xvzf google-or-tools-dependencies-<OS specific>.tar.gz
}}}

Go into google-apputils-0.1

run 

{{{
python setup.py install
}}}

Please copy Makefile.def to Makefile.local and edit Makefile.local to accommodate your installation.

=Installing under Ubuntu Linux and Mac OS X=

This library has been tested under Ubuntu Linux 10.04, 10.10, and Mac OS X Snow Leopard (10.6) and Lion (10.7) with xcode 3.2.x, and 4.x.x. It is known not to compile with xcode 3.1.x running under Mac OS X Leopard (10.5).

First, create the or-tools svn copy where you want to work. All dependencies will be placed at the same level, along side this directory.

For linux users, please intall swig, python-setuptools python-dev
{{{
sudo apt-get install swig python-setuptools python-dev
}}}

For Mac OS X users, please install xcode from the apple developer site:

http://developer.apple.com/technologies/tools/xcode.html

First, you will need to install the google-gflags library, compile it
and install it. It can be obtained at the following address:

http://code.google.com/p/google-gflags/

By default, the makefile assumes the installation path is
../gflags-1.4 from the Makefile, thus at the same level as the
or-tools directory.

Then you need to install protocol buffers. You can fetch them at http://code.google.com/p/protobuf/ . Please install them alongside or-tools.

It is recommanded you also install linear solver:
   * GLPK from http://ftp.gnu.org/gnu/glpk/ . Install it in ../glpk-4.47
   * Coin Branch and Cut from http://www.coin-or.org/download/source/Cbc/ . Install it in ../cbc-2.7.4

You can also install scip and soplex. 
The recommended way is the following:  
  # Download ZIB Optimization Suite from http://zibopt.zib.de/download.shtml
  # Unpack everything with {{{tar cvzf ziboptsuite-2.1.0.tgz}}} alongside or-tools
  # Change into the directory ziboptsuite-2.1.0
  # Compile using:
    * On linux: {{{make ZIMPL=false READLINE=false USRCXXFLAGS=-fPIC CFLAGS=-fPIC}}}
    * On mac OS X: {{{make ZIMPL=false READLINE=false ARCH=x86_64}}}
  # Add {{{UNIX_SCIP_DIR=<path to ziboptsuite>scip-2.1.0}}} in Makefile.local

Finally, you need to install google-apputils from:
http://code.google.com/p/google-apputils-python/

Download, untar and then run python setup.py install.

Please copy Makefile.def to Makefile.local and edit Makefile.local to accommodate your installation.

=Installing under Microsoft Windows from sources=

First, download the or-tools source code using the svn command found at:
http://code.google.com/p/or-tools/source/checkout

Then install dependencies. They will all be installed alongside the or-tools directory:

First, you will need to download the google-gflags library. It can be obtained at the following address:

http://code.google.com/p/google-gflags/downloads/detail?name=gflags-1.5.zip

Decompress alongside the or-tools directory.

To install google gflags libraries on windows:
  * go in `<gflags_dir>`/vsprojects/libgflags
  * load the libgflags.vcproj project
  * You may have to upgrade it on the fly if you are using Visual Studio 2010.
  * If you want to build in 64 bit mode (recommended), follow the instructions here:
      http://code.google.com/p/google-gflags/source/browse/trunk/README_windows.txt
  * Select Release mode, select win32 or x64
  * Build the solution.

Please modify the Makefile.msv in or-tools to point to the source of the gflags source directory.

Then you need to install zlib.
First get the archive at: http://zlib.net/zlib125.zip

install the zlib source archive, step into it.  

First put the correct makefile.msc in win32. You can get it at:
 http://or-tools.googlecode.com/svn/resources/Makefile.msc

Then open a command prompt from the visual studio tools menu, with the correct environment (win32 or x64). Then go to the zlib directory, and run:

{{{nmake -f win32/Makefile.msc}}}

directly at this point. 

Then you need to install protocol buffers. You can fetch them at  http://code.google.com/p/protobuf/downloads/detail?name=protobuf-2.3.0.zip

The makefile default path is ../protobuf-2.4.1 from the location of the or-tools Makefile.msv.
To install do the following:
   * Unzip the archive
   * rename the directory protobuf-src-2.4.1
   * go into the protobuf-src-2.4.1/vsprojects subdirectory.
   * load the sln and compile the project in release mode (win32 and x64). Please ignore the errors. You will need the protoc executable and the libprotobuf libraries.
   * go into the protobuf-src-2.4.1/vsprojects directory, run the extract_includes.bat script
   * Create the protobuf-2.4.1 directory at the same level as or-tools
   * move the protobuf-src-2.4.1/vsprojects/include directory into the protobuf-2.4.1 directory
   * create protobuf-2.4.1/lib directory and move protobuf-src-2.4.1/vsprojects/Release/`*`.lib into this directory
   * create protobuf-2.4.1/bin directory and move protobuf-src-2.4.1/vsprojects/Release/protoc.exe into this directory.

To use Python, you need to install python and swigwin and some dependencies:

This has been tested with swigwin-2.0.x available from there:

http://prdownloads.sourceforge.net/swig/swigwin-2.0.4.zip

and python from 

http://www.python.org/download/releases/2.7/

You need to install google-apputils from:
http://code.google.com/p/google-apputils-python/

Download the latest version (0.2.1),  untar the archive alongside or-tools, and then run python setup.py install inside.

You may need to install python-setuptools for windows. Please fetch it from http://pypi.python.org/pypi/setuptools#files .

Then copy Makefile.def to Makefile.local in or-tools, and modify it to follow your local installation.

=Compiling libraries and running examples=

All build rules use make (gnu make), even on windows. A make.exe binary is provided in the tools sub-directory.

You can query the list of targets just by typing

{{{make}}}

You can then compile the library, examples and python wrapping for the constraint solver, the linear solver wrappers, and the algorithms:

{{{make all}}}


To compile in debug mode, please use

{{{make DEBUG=-g cpexe pycp}}}

or

{{{make DEBUG="/Od /Zi" cpexe pycp}}}

under windows.


You can clean everything using

{{{make clean}}}

When everything is compiled, you will find under operations_research:
  * some static libraries (libcp.a, libutil.a and libbase.a, and more)
  * One binary per C++ example (e.g. nqueens)
  * C++ wrapping libraries (_pywrapcp.so, linjniwrapconstraint_solver.so)
  * Java jars (com.google.ortools.constraintsolver.jar...)

You can execute C++ examples just by running then:

{{{./magic_square }}}


For the python examples, as we have not installed the constraint_solver module, we need to use the following command:


on windows:
{{{set PYTHONPATH=%PYTHONPATH%;<path to or-tools>}}}, then {{{c:\Python27\python.exe python/sample.py}}}.


On unix:
{{{PYTHONPATH= <python_binary> python/<sample.py>}}}

As in

{{{PYTHONPATH= python2.6 python/golomb8.py}}}

You can run java examples with the run[_<name>] makefile target as in:

{{{make run_RabbitsPheasants}}}

This has been tested with python 2.5, 2.6., and 2.7.
The wrapping using SWIG has been tested with SWIG 1.3.31, 1.3.40, and 2.0.x.