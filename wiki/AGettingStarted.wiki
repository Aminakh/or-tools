#summary Getting Started
#labels Phase-Deploy

<wiki:toc max_depth="1" />

=Getting the source=

Please visit http://code.google.com/p/or-tools/source/checkout to checkout the sources of or-tools.

=Content of the Archive=

Upon untarring the given operation_research tar file, you will get the following structure:
or-tools/
|| LICENSE-2.0.txt || Apache License ||
|| Makefile || Main Makefile ||
|| README || This file ||
|| algorithms/ || A collection of OR algorithms (non graph related) ||
|| base/ || Directory containing basic utilities ||
|| csharp/ || Directory containing C# examples and a visual studio 2010 solution to build them ||
|| constraint_solver/ || The main directory for the constraint solver library ||
|| com/ || The main directory for the java code ||
|| dependencies/ || Where third_party code will be downloaded and installed ||
|| gen/ || The root directory for all generated code (java classes, protocol buffers) ||
|| examples/ || C++ examples ||
|| graph/ || Standard OR graph algorithms ||
|| linear_solver/ || The main directory for the linear solver wrapper library ||
|| makefiles/ || Directory that contains sub-makefiles ||
|| objs/ || Where C++ objs files will be stored ||
|| python/ || Python examples ||
|| tools/ || Binaries and scripts needed by various platforms ||
|| util/ || More utilities needed by the constraint solver || 

=Automatic installation on unix platforms =

This is the recommended way on unix platforms.

For linux users, please intall zlib-devel, bison, flex, autoconf, libtool, python-setuptools, and python-dev. The command on ubuntu is the following:
{{{
sudo apt-get install bison flex python-setuptools python-dev autoconf libtool zlib-devel
}}}

If you wish to use glpk, please download glpk from http://ftp.gnu.org/gnu/glpk/glpk-4.47.tar.gz and put the archive in or-tools/dependencies/archives.
If you have the license, please download ziboptsuite-2.1.0.tgz from http://zibopt.zib.de/download.shtml and  put the archive in or-tools/dependencies/archives.
run:
{{{
   make third_party
   make install_python_modules
}}}  

If you have root privilieges, you can replace the last line and install the python modules for all users with the following command:
{{{
  cd dependencies/sources/google-apputils
  sudo python2.7 setup.py install
}}}

It should create the Makefile.local automatically.

Please note that the command:
{{{  
  make clean_third_party
}}}

will clean all downloaded sources, all compiled dependencies, and Makefile.local.
It is useful to get a clean state, or if you have added an archive in dependencies.archives.

=Automatic installation under windows=

First, create the or-tools svn copy where you want to work. 

Then install python from http://www.python.org/download/releases/2.7/

You need to install python-setuptools for windows. Please fetch it from http://pypi.python.org/pypi/setuptools#files .

If you wish to use glpk, please download glpk from http://ftp.gnu.org/gnu/glpk/glpk-4.47.tar.gz and put the archive in or-tools/dependencies/archives.

Then you can download all dependencies and build them using:

{{{
   make third_party
}}}  

then edit Makefile.local to point to the correct python and java installation. Afterwards, to use python, you need to install google-apputils.

{{{
  cd dependencies/sources/google-apputils
  c:\python27\python.exe setup.py install
}}}

Please note that the command:
{{{  
  make clean_third_party
}}}

will clean all downloaded sources, all compiled dependencies, and Makefile.local. It is useful to get a clean state, or if you have added an archive in dependencies.archives.

=Running tests=

You can check that everything is running correctly by running:
{{{
  make test
}}}

If everything is OK, it will run a selection of examples from all technologies in C++, python, and java.
On windows, it will also run C# examples.

=Compiling libraries and running examples=

All build rules use make (gnu make), even on windows. A make.exe binary is provided in the tools sub-directory.

You can query the list of targets just by typing

{{{make}}}

You can then compile the library, examples and python wrapping for the constraint solver, the linear solver wrappers, and the algorithms:

{{{make all}}}


To compile in debug mode, please use

{{{make DEBUG=-g cpexe pycp}}}

or

{{{make DEBUG="/Od /Zi" cpexe pycp}}}

under windows.


You can clean everything using

{{{make clean}}}

When everything is compiled, you will find under operations_research:
  * some static libraries (libcp.a, libutil.a and libbase.a, and more)
  * One binary per C++ example (e.g. nqueens)
  * C++ wrapping libraries (_pywrapcp.so, linjniwrapconstraint_solver.so)
  * Java jars (com.google.ortools.constraintsolver.jar...)

You can execute C++ examples just by running then:

{{{./magic_square }}}


For the python examples, as we have not installed the constraint_solver module, we need to use the following command:


on windows:
{{{set PYTHONPATH=%PYTHONPATH%;<path to or-tools>}}}, then {{{c:\Python27\python.exe python/sample.py}}}.


On unix:
{{{PYTHONPATH= <python_binary> python/<sample.py>}}}

As in

{{{PYTHONPATH= python2.6 python/golomb8.py}}}

You can run java examples with the 
{{{ run_<name> makefile}}} target as in:

{{{make run_RabbitsPheasants}}}

This has been tested with python 2.5, 2.6., and 2.7.
The wrapping using SWIG has been tested with SWIG 1.3.31, 1.3.40, and 2.0.x.