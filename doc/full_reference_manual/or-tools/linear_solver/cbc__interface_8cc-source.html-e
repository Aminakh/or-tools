<!-- Good morning, Mr. Phelps. -->
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
    <title>google3/linear_solver/cbc_interface.cc Source File - Doxy</title>
    <link rel="shortcut icon" href="../../favicon.ico">
    <!-- Both stylesheets are supplied by Doxygen, with maybe minor tweaks from Google. -->
    <link href="../../doxygen.css" rel="stylesheet" type="text/css">
    <link href="../../tabs.css" rel="stylesheet" type="text/css">
  </head>

  <body topmargin=0 leftmargin=20 bottommargin=0 rightmargin=20 marginwidth=20 marginheight=0>
  <!-- Second part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
  <style>
    a.doxy_logo:hover {
      background-color: #389613
    }
  </style>

  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <!-- Top horizontal line with the color of the day. -->
    <tr valign=top>
      <td colspan=3 bgcolor=#389613 height=3></td>
    </tr>

    <!-- Header row with the links at the right. -->
    <tr valign=top>
      <td colspan=3 align=right>
        <font size=-1>
          Generated on: <font color=#389613><b>Fri Apr  1 14:13:18 PDT 2011</b></font>
            for <b>custom file set</b>
        </font>
      </td>
    </tr>

    <!-- Header row with the logo and the search form. -->
    <tr valign=top>
      <!-- Logo. -->
      <td align=left width=150>
        <table width=150 height=54 cellpadding=0 cellspacing=0 border=0>
          <tr valign=top>
            <!-- First part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
            <td bgcolor=#389613>
              <a class="doxy_logo" href="../../index.html"><img src="../../doxy_logo.png" alt="Doxy" border=0></a>
            </td>
          </tr>
        </table>
      </td>
    </tr>

    <!-- Tiny vertical space below the form. -->
    <tr valign=top>
      <td colspan=3 height=3></td>
    </tr>
  </table>

  <!-- Header navigation row. -->
  <div class="memproto">
    <table width=100% cellpadding=0 cellspacing=0 border=0>
      <tr>
        <td align=left style="padding-left: 20px"><font size=+1><b><tt><font color=#333333>//
            <a href="../../index.html"><font color=#389613>doxy</font></a>/</font>
            <a href="../../google3/index.html">google3</a>/
            <a href="../../google3/linear_solver/index.html">linear_solver</a>/
            </tt></b></font>
        </td>
      </tr>
    </table>
  </div>
  <br />
    <!-- No subdirs found. -->
  <!-- End of header. -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>google3/linear_solver/cbc_interface.cc</h1><a href="cbc__interface_8cc.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright 2010 Google</span>
<a name="l00002"></a>00002 <span class="comment">// Licensed under the Apache License, Version 2.0 (the "License");</span>
<a name="l00003"></a>00003 <span class="comment">// you may not use this file except in compliance with the License.</span>
<a name="l00004"></a>00004 <span class="comment">// You may obtain a copy of the License at</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">//     http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Unless required by applicable law or agreed to in writing, software</span>
<a name="l00009"></a>00009 <span class="comment">// distributed under the License is distributed on an "AS IS" BASIS,</span>
<a name="l00010"></a>00010 <span class="comment">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00011"></a>00011 <span class="comment">// See the License for the specific language governing permissions and</span>
<a name="l00012"></a>00012 <span class="comment">// limitations under the License.</span>
<a name="l00013"></a>00013 <span class="comment">//</span>
<a name="l00014"></a>00014 
<a name="l00015"></a>00015 <span class="preprocessor">#include "base/commandlineflags.h"</span>
<a name="l00016"></a>00016 <span class="preprocessor">#include "base/integral_types.h"</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include "base/logging.h"</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include "base/scoped_ptr.h"</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include "base/stringprintf.h"</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include "base/timer.h"</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include "base/stl_util-inl.h"</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include "<a class="code" href="linear__solver_8h.html">linear_solver/linear_solver.h</a>"</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#if defined(USE_CBC)</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span>
<a name="l00027"></a>00027 <span class="preprocessor">#undef PACKAGE</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#undef VERSION</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="preprocessor">#include "coin/CbcMessage.hpp"</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include "coin/CbcModel.hpp"</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include "coin/CoinModel.hpp"</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include "coin/OsiClpSolverInterface.hpp"</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="preprocessor">#include "coin/CglGomory.hpp"</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include "coin/CglProbing.hpp"</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include "coin/CglKnapsackCover.hpp"</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include "coin/CglOddHole.hpp"</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include "coin/CglClique.hpp"</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include "coin/CglFlowCover.hpp"</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include "coin/CglMixedIntegerRounding.hpp"</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include "coin/config_cbc.h"</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="comment">// Heuristics</span>
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 DECLARE_double(solver_timeout_in_seconds);
<a name="l00046"></a>00046 DECLARE_string(solver_write_model);
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="comment">// Parameters for cuts. ** OBSOLETE **</span>
<a name="l00049"></a>00049 <span class="comment">// TODO(user): Add doc on parameters.</span>
<a name="l00050"></a>00050 DEFINE_bool(cbc_probing_use_objective, <span class="keyword">true</span>, <span class="stringliteral">""</span>);
<a name="l00051"></a>00051 DEFINE_int32(cbc_probing_max_pass, 3, <span class="stringliteral">""</span>);
<a name="l00052"></a>00052 DEFINE_int32(cbc_probing_max_probe, 100, <span class="stringliteral">""</span>);
<a name="l00053"></a>00053 DEFINE_int32(cbc_probing_max_look, 50, <span class="stringliteral">""</span>);
<a name="l00054"></a>00054 DEFINE_int32(cbc_probing_row_cuts, 3, <span class="stringliteral">""</span>);
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 DEFINE_int32(cbc_gomory_limit, 300, <span class="stringliteral">""</span>);
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 DEFINE_double(cbc_odd_hole_minimum_violation, 0.005, <span class="stringliteral">""</span>);
<a name="l00059"></a>00059 DEFINE_double(cbc_odd_hole_minimum_violation_per, 0.00002, <span class="stringliteral">""</span>);
<a name="l00060"></a>00060 DEFINE_int32(cbc_odd_hole_maximum_entries, 200, <span class="stringliteral">""</span>);
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 DEFINE_bool(cbc_clique_start_clique_report, <span class="keyword">false</span>, <span class="stringliteral">""</span>);
<a name="l00063"></a>00063 DEFINE_bool(cbc_clique_row_clique_report, <span class="keyword">false</span>, <span class="stringliteral">""</span>);
<a name="l00064"></a>00064 
<a name="l00065"></a>00065 <span class="keyword">namespace </span>operations_research {
<a name="l00066"></a>00066 
<a name="l00067"></a>00067 <span class="keyword">class </span>CBCInterface : <span class="keyword">public</span> MPSolverInterface {
<a name="l00068"></a>00068  <span class="keyword">public</span>:
<a name="l00069"></a>00069   <span class="comment">// Constructor that takes a name for the underlying glpk solver.</span>
<a name="l00070"></a>00070   <span class="keyword">explicit</span> CBCInterface(MPSolver* <span class="keyword">const</span> solver);
<a name="l00071"></a>00071   <span class="keyword">virtual</span> ~CBCInterface();
<a name="l00072"></a>00072 
<a name="l00073"></a>00073   <span class="comment">// ----- Reset -----</span>
<a name="l00074"></a>00074   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Reset();
<a name="l00075"></a>00075 
<a name="l00076"></a>00076   <span class="comment">// Sets the optimization direction (min/max).</span>
<a name="l00077"></a>00077   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetOptimizationDirection(<span class="keywordtype">bool</span> maximize);
<a name="l00078"></a>00078 
<a name="l00079"></a>00079   <span class="comment">// ----- Solve -----</span>
<a name="l00080"></a>00080   <span class="comment">// Solve the problem using the parameter values specified.</span>
<a name="l00081"></a>00081   <span class="keyword">virtual</span> <a class="code" href="classoperations__research_1_1MPSolver.html#16bca30fdb1b048d987631b757c63192">MPSolver::ResultStatus</a> Solve(<span class="keyword">const</span> MPSolverParameters&amp; param);
<a name="l00082"></a>00082 
<a name="l00083"></a>00083   <span class="comment">// TODO(user): separate the solve from the model extraction.</span>
<a name="l00084"></a>00084   <span class="keyword">virtual</span> <span class="keywordtype">void</span> ExtractModel() {}
<a name="l00085"></a>00085 
<a name="l00086"></a>00086   <span class="comment">// Write model</span>
<a name="l00087"></a>00087   <span class="keyword">virtual</span> <span class="keywordtype">void</span> WriteModel(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; filename);
<a name="l00088"></a>00088 
<a name="l00089"></a>00089   <span class="comment">// SuppressOutput.</span>
<a name="l00090"></a>00090   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SuppressOutput();
<a name="l00091"></a>00091 
<a name="l00092"></a>00092   <span class="comment">// Query problem type.</span>
<a name="l00093"></a>00093   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> IsContinuous()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00094"></a>00094   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> IsLP()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00095"></a>00095   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> IsMIP()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">true</span>; }
<a name="l00096"></a>00096 
<a name="l00097"></a>00097   <span class="comment">// Modify bounds.</span>
<a name="l00098"></a>00098   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetVariableBounds(<span class="keywordtype">int</span> var_index, <span class="keywordtype">double</span> lb, <span class="keywordtype">double</span> ub);
<a name="l00099"></a>00099   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetVariableInteger(<span class="keywordtype">int</span> var_index, <span class="keywordtype">bool</span> integer);
<a name="l00100"></a>00100   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetConstraintBounds(<span class="keywordtype">int</span> row_index, <span class="keywordtype">double</span> lb, <span class="keywordtype">double</span> ub);
<a name="l00101"></a>00101 
<a name="l00102"></a>00102   <span class="comment">// Add constraint incrementally.</span>
<a name="l00103"></a>00103   <span class="keywordtype">void</span> AddRowConstraint(MPConstraint* <span class="keyword">const</span> ct);
<a name="l00104"></a>00104   <span class="comment">// Add variable incrementally.</span>
<a name="l00105"></a>00105   <span class="keywordtype">void</span> AddVariable(MPVariable* <span class="keyword">const</span> var);
<a name="l00106"></a>00106   <span class="comment">// Change a coefficient in a constraint.</span>
<a name="l00107"></a>00107   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetCoefficient(MPConstraint* <span class="keyword">const</span> constraint,
<a name="l00108"></a>00108                               MPVariable* <span class="keyword">const</span> variable,
<a name="l00109"></a>00109                               <span class="keywordtype">double</span> coefficient) {
<a name="l00110"></a>00110     sync_status_ = MUST_RELOAD;
<a name="l00111"></a>00111   }
<a name="l00112"></a>00112   <span class="comment">// Clear a constraint from all its terms.</span>
<a name="l00113"></a>00113   <span class="keyword">virtual</span> <span class="keywordtype">void</span> ClearConstraint(MPConstraint* <span class="keyword">const</span> constraint) {
<a name="l00114"></a>00114     sync_status_ = MUST_RELOAD;
<a name="l00115"></a>00115   }
<a name="l00116"></a>00116 
<a name="l00117"></a>00117   <span class="comment">// Change a coefficient in the linear objective.</span>
<a name="l00118"></a>00118   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetObjectiveCoefficient(MPVariable* <span class="keyword">const</span> variable,
<a name="l00119"></a>00119                                        <span class="keywordtype">double</span> coefficient) {
<a name="l00120"></a>00120     sync_status_ = MUST_RELOAD;
<a name="l00121"></a>00121   }
<a name="l00122"></a>00122   <span class="comment">// Change the constant term in the linear objective.</span>
<a name="l00123"></a>00123   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetObjectiveOffset(<span class="keywordtype">double</span> value) {
<a name="l00124"></a>00124     sync_status_ = MUST_RELOAD;
<a name="l00125"></a>00125   }
<a name="l00126"></a>00126   <span class="comment">// Clear the objective from all its terms.</span>
<a name="l00127"></a>00127   <span class="keyword">virtual</span> <span class="keywordtype">void</span> ClearObjective() {
<a name="l00128"></a>00128     sync_status_ = MUST_RELOAD;
<a name="l00129"></a>00129   }
<a name="l00130"></a>00130 
<a name="l00131"></a>00131   <span class="comment">// Number of simplex iterations</span>
<a name="l00132"></a>00132   <span class="keyword">virtual</span> int64 iterations() <span class="keyword">const</span>;
<a name="l00133"></a>00133   <span class="comment">// Number of branch-and-bound nodes. Only available for discrete problems.</span>
<a name="l00134"></a>00134   <span class="keyword">virtual</span> int64 nodes() <span class="keyword">const</span>;
<a name="l00135"></a>00135   <span class="comment">// Best objective bound. Only available for discrete problems.</span>
<a name="l00136"></a>00136   <span class="keyword">virtual</span> <span class="keywordtype">double</span> best_objective_bound() <span class="keyword">const</span>;
<a name="l00137"></a>00137 
<a name="l00138"></a>00138   <span class="keyword">virtual</span> <span class="keywordtype">void</span> ExtractNewVariables() {}
<a name="l00139"></a>00139   <span class="keyword">virtual</span> <span class="keywordtype">void</span> ExtractNewConstraints() {}
<a name="l00140"></a>00140   <span class="keyword">virtual</span> <span class="keywordtype">void</span> ExtractObjective() {}
<a name="l00141"></a>00141 
<a name="l00142"></a>00142   <span class="keyword">virtual</span> <span class="keywordtype">string</span> SolverVersion()<span class="keyword"> const </span>{
<a name="l00143"></a>00143     <span class="keywordflow">return</span> PACKAGE_STRING;
<a name="l00144"></a>00144   }
<a name="l00145"></a>00145  <span class="keyword">private</span>:
<a name="l00146"></a>00146   <span class="comment">// Reset best objective bound to +/- infinity depending on the</span>
<a name="l00147"></a>00147   <span class="comment">// optimization direction.</span>
<a name="l00148"></a>00148   <span class="keywordtype">void</span> ResetBestObjectiveBound();
<a name="l00149"></a>00149 
<a name="l00150"></a>00150   <span class="comment">// Set all parameters in the underlying solver.</span>
<a name="l00151"></a>00151   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetParameters(<span class="keyword">const</span> MPSolverParameters&amp; param);
<a name="l00152"></a>00152   <span class="comment">// Set each parameter in the underlying solver.</span>
<a name="l00153"></a>00153   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetRelativeMipGap(<span class="keywordtype">double</span> value);
<a name="l00154"></a>00154   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetPresolveMode(<span class="keywordtype">int</span> value);
<a name="l00155"></a>00155   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetLpAlgorithm(<span class="keywordtype">int</span> value);
<a name="l00156"></a>00156 
<a name="l00157"></a>00157   OsiClpSolverInterface osi_;
<a name="l00158"></a>00158   <span class="keywordtype">bool</span> quiet_;
<a name="l00159"></a>00159   <span class="comment">// TODO(user): remove and query number of iterations directly from CbcModel</span>
<a name="l00160"></a>00160   int64 iterations_;
<a name="l00161"></a>00161   int64 nodes_;
<a name="l00162"></a>00162   <span class="keywordtype">double</span> best_objective_bound_;
<a name="l00163"></a>00163   <span class="comment">// Special way to handle the relative MIP gap parameter.</span>
<a name="l00164"></a>00164   <span class="keywordtype">double</span> relative_mip_gap_;
<a name="l00165"></a>00165 };
<a name="l00166"></a>00166 
<a name="l00167"></a>00167 <span class="comment">// ----- Solver -----</span>
<a name="l00168"></a>00168 
<a name="l00169"></a>00169 <span class="comment">// Creates a LP/MIP instance with the specified name and minimization objective.</span>
<a name="l00170"></a>00170 CBCInterface::CBCInterface(MPSolver* <span class="keyword">const</span> solver)
<a name="l00171"></a>00171     : MPSolverInterface(solver),
<a name="l00172"></a>00172       quiet_(false), iterations_(0), nodes_(0),
<a name="l00173"></a>00173       best_objective_bound_(-std::numeric_limits&lt;double&gt;::infinity()),
<a name="l00174"></a>00174       relative_mip_gap_(MPSolverParameters::kDefaultRelativeMipGap) {
<a name="l00175"></a>00175   osi_.setStrParam(OsiProbName, solver_-&gt;name_);
<a name="l00176"></a>00176   osi_.setObjSense(1);
<a name="l00177"></a>00177 }
<a name="l00178"></a>00178 
<a name="l00179"></a>00179 CBCInterface::~CBCInterface() {}
<a name="l00180"></a>00180 
<a name="l00181"></a>00181 <span class="comment">// Reset the solver.</span>
<a name="l00182"></a>00182 <span class="keywordtype">void</span> CBCInterface::Reset() {
<a name="l00183"></a>00183   sync_status_ = MODEL_SYNCHRONIZED;
<a name="l00184"></a>00184   osi_.reset();
<a name="l00185"></a>00185   osi_.setObjSense(maximize_ ? -1 : 1);
<a name="l00186"></a>00186   osi_.setStrParam(OsiProbName, solver_-&gt;name_);
<a name="l00187"></a>00187 }
<a name="l00188"></a>00188 
<a name="l00189"></a>00189 <span class="keywordtype">void</span> CBCInterface::ResetBestObjectiveBound() {
<a name="l00190"></a>00190   <span class="keywordflow">if</span> (maximize_) {
<a name="l00191"></a>00191     best_objective_bound_ = std::numeric_limits&lt;double&gt;::infinity();
<a name="l00192"></a>00192   } <span class="keywordflow">else</span> {
<a name="l00193"></a>00193     best_objective_bound_ = -std::numeric_limits&lt;double&gt;::infinity();
<a name="l00194"></a>00194   }
<a name="l00195"></a>00195 }
<a name="l00196"></a>00196 
<a name="l00197"></a>00197 <span class="keywordtype">void</span> CBCInterface::SetOptimizationDirection(<span class="keywordtype">bool</span> maximize) {
<a name="l00198"></a>00198   InvalidateSolutionSynchronization();
<a name="l00199"></a>00199   <span class="keywordflow">if</span> (sync_status_ == MODEL_SYNCHRONIZED) {
<a name="l00200"></a>00200     osi_.setObjSense(maximize ? -1 : 1);
<a name="l00201"></a>00201   } <span class="keywordflow">else</span> {
<a name="l00202"></a>00202     sync_status_ = MUST_RELOAD;
<a name="l00203"></a>00203   }
<a name="l00204"></a>00204 }
<a name="l00205"></a>00205 
<a name="l00206"></a>00206 <span class="keywordtype">void</span> CBCInterface::WriteModel(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; filename) {
<a name="l00207"></a>00207   <span class="keywordflow">if</span> (solver_-&gt;IsLPFormat(filename)) {
<a name="l00208"></a>00208     osi_.writeLp(filename.c_str(), <span class="stringliteral">""</span>);
<a name="l00209"></a>00209   } <span class="keywordflow">else</span> {
<a name="l00210"></a>00210     <span class="comment">// If filename does not end in ".gz", CBC will</span>
<a name="l00211"></a>00211     <span class="comment">// append ".gz" to the filename.</span>
<a name="l00212"></a>00212     osi_.writeMps(filename.c_str(), <span class="stringliteral">""</span>);
<a name="l00213"></a>00213   }
<a name="l00214"></a>00214 }
<a name="l00215"></a>00215 
<a name="l00216"></a>00216 <span class="keywordtype">void</span> CBCInterface::SuppressOutput() {
<a name="l00217"></a>00217   quiet_ = <span class="keyword">true</span>;
<a name="l00218"></a>00218 }
<a name="l00219"></a>00219 
<a name="l00220"></a>00220 <span class="keywordtype">void</span> CBCInterface::SetVariableBounds(<span class="keywordtype">int</span> var_index, <span class="keywordtype">double</span> lb, <span class="keywordtype">double</span> ub) {
<a name="l00221"></a>00221   InvalidateSolutionSynchronization();
<a name="l00222"></a>00222   <span class="keywordflow">if</span> (sync_status_ == MODEL_SYNCHRONIZED) {
<a name="l00223"></a>00223     osi_.setColBounds(var_index, lb, ub);
<a name="l00224"></a>00224   } <span class="keywordflow">else</span> {
<a name="l00225"></a>00225     sync_status_ = MUST_RELOAD;
<a name="l00226"></a>00226   }
<a name="l00227"></a>00227 }
<a name="l00228"></a>00228 
<a name="l00229"></a>00229 <span class="keywordtype">void</span> CBCInterface::SetVariableInteger(<span class="keywordtype">int</span> var_index, <span class="keywordtype">bool</span> integer) {
<a name="l00230"></a>00230   InvalidateSolutionSynchronization();
<a name="l00231"></a>00231   <span class="comment">// TODO(user) : Check if this is actually a change.</span>
<a name="l00232"></a>00232   <span class="keywordflow">if</span> (sync_status_ == MODEL_SYNCHRONIZED) {
<a name="l00233"></a>00233     <span class="keywordflow">if</span> (integer) {
<a name="l00234"></a>00234       osi_.setInteger(var_index);
<a name="l00235"></a>00235     } <span class="keywordflow">else</span> {
<a name="l00236"></a>00236       osi_.setContinuous(var_index);
<a name="l00237"></a>00237     }
<a name="l00238"></a>00238   } <span class="keywordflow">else</span> {
<a name="l00239"></a>00239     sync_status_ = MUST_RELOAD;
<a name="l00240"></a>00240   }
<a name="l00241"></a>00241 }
<a name="l00242"></a>00242 
<a name="l00243"></a>00243 <span class="keywordtype">void</span> CBCInterface::SetConstraintBounds(<span class="keywordtype">int</span> index, <span class="keywordtype">double</span> lb, <span class="keywordtype">double</span> ub) {
<a name="l00244"></a>00244   InvalidateSolutionSynchronization();
<a name="l00245"></a>00245   <span class="keywordflow">if</span> (sync_status_ == MODEL_SYNCHRONIZED) {
<a name="l00246"></a>00246     osi_.setRowBounds(index, lb, ub);
<a name="l00247"></a>00247   } <span class="keywordflow">else</span> {
<a name="l00248"></a>00248     sync_status_ = MUST_RELOAD;
<a name="l00249"></a>00249   }
<a name="l00250"></a>00250 }
<a name="l00251"></a>00251 
<a name="l00252"></a>00252 <span class="keywordtype">void</span> CBCInterface::AddRowConstraint(MPConstraint* <span class="keyword">const</span> ct) {
<a name="l00253"></a>00253   sync_status_ = MUST_RELOAD;
<a name="l00254"></a>00254 }
<a name="l00255"></a>00255 
<a name="l00256"></a>00256 <span class="keywordtype">void</span> CBCInterface::AddVariable(MPVariable* <span class="keyword">const</span> var) {
<a name="l00257"></a>00257   sync_status_ = MUST_RELOAD;
<a name="l00258"></a>00258 }
<a name="l00259"></a>00259 
<a name="l00260"></a>00260 <span class="comment">// Solve the LP/MIP. Returns true only if the optimal solution was revealed.</span>
<a name="l00261"></a>00261 <span class="comment">// Returns the status of the search.</span>
<a name="l00262"></a>00262 MPSolver::ResultStatus CBCInterface::Solve(<span class="keyword">const</span> MPSolverParameters&amp; param) {
<a name="l00263"></a>00263   WallTimer timer;
<a name="l00264"></a>00264   timer.Start();
<a name="l00265"></a>00265 
<a name="l00266"></a>00266   <span class="comment">// Special case if the model is empty since CBC is not able to</span>
<a name="l00267"></a>00267   <span class="comment">// handle this special case by itself.</span>
<a name="l00268"></a>00268   <span class="keywordflow">if</span> (solver_-&gt;variables_.size() == 0 &amp;&amp; solver_-&gt;constraints_.size() == 0) {
<a name="l00269"></a>00269     sync_status_ = SOLUTION_SYNCHRONIZED;
<a name="l00270"></a>00270     result_status_ = MPSolver::OPTIMAL;
<a name="l00271"></a>00271     objective_value_ = solver_-&gt;linear_objective_.offset_;
<a name="l00272"></a>00272     best_objective_bound_ = solver_-&gt;linear_objective_.offset_;
<a name="l00273"></a>00273     <span class="keywordflow">return</span> result_status_;
<a name="l00274"></a>00274   }
<a name="l00275"></a>00275 
<a name="l00276"></a>00276   <span class="comment">// Finish preparing the problem.</span>
<a name="l00277"></a>00277   <span class="comment">// Define variables.</span>
<a name="l00278"></a>00278   <span class="keywordflow">switch</span> (sync_status_) {
<a name="l00279"></a>00279     <span class="keywordflow">case</span> MUST_RELOAD: {
<a name="l00280"></a>00280       Reset();
<a name="l00281"></a>00281       CHECK_EQ(MODEL_SYNCHRONIZED, sync_status_);
<a name="l00282"></a>00282       CoinModel build;
<a name="l00283"></a>00283       <span class="comment">// Create dummy variable for objective offset.</span>
<a name="l00284"></a>00284       build.addColumn(0, NULL, NULL, 1.0, 1.0,
<a name="l00285"></a>00285                       solver_-&gt;linear_objective_.offset_, <span class="stringliteral">"dummy"</span>, <span class="keyword">false</span>);
<a name="l00286"></a>00286       <span class="keyword">const</span> <span class="keywordtype">int</span> nb_vars = solver_-&gt;variables_.size();
<a name="l00287"></a>00287       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nb_vars; ++i) {
<a name="l00288"></a>00288         MPVariable* <span class="keyword">const</span> var = solver_-&gt;variables_[i];
<a name="l00289"></a>00289         var-&gt;set_index(i + 1);  <span class="comment">// offset by 1 because of dummy variable.</span>
<a name="l00290"></a>00290         hash_map&lt;MPVariable*, double&gt;::const_iterator it =
<a name="l00291"></a>00291             solver_-&gt;linear_objective_.coefficients_.find(var);
<a name="l00292"></a>00292         <span class="keyword">const</span> <span class="keywordtype">double</span> obj_coeff =
<a name="l00293"></a>00293             it == solver_-&gt;linear_objective_.coefficients_.end() ?
<a name="l00294"></a>00294             0.0 :
<a name="l00295"></a>00295             it-&gt;second;
<a name="l00296"></a>00296         <span class="keywordflow">if</span> (var-&gt;name().empty()) {
<a name="l00297"></a>00297           build.addColumn(0, NULL, NULL, var-&gt;lb(), var-&gt;ub(), obj_coeff,
<a name="l00298"></a>00298                           NULL, var-&gt;integer());
<a name="l00299"></a>00299         } <span class="keywordflow">else</span> {
<a name="l00300"></a>00300           build.addColumn(0, NULL, NULL, var-&gt;lb(), var-&gt;ub(), obj_coeff,
<a name="l00301"></a>00301                           var-&gt;name().c_str(), var-&gt;integer());
<a name="l00302"></a>00302         }
<a name="l00303"></a>00303       }
<a name="l00304"></a>00304 
<a name="l00305"></a>00305       <span class="comment">// Define constraints.</span>
<a name="l00306"></a>00306       <span class="keywordtype">int</span> max_row_length = 0;
<a name="l00307"></a>00307       <span class="keywordtype">int</span> constraint_index = 0;
<a name="l00308"></a>00308       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; solver_-&gt;constraints_.size(); ++i) {
<a name="l00309"></a>00309         MPConstraint* <span class="keyword">const</span> ct = solver_-&gt;constraints_[i];
<a name="l00310"></a>00310         ct-&gt;set_index(constraint_index++);
<a name="l00311"></a>00311         <span class="keywordflow">if</span> (ct-&gt;coefficients_.size() &gt; max_row_length) {
<a name="l00312"></a>00312           max_row_length = ct-&gt;coefficients_.size();
<a name="l00313"></a>00313         }
<a name="l00314"></a>00314       }
<a name="l00315"></a>00315       scoped_array&lt;int&gt; indices(<span class="keyword">new</span> <span class="keywordtype">int</span>[max_row_length]);
<a name="l00316"></a>00316       scoped_array&lt;double&gt; coefs(<span class="keyword">new</span> <span class="keywordtype">double</span>[max_row_length]);
<a name="l00317"></a>00317 
<a name="l00318"></a>00318       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; solver_-&gt;constraints_.size(); ++i) {
<a name="l00319"></a>00319         MPConstraint* <span class="keyword">const</span>  ct = solver_-&gt;constraints_[i];
<a name="l00320"></a>00320         <span class="keyword">const</span> <span class="keywordtype">int</span> size = ct-&gt;coefficients_.size();
<a name="l00321"></a>00321         <span class="keywordtype">int</span> j = 0;
<a name="l00322"></a>00322         <span class="keywordflow">for</span> (hash_map&lt;MPVariable*, double&gt;::const_iterator it =
<a name="l00323"></a>00323                  ct-&gt;coefficients_.begin();
<a name="l00324"></a>00324              it != ct-&gt;coefficients_.end();
<a name="l00325"></a>00325              ++it) {
<a name="l00326"></a>00326           <span class="keyword">const</span> <span class="keywordtype">int</span> index = it-&gt;first-&gt;index();
<a name="l00327"></a>00327           DCHECK_NE(kNoIndex, index);
<a name="l00328"></a>00328           indices[j] = index;
<a name="l00329"></a>00329           coefs[j] = it-&gt;second;
<a name="l00330"></a>00330           j++;
<a name="l00331"></a>00331         }
<a name="l00332"></a>00332         <span class="keywordflow">if</span> (ct-&gt;name().empty()) {
<a name="l00333"></a>00333           build.addRow(size, indices.get(), coefs.get(), ct-&gt;lb(), ct-&gt;ub());
<a name="l00334"></a>00334         } <span class="keywordflow">else</span> {
<a name="l00335"></a>00335           build.addRow(size, indices.get(), coefs.get(), ct-&gt;lb(), ct-&gt;ub(),
<a name="l00336"></a>00336                        ct-&gt;name().c_str());
<a name="l00337"></a>00337         }
<a name="l00338"></a>00338       }
<a name="l00339"></a>00339       osi_.loadFromCoinModel(build);
<a name="l00340"></a>00340       <span class="keywordflow">break</span>;
<a name="l00341"></a>00341     }
<a name="l00342"></a>00342     <span class="keywordflow">case</span> MODEL_SYNCHRONIZED: {
<a name="l00343"></a>00343       <span class="keywordflow">break</span>;
<a name="l00344"></a>00344     }
<a name="l00345"></a>00345     <span class="keywordflow">case</span> SOLUTION_SYNCHRONIZED: {
<a name="l00346"></a>00346       <span class="keywordflow">break</span>;
<a name="l00347"></a>00347     }
<a name="l00348"></a>00348   }
<a name="l00349"></a>00349 
<a name="l00350"></a>00350   <span class="comment">// Changing optimization direction through OSI so that the model file</span>
<a name="l00351"></a>00351   <span class="comment">// (written through OSI) has the correct optimization duration.</span>
<a name="l00352"></a>00352   osi_.setObjSense(maximize_ ? -1 : 1);
<a name="l00353"></a>00353 
<a name="l00354"></a>00354   VLOG(1) &lt;&lt; StringPrintf(<span class="stringliteral">"Model built in %.3f seconds."</span>, timer.Get());
<a name="l00355"></a>00355 
<a name="l00356"></a>00356   WriteModelToPredefinedFiles();
<a name="l00357"></a>00357 
<a name="l00358"></a>00358   ResetBestObjectiveBound();
<a name="l00359"></a>00359 
<a name="l00360"></a>00360   <span class="comment">// Solve</span>
<a name="l00361"></a>00361   CbcModel model(osi_);
<a name="l00362"></a>00362 
<a name="l00363"></a>00363   <span class="keywordflow">if</span> (quiet_) {
<a name="l00364"></a>00364     model.solver()-&gt;setHintParam(OsiDoReducePrint, <span class="keyword">true</span>, OsiHintTry);
<a name="l00365"></a>00365     model.setLogLevel(-1);
<a name="l00366"></a>00366   } <span class="keywordflow">else</span> {
<a name="l00367"></a>00367     model.solver()-&gt;setHintParam(OsiDoReducePrint, <span class="keyword">true</span>, OsiHintTry);
<a name="l00368"></a>00368     model.setLogLevel(1);
<a name="l00369"></a>00369   }
<a name="l00370"></a>00370 
<a name="l00371"></a>00371   <span class="comment">// Time limit.</span>
<a name="l00372"></a>00372   <span class="keywordflow">if</span> (solver_-&gt;time_limit()) {
<a name="l00373"></a>00373     VLOG(1) &lt;&lt; <span class="stringliteral">"Setting time limit = "</span> &lt;&lt; solver_-&gt;time_limit() &lt;&lt; <span class="stringliteral">" ms."</span>;
<a name="l00374"></a>00374     model.setMaximumSeconds(solver_-&gt;time_limit() / 1000.0);
<a name="l00375"></a>00375   }
<a name="l00376"></a>00376 
<a name="l00377"></a>00377   <span class="comment">// And solve.</span>
<a name="l00378"></a>00378   timer.Restart();
<a name="l00379"></a>00379 
<a name="l00380"></a>00380   <span class="comment">// Here we use the default function from the command-line CBC solver.</span>
<a name="l00381"></a>00381   <span class="comment">// This enables to activate all the features and get the same performance</span>
<a name="l00382"></a>00382   <span class="comment">// as the CBC stand-alone executable. The syntax is ugly, however.</span>
<a name="l00383"></a>00383   SetParameters(param);
<a name="l00384"></a>00384   <span class="comment">// Always turn presolve on (it's the CBC default and it consistently</span>
<a name="l00385"></a>00385   <span class="comment">// improves performance).</span>
<a name="l00386"></a>00386   model.setTypePresolve(0);
<a name="l00387"></a>00387   <span class="comment">// Special way to set the relative MIP gap parameter as it cannot be set</span>
<a name="l00388"></a>00388   <span class="comment">// through callCbc.</span>
<a name="l00389"></a>00389   model.setAllowableFractionGap(relative_mip_gap_);
<a name="l00390"></a>00390   <span class="keywordtype">int</span> return_status = callCbc(<span class="stringliteral">"-solve"</span>, model);
<a name="l00391"></a>00391   <span class="keyword">const</span> <span class="keywordtype">int</span> kBadReturnStatus = 777;
<a name="l00392"></a>00392   CHECK_NE(kBadReturnStatus, return_status);  <span class="comment">// Should never happen according</span>
<a name="l00393"></a>00393                                               <span class="comment">// to the CBC source</span>
<a name="l00394"></a>00394 
<a name="l00395"></a>00395   VLOG(1) &lt;&lt; StringPrintf(<span class="stringliteral">"Solved in %.3f seconds."</span>, timer.Get());
<a name="l00396"></a>00396 
<a name="l00397"></a>00397   <span class="comment">// Get the results</span>
<a name="l00398"></a>00398   objective_value_ = model.getObjValue();
<a name="l00399"></a>00399   VLOG(1) &lt;&lt; <span class="stringliteral">"objective="</span> &lt;&lt; objective_value_;
<a name="l00400"></a>00400   <span class="keyword">const</span> <span class="keywordtype">double</span>* <span class="keyword">const</span> values = model.bestSolution();
<a name="l00401"></a>00401 
<a name="l00402"></a>00402   <span class="keywordflow">if</span> (values != NULL) {
<a name="l00403"></a>00403     <span class="comment">// if optimal or feasible solution is found.</span>
<a name="l00404"></a>00404     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; solver_-&gt;variables_.size(); ++i) {
<a name="l00405"></a>00405       MPVariable* <span class="keyword">const</span> var = solver_-&gt;variables_[i];
<a name="l00406"></a>00406       <span class="keyword">const</span> <span class="keywordtype">int</span> var_index = var-&gt;index();
<a name="l00407"></a>00407       <span class="keyword">const</span> <span class="keywordtype">double</span> val = values[var_index];
<a name="l00408"></a>00408       var-&gt;set_solution_value(val);
<a name="l00409"></a>00409       VLOG(3) &lt;&lt; var-&gt;name() &lt;&lt; <span class="stringliteral">"="</span> &lt;&lt; val;
<a name="l00410"></a>00410     }
<a name="l00411"></a>00411   } <span class="keywordflow">else</span> {
<a name="l00412"></a>00412     VLOG(1) &lt;&lt; <span class="stringliteral">"No feasible solution found."</span>;
<a name="l00413"></a>00413   }
<a name="l00414"></a>00414 
<a name="l00415"></a>00415   <span class="comment">// Check the status: optimal, infeasible, etc.</span>
<a name="l00416"></a>00416   <span class="keywordtype">int</span> tmp_status = model.status();
<a name="l00417"></a>00417 
<a name="l00418"></a>00418   VLOG(1) &lt;&lt; <span class="stringliteral">"cbc result status: "</span> &lt;&lt; tmp_status;
<a name="l00419"></a>00419   <span class="comment">/* Final status of problem</span>
<a name="l00420"></a>00420 <span class="comment">     (info from cbc/v2_6_2/Cbc/src/CbcSolver.cpp)</span>
<a name="l00421"></a>00421 <span class="comment">     Some of these can be found out by is...... functions</span>
<a name="l00422"></a>00422 <span class="comment">     -1 before branchAndBound</span>
<a name="l00423"></a>00423 <span class="comment">     0 finished - check isProvenOptimal or isProvenInfeasible to see</span>
<a name="l00424"></a>00424 <span class="comment">     if solution found</span>
<a name="l00425"></a>00425 <span class="comment">     (or check value of best solution)</span>
<a name="l00426"></a>00426 <span class="comment">     1 stopped - on maxnodes, maxsols, maxtime</span>
<a name="l00427"></a>00427 <span class="comment">     2 difficulties so run was abandoned</span>
<a name="l00428"></a>00428 <span class="comment">     (5 event user programmed event occurred)</span>
<a name="l00429"></a>00429 <span class="comment">  */</span>
<a name="l00430"></a>00430   <span class="keywordflow">switch</span> (tmp_status) {
<a name="l00431"></a>00431     <span class="keywordflow">case</span> 0:
<a name="l00432"></a>00432       <span class="comment">// Order of tests counts; if model.isContinuousUnbounded() returns true,</span>
<a name="l00433"></a>00433       <span class="comment">// then so does model.isProvenInfeasible()!</span>
<a name="l00434"></a>00434       <span class="keywordflow">if</span> (model.isProvenOptimal()) {
<a name="l00435"></a>00435         result_status_ = MPSolver::OPTIMAL;
<a name="l00436"></a>00436       } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (model.isContinuousUnbounded()) {
<a name="l00437"></a>00437         result_status_ = MPSolver::UNBOUNDED;
<a name="l00438"></a>00438       } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (model.isProvenInfeasible()) {
<a name="l00439"></a>00439         result_status_ = MPSolver::INFEASIBLE;
<a name="l00440"></a>00440       } <span class="keywordflow">else</span> {
<a name="l00441"></a>00441         LOG(FATAL) &lt;&lt; <span class="stringliteral">"Unknown solver status."</span>;
<a name="l00442"></a>00442       }
<a name="l00443"></a>00443       <span class="keywordflow">break</span>;
<a name="l00444"></a>00444     <span class="keywordflow">case</span> 1:
<a name="l00445"></a>00445       result_status_ = MPSolver::FEASIBLE;
<a name="l00446"></a>00446       <span class="keywordflow">break</span>;
<a name="l00447"></a>00447     <span class="keywordflow">default</span>:
<a name="l00448"></a>00448       result_status_ = MPSolver::ABNORMAL;
<a name="l00449"></a>00449       <span class="keywordflow">break</span>;
<a name="l00450"></a>00450   }
<a name="l00451"></a>00451 
<a name="l00452"></a>00452   iterations_ = model.getIterationCount();
<a name="l00453"></a>00453   nodes_ = model.getNodeCount();
<a name="l00454"></a>00454   best_objective_bound_ = model.getBestPossibleObjValue();
<a name="l00455"></a>00455   VLOG(1) &lt;&lt; <span class="stringliteral">"best objective bound="</span> &lt;&lt; best_objective_bound_;
<a name="l00456"></a>00456 
<a name="l00457"></a>00457   sync_status_ = SOLUTION_SYNCHRONIZED;
<a name="l00458"></a>00458 
<a name="l00459"></a>00459   <span class="keywordflow">return</span> result_status_;
<a name="l00460"></a>00460 }
<a name="l00461"></a>00461 
<a name="l00462"></a>00462 MPSolverInterface* BuildCBCInterface(MPSolver* <span class="keyword">const</span> solver) {
<a name="l00463"></a>00463   <span class="keywordflow">return</span> <span class="keyword">new</span> CBCInterface(solver);
<a name="l00464"></a>00464 }
<a name="l00465"></a>00465 
<a name="l00466"></a>00466 <span class="comment">// ------ Query statistics on the solution and the solve ------</span>
<a name="l00467"></a>00467 
<a name="l00468"></a>00468 int64 CBCInterface::iterations()<span class="keyword"> const </span>{
<a name="l00469"></a>00469   CheckSolutionIsSynchronized();
<a name="l00470"></a>00470   <span class="keywordflow">return</span> iterations_;
<a name="l00471"></a>00471 }
<a name="l00472"></a>00472 
<a name="l00473"></a>00473 int64 CBCInterface::nodes()<span class="keyword"> const </span>{
<a name="l00474"></a>00474   CheckSolutionIsSynchronized();
<a name="l00475"></a>00475   <span class="keywordflow">return</span> nodes_;
<a name="l00476"></a>00476 }
<a name="l00477"></a>00477 
<a name="l00478"></a>00478 <span class="keywordtype">double</span> CBCInterface::best_objective_bound()<span class="keyword"> const </span>{
<a name="l00479"></a>00479   CheckSolutionIsSynchronized();
<a name="l00480"></a>00480   CheckBestObjectiveBoundExists();
<a name="l00481"></a>00481   <span class="keywordflow">return</span> best_objective_bound_;
<a name="l00482"></a>00482 }
<a name="l00483"></a>00483 
<a name="l00484"></a>00484 <span class="comment">// ----- Parameters -----</span>
<a name="l00485"></a>00485 
<a name="l00486"></a>00486 <span class="comment">// The support for parameters in CBC is intentionally sparse. There is</span>
<a name="l00487"></a>00487 <span class="comment">// a memory leak in callCbc that prevents to pass parameters through</span>
<a name="l00488"></a>00488 <span class="comment">// it, so handling parameters would require an comprehensive rewrite</span>
<a name="l00489"></a>00489 <span class="comment">// of the code. I will improve the parameter support only if there is</span>
<a name="l00490"></a>00490 <span class="comment">// a relevant use case.</span>
<a name="l00491"></a>00491 
<a name="l00492"></a>00492 <span class="keywordtype">void</span> CBCInterface::SetParameters(<span class="keyword">const</span> MPSolverParameters&amp; param) {
<a name="l00493"></a>00493   SetCommonParameters(param);
<a name="l00494"></a>00494   SetMIPParameters(param);
<a name="l00495"></a>00495 }
<a name="l00496"></a>00496 
<a name="l00497"></a>00497 <span class="keywordtype">void</span> CBCInterface::SetRelativeMipGap(<span class="keywordtype">double</span> value) {
<a name="l00498"></a>00498   relative_mip_gap_ = value;
<a name="l00499"></a>00499 }
<a name="l00500"></a>00500 
<a name="l00501"></a>00501 <span class="keywordtype">void</span> CBCInterface::SetPresolveMode(<span class="keywordtype">int</span> value) {
<a name="l00502"></a>00502   SetUnsupportedIntegerParam(MPSolverParameters::PRESOLVE);
<a name="l00503"></a>00503 }
<a name="l00504"></a>00504 
<a name="l00505"></a>00505 <span class="keywordtype">void</span> CBCInterface::SetLpAlgorithm(<span class="keywordtype">int</span> value) {
<a name="l00506"></a>00506   SetUnsupportedIntegerParam(MPSolverParameters::LP_ALGORITHM);
<a name="l00507"></a>00507 }
<a name="l00508"></a>00508 
<a name="l00509"></a>00509 }  <span class="comment">// namespace operations_research</span>
<a name="l00510"></a>00510 <span class="preprocessor">#endif  // #if defined(USE_CBC)</span>
</pre></div></div>

  <!-- Start of footer. -->
  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <tr valign=top>
      <td colspan=2 height=10></td>
    </tr>
    <tr valign=top>
      <td colspan=2 bgcolor=#389613 height=3></td>
    </tr>
  </table>

  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br />

  
  </body>
</html>
