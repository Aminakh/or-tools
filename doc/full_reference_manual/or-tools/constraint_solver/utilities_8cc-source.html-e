<!-- Good morning, Mr. Phelps. -->
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
    <title>google3/constraint_solver/utilities.cc Source File - Doxy</title>
    <link rel="shortcut icon" href="../../favicon.ico">
    <!-- Both stylesheets are supplied by Doxygen, with maybe minor tweaks from Google. -->
    <link href="../../doxygen.css" rel="stylesheet" type="text/css">
    <link href="../../tabs.css" rel="stylesheet" type="text/css">
  </head>

  <body topmargin=0 leftmargin=20 bottommargin=0 rightmargin=20 marginwidth=20 marginheight=0>
  <!-- Second part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
  <style>
    a.doxy_logo:hover {
      background-color: #389613
    }
  </style>

  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <!-- Top horizontal line with the color of the day. -->
    <tr valign=top>
      <td colspan=3 bgcolor=#389613 height=3></td>
    </tr>

    <!-- Header row with the links at the right. -->
    <tr valign=top>
      <td colspan=3 align=right>
        <font size=-1>
          Generated on: <font color=#389613><b>Fri Apr  1 14:13:18 PDT 2011</b></font>
            for <b>custom file set</b>
        </font>
      </td>
    </tr>

    <!-- Header row with the logo and the search form. -->
    <tr valign=top>
      <!-- Logo. -->
      <td align=left width=150>
        <table width=150 height=54 cellpadding=0 cellspacing=0 border=0>
          <tr valign=top>
            <!-- First part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
            <td bgcolor=#389613>
              <a class="doxy_logo" href="../../index.html"><img src="../../doxy_logo.png" alt="Doxy" border=0></a>
            </td>
          </tr>
        </table>
      </td>
    </tr>

    <!-- Tiny vertical space below the form. -->
    <tr valign=top>
      <td colspan=3 height=3></td>
    </tr>
  </table>

  <!-- Header navigation row. -->
  <div class="memproto">
    <table width=100% cellpadding=0 cellspacing=0 border=0>
      <tr>
        <td align=left style="padding-left: 20px"><font size=+1><b><tt><font color=#333333>//
            <a href="../../index.html"><font color=#389613>doxy</font></a>/</font>
            <a href="../../google3/index.html">google3</a>/
            <a href="../../google3/constraint_solver/index.html">constraint_solver</a>/
            </tt></b></font>
        </td>
      </tr>
    </table>
  </div>
  <br />
    <!-- No subdirs found. -->
  <!-- End of header. -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>google3/constraint_solver/utilities.cc</h1><a href="utilities_8cc.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright 2010 Google</span>
<a name="l00002"></a>00002 <span class="comment">// Licensed under the Apache License, Version 2.0 (the "License");</span>
<a name="l00003"></a>00003 <span class="comment">// you may not use this file except in compliance with the License.</span>
<a name="l00004"></a>00004 <span class="comment">// You may obtain a copy of the License at</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">//     http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Unless required by applicable law or agreed to in writing, software</span>
<a name="l00009"></a>00009 <span class="comment">// distributed under the License is distributed on an "AS IS" BASIS,</span>
<a name="l00010"></a>00010 <span class="comment">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00011"></a>00011 <span class="comment">// See the License for the specific language governing permissions and</span>
<a name="l00012"></a>00012 <span class="comment">// limitations under the License.</span>
<a name="l00013"></a>00013 
<a name="l00014"></a>00014 <span class="preprocessor">#include "base/integral_types.h"</span>
<a name="l00015"></a>00015 <span class="preprocessor">#include "base/logging.h"</span>
<a name="l00016"></a>00016 <span class="preprocessor">#include "<a class="code" href="constraint__solveri_8h.html">constraint_solver/constraint_solveri.h</a>"</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include "util/bitset.h"</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="keyword">namespace </span>operations_research {
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="comment">// ---------- SmallRevBitSet ----------</span>
<a name="l00022"></a>00022 
<a name="l00023"></a><a class="code" href="classoperations__research_1_1SmallRevBitSet.html#0984b7441a23c75de696103cadc044b5">00023</a> <a class="code" href="classoperations__research_1_1SmallRevBitSet.html#0984b7441a23c75de696103cadc044b5" title="SmallRevBitSet.">SmallRevBitSet::SmallRevBitSet</a>(int64 size) : bits_(0LL), stamp_(0) {
<a name="l00024"></a>00024   DCHECK_GT(size, 0);
<a name="l00025"></a>00025   DCHECK_LE(size, 64);
<a name="l00026"></a>00026 }
<a name="l00027"></a>00027 
<a name="l00028"></a><a class="code" href="classoperations__research_1_1SmallRevBitSet.html#427373fdc21062991efa27f991862ff6">00028</a> <span class="keywordtype">void</span> SmallRevBitSet::SetToOne(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, int64 pos) {
<a name="l00029"></a>00029   DCHECK_GE(pos, 0);
<a name="l00030"></a>00030   <span class="keyword">const</span> uint64 current_stamp = s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#f17dc31a0a12a7c6c9c09a8a8e2d94e4" title="The stamp indicates how many moves in the search tree we have performed.">stamp</a>();
<a name="l00031"></a>00031   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#cbc818d82747c1cc9ca3c54a2c38e1ec">stamp_</a> &lt; current_stamp) {
<a name="l00032"></a>00032     <a class="code" href="classoperations__research_1_1SmallRevBitSet.html#cbc818d82747c1cc9ca3c54a2c38e1ec">stamp_</a> = current_stamp;
<a name="l00033"></a>00033     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#7ccd4144085fe2217fd92798283e99df" title="reversibility">SaveValue</a>(&amp;<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#fa9215dd014ab775d96f56d5c9b02b07">bits_</a>);
<a name="l00034"></a>00034   }
<a name="l00035"></a>00035   <a class="code" href="classoperations__research_1_1SmallRevBitSet.html#fa9215dd014ab775d96f56d5c9b02b07">bits_</a> |= OneBit64(pos);
<a name="l00036"></a>00036 }
<a name="l00037"></a>00037 
<a name="l00038"></a><a class="code" href="classoperations__research_1_1SmallRevBitSet.html#22f35c8d356a6bc1dfb95bb36da6d37a">00038</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SmallRevBitSet.html#22f35c8d356a6bc1dfb95bb36da6d37a">SmallRevBitSet::SetToZero</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, int64 pos) {
<a name="l00039"></a>00039   DCHECK_GE(pos, 0);
<a name="l00040"></a>00040   <span class="keyword">const</span> uint64 current_stamp = s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#f17dc31a0a12a7c6c9c09a8a8e2d94e4" title="The stamp indicates how many moves in the search tree we have performed.">stamp</a>();
<a name="l00041"></a>00041   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#cbc818d82747c1cc9ca3c54a2c38e1ec">stamp_</a> &lt; current_stamp) {
<a name="l00042"></a>00042     <a class="code" href="classoperations__research_1_1SmallRevBitSet.html#cbc818d82747c1cc9ca3c54a2c38e1ec">stamp_</a> = current_stamp;
<a name="l00043"></a>00043     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#7ccd4144085fe2217fd92798283e99df" title="reversibility">SaveValue</a>(&amp;<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#fa9215dd014ab775d96f56d5c9b02b07">bits_</a>);
<a name="l00044"></a>00044   }
<a name="l00045"></a>00045   <a class="code" href="classoperations__research_1_1SmallRevBitSet.html#fa9215dd014ab775d96f56d5c9b02b07">bits_</a> &amp;= ~OneBit64(pos);
<a name="l00046"></a>00046 }
<a name="l00047"></a>00047 
<a name="l00048"></a><a class="code" href="classoperations__research_1_1SmallRevBitSet.html#8d5b430eed66fd29882693acb179e1c1">00048</a> int64 <a class="code" href="classoperations__research_1_1SmallRevBitSet.html#8d5b430eed66fd29882693acb179e1c1">SmallRevBitSet::Cardinality</a>()<span class="keyword"> const </span>{
<a name="l00049"></a>00049   <span class="keywordflow">return</span> BitCount64(<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#fa9215dd014ab775d96f56d5c9b02b07">bits_</a>);
<a name="l00050"></a>00050 }
<a name="l00051"></a>00051 
<a name="l00052"></a><a class="code" href="classoperations__research_1_1SmallRevBitSet.html#8f2b8156245201ddfdb9df3d98f5ceb4">00052</a> int64 <a class="code" href="classoperations__research_1_1SmallRevBitSet.html#8f2b8156245201ddfdb9df3d98f5ceb4">SmallRevBitSet::GetFirstOne</a>()<span class="keyword"> const </span>{
<a name="l00053"></a>00053   <span class="keywordflow">return</span> LeastSignificantBitPosition64(<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#fa9215dd014ab775d96f56d5c9b02b07">bits_</a>);
<a name="l00054"></a>00054 }
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="comment">// ---------- RevBitSet ----------</span>
<a name="l00057"></a>00057 
<a name="l00058"></a><a class="code" href="classoperations__research_1_1RevBitSet.html#7369d4e2ea1843501af11edd89199b8c">00058</a> <a class="code" href="classoperations__research_1_1RevBitSet.html#7369d4e2ea1843501af11edd89199b8c" title="RevBitSet.">RevBitSet::RevBitSet</a>(int64 size)
<a name="l00059"></a>00059     : rows_(1), columns_(size), length_(BitLength64(size)),
<a name="l00060"></a>00060       <a class="code" href="classoperations__research_1_1SmallRevBitSet.html#fa9215dd014ab775d96f56d5c9b02b07">bits_</a>(new uint64[length_]), stamps_(new uint64[length_]) {
<a name="l00061"></a>00061   DCHECK_GE(size, 1);
<a name="l00062"></a>00062   memset(<a class="code" href="classoperations__research_1_1RevBitSet.html#a99857f1a870b3a414f9b5a7882dd690">bits_</a>, 0, <span class="keyword">sizeof</span>(*<a class="code" href="classoperations__research_1_1RevBitSet.html#a99857f1a870b3a414f9b5a7882dd690">bits_</a>) * <a class="code" href="classoperations__research_1_1RevBitSet.html#6d808b89c4a043e896d334291df0a6f8">length_</a>);
<a name="l00063"></a>00063   memset(<a class="code" href="classoperations__research_1_1RevBitSet.html#92860e21e1690647f9ee55c2703620d8">stamps_</a>, 0, <span class="keyword">sizeof</span>(*<a class="code" href="classoperations__research_1_1RevBitSet.html#92860e21e1690647f9ee55c2703620d8">stamps_</a>) * length_);
<a name="l00064"></a>00064 }
<a name="l00065"></a>00065 
<a name="l00066"></a><a class="code" href="classoperations__research_1_1RevBitSet.html#baa22b566c9d0efb71295014054b8719">00066</a> <a class="code" href="classoperations__research_1_1RevBitSet.html#7369d4e2ea1843501af11edd89199b8c" title="RevBitSet.">RevBitSet::RevBitSet</a>(int64 rows, int64 columns)
<a name="l00067"></a>00067     : <a class="code" href="classoperations__research_1_1RevBitSet.html#5045acf71bda9f85de05434571f7409b">rows_</a>(rows), <a class="code" href="classoperations__research_1_1RevBitSet.html#4eb3176a2dbca6d71891bba6bf9976d4">columns_</a>(columns), <a class="code" href="classoperations__research_1_1RevBitSet.html#6d808b89c4a043e896d334291df0a6f8">length_</a>(BitLength64(rows * columns)),
<a name="l00068"></a>00068       <a class="code" href="classoperations__research_1_1RevBitSet.html#a99857f1a870b3a414f9b5a7882dd690">bits_</a>(new uint64[<a class="code" href="classoperations__research_1_1RevBitSet.html#6d808b89c4a043e896d334291df0a6f8">length_</a>]), <a class="code" href="classoperations__research_1_1RevBitSet.html#92860e21e1690647f9ee55c2703620d8">stamps_</a>(new uint64[<a class="code" href="classoperations__research_1_1RevBitSet.html#6d808b89c4a043e896d334291df0a6f8">length_</a>]) {
<a name="l00069"></a>00069   DCHECK_GE(rows, 1);
<a name="l00070"></a>00070   DCHECK_GE(columns, 1);
<a name="l00071"></a>00071   memset(<a class="code" href="classoperations__research_1_1RevBitSet.html#a99857f1a870b3a414f9b5a7882dd690">bits_</a>, 0, <span class="keyword">sizeof</span>(*<a class="code" href="classoperations__research_1_1RevBitSet.html#a99857f1a870b3a414f9b5a7882dd690">bits_</a>) * <a class="code" href="classoperations__research_1_1RevBitSet.html#6d808b89c4a043e896d334291df0a6f8">length_</a>);
<a name="l00072"></a>00072   memset(<a class="code" href="classoperations__research_1_1RevBitSet.html#92860e21e1690647f9ee55c2703620d8">stamps_</a>, 0, <span class="keyword">sizeof</span>(*<a class="code" href="classoperations__research_1_1RevBitSet.html#92860e21e1690647f9ee55c2703620d8">stamps_</a>) * length_);
<a name="l00073"></a>00073 }
<a name="l00074"></a>00074 
<a name="l00075"></a><a class="code" href="classoperations__research_1_1RevBitSet.html#72aaa0163218aec6e1ca39a8118fa584">00075</a> <a class="code" href="classoperations__research_1_1RevBitSet.html#72aaa0163218aec6e1ca39a8118fa584">RevBitSet::~RevBitSet</a>() {
<a name="l00076"></a>00076   <span class="keyword">delete</span> [] <a class="code" href="classoperations__research_1_1RevBitSet.html#a99857f1a870b3a414f9b5a7882dd690">bits_</a>;
<a name="l00077"></a>00077   <span class="keyword">delete</span> [] <a class="code" href="classoperations__research_1_1RevBitSet.html#92860e21e1690647f9ee55c2703620d8">stamps_</a>;
<a name="l00078"></a>00078 }
<a name="l00079"></a>00079 
<a name="l00080"></a><a class="code" href="classoperations__research_1_1RevBitSet.html#2ac97e7b0f29e9405ce4465b8d7f407a">00080</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1RevBitSet.html#2ac97e7b0f29e9405ce4465b8d7f407a" title="Array API.">RevBitSet::SetToOne</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> solver, int64 index) {
<a name="l00081"></a>00081   DCHECK_GE(index, 0);
<a name="l00082"></a>00082   DCHECK_LT(index, <a class="code" href="classoperations__research_1_1RevBitSet.html#4eb3176a2dbca6d71891bba6bf9976d4">columns_</a> * <a class="code" href="classoperations__research_1_1RevBitSet.html#5045acf71bda9f85de05434571f7409b">rows_</a>);
<a name="l00083"></a>00083   <span class="keyword">const</span> int64 offset = BitOffset64(index);
<a name="l00084"></a>00084   <span class="keyword">const</span> int64 pos = BitPos64(index);
<a name="l00085"></a>00085   <span class="keywordflow">if</span> (!(<a class="code" href="classoperations__research_1_1RevBitSet.html#a99857f1a870b3a414f9b5a7882dd690">bits_</a>[offset] &amp; OneBit64(pos))) {
<a name="l00086"></a>00086     <span class="keyword">const</span> uint64 current_stamp = solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#f17dc31a0a12a7c6c9c09a8a8e2d94e4" title="The stamp indicates how many moves in the search tree we have performed.">stamp</a>();
<a name="l00087"></a>00087     <span class="keywordflow">if</span> (current_stamp &gt; <a class="code" href="classoperations__research_1_1RevBitSet.html#92860e21e1690647f9ee55c2703620d8">stamps_</a>[offset]) {
<a name="l00088"></a>00088       <a class="code" href="classoperations__research_1_1RevBitSet.html#92860e21e1690647f9ee55c2703620d8">stamps_</a>[offset] = current_stamp;
<a name="l00089"></a>00089       solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#7ccd4144085fe2217fd92798283e99df" title="reversibility">SaveValue</a>(&amp;<a class="code" href="classoperations__research_1_1RevBitSet.html#a99857f1a870b3a414f9b5a7882dd690">bits_</a>[offset]);
<a name="l00090"></a>00090     }
<a name="l00091"></a>00091     <a class="code" href="classoperations__research_1_1RevBitSet.html#a99857f1a870b3a414f9b5a7882dd690">bits_</a>[offset] |= OneBit64(pos);
<a name="l00092"></a>00092   }
<a name="l00093"></a>00093 }
<a name="l00094"></a>00094 
<a name="l00095"></a><a class="code" href="classoperations__research_1_1RevBitSet.html#3ee91773fe2b1c619f04e71f56175be5">00095</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1RevBitSet.html#2ac97e7b0f29e9405ce4465b8d7f407a" title="Array API.">RevBitSet::SetToOne</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> solver, int64 row, int64 column) {
<a name="l00096"></a>00096   DCHECK_GE(row, 0);
<a name="l00097"></a>00097   DCHECK_LT(row, <a class="code" href="classoperations__research_1_1RevBitSet.html#5045acf71bda9f85de05434571f7409b">rows_</a>);
<a name="l00098"></a>00098   DCHECK_GE(column, 0);
<a name="l00099"></a>00099   DCHECK_LT(column, <a class="code" href="classoperations__research_1_1RevBitSet.html#4eb3176a2dbca6d71891bba6bf9976d4">columns_</a>);
<a name="l00100"></a>00100   <a class="code" href="classoperations__research_1_1RevBitSet.html#2ac97e7b0f29e9405ce4465b8d7f407a" title="Array API.">SetToOne</a>(solver, row * <a class="code" href="classoperations__research_1_1RevBitSet.html#4eb3176a2dbca6d71891bba6bf9976d4">columns_</a> + column);
<a name="l00101"></a>00101 }
<a name="l00102"></a>00102 
<a name="l00103"></a><a class="code" href="classoperations__research_1_1RevBitSet.html#487c03117be2f0f5c983acc4d5fd27eb">00103</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1RevBitSet.html#487c03117be2f0f5c983acc4d5fd27eb">RevBitSet::SetToZero</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> solver, int64 index) {
<a name="l00104"></a>00104   DCHECK_GE(index, 0);
<a name="l00105"></a>00105   DCHECK_LT(index, <a class="code" href="classoperations__research_1_1RevBitSet.html#4eb3176a2dbca6d71891bba6bf9976d4">columns_</a> * <a class="code" href="classoperations__research_1_1RevBitSet.html#5045acf71bda9f85de05434571f7409b">rows_</a>);
<a name="l00106"></a>00106   <span class="keyword">const</span> int64 offset = BitOffset64(index);
<a name="l00107"></a>00107   <span class="keyword">const</span> int64 pos = BitPos64(index);
<a name="l00108"></a>00108   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1RevBitSet.html#a99857f1a870b3a414f9b5a7882dd690">bits_</a>[offset] &amp; OneBit64(pos)) {
<a name="l00109"></a>00109     <span class="keyword">const</span> uint64 current_stamp = solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#f17dc31a0a12a7c6c9c09a8a8e2d94e4" title="The stamp indicates how many moves in the search tree we have performed.">stamp</a>();
<a name="l00110"></a>00110     <span class="keywordflow">if</span> (current_stamp &gt; <a class="code" href="classoperations__research_1_1RevBitSet.html#92860e21e1690647f9ee55c2703620d8">stamps_</a>[offset]) {
<a name="l00111"></a>00111       <a class="code" href="classoperations__research_1_1RevBitSet.html#92860e21e1690647f9ee55c2703620d8">stamps_</a>[offset] = current_stamp;
<a name="l00112"></a>00112       solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#7ccd4144085fe2217fd92798283e99df" title="reversibility">SaveValue</a>(&amp;<a class="code" href="classoperations__research_1_1RevBitSet.html#a99857f1a870b3a414f9b5a7882dd690">bits_</a>[offset]);
<a name="l00113"></a>00113     }
<a name="l00114"></a>00114     <a class="code" href="classoperations__research_1_1RevBitSet.html#a99857f1a870b3a414f9b5a7882dd690">bits_</a>[offset] &amp;= ~OneBit64(pos);
<a name="l00115"></a>00115   }
<a name="l00116"></a>00116 }
<a name="l00117"></a>00117 
<a name="l00118"></a><a class="code" href="classoperations__research_1_1RevBitSet.html#74e8c43665c1e3db5185bb4672d9e052">00118</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1RevBitSet.html#487c03117be2f0f5c983acc4d5fd27eb">RevBitSet::SetToZero</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> solver, int64 row, int64 column) {
<a name="l00119"></a>00119   DCHECK_GE(row, 0);
<a name="l00120"></a>00120   DCHECK_LT(row, <a class="code" href="classoperations__research_1_1RevBitSet.html#5045acf71bda9f85de05434571f7409b">rows_</a>);
<a name="l00121"></a>00121   DCHECK_GE(column, 0);
<a name="l00122"></a>00122   DCHECK_LT(column, <a class="code" href="classoperations__research_1_1RevBitSet.html#4eb3176a2dbca6d71891bba6bf9976d4">columns_</a>);
<a name="l00123"></a>00123   <a class="code" href="classoperations__research_1_1RevBitSet.html#487c03117be2f0f5c983acc4d5fd27eb">SetToZero</a>(solver, row * <a class="code" href="classoperations__research_1_1RevBitSet.html#4eb3176a2dbca6d71891bba6bf9976d4">columns_</a> + column);
<a name="l00124"></a>00124 }
<a name="l00125"></a>00125 
<a name="l00126"></a><a class="code" href="classoperations__research_1_1RevBitSet.html#c32e8eb114c816d8e9ad1d3564e73a91">00126</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1RevBitSet.html#c32e8eb114c816d8e9ad1d3564e73a91">RevBitSet::IsSet</a>(int64 index)<span class="keyword"> const </span>{
<a name="l00127"></a>00127   DCHECK_GE(index, 0);
<a name="l00128"></a>00128   DCHECK_LT(index, <a class="code" href="classoperations__research_1_1RevBitSet.html#4eb3176a2dbca6d71891bba6bf9976d4">columns_</a> * <a class="code" href="classoperations__research_1_1RevBitSet.html#5045acf71bda9f85de05434571f7409b">rows_</a>);
<a name="l00129"></a>00129   <span class="keywordflow">return</span> IsBitSet64(<a class="code" href="classoperations__research_1_1RevBitSet.html#a99857f1a870b3a414f9b5a7882dd690">bits_</a>, index);
<a name="l00130"></a>00130 }
<a name="l00131"></a>00131 
<a name="l00132"></a><a class="code" href="classoperations__research_1_1RevBitSet.html#57b08039570d8a3101c21dc003be6ed9">00132</a> int64 <a class="code" href="classoperations__research_1_1RevBitSet.html#57b08039570d8a3101c21dc003be6ed9">RevBitSet::Cardinality</a>()<span class="keyword"> const </span>{
<a name="l00133"></a>00133   int64 card = 0;
<a name="l00134"></a>00134   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1RevBitSet.html#6d808b89c4a043e896d334291df0a6f8">length_</a>; ++i) {
<a name="l00135"></a>00135     card += BitCount64(<a class="code" href="classoperations__research_1_1RevBitSet.html#a99857f1a870b3a414f9b5a7882dd690">bits_</a>[i]);
<a name="l00136"></a>00136   }
<a name="l00137"></a>00137   <span class="keywordflow">return</span> card;
<a name="l00138"></a>00138 }
<a name="l00139"></a>00139 
<a name="l00140"></a><a class="code" href="classoperations__research_1_1RevBitSet.html#8ec6e7f2b6f808e3c53ac1d120d7ab82">00140</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1RevBitSet.html#8ec6e7f2b6f808e3c53ac1d120d7ab82">RevBitSet::IsCardinalityZero</a>()<span class="keyword"> const </span>{
<a name="l00141"></a>00141   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1RevBitSet.html#6d808b89c4a043e896d334291df0a6f8">length_</a>; ++i) {
<a name="l00142"></a>00142     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1RevBitSet.html#a99857f1a870b3a414f9b5a7882dd690">bits_</a>[i]) {
<a name="l00143"></a>00143       <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00144"></a>00144     }
<a name="l00145"></a>00145   }
<a name="l00146"></a>00146   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00147"></a>00147 }
<a name="l00148"></a>00148 
<a name="l00149"></a><a class="code" href="classoperations__research_1_1RevBitSet.html#9b7a644f43cceff713cd3b641755698d">00149</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1RevBitSet.html#9b7a644f43cceff713cd3b641755698d">RevBitSet::IsCardinalityOne</a>()<span class="keyword"> const </span>{
<a name="l00150"></a>00150   <span class="keywordtype">bool</span> found_one = <span class="keyword">false</span>;
<a name="l00151"></a>00151   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1RevBitSet.html#6d808b89c4a043e896d334291df0a6f8">length_</a>; ++i) {
<a name="l00152"></a>00152     <span class="keyword">const</span> uint64 partial = <a class="code" href="classoperations__research_1_1RevBitSet.html#a99857f1a870b3a414f9b5a7882dd690">bits_</a>[i];
<a name="l00153"></a>00153     <span class="keywordflow">if</span> (partial) {
<a name="l00154"></a>00154       <span class="keywordflow">if</span> (!(partial &amp; (partial - 1))) {
<a name="l00155"></a>00155         <span class="keywordflow">if</span> (found_one) {
<a name="l00156"></a>00156           <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00157"></a>00157         }
<a name="l00158"></a>00158         found_one = <span class="keyword">true</span>;
<a name="l00159"></a>00159       }
<a name="l00160"></a>00160     }
<a name="l00161"></a>00161   }
<a name="l00162"></a>00162   <span class="keywordflow">return</span> found_one;
<a name="l00163"></a>00163 }
<a name="l00164"></a>00164 
<a name="l00165"></a><a class="code" href="classoperations__research_1_1RevBitSet.html#84c8bc32d2e8c150d7828e380c51c0c8">00165</a> int64 <a class="code" href="classoperations__research_1_1RevBitSet.html#84c8bc32d2e8c150d7828e380c51c0c8">RevBitSet::GetFirstBit</a>(<span class="keywordtype">int</span> start)<span class="keyword"> const </span>{
<a name="l00166"></a>00166   <span class="keyword">const</span> <span class="keywordtype">int</span> end = <a class="code" href="classoperations__research_1_1RevBitSet.html#5045acf71bda9f85de05434571f7409b">rows_</a> * <a class="code" href="classoperations__research_1_1RevBitSet.html#4eb3176a2dbca6d71891bba6bf9976d4">columns_</a> + <a class="code" href="classoperations__research_1_1RevBitSet.html#4eb3176a2dbca6d71891bba6bf9976d4">columns_</a> - 1;
<a name="l00167"></a>00167   <span class="keywordflow">return</span> LeastSignificantBitPosition64(<a class="code" href="classoperations__research_1_1RevBitSet.html#a99857f1a870b3a414f9b5a7882dd690">bits_</a>, start, end);
<a name="l00168"></a>00168 }
<a name="l00169"></a>00169 
<a name="l00170"></a><a class="code" href="classoperations__research_1_1RevBitSet.html#d05017771d3554370621a0812f248c8e">00170</a> int64 <a class="code" href="classoperations__research_1_1RevBitSet.html#57b08039570d8a3101c21dc003be6ed9">RevBitSet::Cardinality</a>(<span class="keywordtype">int</span> row)<span class="keyword"> const </span>{
<a name="l00171"></a>00171   DCHECK_GE(row, 0);
<a name="l00172"></a>00172   DCHECK_LT(row, <a class="code" href="classoperations__research_1_1RevBitSet.html#5045acf71bda9f85de05434571f7409b">rows_</a>);
<a name="l00173"></a>00173   <span class="keyword">const</span> <span class="keywordtype">int</span> start = row * <a class="code" href="classoperations__research_1_1RevBitSet.html#4eb3176a2dbca6d71891bba6bf9976d4">columns_</a>;
<a name="l00174"></a>00174   <span class="keywordflow">return</span> BitCountRange64(<a class="code" href="classoperations__research_1_1RevBitSet.html#a99857f1a870b3a414f9b5a7882dd690">bits_</a>, start, start + columns_ - 1);
<a name="l00175"></a>00175 }
<a name="l00176"></a>00176 
<a name="l00177"></a><a class="code" href="classoperations__research_1_1RevBitSet.html#30dd4ef7ef833ad979d704ddc092e893">00177</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1RevBitSet.html#9b7a644f43cceff713cd3b641755698d">RevBitSet::IsCardinalityOne</a>(<span class="keywordtype">int</span> row)<span class="keyword"> const </span>{
<a name="l00178"></a>00178   <span class="comment">// TODO(user) : Optimize this one.</span>
<a name="l00179"></a>00179   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1RevBitSet.html#57b08039570d8a3101c21dc003be6ed9">Cardinality</a>(row) == 1;
<a name="l00180"></a>00180 }
<a name="l00181"></a>00181 
<a name="l00182"></a><a class="code" href="classoperations__research_1_1RevBitSet.html#6b014e8c794a12c773cd65398a0f9f0b">00182</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1RevBitSet.html#8ec6e7f2b6f808e3c53ac1d120d7ab82">RevBitSet::IsCardinalityZero</a>(<span class="keywordtype">int</span> row)<span class="keyword"> const </span>{
<a name="l00183"></a>00183   <span class="keyword">const</span> <span class="keywordtype">int</span> start = row * <a class="code" href="classoperations__research_1_1RevBitSet.html#4eb3176a2dbca6d71891bba6bf9976d4">columns_</a>;
<a name="l00184"></a>00184   <span class="keywordflow">return</span> IsEmptyRange64(<a class="code" href="classoperations__research_1_1RevBitSet.html#a99857f1a870b3a414f9b5a7882dd690">bits_</a>, start, start + columns_ - 1);
<a name="l00185"></a>00185 }
<a name="l00186"></a>00186 
<a name="l00187"></a><a class="code" href="classoperations__research_1_1RevBitSet.html#83967660184305ee5026c11c0c861b9e">00187</a> int64 <a class="code" href="classoperations__research_1_1RevBitSet.html#84c8bc32d2e8c150d7828e380c51c0c8">RevBitSet::GetFirstBit</a>(<span class="keywordtype">int</span> row, <span class="keywordtype">int</span> start)<span class="keyword"> const </span>{
<a name="l00188"></a>00188   DCHECK_GE(start, 0);
<a name="l00189"></a>00189   DCHECK_GE(row, 0);
<a name="l00190"></a>00190   DCHECK_LT(row, <a class="code" href="classoperations__research_1_1RevBitSet.html#5045acf71bda9f85de05434571f7409b">rows_</a>);
<a name="l00191"></a>00191   DCHECK_LT(start, <a class="code" href="classoperations__research_1_1RevBitSet.html#4eb3176a2dbca6d71891bba6bf9976d4">columns_</a>);
<a name="l00192"></a>00192   <span class="keyword">const</span> <span class="keywordtype">int</span> beginning = row * <a class="code" href="classoperations__research_1_1RevBitSet.html#4eb3176a2dbca6d71891bba6bf9976d4">columns_</a>;
<a name="l00193"></a>00193   <span class="keyword">const</span> <span class="keywordtype">int</span> end = beginning + columns_ - 1;
<a name="l00194"></a>00194   int64 position = LeastSignificantBitPosition64(<a class="code" href="classoperations__research_1_1RevBitSet.html#a99857f1a870b3a414f9b5a7882dd690">bits_</a>, beginning + start, end);
<a name="l00195"></a>00195   <span class="keywordflow">if</span> (position == -1) {
<a name="l00196"></a>00196     <span class="keywordflow">return</span> -1;
<a name="l00197"></a>00197   } <span class="keywordflow">else</span> {
<a name="l00198"></a>00198     <span class="keywordflow">return</span> position - beginning;
<a name="l00199"></a>00199   }
<a name="l00200"></a>00200 }
<a name="l00201"></a>00201 
<a name="l00202"></a><a class="code" href="classoperations__research_1_1RevBitSet.html#3f697d113d75ed2ef844488fe21a8b76">00202</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1RevBitSet.html#3f697d113d75ed2ef844488fe21a8b76" title="Works in matrix and array mode.">RevBitSet::RevClearAll</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> solver) {
<a name="l00203"></a>00203   <span class="keyword">const</span> uint64 current_stamp = solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#f17dc31a0a12a7c6c9c09a8a8e2d94e4" title="The stamp indicates how many moves in the search tree we have performed.">stamp</a>();
<a name="l00204"></a>00204   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> offset = 0; offset &lt; <a class="code" href="classoperations__research_1_1RevBitSet.html#6d808b89c4a043e896d334291df0a6f8">length_</a>; ++offset) {
<a name="l00205"></a>00205     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1RevBitSet.html#a99857f1a870b3a414f9b5a7882dd690">bits_</a>[offset]) {
<a name="l00206"></a>00206       <span class="keywordflow">if</span> (current_stamp &gt; <a class="code" href="classoperations__research_1_1RevBitSet.html#92860e21e1690647f9ee55c2703620d8">stamps_</a>[offset]) {
<a name="l00207"></a>00207         <a class="code" href="classoperations__research_1_1RevBitSet.html#92860e21e1690647f9ee55c2703620d8">stamps_</a>[offset] = current_stamp;
<a name="l00208"></a>00208         solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#7ccd4144085fe2217fd92798283e99df" title="reversibility">SaveValue</a>(&amp;<a class="code" href="classoperations__research_1_1RevBitSet.html#a99857f1a870b3a414f9b5a7882dd690">bits_</a>[offset]);
<a name="l00209"></a>00209       }
<a name="l00210"></a>00210       <a class="code" href="classoperations__research_1_1RevBitSet.html#a99857f1a870b3a414f9b5a7882dd690">bits_</a>[offset] = GG_ULONGLONG(0);
<a name="l00211"></a>00211     }
<a name="l00212"></a>00212   }
<a name="l00213"></a>00213 }
<a name="l00214"></a>00214 
<a name="l00215"></a>00215 }  <span class="comment">// namespace operations_research</span>
</pre></div></div>

  <!-- Start of footer. -->
  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <tr valign=top>
      <td colspan=2 height=10></td>
    </tr>
    <tr valign=top>
      <td colspan=2 bgcolor=#389613 height=3></td>
    </tr>
  </table>

  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br />

  
  </body>
</html>
