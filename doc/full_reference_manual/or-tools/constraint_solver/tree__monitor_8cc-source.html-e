<!-- Good morning, Mr. Phelps. -->
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
    <title>google3/constraint_solver/tree_monitor.cc Source File - Doxy</title>
    <link rel="shortcut icon" href="../../favicon.ico">
    <!-- Both stylesheets are supplied by Doxygen, with maybe minor tweaks from Google. -->
    <link href="../../doxygen.css" rel="stylesheet" type="text/css">
    <link href="../../tabs.css" rel="stylesheet" type="text/css">
  </head>

  <body topmargin=0 leftmargin=20 bottommargin=0 rightmargin=20 marginwidth=20 marginheight=0>
  <!-- Second part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
  <style>
    a.doxy_logo:hover {
      background-color: #389613
    }
  </style>

  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <!-- Top horizontal line with the color of the day. -->
    <tr valign=top>
      <td colspan=3 bgcolor=#389613 height=3></td>
    </tr>

    <!-- Header row with the links at the right. -->
    <tr valign=top>
      <td colspan=3 align=right>
        <font size=-1>
          Generated on: <font color=#389613><b>Fri Apr  1 14:13:18 PDT 2011</b></font>
            for <b>custom file set</b>
        </font>
      </td>
    </tr>

    <!-- Header row with the logo and the search form. -->
    <tr valign=top>
      <!-- Logo. -->
      <td align=left width=150>
        <table width=150 height=54 cellpadding=0 cellspacing=0 border=0>
          <tr valign=top>
            <!-- First part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
            <td bgcolor=#389613>
              <a class="doxy_logo" href="../../index.html"><img src="../../doxy_logo.png" alt="Doxy" border=0></a>
            </td>
          </tr>
        </table>
      </td>
    </tr>

    <!-- Tiny vertical space below the form. -->
    <tr valign=top>
      <td colspan=3 height=3></td>
    </tr>
  </table>

  <!-- Header navigation row. -->
  <div class="memproto">
    <table width=100% cellpadding=0 cellspacing=0 border=0>
      <tr>
        <td align=left style="padding-left: 20px"><font size=+1><b><tt><font color=#333333>//
            <a href="../../index.html"><font color=#389613>doxy</font></a>/</font>
            <a href="../../google3/index.html">google3</a>/
            <a href="../../google3/constraint_solver/index.html">constraint_solver</a>/
            </tt></b></font>
        </td>
      </tr>
    </table>
  </div>
  <br />
    <!-- No subdirs found. -->
  <!-- End of header. -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>google3/constraint_solver/tree_monitor.cc</h1><a href="tree__monitor_8cc.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright 2010 Google</span>
<a name="l00002"></a>00002 <span class="comment">// Licensed under the Apache License, Version 2.0 (the "License");</span>
<a name="l00003"></a>00003 <span class="comment">// you may not use this file except in compliance with the License.</span>
<a name="l00004"></a>00004 <span class="comment">// You may obtain a copy of the License at</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">//     http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Unless required by applicable law or agreed to in writing, software</span>
<a name="l00009"></a>00009 <span class="comment">// distributed under the License is distributed on an "AS IS" BASIS,</span>
<a name="l00010"></a>00010 <span class="comment">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00011"></a>00011 <span class="comment">// See the License for the specific language governing permissions and</span>
<a name="l00012"></a>00012 <span class="comment">// limitations under the License.</span>
<a name="l00013"></a>00013 
<a name="l00014"></a>00014 <span class="preprocessor">#include &lt;limits&gt;</span>
<a name="l00015"></a>00015 <span class="preprocessor">#include "base/concise_iterator.h"</span>
<a name="l00016"></a>00016 <span class="preprocessor">#include "base/stl_util-inl.h"</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include "<a class="code" href="constraint__solver_8h.html">constraint_solver/constraint_solver.h</a>"</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include "util/xml_helper.h"</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="keyword">namespace </span>operations_research {
<a name="l00023"></a>00023 
<a name="l00024"></a><a class="code" href="namespaceoperations__research.html#71bc61e635aa6ccca17128f87c1cd200">00024</a> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="namespaceoperations__research.html#71bc61e635aa6ccca17128f87c1cd200">kConfigXml</a> =
<a name="l00025"></a>00025     <span class="stringliteral">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"</span>
<a name="l00026"></a>00026     <span class="stringliteral">"&lt;configuration version=\"1.0\"&gt;\n"</span>
<a name="l00027"></a>00027     <span class="stringliteral">"    &lt;tool show=\"tree\" fileroot=\"tree\" display=\"expanded\""</span>
<a name="l00028"></a>00028     <span class="stringliteral">" repeat=\"all\"/&gt;\n"</span>
<a name="l00029"></a>00029     <span class="stringliteral">"    &lt;tool show=\"viz\" fileroot=\"viz\" repeat=\"all\"/&gt;\n"</span>
<a name="l00030"></a>00030     <span class="stringliteral">"&lt;/configuration&gt;"</span>;
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="keyword">class </span>XmlHelper;
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="keyword">class </span><a class="code" href="classoperations__research_1_1TreeNode.html" title="Represents a node in the decision phase.">TreeNode</a>;
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="comment">// String comparator that compares strings naturally, even those</span>
<a name="l00037"></a>00037 <span class="comment">// including integer numbers.</span>
<a name="l00038"></a><a class="code" href="structoperations__research_1_1NaturalLess.html">00038</a> <span class="keyword">struct </span><a class="code" href="structoperations__research_1_1NaturalLess.html" title="String comparator that compares strings naturally, even those including integer numbers...">NaturalLess</a> {
<a name="l00039"></a><a class="code" href="structoperations__research_1_1NaturalLess.html#5daf93b695e00882d96545fc8e28484c">00039</a>   <span class="keywordtype">bool</span> <a class="code" href="structoperations__research_1_1NaturalLess.html#5daf93b695e00882d96545fc8e28484c">operator()</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; s1, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; s2)<span class="keyword"> const </span>{
<a name="l00040"></a>00040     <span class="keywordtype">int</span> start = 0;
<a name="l00041"></a>00041     <span class="keywordtype">int</span> length = std::min(s1.length(), s2.length());
<a name="l00042"></a>00042 
<a name="l00043"></a>00043     <span class="keywordflow">while</span> (start &lt; length) {
<a name="l00044"></a>00044       <span class="comment">// Ignore common characters at the beginning.</span>
<a name="l00045"></a>00045       <span class="keywordflow">while</span> (start &lt; length &amp;&amp; s1[start] == s2[start] &amp;&amp;
<a name="l00046"></a>00046           (s1[start] &lt; <span class="charliteral">'0'</span> || s1[start] &gt; <span class="charliteral">'9'</span>)) {
<a name="l00047"></a>00047         ++start;
<a name="l00048"></a>00048       }
<a name="l00049"></a>00049 
<a name="l00050"></a>00050       <span class="comment">// If one string is the substring of another, then the shorter string is</span>
<a name="l00051"></a>00051       <span class="comment">// smaller.</span>
<a name="l00052"></a>00052       <span class="keywordflow">if</span> (start == length) {
<a name="l00053"></a>00053         <span class="keywordflow">return</span> s1.length() &lt; s2.length();
<a name="l00054"></a>00054       }
<a name="l00055"></a>00055 
<a name="l00056"></a>00056       <span class="keywordtype">int</span> number_s1 = 0;
<a name="l00057"></a>00057       <span class="keywordtype">int</span> number_s2 = 0;
<a name="l00058"></a>00058 
<a name="l00059"></a>00059       <span class="comment">// Extract a number if we have one.</span>
<a name="l00060"></a>00060       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = start;
<a name="l00061"></a>00061            i &lt; s1.length() &amp;&amp; s1[i] &gt;= <span class="charliteral">'0'</span> &amp;&amp; s1[i] &lt;= <span class="charliteral">'9'</span>;
<a name="l00062"></a>00062            ++i) {
<a name="l00063"></a>00063         number_s1 = number_s1 * 10 + (s1[i] - <span class="charliteral">'0'</span>);
<a name="l00064"></a>00064       }
<a name="l00065"></a>00065 
<a name="l00066"></a>00066       <span class="keywordflow">for</span> (; start &lt; s2.length() &amp;&amp; s2[start] &gt;= <span class="charliteral">'0'</span> &amp;&amp; s2[start] &lt;= <span class="charliteral">'9'</span>;
<a name="l00067"></a>00067            ++start) {
<a name="l00068"></a>00068         number_s2 = number_s2 * 10 + (s2[start] - <span class="charliteral">'0'</span>);
<a name="l00069"></a>00069       }
<a name="l00070"></a>00070 
<a name="l00071"></a>00071       <span class="comment">// Do a numerical comparison only if there are two numbers.</span>
<a name="l00072"></a>00072       <span class="keywordflow">if</span> (number_s1 &amp;&amp; number_s2) {
<a name="l00073"></a>00073         <span class="comment">// If we have similar numbers followed by other characters, we have to</span>
<a name="l00074"></a>00074         <span class="comment">// check the rest of the string.</span>
<a name="l00075"></a>00075         <span class="keywordflow">if</span> (number_s1 != number_s2) {
<a name="l00076"></a>00076           <span class="keywordflow">return</span> number_s1 &lt; number_s2;
<a name="l00077"></a>00077         }
<a name="l00078"></a>00078       } <span class="keywordflow">else</span> {
<a name="l00079"></a>00079         <span class="keywordflow">return</span> s1.compare(s2) &lt; 0;
<a name="l00080"></a>00080       }
<a name="l00081"></a>00081     }
<a name="l00082"></a>00082 
<a name="l00083"></a>00083     <span class="keywordflow">return</span> s1.length() &lt; s2.length();
<a name="l00084"></a>00084   }
<a name="l00085"></a>00085 };
<a name="l00086"></a>00086 
<a name="l00087"></a>00087 
<a name="l00088"></a>00088 <span class="comment">// TreeDecisionVisitor is used to gain access to the variables and values</span>
<a name="l00089"></a>00089 <span class="comment">// involved in a decision.</span>
<a name="l00090"></a><a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html">00090</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html" title="TreeDecisionVisitor is used to gain access to the variables and values involved in...">TreeDecisionVisitor</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1DecisionVisitor.html" title="A DecisionVisitor is used to inspect a decision.">DecisionVisitor</a> {
<a name="l00091"></a>00091  <span class="keyword">public</span>:
<a name="l00092"></a><a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#bc90d0d7f0a7e4d0c511330fb25e40ad">00092</a>   <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#bc90d0d7f0a7e4d0c511330fb25e40ad">TreeDecisionVisitor</a>() {}
<a name="l00093"></a><a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#cfeae6325eb1776ab8edb46389e0a2f7">00093</a>   <span class="keyword">virtual</span> <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#cfeae6325eb1776ab8edb46389e0a2f7">~TreeDecisionVisitor</a>() {}
<a name="l00094"></a>00094 
<a name="l00095"></a><a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#f65a17426859bb571f4e449043297d4f">00095</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#f65a17426859bb571f4e449043297d4f">VisitSetVariableValue</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var, int64 <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#054b58816cddd9fa816f918b3fca3f82" title="Returns the value of the current variable.">value</a>) {
<a name="l00096"></a>00096     <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#9bdf51f48d68e1ac4ff0428d30be1a79">name_</a> = var-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#89b827a71613c6c120d5ac326202df7e" title="Naming.">name</a>();
<a name="l00097"></a>00097     <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#53f7bfd9e3fae80246ef218fe2ae704e">value_</a> = value;
<a name="l00098"></a>00098     <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#67853242e37b7062639e5581bfc67f3c">valid_</a> = <span class="keyword">true</span>;
<a name="l00099"></a>00099   }
<a name="l00100"></a>00100 
<a name="l00101"></a><a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#6f1e242e12d10bd8018d6e31df0e62e8">00101</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#6f1e242e12d10bd8018d6e31df0e62e8">VisitSplitVariableDomain</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var,
<a name="l00102"></a>00102                                         int64 <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#054b58816cddd9fa816f918b3fca3f82" title="Returns the value of the current variable.">value</a>,
<a name="l00103"></a>00103                                         <span class="keywordtype">bool</span> start_with_lower_half) {
<a name="l00104"></a>00104     <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#9bdf51f48d68e1ac4ff0428d30be1a79">name_</a> = var-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#89b827a71613c6c120d5ac326202df7e" title="Naming.">name</a>();
<a name="l00105"></a>00105     <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#53f7bfd9e3fae80246ef218fe2ae704e">value_</a> = value;
<a name="l00106"></a>00106     <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#67853242e37b7062639e5581bfc67f3c">valid_</a> = <span class="keyword">true</span>;
<a name="l00107"></a>00107   }
<a name="l00108"></a>00108 
<a name="l00109"></a><a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#fdc544ef03779fc2736388f2ee97641e">00109</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#fdc544ef03779fc2736388f2ee97641e">VisitScheduleOrPostpone</a>(<a class="code" href="classoperations__research_1_1IntervalVar.html" title="Interval Var.">IntervalVar</a>* <span class="keyword">const</span> var, int64 est) {
<a name="l00110"></a>00110     <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#9bdf51f48d68e1ac4ff0428d30be1a79">name_</a> = var-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#89b827a71613c6c120d5ac326202df7e" title="Naming.">name</a>();
<a name="l00111"></a>00111     <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#53f7bfd9e3fae80246ef218fe2ae704e">value_</a> = est;
<a name="l00112"></a>00112     <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#67853242e37b7062639e5581bfc67f3c">valid_</a> = <span class="keyword">true</span>;
<a name="l00113"></a>00113   }
<a name="l00114"></a>00114 
<a name="l00115"></a><a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#51ca9fcf0fa982ff56c582120cdaa872">00115</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#51ca9fcf0fa982ff56c582120cdaa872">VisitTryRankFirst</a>(<a class="code" href="classoperations__research_1_1Sequence.html" title="Sequence.">Sequence</a>* <span class="keyword">const</span> sequence, <span class="keywordtype">int</span> index) {
<a name="l00116"></a>00116     <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#9bdf51f48d68e1ac4ff0428d30be1a79">name_</a> = sequence-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#89b827a71613c6c120d5ac326202df7e" title="Naming.">name</a>();
<a name="l00117"></a>00117     <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#53f7bfd9e3fae80246ef218fe2ae704e">value_</a> = index;
<a name="l00118"></a>00118     <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#67853242e37b7062639e5581bfc67f3c">valid_</a> = <span class="keyword">true</span>;
<a name="l00119"></a>00119   }
<a name="l00120"></a>00120 
<a name="l00121"></a>00121 
<a name="l00122"></a><a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#ebd86af35fe3e63f9bbfa0add0d8b970">00122</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#ebd86af35fe3e63f9bbfa0add0d8b970">VisitUnknownDecision</a>() {
<a name="l00123"></a>00123     <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#67853242e37b7062639e5581bfc67f3c">valid_</a> = <span class="keyword">false</span>;
<a name="l00124"></a>00124   }
<a name="l00125"></a>00125 
<a name="l00126"></a>00126   <span class="comment">// Indicates whether name and value can be called.</span>
<a name="l00127"></a><a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#96393785774cc11cd7b7578a2b15c773">00127</a>   <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#96393785774cc11cd7b7578a2b15c773" title="Indicates whether name and value can be called.">valid</a>() { <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#67853242e37b7062639e5581bfc67f3c">valid_</a>; }
<a name="l00128"></a>00128 
<a name="l00129"></a>00129   <span class="comment">// Returns the name of the current variable.</span>
<a name="l00130"></a><a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#54c14a2a742bd7c96feeb6787d81d763">00130</a>   <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#54c14a2a742bd7c96feeb6787d81d763" title="Returns the name of the current variable.">name</a>() {
<a name="l00131"></a>00131     CHECK(<a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#67853242e37b7062639e5581bfc67f3c">valid_</a>);
<a name="l00132"></a>00132     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#9bdf51f48d68e1ac4ff0428d30be1a79">name_</a>;
<a name="l00133"></a>00133   }
<a name="l00134"></a>00134 
<a name="l00135"></a>00135   <span class="comment">// Returns the value of the current variable.</span>
<a name="l00136"></a><a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#054b58816cddd9fa816f918b3fca3f82">00136</a>   int64 <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#054b58816cddd9fa816f918b3fca3f82" title="Returns the value of the current variable.">value</a>() {
<a name="l00137"></a>00137     CHECK(<a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#67853242e37b7062639e5581bfc67f3c">valid_</a>);
<a name="l00138"></a>00138     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#53f7bfd9e3fae80246ef218fe2ae704e">value_</a>;
<a name="l00139"></a>00139   }
<a name="l00140"></a>00140 
<a name="l00141"></a>00141  <span class="keyword">private</span>:
<a name="l00142"></a><a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#9bdf51f48d68e1ac4ff0428d30be1a79">00142</a>   <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#9bdf51f48d68e1ac4ff0428d30be1a79">name_</a>;
<a name="l00143"></a><a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#53f7bfd9e3fae80246ef218fe2ae704e">00143</a>   int64 <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#53f7bfd9e3fae80246ef218fe2ae704e">value_</a>;
<a name="l00144"></a><a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#67853242e37b7062639e5581bfc67f3c">00144</a>   <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#67853242e37b7062639e5581bfc67f3c">valid_</a>;
<a name="l00145"></a>00145 };
<a name="l00146"></a>00146 
<a name="l00147"></a>00147 <span class="comment">// The TreeMonitor may be attached to a search to obtain an output in CPViz</span>
<a name="l00148"></a>00148 <span class="comment">// format (http://sourceforge.net/projects/cpviz/). It produces both the</span>
<a name="l00149"></a>00149 <span class="comment">// Tree XML file as well as the Visualization XML. CPViz can then be used</span>
<a name="l00150"></a>00150 <span class="comment">// to obtain an overview of the search and to gain an insight into the decision</span>
<a name="l00151"></a>00151 <span class="comment">// phase.</span>
<a name="l00152"></a>00152 <span class="comment">// While TreeMonitor collects information during the runtime of a search, the</span>
<a name="l00153"></a>00153 <span class="comment">// output is only done after the search completes.</span>
<a name="l00154"></a>00154 <span class="comment">// The TreeMonitor output is optimized for output using the Viz tool included</span>
<a name="l00155"></a>00155 <span class="comment">// in CPViz. A dummy node is automatically added as a search root to allow a</span>
<a name="l00156"></a>00156 <span class="comment">// change of the root variable during the search, as CPViz currently does</span>
<a name="l00157"></a>00157 <span class="comment">// not support this.</span>
<a name="l00158"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html">00158</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1TreeMonitor.html" title="The TreeMonitor may be attached to a search to obtain an output in CPViz format (http://sourceforge...">TreeMonitor</a>: <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a> {
<a name="l00159"></a>00159  <span class="keyword">public</span>:
<a name="l00160"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#bcc7c05d45fa95c657ea463a90d56b97">00160</a>   <span class="keyword">typedef</span> hash_map&lt;string, IntVar const*&gt; <a class="code" href="classoperations__research_1_1TreeMonitor.html#bcc7c05d45fa95c657ea463a90d56b97">IntVarMap</a>;
<a name="l00161"></a>00161 
<a name="l00162"></a>00162   <a class="code" href="classoperations__research_1_1TreeMonitor.html#11c7b9c6e1597eff9c258bd7a658fed6">TreeMonitor</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#b7032463a55bd7d196d1fefde47f0238">solver</a>, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size,
<a name="l00163"></a>00163               <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; filename_tree, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; filename_visualizer);
<a name="l00164"></a>00164 
<a name="l00165"></a>00165   <a class="code" href="classoperations__research_1_1TreeMonitor.html#11c7b9c6e1597eff9c258bd7a658fed6">TreeMonitor</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#b7032463a55bd7d196d1fefde47f0238">solver</a>, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size,
<a name="l00166"></a>00166               <span class="keywordtype">string</span>* <span class="keyword">const</span> tree_xml, <span class="keywordtype">string</span>* <span class="keyword">const</span> visualization_xml);
<a name="l00167"></a>00167 
<a name="l00168"></a>00168   <a class="code" href="classoperations__research_1_1TreeMonitor.html#11c7b9c6e1597eff9c258bd7a658fed6">TreeMonitor</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#b7032463a55bd7d196d1fefde47f0238">solver</a>, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size,
<a name="l00169"></a>00169               <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; filename_config, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; filename_tree,
<a name="l00170"></a>00170               <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; filename_visualizer);
<a name="l00171"></a>00171 
<a name="l00172"></a>00172   <a class="code" href="classoperations__research_1_1TreeMonitor.html#11c7b9c6e1597eff9c258bd7a658fed6">TreeMonitor</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#b7032463a55bd7d196d1fefde47f0238">solver</a>, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size,
<a name="l00173"></a>00173               <span class="keywordtype">string</span>* <span class="keyword">const</span> config_xml, <span class="keywordtype">string</span>* <span class="keyword">const</span> tree_xml,
<a name="l00174"></a>00174               <span class="keywordtype">string</span>* <span class="keyword">const</span> visualization_xml);
<a name="l00175"></a>00175 
<a name="l00176"></a>00176   <a class="code" href="classoperations__research_1_1TreeMonitor.html#cbbb58e83e48e52247ae019d2f064576">~TreeMonitor</a>();
<a name="l00177"></a>00177 
<a name="l00178"></a>00178   <span class="comment">// Callback for the beginning of the search.</span>
<a name="l00179"></a>00179   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#61f2ecec8df3a6f2b9d77a56456a48d0" title="Callback for the beginning of the search.">EnterSearch</a>();
<a name="l00180"></a>00180 
<a name="l00181"></a>00181   <span class="comment">// Callback called after each decision, but before any variables are changed.</span>
<a name="l00182"></a>00182   <span class="comment">// The decision is empty if a solution has been reached.</span>
<a name="l00183"></a>00183   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#8a3e4ec4f8d84dd03ddbfdfeab4e3279" title="Callback called after each decision, but before any variables are changed.">EndNextDecision</a>(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> decision_builder,
<a name="l00184"></a>00184                                <a class="code" href="classoperations__research_1_1Decision.html" title="A Decision represents a choice point in the search tree.">Decision</a>* <span class="keyword">const</span> decision);
<a name="l00185"></a>00185   <span class="comment">// Callback for the end of the search.</span>
<a name="l00186"></a>00186   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#86d8eb3640a01804aa199c80c2b60705" title="Callback for the end of the search.">ExitSearch</a>();
<a name="l00187"></a>00187 
<a name="l00188"></a>00188   <span class="comment">// Returns the XML of the current tree.</span>
<a name="l00189"></a>00189   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#a6a1c30c9d37a61e538c5e33963f0d6c" title="Returns the XML of the current tree.">DebugString</a>() <span class="keyword">const</span>;
<a name="l00190"></a>00190 
<a name="l00191"></a>00191   <span class="comment">// Generates and returns the Tree XML file for CPVIZ.</span>
<a name="l00192"></a>00192   <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#5ab67c20c35f6ca66cce2558db5298db" title="Generates and returns the Tree XML file for CPVIZ.">GenerateTreeXML</a>() <span class="keyword">const</span>;
<a name="l00193"></a>00193 
<a name="l00194"></a>00194   <span class="comment">// Generates and returns the Visualization XML file for CPVIZ.</span>
<a name="l00195"></a>00195   <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#ef399c48be3b4d3d4ba1ae62f52345a7" title="Generates and returns the Visualization XML file for CPVIZ.">GenerateVisualizationXML</a>() <span class="keyword">const</span>;
<a name="l00196"></a>00196 
<a name="l00197"></a>00197   <span class="comment">// Callback called to indicate that the solver goes up one level in the</span>
<a name="l00198"></a>00198   <span class="comment">// search tree. This is also used to restart the search at a parent node</span>
<a name="l00199"></a>00199   <span class="comment">// after a solution is found.</span>
<a name="l00200"></a>00200   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#f08b68d74f5b867fa1ecda2a9df404eb" title="Callback called to indicate that the solver goes up one level in the search tree...">RefuteDecision</a>(<a class="code" href="classoperations__research_1_1Decision.html" title="A Decision represents a choice point in the search tree.">Decision</a>* <span class="keyword">const</span> decision);
<a name="l00201"></a>00201 
<a name="l00202"></a>00202   <span class="comment">// Strips characters that cause problems with CPViz from attributes</span>
<a name="l00203"></a>00203   <span class="keyword">static</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#66225732ee88be44d287efa9c013b269" title="Strips characters that cause problems with CPViz from attributes.">StripSpecialCharacters</a>(<span class="keywordtype">string</span> attribute);
<a name="l00204"></a>00204 
<a name="l00205"></a>00205  <span class="keyword">private</span>:
<a name="l00206"></a>00206   <span class="comment">// Registers vars and sets Min and Max accordingly.</span>
<a name="l00207"></a>00207   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#5feedd3cbaa9bf347c7dae91ec36d99f" title="Registers vars and sets Min and Max accordingly.">Init</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size);
<a name="l00208"></a>00208 
<a name="l00209"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#60859e964b15b496e286f57a73192128">00209</a>   <span class="keywordtype">string</span>* <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#60859e964b15b496e286f57a73192128">config_xml_</a>;
<a name="l00210"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#6e15385c62d9098225887cf2601aa1db">00210</a>   <a class="code" href="classoperations__research_1_1TreeNode.html" title="Represents a node in the decision phase.">TreeNode</a>* <a class="code" href="classoperations__research_1_1TreeMonitor.html#6e15385c62d9098225887cf2601aa1db">current_node_</a>;
<a name="l00211"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#3327745d588722af83aa61af17c62095">00211</a>   <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#3327745d588722af83aa61af17c62095">filename_config_</a>;
<a name="l00212"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#56a488fc3a4649ffc7efb8d15b23b573">00212</a>   <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#56a488fc3a4649ffc7efb8d15b23b573">filename_tree_</a>;
<a name="l00213"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#5738362e12fd84c39069c3bf97e8ffd9">00213</a>   <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#5738362e12fd84c39069c3bf97e8ffd9">filename_visualizer_</a>;
<a name="l00214"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#8e0d1a9062efa79e891f5944bdaf39bd">00214</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#8e0d1a9062efa79e891f5944bdaf39bd">id_counter_</a>;
<a name="l00215"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#aab3790d89019872b22e449794835c5a">00215</a>   <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#aab3790d89019872b22e449794835c5a">last_decision_</a>;
<a name="l00216"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#ab85173cc4f57987446ce76cc3c81cb7">00216</a>   hash_map&lt;string, int64&gt; <a class="code" href="classoperations__research_1_1TreeMonitor.html#ab85173cc4f57987446ce76cc3c81cb7">last_value_</a>;
<a name="l00217"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#c871258a05f3fd44170b3b6e151d8118">00217</a>   <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#c871258a05f3fd44170b3b6e151d8118">last_variable_</a>;
<a name="l00218"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#c327f76bbbc4e2111e944f9c7c76bca4">00218</a>   int64 <a class="code" href="classoperations__research_1_1TreeMonitor.html#c327f76bbbc4e2111e944f9c7c76bca4">min_</a>;
<a name="l00219"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#51f041f4bb7e69f5adaa8714597d10ce">00219</a>   int64 <a class="code" href="classoperations__research_1_1TreeMonitor.html#51f041f4bb7e69f5adaa8714597d10ce">max_</a>;
<a name="l00220"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#7fc1ad22391a8479ab9c854a2d6ffa76">00220</a>   scoped_ptr&lt;TreeNode&gt; <a class="code" href="classoperations__research_1_1TreeMonitor.html#7fc1ad22391a8479ab9c854a2d6ffa76">root_node_</a>;
<a name="l00221"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#d5bd4f320f274ca226030ff701484724">00221</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#d5bd4f320f274ca226030ff701484724">search_level_</a>;
<a name="l00222"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#f99e22f8b4d46befdf8579f09616ca4e">00222</a>   <span class="keywordtype">string</span>* <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#f99e22f8b4d46befdf8579f09616ca4e">tree_xml_</a>;
<a name="l00223"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#a2458afa8098509b1371976252154bf7">00223</a>   <a class="code" href="classoperations__research_1_1TreeMonitor.html#bcc7c05d45fa95c657ea463a90d56b97">IntVarMap</a> <a class="code" href="classoperations__research_1_1TreeMonitor.html#a2458afa8098509b1371976252154bf7">vars_</a>;
<a name="l00224"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#0baeca759ce4772fdc7d29890947827d">00224</a>   <span class="keywordtype">string</span>* <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#0baeca759ce4772fdc7d29890947827d">visualization_xml_</a>;
<a name="l00225"></a>00225 };
<a name="l00226"></a>00226 
<a name="l00227"></a><a class="code" href="classoperations__research_1_1Solver.html#e4e6bfdb966317f7a7c4123f1df05fb7">00227</a> <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <a class="code" href="classoperations__research_1_1Solver.html#e4e6bfdb966317f7a7c4123f1df05fb7" title="Tree Monitor Creates a tree monitor that outputs a detailed overview of the decision...">Solver::MakeTreeMonitor</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size,
<a name="l00228"></a>00228                                        <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file_tree,
<a name="l00229"></a>00229                                        <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file_visualization) {
<a name="l00230"></a>00230   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html" title="The TreeMonitor may be attached to a search to obtain an output in CPViz format (http://sourceforge...">TreeMonitor</a>(<span class="keyword">this</span>, vars, size, file_tree,
<a name="l00231"></a>00231                                   file_visualization));
<a name="l00232"></a>00232 }
<a name="l00233"></a>00233 
<a name="l00234"></a><a class="code" href="classoperations__research_1_1Solver.html#6ae92ef6b64bd0e89554705f9d2d690a">00234</a> <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* Solver::MakeTreeMonitor(<span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars,
<a name="l00235"></a>00235                                        <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file_tree,
<a name="l00236"></a>00236                                        <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file_visualization) {
<a name="l00237"></a>00237   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html" title="The TreeMonitor may be attached to a search to obtain an output in CPViz format (http://sourceforge...">TreeMonitor</a>(<span class="keyword">this</span>, vars.data(), vars.size(), file_tree,
<a name="l00238"></a>00238                                   file_visualization));
<a name="l00239"></a>00239 }
<a name="l00240"></a>00240 
<a name="l00241"></a><a class="code" href="classoperations__research_1_1Solver.html#bea22168d2368d03c7e298b88dcfed5e">00241</a> <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <a class="code" href="classoperations__research_1_1Solver.html#e4e6bfdb966317f7a7c4123f1df05fb7" title="Tree Monitor Creates a tree monitor that outputs a detailed overview of the decision...">Solver::MakeTreeMonitor</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size,
<a name="l00242"></a>00242                                        <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file_config,
<a name="l00243"></a>00243                                        <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file_tree,
<a name="l00244"></a>00244                                        <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file_visualization) {
<a name="l00245"></a>00245   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html" title="The TreeMonitor may be attached to a search to obtain an output in CPViz format (http://sourceforge...">TreeMonitor</a>(<span class="keyword">this</span>, vars, size, file_config, file_tree,
<a name="l00246"></a>00246                                   file_visualization));
<a name="l00247"></a>00247 }
<a name="l00248"></a>00248 
<a name="l00249"></a><a class="code" href="classoperations__research_1_1Solver.html#d38ee3bfa92a82f8f3c068203bf36301">00249</a> <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <a class="code" href="classoperations__research_1_1Solver.html#e4e6bfdb966317f7a7c4123f1df05fb7" title="Tree Monitor Creates a tree monitor that outputs a detailed overview of the decision...">Solver::MakeTreeMonitor</a>(<span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars,
<a name="l00250"></a>00250                                        <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file_config,
<a name="l00251"></a>00251                                        <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file_tree,
<a name="l00252"></a>00252                                        <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; file_visualization) {
<a name="l00253"></a>00253   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html" title="The TreeMonitor may be attached to a search to obtain an output in CPViz format (http://sourceforge...">TreeMonitor</a>(<span class="keyword">this</span>, vars.data(), vars.size(), file_config,
<a name="l00254"></a>00254                                   file_tree, file_visualization));
<a name="l00255"></a>00255 }
<a name="l00256"></a>00256 
<a name="l00257"></a>00257 <span class="preprocessor">#if !defined(SWIG)</span>
<a name="l00258"></a><a class="code" href="classoperations__research_1_1Solver.html#d263136583ec1970527a061712eecaa3">00258</a> <span class="preprocessor"></span><a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <a class="code" href="classoperations__research_1_1Solver.html#e4e6bfdb966317f7a7c4123f1df05fb7" title="Tree Monitor Creates a tree monitor that outputs a detailed overview of the decision...">Solver::MakeTreeMonitor</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars,
<a name="l00259"></a>00259                                        <span class="keywordtype">int</span> size, <span class="keywordtype">string</span>* <span class="keyword">const</span> tree_xml,
<a name="l00260"></a>00260                                        <span class="keywordtype">string</span>* <span class="keyword">const</span> visualization_xml) {
<a name="l00261"></a>00261   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html" title="The TreeMonitor may be attached to a search to obtain an output in CPViz format (http://sourceforge...">TreeMonitor</a>(<span class="keyword">this</span>, vars, size, tree_xml,
<a name="l00262"></a>00262                                   visualization_xml));
<a name="l00263"></a>00263 }
<a name="l00264"></a>00264 
<a name="l00265"></a><a class="code" href="classoperations__research_1_1Solver.html#fd8eaefbb3473a22d84d5ef7162ea1fe">00265</a> <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <a class="code" href="classoperations__research_1_1Solver.html#e4e6bfdb966317f7a7c4123f1df05fb7" title="Tree Monitor Creates a tree monitor that outputs a detailed overview of the decision...">Solver::MakeTreeMonitor</a>(<span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars,
<a name="l00266"></a>00266                                        <span class="keywordtype">string</span>* <span class="keyword">const</span> tree_xml,
<a name="l00267"></a>00267                                        <span class="keywordtype">string</span>* <span class="keyword">const</span> visualization_xml) {
<a name="l00268"></a>00268   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html" title="The TreeMonitor may be attached to a search to obtain an output in CPViz format (http://sourceforge...">TreeMonitor</a>(<span class="keyword">this</span>, vars.data(), vars.size(), tree_xml,
<a name="l00269"></a>00269                                   visualization_xml));
<a name="l00270"></a>00270 }
<a name="l00271"></a>00271 
<a name="l00272"></a><a class="code" href="classoperations__research_1_1Solver.html#1372d347ab732d47d9ce71658ca90a98">00272</a> <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <a class="code" href="classoperations__research_1_1Solver.html#e4e6bfdb966317f7a7c4123f1df05fb7" title="Tree Monitor Creates a tree monitor that outputs a detailed overview of the decision...">Solver::MakeTreeMonitor</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars,
<a name="l00273"></a>00273                                        <span class="keywordtype">int</span> size, <span class="keywordtype">string</span>* <span class="keyword">const</span> config_xml,
<a name="l00274"></a>00274                                        <span class="keywordtype">string</span>* <span class="keyword">const</span> tree_xml,
<a name="l00275"></a>00275                                        <span class="keywordtype">string</span>* <span class="keyword">const</span> visualization_xml) {
<a name="l00276"></a>00276   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html" title="The TreeMonitor may be attached to a search to obtain an output in CPViz format (http://sourceforge...">TreeMonitor</a>(<span class="keyword">this</span>, vars, size, config_xml, tree_xml,
<a name="l00277"></a>00277                                   visualization_xml));
<a name="l00278"></a>00278 }
<a name="l00279"></a>00279 
<a name="l00280"></a><a class="code" href="classoperations__research_1_1Solver.html#c4e4218119679ff26972e4eb638d5e1a">00280</a> <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <a class="code" href="classoperations__research_1_1Solver.html#e4e6bfdb966317f7a7c4123f1df05fb7" title="Tree Monitor Creates a tree monitor that outputs a detailed overview of the decision...">Solver::MakeTreeMonitor</a>(<span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars,
<a name="l00281"></a>00281                                        <span class="keywordtype">string</span>* <span class="keyword">const</span> config_xml,
<a name="l00282"></a>00282                                        <span class="keywordtype">string</span>* <span class="keyword">const</span> tree_xml,
<a name="l00283"></a>00283                                        <span class="keywordtype">string</span>* <span class="keyword">const</span> visualization_xml) {
<a name="l00284"></a>00284   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html" title="The TreeMonitor may be attached to a search to obtain an output in CPViz format (http://sourceforge...">TreeMonitor</a>(<span class="keyword">this</span>, vars.data(), vars.size(), config_xml,
<a name="l00285"></a>00285                                   tree_xml, visualization_xml));
<a name="l00286"></a>00286 }
<a name="l00287"></a>00287 <span class="preprocessor">#endif</span>
<a name="l00288"></a>00288 <span class="preprocessor"></span>
<a name="l00289"></a>00289 <span class="comment">// Represents a node in the decision phase. Can either be the root node, a</span>
<a name="l00290"></a>00290 <span class="comment">// successful attempt, a failure or a solution.</span>
<a name="l00291"></a><a class="code" href="classoperations__research_1_1TreeNode.html">00291</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1TreeNode.html" title="Represents a node in the decision phase.">TreeNode</a> {
<a name="l00292"></a>00292  <span class="keyword">public</span>:
<a name="l00293"></a><a class="code" href="classoperations__research_1_1TreeNode.html#7d9b2954bab695b842a88af7cca0dc21">00293</a>   <span class="keyword">typedef</span> std::map&lt;string, vector&lt;int64&gt;, <a class="code" href="structoperations__research_1_1NaturalLess.html" title="String comparator that compares strings naturally, even those including integer numbers...">NaturalLess</a>&gt; DomainMap;
<a name="l00294"></a><a class="code" href="classoperations__research_1_1TreeNode.html#202e25c08c0885c945b47bdf2e2d5974e5415eb13e4d0a98f56bf6eb4504dec7">00294</a>   <span class="keyword">enum</span> <a class="code" href="classoperations__research_1_1TreeNode.html#202e25c08c0885c945b47bdf2e2d5974">TreeNodeType</a> { ROOT, TRY, FAIL, SOLUTION };
<a name="l00295"></a>00295 
<a name="l00296"></a><a class="code" href="classoperations__research_1_1TreeNode.html#e01b5466a0e75197549983023c55af79">00296</a>   <a class="code" href="classoperations__research_1_1TreeNode.html" title="Represents a node in the decision phase.">TreeNode</a>(<a class="code" href="classoperations__research_1_1TreeNode.html" title="Represents a node in the decision phase.">TreeNode</a>* parent, <span class="keywordtype">int</span> <span class="keywordtype">id</span>)
<a name="l00297"></a>00297     : cycles_(1),
<a name="l00298"></a>00298       id_(id),
<a name="l00299"></a>00299       <a class="code" href="classoperations__research_1_1Solver.html#faebeb8ee443693c7abe3e83d25097cf">name_</a>(<span class="stringliteral">""</span>),
<a name="l00300"></a>00300       node_type_(TRY),
<a name="l00301"></a>00301       parent_(parent) {}
<a name="l00302"></a>00302 
<a name="l00303"></a><a class="code" href="classoperations__research_1_1TreeNode.html#f39a16bbe10069da537a951154e45729">00303</a>   ~<a class="code" href="classoperations__research_1_1TreeNode.html" title="Represents a node in the decision phase.">TreeNode</a>() {
<a name="l00304"></a>00304     STLDeleteElements(&amp;children_);
<a name="l00305"></a>00305   }
<a name="l00306"></a>00306 
<a name="l00307"></a>00307   <span class="comment">// Gets the value of a decision's branch.</span>
<a name="l00308"></a><a class="code" href="classoperations__research_1_1TreeNode.html#ad44a2205680e5cfa687244bcfe7849e">00308</a>   int64 branch_value(<span class="keywordtype">int</span> branch)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> branch_values_[branch]; }
<a name="l00309"></a>00309 
<a name="l00310"></a>00310   <span class="comment">// Returns a pointer to the domain of all variables.</span>
<a name="l00311"></a><a class="code" href="classoperations__research_1_1TreeNode.html#51badae76b93c174647859643abc2b7c">00311</a>   <span class="keyword">const</span> DomainMap&amp; domain()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> domain_; }
<a name="l00312"></a>00312 
<a name="l00313"></a>00313   <span class="comment">// Sets the domain for all variables.</span>
<a name="l00314"></a><a class="code" href="classoperations__research_1_1TreeNode.html#a0118406946896ff596a4e6631037ccc">00314</a>   <span class="keywordtype">void</span> SetDomain(<a class="code" href="classoperations__research_1_1TreeMonitor.html#bcc7c05d45fa95c657ea463a90d56b97">TreeMonitor::IntVarMap</a> <span class="keyword">const</span>&amp; vars) {
<a name="l00315"></a>00315     domain_.clear();
<a name="l00316"></a>00316 
<a name="l00317"></a>00317     <span class="keywordflow">for</span> (ConstIter&lt;TreeMonitor::IntVarMap&gt; it(vars); !it.at_end(); ++it) {
<a name="l00318"></a>00318       vector&lt;int64&gt; domain;
<a name="l00319"></a>00319 
<a name="l00320"></a>00320       scoped_ptr&lt;IntVarIterator&gt; intvar_it(
<a name="l00321"></a>00321           it-&gt;second-&gt;MakeDomainIterator(<span class="keyword">false</span>));
<a name="l00322"></a>00322 
<a name="l00323"></a>00323       <span class="keywordflow">for</span> (intvar_it-&gt;Init(); intvar_it-&gt;Ok(); intvar_it-&gt;Next()) {
<a name="l00324"></a>00324         domain.push_back(intvar_it-&gt;Value());
<a name="l00325"></a>00325       }
<a name="l00326"></a>00326 
<a name="l00327"></a>00327       domain_[it-&gt;first] = domain;
<a name="l00328"></a>00328     }
<a name="l00329"></a>00329   }
<a name="l00330"></a>00330 
<a name="l00331"></a>00331   <span class="comment">// Sets the domain for all variables.</span>
<a name="l00332"></a><a class="code" href="classoperations__research_1_1TreeNode.html#f389c46a280373df7650b460644d11a6">00332</a>   <span class="keywordtype">void</span> SetDomain(DomainMap <span class="keyword">const</span>&amp; domain) { domain_ = domain; }
<a name="l00333"></a>00333 
<a name="l00334"></a>00334   <span class="comment">// Returns the ID of the current node</span>
<a name="l00335"></a><a class="code" href="classoperations__research_1_1TreeNode.html#0a8ba307a35effdef58efc1f0d141af9">00335</a>   <span class="keywordtype">int</span> id()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> id_; }
<a name="l00336"></a>00336 
<a name="l00337"></a>00337   <span class="comment">// Returns the name of the variable of the current decision.</span>
<a name="l00338"></a><a class="code" href="classoperations__research_1_1TreeNode.html#5996846dff01fd5bccfe4e523823698f">00338</a>   <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; name()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#faebeb8ee443693c7abe3e83d25097cf">name_</a>; }
<a name="l00339"></a>00339 
<a name="l00340"></a>00340   <span class="comment">// Sets the name of the variable for the current decision.</span>
<a name="l00341"></a><a class="code" href="classoperations__research_1_1TreeNode.html#5499c9089d560ab2c2dd486d2dd56a0b">00341</a>   <span class="keywordtype">void</span> set_name(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; name) { <a class="code" href="classoperations__research_1_1Solver.html#faebeb8ee443693c7abe3e83d25097cf">name_</a> = name; }
<a name="l00342"></a>00342 
<a name="l00343"></a>00343   <span class="comment">// Gets the node type.</span>
<a name="l00344"></a><a class="code" href="classoperations__research_1_1TreeNode.html#dbb10572f931bd94ee945bff8af8eed0">00344</a>   <a class="code" href="classoperations__research_1_1TreeNode.html#202e25c08c0885c945b47bdf2e2d5974">TreeNodeType</a> node_type()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> node_type_; }
<a name="l00345"></a>00345 
<a name="l00346"></a>00346   <span class="comment">// Sets the node type.</span>
<a name="l00347"></a><a class="code" href="classoperations__research_1_1TreeNode.html#5ea6f585686e7719d1b4dd35fff0c96e">00347</a>   <span class="keywordtype">void</span> set_node_type(<a class="code" href="classoperations__research_1_1TreeNode.html#202e25c08c0885c945b47bdf2e2d5974">TreeNodeType</a> node_type) { node_type_ = node_type; }
<a name="l00348"></a>00348 
<a name="l00349"></a>00349   <span class="comment">// Returns the parent node or NULL if node has no parent.</span>
<a name="l00350"></a><a class="code" href="classoperations__research_1_1TreeNode.html#65d60c84e5ff6f40f9258087a6483e76">00350</a>   <a class="code" href="classoperations__research_1_1TreeNode.html" title="Represents a node in the decision phase.">TreeNode</a>* Parent() {
<a name="l00351"></a>00351     <span class="keywordflow">return</span> --cycles_ ? <span class="keyword">this</span> : parent_;
<a name="l00352"></a>00352   }
<a name="l00353"></a>00353 
<a name="l00354"></a>00354   <span class="comment">// Adds a cycle instead of duplicate nodes.</span>
<a name="l00355"></a><a class="code" href="classoperations__research_1_1TreeNode.html#764c2c14c8db35ee0523b9eb90af0a0d">00355</a>   <span class="keywordtype">void</span> AddCycle() {
<a name="l00356"></a>00356     cycles_++;
<a name="l00357"></a>00357   }
<a name="l00358"></a>00358 
<a name="l00359"></a>00359   <span class="comment">// Adds a new child, initializes it and returns the corresponding pointer.</span>
<a name="l00360"></a><a class="code" href="classoperations__research_1_1TreeNode.html#5b4cea6052ed69b546333286458929bd">00360</a>   <span class="keywordtype">bool</span> AddChild(<span class="keywordtype">int</span> <span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; name,
<a name="l00361"></a>00361                 hash_map&lt;string, int64&gt; <span class="keyword">const</span>&amp; last_value, <span class="keywordtype">bool</span> is_final_node,
<a name="l00362"></a>00362                 <a class="code" href="classoperations__research_1_1TreeMonitor.html#bcc7c05d45fa95c657ea463a90d56b97">TreeMonitor::IntVarMap</a> <span class="keyword">const</span>&amp; vars, <a class="code" href="classoperations__research_1_1TreeNode.html" title="Represents a node in the decision phase.">TreeNode</a>** child) {
<a name="l00363"></a>00363     CHECK_NOTNULL(child);
<a name="l00364"></a>00364 
<a name="l00365"></a>00365     <span class="keywordflow">if</span> (!is_final_node) {
<a name="l00366"></a>00366       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; children_.size(); ++i) {
<a name="l00367"></a>00367         <span class="comment">// Reuse existing branch if possible</span>
<a name="l00368"></a>00368         <span class="keywordflow">if</span> (children_[i]-&gt;<a class="code" href="classoperations__research_1_1Solver.html#faebeb8ee443693c7abe3e83d25097cf">name_</a> == name &amp;&amp;
<a name="l00369"></a>00369             branch_values_[i] == FindOrDie(last_value, <a class="code" href="classoperations__research_1_1Solver.html#faebeb8ee443693c7abe3e83d25097cf">name_</a>)) {
<a name="l00370"></a>00370           children_[i]-&gt;AddCycle();
<a name="l00371"></a>00371           *child = children_[i];
<a name="l00372"></a>00372           <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00373"></a>00373         }
<a name="l00374"></a>00374       }
<a name="l00375"></a>00375     }
<a name="l00376"></a>00376 
<a name="l00377"></a>00377     <a class="code" href="classoperations__research_1_1TreeNode.html" title="Represents a node in the decision phase.">TreeNode</a>* tree_node(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1TreeNode.html" title="Represents a node in the decision phase.">TreeNode</a>(<span class="keyword">this</span>, <span class="keywordtype">id</span>));
<a name="l00378"></a>00378     tree_node-&gt;<a class="code" href="classoperations__research_1_1TreeNode.html#5499c9089d560ab2c2dd486d2dd56a0b" title="Sets the name of the variable for the current decision.">set_name</a>(name);
<a name="l00379"></a>00379     tree_node-&gt;<a class="code" href="classoperations__research_1_1TreeNode.html#a0118406946896ff596a4e6631037ccc" title="Sets the domain for all variables.">SetDomain</a>(vars);
<a name="l00380"></a>00380     children_.push_back(tree_node);
<a name="l00381"></a>00381     branch_values_.push_back(FindOrDie(last_value, <a class="code" href="classoperations__research_1_1Solver.html#faebeb8ee443693c7abe3e83d25097cf">name_</a>));
<a name="l00382"></a>00382     *child = tree_node;
<a name="l00383"></a>00383 
<a name="l00384"></a>00384     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00385"></a>00385   }
<a name="l00386"></a>00386 
<a name="l00387"></a>00387   <span class="comment">// Starting at this node, prints the complete Visualization XML for cpviz.</span>
<a name="l00388"></a><a class="code" href="classoperations__research_1_1TreeNode.html#0ad5db4ce24f6c0c033235f1e85ad673">00388</a>   <span class="keywordtype">void</span> GenerateVisualizationXML(XmlHelper* <span class="keyword">const</span> visualization_writer) {
<a name="l00389"></a>00389     CHECK_NOTNULL(visualization_writer);
<a name="l00390"></a>00390 
<a name="l00391"></a>00391     <span class="comment">// There currently is only support for one visualizer.</span>
<a name="l00392"></a>00392     <span class="keyword">const</span> <span class="keywordtype">int</span> kVisualizerState = 0;
<a name="l00393"></a>00393 
<a name="l00394"></a>00394     visualization_writer-&gt;StartElement(<span class="stringliteral">"state"</span>);
<a name="l00395"></a>00395     visualization_writer-&gt;AddAttribute(<span class="stringliteral">"id"</span>, id_);
<a name="l00396"></a>00396     visualization_writer-&gt;AddAttribute(<span class="stringliteral">"tree_node"</span>, id_);
<a name="l00397"></a>00397     visualization_writer-&gt;StartElement(<span class="stringliteral">"visualizer_state"</span>);
<a name="l00398"></a>00398     visualization_writer-&gt;AddAttribute(<span class="stringliteral">"id"</span>, kVisualizerState);
<a name="l00399"></a>00399 
<a name="l00400"></a>00400     <span class="keywordtype">int</span> index = 0;
<a name="l00401"></a>00401     <span class="keywordtype">int</span> name = -1;
<a name="l00402"></a>00402 
<a name="l00403"></a>00403     <span class="keywordflow">for</span> (ConstIter&lt;DomainMap&gt; it(domain_); !it.at_end(); ++it) {
<a name="l00404"></a>00404       vector&lt;int64&gt; current = it-&gt;second;
<a name="l00405"></a>00405       visualization_writer-&gt;StartElement(current.size() == 1 ?
<a name="l00406"></a>00406                                          <span class="stringliteral">"integer"</span> :
<a name="l00407"></a>00407                                          <span class="stringliteral">"dvar"</span>);
<a name="l00408"></a>00408       visualization_writer-&gt;AddAttribute(<span class="stringliteral">"index"</span>, ++index);
<a name="l00409"></a>00409 
<a name="l00410"></a>00410       <span class="keywordflow">if</span> (it-&gt;first == <a class="code" href="classoperations__research_1_1Solver.html#faebeb8ee443693c7abe3e83d25097cf">name_</a>) {
<a name="l00411"></a>00411         name = index;
<a name="l00412"></a>00412       }
<a name="l00413"></a>00413 
<a name="l00414"></a>00414       <span class="keywordflow">if</span> (current.size() &gt; 1
<a name="l00415"></a>00415           &amp;&amp; current.size() == (current.back() - current[0] + 1)) {
<a name="l00416"></a>00416         <span class="comment">// Use %d .. %d format.</span>
<a name="l00417"></a>00417         visualization_writer-&gt;AddAttribute(
<a name="l00418"></a>00418             <span class="stringliteral">"domain"</span>,
<a name="l00419"></a>00419             StringPrintf(<span class="stringliteral">"%"</span> GG_LL_FORMAT <span class="stringliteral">"d .. %"</span> GG_LL_FORMAT <span class="stringliteral">"d"</span>,
<a name="l00420"></a>00420                          current[0], current.back()));
<a name="l00421"></a>00421       } <span class="keywordflow">else</span> {
<a name="l00422"></a>00422         <span class="comment">// Use list of integers</span>
<a name="l00423"></a>00423         <span class="keywordtype">string</span> domain;
<a name="l00424"></a>00424 
<a name="l00425"></a>00425         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; current.size(); ++j) {
<a name="l00426"></a>00426           StringAppendF(&amp;domain, <span class="stringliteral">" %"</span> GG_LL_FORMAT <span class="stringliteral">"d"</span>, current[j]);
<a name="l00427"></a>00427         }
<a name="l00428"></a>00428 
<a name="l00429"></a>00429         visualization_writer-&gt;AddAttribute(current.size() == 1 ?
<a name="l00430"></a>00430                                            <span class="stringliteral">"value"</span> :
<a name="l00431"></a>00431                                            <span class="stringliteral">"domain"</span>, domain.substr(1));
<a name="l00432"></a>00432       }
<a name="l00433"></a>00433 
<a name="l00434"></a>00434       visualization_writer-&gt;EndElement();  <span class="comment">// dvar or integer</span>
<a name="l00435"></a>00435     }
<a name="l00436"></a>00436 
<a name="l00437"></a>00437     <span class="keywordflow">if</span> (node_type_ == FAIL) {
<a name="l00438"></a>00438       visualization_writer-&gt;StartElement(<span class="stringliteral">"failed"</span>);
<a name="l00439"></a>00439       visualization_writer-&gt;AddAttribute(<span class="stringliteral">"index"</span>, name);
<a name="l00440"></a>00440       visualization_writer-&gt;AddAttribute(
<a name="l00441"></a>00441           <span class="stringliteral">"value"</span>,
<a name="l00442"></a>00442           StringPrintf(<span class="stringliteral">"%"</span> GG_LL_FORMAT <span class="stringliteral">"d"</span>, parent_-&gt;branch_value(0)));
<a name="l00443"></a>00443       visualization_writer-&gt;EndElement();  <span class="comment">// failed</span>
<a name="l00444"></a>00444     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (node_type_ == TRY) {
<a name="l00445"></a>00445       visualization_writer-&gt;StartElement(<span class="stringliteral">"focus"</span>);
<a name="l00446"></a>00446       visualization_writer-&gt;AddAttribute(<span class="stringliteral">"index"</span>, name);
<a name="l00447"></a>00447       visualization_writer-&gt;EndElement();  <span class="comment">// focus</span>
<a name="l00448"></a>00448     }
<a name="l00449"></a>00449 
<a name="l00450"></a>00450     visualization_writer-&gt;EndElement();  <span class="comment">// visualizer_state</span>
<a name="l00451"></a>00451     visualization_writer-&gt;EndElement();  <span class="comment">// state</span>
<a name="l00452"></a>00452 
<a name="l00453"></a>00453     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; children_.size(); ++i) {
<a name="l00454"></a>00454       children_[i]-&gt;GenerateVisualizationXML(visualization_writer);
<a name="l00455"></a>00455     }
<a name="l00456"></a>00456   }
<a name="l00457"></a>00457 
<a name="l00458"></a>00458   <span class="comment">// Starting at this node, prints the complete Tree XML for cpviz.</span>
<a name="l00459"></a><a class="code" href="classoperations__research_1_1TreeNode.html#1f004994b7574467f1989457468d063f">00459</a>   <span class="keywordtype">void</span> GenerateTreeXML(XmlHelper* <span class="keyword">const</span> tree_writer) {
<a name="l00460"></a>00460     CHECK_NOTNULL(tree_writer);
<a name="l00461"></a>00461 
<a name="l00462"></a>00462     <span class="comment">// The solution element is preceeded by a try element.</span>
<a name="l00463"></a>00463     <span class="keyword">const</span> <span class="keywordtype">char</span>* kElementName[] = { <span class="stringliteral">"root"</span>, <span class="stringliteral">"try"</span>, <span class="stringliteral">"fail"</span>, <span class="stringliteral">"try"</span> };
<a name="l00464"></a>00464 
<a name="l00465"></a>00465     <span class="keywordflow">if</span> (node_type_ == ROOT) {
<a name="l00466"></a>00466       tree_writer-&gt;StartElement(kElementName[node_type_]);
<a name="l00467"></a>00467       tree_writer-&gt;AddAttribute(<span class="stringliteral">"id"</span>, id_);
<a name="l00468"></a>00468       tree_writer-&gt;EndElement();
<a name="l00469"></a>00469     }
<a name="l00470"></a>00470 
<a name="l00471"></a>00471     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; children_.size(); ++i) {
<a name="l00472"></a>00472       <a class="code" href="classoperations__research_1_1TreeNode.html" title="Represents a node in the decision phase.">TreeNode</a>* child = children_[i];
<a name="l00473"></a>00473       tree_writer-&gt;StartElement(kElementName[child-&gt;<a class="code" href="classoperations__research_1_1TreeNode.html#477cc8207fb4be25ef9ab058705aa400">node_type_</a>]);
<a name="l00474"></a>00474       tree_writer-&gt;AddAttribute(<span class="stringliteral">"id"</span>, child-&gt;<a class="code" href="classoperations__research_1_1TreeNode.html#c16908ace529172ddd2e00487042ab17">id_</a>);
<a name="l00475"></a>00475       tree_writer-&gt;AddAttribute(<span class="stringliteral">"parent"</span>, id_);
<a name="l00476"></a>00476       tree_writer-&gt;AddAttribute(<span class="stringliteral">"name"</span>,
<a name="l00477"></a>00477                                 <a class="code" href="classoperations__research_1_1TreeMonitor.html#66225732ee88be44d287efa9c013b269" title="Strips characters that cause problems with CPViz from attributes.">TreeMonitor::StripSpecialCharacters</a>(<a class="code" href="classoperations__research_1_1Solver.html#faebeb8ee443693c7abe3e83d25097cf">name_</a>));
<a name="l00478"></a>00478 
<a name="l00479"></a>00479       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1Solver.html#faebeb8ee443693c7abe3e83d25097cf">name_</a>.empty()) {
<a name="l00480"></a>00480         tree_writer-&gt;AddAttribute(<span class="stringliteral">"size"</span>, <span class="stringliteral">"0"</span>);
<a name="l00481"></a>00481         tree_writer-&gt;AddAttribute(<span class="stringliteral">"value"</span>, <span class="stringliteral">"0"</span>);
<a name="l00482"></a>00482       } <span class="keywordflow">else</span> {
<a name="l00483"></a>00483         <span class="comment">// Use the original size of the first child if available</span>
<a name="l00484"></a>00484         <span class="keyword">const</span> DomainMap&amp; domain = parent_ &amp;&amp; parent_-&gt;children_.size() ?
<a name="l00485"></a>00485             parent_-&gt;children_[0]-&gt;domain() :
<a name="l00486"></a>00486             domain_;
<a name="l00487"></a>00487 
<a name="l00488"></a>00488         <span class="keyword">const</span> vector&lt;int64&gt;* <span class="keyword">const</span> domain_values = FindOrNull(domain, <a class="code" href="classoperations__research_1_1Solver.html#faebeb8ee443693c7abe3e83d25097cf">name_</a>);
<a name="l00489"></a>00489         <span class="keywordflow">if</span> (domain_values) {
<a name="l00490"></a>00490           tree_writer-&gt;AddAttribute(<span class="stringliteral">"size"</span>,
<a name="l00491"></a>00491                                     StringPrintf(<span class="stringliteral">"%zu"</span>, domain_values-&gt;size()));
<a name="l00492"></a>00492         } <span class="keywordflow">else</span> {
<a name="l00493"></a>00493           tree_writer-&gt;AddAttribute(<span class="stringliteral">"size"</span>, <span class="stringliteral">"unknown"</span>);
<a name="l00494"></a>00494         }
<a name="l00495"></a>00495         tree_writer-&gt;AddAttribute(<span class="stringliteral">"value"</span>, StringPrintf(<span class="stringliteral">"%"</span> GG_LL_FORMAT <span class="stringliteral">"d"</span>,
<a name="l00496"></a>00496                                                         branch_values_[i]));
<a name="l00497"></a>00497       }
<a name="l00498"></a>00498 
<a name="l00499"></a>00499       tree_writer-&gt;EndElement();
<a name="l00500"></a>00500 
<a name="l00501"></a>00501       <span class="keywordflow">if</span> (child-&gt;<a class="code" href="classoperations__research_1_1TreeNode.html#477cc8207fb4be25ef9ab058705aa400">node_type_</a> == SOLUTION) {
<a name="l00502"></a>00502         <span class="comment">// CPVIZ requires an additional node to indicate success.</span>
<a name="l00503"></a>00503         tree_writer-&gt;StartElement(<span class="stringliteral">"succ"</span>);
<a name="l00504"></a>00504         tree_writer-&gt;AddAttribute(<span class="stringliteral">"id"</span>, child-&gt;<a class="code" href="classoperations__research_1_1TreeNode.html#c16908ace529172ddd2e00487042ab17">id_</a>);
<a name="l00505"></a>00505         tree_writer-&gt;EndElement();
<a name="l00506"></a>00506       }
<a name="l00507"></a>00507 
<a name="l00508"></a>00508       children_[i]-&gt;GenerateTreeXML(tree_writer);
<a name="l00509"></a>00509     }
<a name="l00510"></a>00510   }
<a name="l00511"></a>00511 
<a name="l00512"></a>00512  <span class="keyword">private</span>:
<a name="l00513"></a><a class="code" href="classoperations__research_1_1TreeNode.html#935b06295e05010fa12778eaa73c6596">00513</a>   vector&lt;int64&gt; branch_values_;
<a name="l00514"></a><a class="code" href="classoperations__research_1_1TreeNode.html#17bbf043fe1eeddb1b2a0063dd275fd5">00514</a>   vector&lt;TreeNode*&gt; children_;
<a name="l00515"></a><a class="code" href="classoperations__research_1_1TreeNode.html#b04a2383d4ad3300251d92fd38e3b39e">00515</a>   <span class="keywordtype">int</span> cycles_;
<a name="l00516"></a><a class="code" href="classoperations__research_1_1TreeNode.html#64e09895091bb33193786398d28c07a4">00516</a>   DomainMap domain_;
<a name="l00517"></a><a class="code" href="classoperations__research_1_1TreeNode.html#c16908ace529172ddd2e00487042ab17">00517</a>   <span class="keyword">const</span> <span class="keywordtype">int</span> id_;
<a name="l00518"></a><a class="code" href="classoperations__research_1_1TreeNode.html#f386949cf44d85f800bb77ce34373a73">00518</a>   <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Solver.html#faebeb8ee443693c7abe3e83d25097cf">name_</a>;
<a name="l00519"></a><a class="code" href="classoperations__research_1_1TreeNode.html#477cc8207fb4be25ef9ab058705aa400">00519</a>   <a class="code" href="classoperations__research_1_1TreeNode.html#202e25c08c0885c945b47bdf2e2d5974">TreeNodeType</a> node_type_;
<a name="l00520"></a><a class="code" href="classoperations__research_1_1TreeNode.html#3915c65586c39bbf92298e5278b018c5">00520</a>   <a class="code" href="classoperations__research_1_1TreeNode.html" title="Represents a node in the decision phase.">TreeNode</a>* <span class="keyword">const</span> parent_;
<a name="l00521"></a>00521 };
<a name="l00522"></a>00522 
<a name="l00523"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#11c7b9c6e1597eff9c258bd7a658fed6">00523</a> <a class="code" href="classoperations__research_1_1TreeMonitor.html#11c7b9c6e1597eff9c258bd7a658fed6">TreeMonitor::TreeMonitor</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> solver, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars,
<a name="l00524"></a>00524                          <span class="keywordtype">int</span> size, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; filename_tree,
<a name="l00525"></a>00525                          <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; filename_visualizer)
<a name="l00526"></a>00526     : <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>(solver),
<a name="l00527"></a>00527       config_xml_(NULL),
<a name="l00528"></a>00528       current_node_(NULL),
<a name="l00529"></a>00529       filename_config_(<span class="stringliteral">""</span>),
<a name="l00530"></a>00530       filename_tree_(filename_tree),
<a name="l00531"></a>00531       filename_visualizer_(filename_visualizer),
<a name="l00532"></a>00532       root_node_(NULL),
<a name="l00533"></a>00533       search_level_(0),
<a name="l00534"></a>00534       tree_xml_(NULL),
<a name="l00535"></a>00535       visualization_xml_(NULL) {
<a name="l00536"></a>00536   CHECK_NOTNULL(solver);
<a name="l00537"></a>00537   CHECK_NOTNULL(vars);
<a name="l00538"></a>00538 
<a name="l00539"></a>00539   <a class="code" href="classoperations__research_1_1TreeMonitor.html#5feedd3cbaa9bf347c7dae91ec36d99f" title="Registers vars and sets Min and Max accordingly.">Init</a>(vars, size);
<a name="l00540"></a>00540 }
<a name="l00541"></a>00541 
<a name="l00542"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#30332dae5e7c57add5c484f84cf71f08">00542</a> <a class="code" href="classoperations__research_1_1TreeMonitor.html#11c7b9c6e1597eff9c258bd7a658fed6">TreeMonitor::TreeMonitor</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#b7032463a55bd7d196d1fefde47f0238">solver</a>, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars,
<a name="l00543"></a>00543                          <span class="keywordtype">int</span> size, <span class="keywordtype">string</span>* <span class="keyword">const</span> tree_xml,
<a name="l00544"></a>00544                          <span class="keywordtype">string</span>* <span class="keyword">const</span> visualization_xml)
<a name="l00545"></a>00545     : <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>(solver),
<a name="l00546"></a>00546       <a class="code" href="classoperations__research_1_1TreeMonitor.html#60859e964b15b496e286f57a73192128">config_xml_</a>(NULL),
<a name="l00547"></a>00547       <a class="code" href="classoperations__research_1_1TreeMonitor.html#6e15385c62d9098225887cf2601aa1db">current_node_</a>(NULL),
<a name="l00548"></a>00548       <a class="code" href="classoperations__research_1_1TreeMonitor.html#3327745d588722af83aa61af17c62095">filename_config_</a>(<span class="stringliteral">""</span>),
<a name="l00549"></a>00549       <a class="code" href="classoperations__research_1_1TreeMonitor.html#56a488fc3a4649ffc7efb8d15b23b573">filename_tree_</a>(<span class="stringliteral">""</span>),
<a name="l00550"></a>00550       <a class="code" href="classoperations__research_1_1TreeMonitor.html#5738362e12fd84c39069c3bf97e8ffd9">filename_visualizer_</a>(<span class="stringliteral">""</span>),
<a name="l00551"></a>00551       <a class="code" href="classoperations__research_1_1TreeMonitor.html#7fc1ad22391a8479ab9c854a2d6ffa76">root_node_</a>(NULL),
<a name="l00552"></a>00552       <a class="code" href="classoperations__research_1_1TreeMonitor.html#d5bd4f320f274ca226030ff701484724">search_level_</a>(0),
<a name="l00553"></a>00553       <a class="code" href="classoperations__research_1_1TreeMonitor.html#f99e22f8b4d46befdf8579f09616ca4e">tree_xml_</a>(tree_xml),
<a name="l00554"></a>00554       <a class="code" href="classoperations__research_1_1TreeMonitor.html#0baeca759ce4772fdc7d29890947827d">visualization_xml_</a>(visualization_xml) {
<a name="l00555"></a>00555   CHECK_NOTNULL(solver);
<a name="l00556"></a>00556   CHECK_NOTNULL(vars);
<a name="l00557"></a>00557   CHECK_NOTNULL(tree_xml);
<a name="l00558"></a>00558   CHECK_NOTNULL(visualization_xml);
<a name="l00559"></a>00559 
<a name="l00560"></a>00560   <a class="code" href="classoperations__research_1_1TreeMonitor.html#5feedd3cbaa9bf347c7dae91ec36d99f" title="Registers vars and sets Min and Max accordingly.">Init</a>(vars, size);
<a name="l00561"></a>00561 }
<a name="l00562"></a>00562 
<a name="l00563"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#7a8b22dd5697a5d8862bfaa8ee306fe5">00563</a> <a class="code" href="classoperations__research_1_1TreeMonitor.html#11c7b9c6e1597eff9c258bd7a658fed6">TreeMonitor::TreeMonitor</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#b7032463a55bd7d196d1fefde47f0238">solver</a>, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars,
<a name="l00564"></a>00564                          <span class="keywordtype">int</span> size, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; filename_config,
<a name="l00565"></a>00565                          <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; filename_tree,
<a name="l00566"></a>00566                          <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; filename_visualizer)
<a name="l00567"></a>00567     : <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>(solver),
<a name="l00568"></a>00568       <a class="code" href="classoperations__research_1_1TreeMonitor.html#60859e964b15b496e286f57a73192128">config_xml_</a>(NULL),
<a name="l00569"></a>00569       <a class="code" href="classoperations__research_1_1TreeMonitor.html#6e15385c62d9098225887cf2601aa1db">current_node_</a>(NULL),
<a name="l00570"></a>00570       <a class="code" href="classoperations__research_1_1TreeMonitor.html#3327745d588722af83aa61af17c62095">filename_config_</a>(filename_config),
<a name="l00571"></a>00571       <a class="code" href="classoperations__research_1_1TreeMonitor.html#56a488fc3a4649ffc7efb8d15b23b573">filename_tree_</a>(filename_tree),
<a name="l00572"></a>00572       <a class="code" href="classoperations__research_1_1TreeMonitor.html#5738362e12fd84c39069c3bf97e8ffd9">filename_visualizer_</a>(filename_visualizer),
<a name="l00573"></a>00573       <a class="code" href="classoperations__research_1_1TreeMonitor.html#7fc1ad22391a8479ab9c854a2d6ffa76">root_node_</a>(NULL),
<a name="l00574"></a>00574       <a class="code" href="classoperations__research_1_1TreeMonitor.html#d5bd4f320f274ca226030ff701484724">search_level_</a>(0),
<a name="l00575"></a>00575       <a class="code" href="classoperations__research_1_1TreeMonitor.html#f99e22f8b4d46befdf8579f09616ca4e">tree_xml_</a>(NULL),
<a name="l00576"></a>00576       <a class="code" href="classoperations__research_1_1TreeMonitor.html#0baeca759ce4772fdc7d29890947827d">visualization_xml_</a>(NULL) {
<a name="l00577"></a>00577   CHECK_NOTNULL(solver);
<a name="l00578"></a>00578   CHECK_NOTNULL(vars);
<a name="l00579"></a>00579 
<a name="l00580"></a>00580   <a class="code" href="classoperations__research_1_1TreeMonitor.html#5feedd3cbaa9bf347c7dae91ec36d99f" title="Registers vars and sets Min and Max accordingly.">Init</a>(vars, size);
<a name="l00581"></a>00581 }
<a name="l00582"></a>00582 
<a name="l00583"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#2b2d531ec1878f176266749c7e54f018">00583</a> <a class="code" href="classoperations__research_1_1TreeMonitor.html#11c7b9c6e1597eff9c258bd7a658fed6">TreeMonitor::TreeMonitor</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#b7032463a55bd7d196d1fefde47f0238">solver</a>, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars,
<a name="l00584"></a>00584                          <span class="keywordtype">int</span> size, <span class="keywordtype">string</span>* <span class="keyword">const</span> config_xml,
<a name="l00585"></a>00585                          <span class="keywordtype">string</span>* <span class="keyword">const</span> tree_xml,
<a name="l00586"></a>00586                          <span class="keywordtype">string</span>* <span class="keyword">const</span> visualization_xml)
<a name="l00587"></a>00587     : <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>(solver),
<a name="l00588"></a>00588       <a class="code" href="classoperations__research_1_1TreeMonitor.html#60859e964b15b496e286f57a73192128">config_xml_</a>(config_xml),
<a name="l00589"></a>00589       <a class="code" href="classoperations__research_1_1TreeMonitor.html#6e15385c62d9098225887cf2601aa1db">current_node_</a>(NULL),
<a name="l00590"></a>00590       <a class="code" href="classoperations__research_1_1TreeMonitor.html#3327745d588722af83aa61af17c62095">filename_config_</a>(<span class="stringliteral">""</span>),
<a name="l00591"></a>00591       <a class="code" href="classoperations__research_1_1TreeMonitor.html#56a488fc3a4649ffc7efb8d15b23b573">filename_tree_</a>(<span class="stringliteral">""</span>),
<a name="l00592"></a>00592       <a class="code" href="classoperations__research_1_1TreeMonitor.html#5738362e12fd84c39069c3bf97e8ffd9">filename_visualizer_</a>(<span class="stringliteral">""</span>),
<a name="l00593"></a>00593       <a class="code" href="classoperations__research_1_1TreeMonitor.html#7fc1ad22391a8479ab9c854a2d6ffa76">root_node_</a>(NULL),
<a name="l00594"></a>00594       <a class="code" href="classoperations__research_1_1TreeMonitor.html#d5bd4f320f274ca226030ff701484724">search_level_</a>(0),
<a name="l00595"></a>00595       <a class="code" href="classoperations__research_1_1TreeMonitor.html#f99e22f8b4d46befdf8579f09616ca4e">tree_xml_</a>(tree_xml),
<a name="l00596"></a>00596       <a class="code" href="classoperations__research_1_1TreeMonitor.html#0baeca759ce4772fdc7d29890947827d">visualization_xml_</a>(visualization_xml) {
<a name="l00597"></a>00597   CHECK_NOTNULL(solver);
<a name="l00598"></a>00598   CHECK_NOTNULL(vars);
<a name="l00599"></a>00599   CHECK_NOTNULL(config_xml);
<a name="l00600"></a>00600   CHECK_NOTNULL(tree_xml);
<a name="l00601"></a>00601   CHECK_NOTNULL(visualization_xml);
<a name="l00602"></a>00602 
<a name="l00603"></a>00603   <a class="code" href="classoperations__research_1_1TreeMonitor.html#5feedd3cbaa9bf347c7dae91ec36d99f" title="Registers vars and sets Min and Max accordingly.">Init</a>(vars, size);
<a name="l00604"></a>00604 }
<a name="l00605"></a>00605 
<a name="l00606"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#cbbb58e83e48e52247ae019d2f064576">00606</a> <a class="code" href="classoperations__research_1_1TreeMonitor.html#cbbb58e83e48e52247ae019d2f064576">TreeMonitor::~TreeMonitor</a>() {}
<a name="l00607"></a>00607 
<a name="l00608"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#5feedd3cbaa9bf347c7dae91ec36d99f">00608</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#5feedd3cbaa9bf347c7dae91ec36d99f" title="Registers vars and sets Min and Max accordingly.">TreeMonitor::Init</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size) {
<a name="l00609"></a>00609   <a class="code" href="classoperations__research_1_1TreeMonitor.html#c327f76bbbc4e2111e944f9c7c76bca4">min_</a> = std::numeric_limits&lt;int64&gt;::max();
<a name="l00610"></a>00610   <a class="code" href="classoperations__research_1_1TreeMonitor.html#51f041f4bb7e69f5adaa8714597d10ce">max_</a> = std::numeric_limits&lt;int64&gt;::min();
<a name="l00611"></a>00611 
<a name="l00612"></a>00612   <span class="comment">// Obtain min and max information from variables.</span>
<a name="l00613"></a>00613   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {
<a name="l00614"></a>00614     <a class="code" href="classoperations__research_1_1TreeMonitor.html#c327f76bbbc4e2111e944f9c7c76bca4">min_</a> = std::min(<a class="code" href="classoperations__research_1_1TreeMonitor.html#c327f76bbbc4e2111e944f9c7c76bca4">min_</a>, vars[i]-&gt;Min());
<a name="l00615"></a>00615     <a class="code" href="classoperations__research_1_1TreeMonitor.html#51f041f4bb7e69f5adaa8714597d10ce">max_</a> = std::max(<a class="code" href="classoperations__research_1_1TreeMonitor.html#51f041f4bb7e69f5adaa8714597d10ce">max_</a>, vars[i]-&gt;Max());
<a name="l00616"></a>00616 
<a name="l00617"></a>00617     <span class="keywordtype">string</span> name = vars[i]-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#89b827a71613c6c120d5ac326202df7e" title="Naming.">name</a>();
<a name="l00618"></a>00618 
<a name="l00619"></a>00619     <span class="keywordflow">if</span> (name.empty()) {
<a name="l00620"></a>00620       name = StringPrintf(<span class="stringliteral">"%d"</span>, i);
<a name="l00621"></a>00621     }
<a name="l00622"></a>00622 
<a name="l00623"></a>00623     <a class="code" href="classoperations__research_1_1TreeMonitor.html#a2458afa8098509b1371976252154bf7">vars_</a>[name] = vars[i];
<a name="l00624"></a>00624   }
<a name="l00625"></a>00625 }
<a name="l00626"></a>00626 
<a name="l00627"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#61f2ecec8df3a6f2b9d77a56456a48d0">00627</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#61f2ecec8df3a6f2b9d77a56456a48d0" title="Callback for the beginning of the search.">TreeMonitor::EnterSearch</a>() {
<a name="l00628"></a>00628   <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1TreeMonitor.html#7fc1ad22391a8479ab9c854a2d6ffa76">root_node_</a>.get()) {
<a name="l00629"></a>00629     <a class="code" href="classoperations__research_1_1TreeMonitor.html#8e0d1a9062efa79e891f5944bdaf39bd">id_counter_</a> = 0;
<a name="l00630"></a>00630     <a class="code" href="classoperations__research_1_1TreeMonitor.html#7fc1ad22391a8479ab9c854a2d6ffa76">root_node_</a>.reset(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1TreeNode.html" title="Represents a node in the decision phase.">TreeNode</a>(NULL, <a class="code" href="classoperations__research_1_1TreeMonitor.html#8e0d1a9062efa79e891f5944bdaf39bd">id_counter_</a>++));
<a name="l00631"></a>00631     <a class="code" href="classoperations__research_1_1TreeMonitor.html#7fc1ad22391a8479ab9c854a2d6ffa76">root_node_</a>-&gt;set_node_type(<a class="code" href="classoperations__research_1_1TreeNode.html#202e25c08c0885c945b47bdf2e2d5974331d194cca139a98f0787a9bb4bc36ad">TreeNode::ROOT</a>);
<a name="l00632"></a>00632     <a class="code" href="classoperations__research_1_1TreeMonitor.html#7fc1ad22391a8479ab9c854a2d6ffa76">root_node_</a>-&gt;SetDomain(<a class="code" href="classoperations__research_1_1TreeMonitor.html#a2458afa8098509b1371976252154bf7">vars_</a>);
<a name="l00633"></a>00633     <a class="code" href="classoperations__research_1_1TreeMonitor.html#6e15385c62d9098225887cf2601aa1db">current_node_</a> = <a class="code" href="classoperations__research_1_1TreeMonitor.html#7fc1ad22391a8479ab9c854a2d6ffa76">root_node_</a>.get();
<a name="l00634"></a>00634     <a class="code" href="classoperations__research_1_1TreeMonitor.html#ab85173cc4f57987446ce76cc3c81cb7">last_value_</a>[<span class="stringliteral">""</span>] = 0;  <span class="comment">// The root node's value is always zero.</span>
<a name="l00635"></a>00635   }
<a name="l00636"></a>00636 
<a name="l00637"></a>00637   ++<a class="code" href="classoperations__research_1_1TreeMonitor.html#d5bd4f320f274ca226030ff701484724">search_level_</a>;
<a name="l00638"></a>00638 
<a name="l00639"></a>00639   VLOG(1) &lt;&lt; <span class="stringliteral">"Current search level "</span> &lt;&lt; <a class="code" href="classoperations__research_1_1TreeMonitor.html#d5bd4f320f274ca226030ff701484724">search_level_</a>;
<a name="l00640"></a>00640 }
<a name="l00641"></a>00641 
<a name="l00642"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#8a3e4ec4f8d84dd03ddbfdfeab4e3279">00642</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#8a3e4ec4f8d84dd03ddbfdfeab4e3279" title="Callback called after each decision, but before any variables are changed.">TreeMonitor::EndNextDecision</a>(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> decision_builder,
<a name="l00643"></a>00643                                   <a class="code" href="classoperations__research_1_1Decision.html" title="A Decision represents a choice point in the search tree.">Decision</a>* <span class="keyword">const</span> decision) {
<a name="l00644"></a>00644   <span class="keywordflow">if</span> (decision) {
<a name="l00645"></a>00645     <a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html" title="TreeDecisionVisitor is used to gain access to the variables and values involved in...">TreeDecisionVisitor</a> visitor;
<a name="l00646"></a>00646     decision-&gt;<a class="code" href="classoperations__research_1_1Decision.html#33b0dbb456da08b13b087b39bf689a0a" title="Visits the decision.">Accept</a>(&amp;visitor);
<a name="l00647"></a>00647 
<a name="l00648"></a>00648     <span class="keywordflow">if</span> (visitor.<a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#96393785774cc11cd7b7578a2b15c773" title="Indicates whether name and value can be called.">valid</a>()) {
<a name="l00649"></a>00649       <a class="code" href="classoperations__research_1_1TreeMonitor.html#c871258a05f3fd44170b3b6e151d8118">last_variable_</a> = visitor.<a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#54c14a2a742bd7c96feeb6787d81d763" title="Returns the name of the current variable.">name</a>();
<a name="l00650"></a>00650       <a class="code" href="classoperations__research_1_1TreeMonitor.html#ab85173cc4f57987446ce76cc3c81cb7">last_value_</a>[<a class="code" href="classoperations__research_1_1TreeMonitor.html#c871258a05f3fd44170b3b6e151d8118">last_variable_</a>] = visitor.<a class="code" href="classoperations__research_1_1TreeDecisionVisitor.html#054b58816cddd9fa816f918b3fca3f82" title="Returns the value of the current variable.">value</a>();
<a name="l00651"></a>00651     }
<a name="l00652"></a>00652   }
<a name="l00653"></a>00653 
<a name="l00654"></a>00654   <span class="keywordflow">if</span> (!decision || decision-&gt;<a class="code" href="classoperations__research_1_1Decision.html#a4e1962f036693f666f76cc3daf4524a">DebugString</a>() != <a class="code" href="classoperations__research_1_1TreeMonitor.html#aab3790d89019872b22e449794835c5a">last_decision_</a>) {
<a name="l00655"></a>00655     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1TreeMonitor.html#6e15385c62d9098225887cf2601aa1db">current_node_</a>-&gt;<a class="code" href="classoperations__research_1_1TreeNode.html#5b4cea6052ed69b546333286458929bd" title="Adds a new child, initializes it and returns the corresponding pointer.">AddChild</a>(<a class="code" href="classoperations__research_1_1TreeMonitor.html#8e0d1a9062efa79e891f5944bdaf39bd">id_counter_</a>, <a class="code" href="classoperations__research_1_1TreeMonitor.html#c871258a05f3fd44170b3b6e151d8118">last_variable_</a>, <a class="code" href="classoperations__research_1_1TreeMonitor.html#ab85173cc4f57987446ce76cc3c81cb7">last_value_</a>,
<a name="l00656"></a>00656                                 !decision , <a class="code" href="classoperations__research_1_1TreeMonitor.html#a2458afa8098509b1371976252154bf7">vars_</a>, &amp;<a class="code" href="classoperations__research_1_1TreeMonitor.html#6e15385c62d9098225887cf2601aa1db">current_node_</a>)) {
<a name="l00657"></a>00657       ++<a class="code" href="classoperations__research_1_1TreeMonitor.html#8e0d1a9062efa79e891f5944bdaf39bd">id_counter_</a>;
<a name="l00658"></a>00658     }
<a name="l00659"></a>00659   } <span class="keywordflow">else</span> {
<a name="l00660"></a>00660     <a class="code" href="classoperations__research_1_1TreeMonitor.html#6e15385c62d9098225887cf2601aa1db">current_node_</a>-&gt;<a class="code" href="classoperations__research_1_1TreeNode.html#764c2c14c8db35ee0523b9eb90af0a0d" title="Adds a cycle instead of duplicate nodes.">AddCycle</a>();
<a name="l00661"></a>00661   }
<a name="l00662"></a>00662 
<a name="l00663"></a>00663   <a class="code" href="classoperations__research_1_1TreeMonitor.html#aab3790d89019872b22e449794835c5a">last_decision_</a> = decision ? decision-&gt;<a class="code" href="classoperations__research_1_1Decision.html#a4e1962f036693f666f76cc3daf4524a">DebugString</a>() : <span class="stringliteral">""</span>;
<a name="l00664"></a>00664 
<a name="l00665"></a>00665   <span class="keywordflow">if</span> (!decision) {
<a name="l00666"></a>00666     <a class="code" href="classoperations__research_1_1TreeMonitor.html#6e15385c62d9098225887cf2601aa1db">current_node_</a>-&gt;<a class="code" href="classoperations__research_1_1TreeNode.html#5ea6f585686e7719d1b4dd35fff0c96e" title="Sets the node type.">set_node_type</a>(<a class="code" href="classoperations__research_1_1TreeNode.html#202e25c08c0885c945b47bdf2e2d59741824cf324c2163c09d4fe1d69173f86f">TreeNode::SOLUTION</a>);
<a name="l00667"></a>00667   }
<a name="l00668"></a>00668 }
<a name="l00669"></a>00669 
<a name="l00670"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#f08b68d74f5b867fa1ecda2a9df404eb">00670</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#f08b68d74f5b867fa1ecda2a9df404eb" title="Callback called to indicate that the solver goes up one level in the search tree...">TreeMonitor::RefuteDecision</a>(<a class="code" href="classoperations__research_1_1Decision.html" title="A Decision represents a choice point in the search tree.">Decision</a>* <span class="keyword">const</span> decision) {
<a name="l00671"></a>00671   <span class="comment">// Called when the solver goes up one level in the tree and undos a</span>
<a name="l00672"></a>00672   <span class="comment">// change in the tree. As we have added multiple levels for both 'fail'</span>
<a name="l00673"></a>00673   <span class="comment">// and 'success', we have to go up two levels in some cases.</span>
<a name="l00674"></a>00674   CHECK_NOTNULL(decision);
<a name="l00675"></a>00675 
<a name="l00676"></a>00676   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1TreeMonitor.html#6e15385c62d9098225887cf2601aa1db">current_node_</a>-&gt;<a class="code" href="classoperations__research_1_1TreeNode.html#dbb10572f931bd94ee945bff8af8eed0" title="Gets the node type.">node_type</a>() == <a class="code" href="classoperations__research_1_1TreeNode.html#202e25c08c0885c945b47bdf2e2d59741824cf324c2163c09d4fe1d69173f86f">TreeNode::SOLUTION</a>) {
<a name="l00677"></a>00677     <span class="comment">// Solver calls RefuteDecision even on success if it looks for</span>
<a name="l00678"></a>00678     <span class="comment">// more than one solution.</span>
<a name="l00679"></a>00679     <span class="comment">// Just go back to the previous decision.</span>
<a name="l00680"></a>00680     <a class="code" href="classoperations__research_1_1TreeMonitor.html#6e15385c62d9098225887cf2601aa1db">current_node_</a> = <a class="code" href="classoperations__research_1_1TreeMonitor.html#6e15385c62d9098225887cf2601aa1db">current_node_</a>-&gt;<a class="code" href="classoperations__research_1_1TreeNode.html#65d60c84e5ff6f40f9258087a6483e76" title="Returns the parent node or NULL if node has no parent.">Parent</a>();
<a name="l00681"></a>00681   } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1TreeMonitor.html#6e15385c62d9098225887cf2601aa1db">current_node_</a>-&gt;<a class="code" href="classoperations__research_1_1TreeNode.html#dbb10572f931bd94ee945bff8af8eed0" title="Gets the node type.">node_type</a>() == <a class="code" href="classoperations__research_1_1TreeNode.html#202e25c08c0885c945b47bdf2e2d5974e5415eb13e4d0a98f56bf6eb4504dec7">TreeNode::TRY</a>) {
<a name="l00682"></a>00682     <span class="comment">// Add an extra node in case of a failure, so we can see the failed</span>
<a name="l00683"></a>00683     <span class="comment">// decision.</span>
<a name="l00684"></a>00684     <a class="code" href="classoperations__research_1_1TreeMonitor.html#6e15385c62d9098225887cf2601aa1db">current_node_</a>-&gt;<a class="code" href="classoperations__research_1_1TreeNode.html#5ea6f585686e7719d1b4dd35fff0c96e" title="Sets the node type.">set_node_type</a>(<a class="code" href="classoperations__research_1_1TreeNode.html#202e25c08c0885c945b47bdf2e2d5974e5415eb13e4d0a98f56bf6eb4504dec7">TreeNode::TRY</a>);
<a name="l00685"></a>00685 
<a name="l00686"></a>00686     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1TreeMonitor.html#6e15385c62d9098225887cf2601aa1db">current_node_</a>-&gt;<a class="code" href="classoperations__research_1_1TreeNode.html#5b4cea6052ed69b546333286458929bd" title="Adds a new child, initializes it and returns the corresponding pointer.">AddChild</a>(<a class="code" href="classoperations__research_1_1TreeMonitor.html#8e0d1a9062efa79e891f5944bdaf39bd">id_counter_</a>, <a class="code" href="classoperations__research_1_1TreeMonitor.html#c871258a05f3fd44170b3b6e151d8118">last_variable_</a>,
<a name="l00687"></a>00687                                 <a class="code" href="classoperations__research_1_1TreeMonitor.html#ab85173cc4f57987446ce76cc3c81cb7">last_value_</a>, <span class="keyword">true</span>, <a class="code" href="classoperations__research_1_1TreeMonitor.html#a2458afa8098509b1371976252154bf7">vars_</a>, &amp;<a class="code" href="classoperations__research_1_1TreeMonitor.html#6e15385c62d9098225887cf2601aa1db">current_node_</a>)) {
<a name="l00688"></a>00688       ++<a class="code" href="classoperations__research_1_1TreeMonitor.html#8e0d1a9062efa79e891f5944bdaf39bd">id_counter_</a>;
<a name="l00689"></a>00689     }
<a name="l00690"></a>00690 
<a name="l00691"></a>00691     <a class="code" href="classoperations__research_1_1TreeMonitor.html#6e15385c62d9098225887cf2601aa1db">current_node_</a>-&gt;<a class="code" href="classoperations__research_1_1TreeNode.html#5ea6f585686e7719d1b4dd35fff0c96e" title="Sets the node type.">set_node_type</a>(<a class="code" href="classoperations__research_1_1TreeNode.html#202e25c08c0885c945b47bdf2e2d5974830ca9f7cda26682a33227de6c4b699a">TreeNode::FAIL</a>);
<a name="l00692"></a>00692     <a class="code" href="classoperations__research_1_1TreeMonitor.html#6e15385c62d9098225887cf2601aa1db">current_node_</a> = <a class="code" href="classoperations__research_1_1TreeMonitor.html#6e15385c62d9098225887cf2601aa1db">current_node_</a>-&gt;<a class="code" href="classoperations__research_1_1TreeNode.html#65d60c84e5ff6f40f9258087a6483e76" title="Returns the parent node or NULL if node has no parent.">Parent</a>();
<a name="l00693"></a>00693   }
<a name="l00694"></a>00694 
<a name="l00695"></a>00695   <a class="code" href="classoperations__research_1_1TreeMonitor.html#6e15385c62d9098225887cf2601aa1db">current_node_</a> = <a class="code" href="classoperations__research_1_1TreeMonitor.html#6e15385c62d9098225887cf2601aa1db">current_node_</a>-&gt;<a class="code" href="classoperations__research_1_1TreeNode.html#65d60c84e5ff6f40f9258087a6483e76" title="Returns the parent node or NULL if node has no parent.">Parent</a>();
<a name="l00696"></a>00696 }
<a name="l00697"></a>00697 
<a name="l00698"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#5ab67c20c35f6ca66cce2558db5298db">00698</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#5ab67c20c35f6ca66cce2558db5298db" title="Generates and returns the Tree XML file for CPVIZ.">TreeMonitor::GenerateTreeXML</a>()<span class="keyword"> const </span>{
<a name="l00699"></a>00699   XmlHelper xml_writer;
<a name="l00700"></a>00700   xml_writer.StartDocument();
<a name="l00701"></a>00701 
<a name="l00702"></a>00702   xml_writer.StartElement(<span class="stringliteral">"tree"</span>);
<a name="l00703"></a>00703   xml_writer.AddAttribute(<span class="stringliteral">"version"</span>, <span class="stringliteral">"1.0"</span>);
<a name="l00704"></a>00704   xml_writer.AddAttribute(<span class="stringliteral">"xmlns:xsi"</span>,
<a name="l00705"></a>00705                           <span class="stringliteral">"http://www.w3.org/2001/XMLSchema-instance"</span>);
<a name="l00706"></a>00706   xml_writer.AddAttribute(<span class="stringliteral">"xsi:noNamespaceSchemaLocation"</span>, <span class="stringliteral">"tree.xsd"</span>);
<a name="l00707"></a>00707 
<a name="l00708"></a>00708   <a class="code" href="classoperations__research_1_1TreeMonitor.html#7fc1ad22391a8479ab9c854a2d6ffa76">root_node_</a>-&gt;GenerateTreeXML(&amp;xml_writer);
<a name="l00709"></a>00709 
<a name="l00710"></a>00710   xml_writer.EndElement();  <span class="comment">// End of element: tree</span>
<a name="l00711"></a>00711   xml_writer.EndDocument();
<a name="l00712"></a>00712 
<a name="l00713"></a>00713   <span class="keywordflow">return</span> xml_writer.GetContent();
<a name="l00714"></a>00714 }
<a name="l00715"></a>00715 
<a name="l00716"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#ef399c48be3b4d3d4ba1ae62f52345a7">00716</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#ef399c48be3b4d3d4ba1ae62f52345a7" title="Generates and returns the Visualization XML file for CPVIZ.">TreeMonitor::GenerateVisualizationXML</a>()<span class="keyword"> const </span>{
<a name="l00717"></a>00717   XmlHelper xml_writer;
<a name="l00718"></a>00718   xml_writer.StartDocument();
<a name="l00719"></a>00719 
<a name="l00720"></a>00720   xml_writer.StartElement(<span class="stringliteral">"visualization"</span>);
<a name="l00721"></a>00721   xml_writer.AddAttribute(<span class="stringliteral">"version"</span>, <span class="stringliteral">"1.0"</span>);
<a name="l00722"></a>00722   xml_writer.AddAttribute(<span class="stringliteral">"xmlns:xsi"</span>,
<a name="l00723"></a>00723                           <span class="stringliteral">"http://www.w3.org/2001/XMLSchema-instance"</span>);
<a name="l00724"></a>00724   xml_writer.AddAttribute(<span class="stringliteral">"xsi:noNamespaceSchemaLocation"</span>, <span class="stringliteral">"visualization.xsd"</span>);
<a name="l00725"></a>00725 
<a name="l00726"></a>00726   xml_writer.StartElement(<span class="stringliteral">"visualizer"</span>);
<a name="l00727"></a>00727   xml_writer.AddAttribute(<span class="stringliteral">"id"</span>, 0);
<a name="l00728"></a>00728   xml_writer.AddAttribute(<span class="stringliteral">"type"</span>, <span class="stringliteral">"vector"</span>);
<a name="l00729"></a>00729   xml_writer.AddAttribute(<span class="stringliteral">"display"</span>, <span class="stringliteral">"expanded"</span>);
<a name="l00730"></a>00730   xml_writer.AddAttribute(<span class="stringliteral">"min"</span>, StringPrintf(<span class="stringliteral">"%"</span> GG_LL_FORMAT <span class="stringliteral">"d"</span>, <a class="code" href="classoperations__research_1_1TreeMonitor.html#c327f76bbbc4e2111e944f9c7c76bca4">min_</a>));
<a name="l00731"></a>00731   xml_writer.AddAttribute(<span class="stringliteral">"max"</span>, StringPrintf(<span class="stringliteral">"%"</span> GG_LL_FORMAT <span class="stringliteral">"d"</span>, <a class="code" href="classoperations__research_1_1TreeMonitor.html#51f041f4bb7e69f5adaa8714597d10ce">max_</a>));
<a name="l00732"></a>00732   xml_writer.AddAttribute(<span class="stringliteral">"width"</span>, StringPrintf(<span class="stringliteral">"%zd"</span>, <a class="code" href="classoperations__research_1_1TreeMonitor.html#a2458afa8098509b1371976252154bf7">vars_</a>.size()));
<a name="l00733"></a>00733   xml_writer.AddAttribute(<span class="stringliteral">"height"</span>,
<a name="l00734"></a>00734                           StringPrintf(<span class="stringliteral">"%"</span> GG_LL_FORMAT <span class="stringliteral">"d"</span>, <a class="code" href="classoperations__research_1_1TreeMonitor.html#51f041f4bb7e69f5adaa8714597d10ce">max_</a> - <a class="code" href="classoperations__research_1_1TreeMonitor.html#c327f76bbbc4e2111e944f9c7c76bca4">min_</a> + 1));
<a name="l00735"></a>00735   xml_writer.EndElement();  <span class="comment">// End of element: visualizer</span>
<a name="l00736"></a>00736 
<a name="l00737"></a>00737   <a class="code" href="classoperations__research_1_1TreeMonitor.html#7fc1ad22391a8479ab9c854a2d6ffa76">root_node_</a>-&gt;GenerateVisualizationXML(&amp;xml_writer);
<a name="l00738"></a>00738 
<a name="l00739"></a>00739   xml_writer.EndElement();  <span class="comment">// End of element: visualization</span>
<a name="l00740"></a>00740   xml_writer.EndDocument();
<a name="l00741"></a>00741 
<a name="l00742"></a>00742   <span class="keywordflow">return</span> xml_writer.GetContent();
<a name="l00743"></a>00743 }
<a name="l00744"></a>00744 
<a name="l00745"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#a6a1c30c9d37a61e538c5e33963f0d6c">00745</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#a6a1c30c9d37a61e538c5e33963f0d6c" title="Returns the XML of the current tree.">TreeMonitor::DebugString</a>()<span class="keyword"> const </span>{
<a name="l00746"></a>00746   <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"TreeMonitor:\n%s"</span>, <a class="code" href="classoperations__research_1_1TreeMonitor.html#5ab67c20c35f6ca66cce2558db5298db" title="Generates and returns the Tree XML file for CPVIZ.">GenerateTreeXML</a>().c_str());
<a name="l00747"></a>00747 }
<a name="l00748"></a>00748 
<a name="l00749"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#86d8eb3640a01804aa199c80c2b60705">00749</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#86d8eb3640a01804aa199c80c2b60705" title="Callback for the end of the search.">TreeMonitor::ExitSearch</a>() {
<a name="l00750"></a>00750   --<a class="code" href="classoperations__research_1_1TreeMonitor.html#d5bd4f320f274ca226030ff701484724">search_level_</a>;
<a name="l00751"></a>00751 
<a name="l00752"></a>00752   VLOG(1) &lt;&lt; <span class="stringliteral">"Current search level "</span> &lt;&lt; <a class="code" href="classoperations__research_1_1TreeMonitor.html#d5bd4f320f274ca226030ff701484724">search_level_</a>;
<a name="l00753"></a>00753 
<a name="l00754"></a>00754   <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1TreeMonitor.html#d5bd4f320f274ca226030ff701484724">search_level_</a>) {
<a name="l00755"></a>00755     <span class="comment">// If search has compeleted and a filename is specified, automatically</span>
<a name="l00756"></a>00756     <span class="comment">// output the XML to these files.</span>
<a name="l00757"></a>00757     <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1TreeMonitor.html#56a488fc3a4649ffc7efb8d15b23b573">filename_tree_</a>.empty()) {
<a name="l00758"></a>00758       std::ofstream file_tree_(<a class="code" href="classoperations__research_1_1TreeMonitor.html#56a488fc3a4649ffc7efb8d15b23b573">filename_tree_</a>.c_str());
<a name="l00759"></a>00759 
<a name="l00760"></a>00760       <span class="keywordflow">if</span> (file_tree_.is_open()) {
<a name="l00761"></a>00761         file_tree_ &lt;&lt; <a class="code" href="classoperations__research_1_1TreeMonitor.html#5ab67c20c35f6ca66cce2558db5298db" title="Generates and returns the Tree XML file for CPVIZ.">GenerateTreeXML</a>().c_str();
<a name="l00762"></a>00762         file_tree_.close();
<a name="l00763"></a>00763       } <span class="keywordflow">else</span> {
<a name="l00764"></a>00764         LG &lt;&lt; <span class="stringliteral">"Failed to gain write access to file: "</span> &lt;&lt; <a class="code" href="classoperations__research_1_1TreeMonitor.html#56a488fc3a4649ffc7efb8d15b23b573">filename_tree_</a>;
<a name="l00765"></a>00765       }
<a name="l00766"></a>00766 
<a name="l00767"></a>00767       std::ofstream file_visualizer_(<a class="code" href="classoperations__research_1_1TreeMonitor.html#5738362e12fd84c39069c3bf97e8ffd9">filename_visualizer_</a>.c_str());
<a name="l00768"></a>00768 
<a name="l00769"></a>00769       <span class="keywordflow">if</span> (file_visualizer_.is_open()) {
<a name="l00770"></a>00770         file_visualizer_ &lt;&lt; <a class="code" href="classoperations__research_1_1TreeMonitor.html#ef399c48be3b4d3d4ba1ae62f52345a7" title="Generates and returns the Visualization XML file for CPVIZ.">GenerateVisualizationXML</a>().c_str();
<a name="l00771"></a>00771         file_visualizer_.close();
<a name="l00772"></a>00772       } <span class="keywordflow">else</span> {
<a name="l00773"></a>00773         LG &lt;&lt; <span class="stringliteral">"Failed to gain write access to file: "</span> &lt;&lt; <a class="code" href="classoperations__research_1_1TreeMonitor.html#56a488fc3a4649ffc7efb8d15b23b573">filename_tree_</a>;
<a name="l00774"></a>00774       }
<a name="l00775"></a>00775 
<a name="l00776"></a>00776       <span class="keywordflow">if</span>(!<a class="code" href="classoperations__research_1_1TreeMonitor.html#3327745d588722af83aa61af17c62095">filename_config_</a>.empty()) {
<a name="l00777"></a>00777         std::ofstream file_config_(<a class="code" href="classoperations__research_1_1TreeMonitor.html#3327745d588722af83aa61af17c62095">filename_config_</a>.c_str());
<a name="l00778"></a>00778 
<a name="l00779"></a>00779         <span class="keywordflow">if</span> (file_config_.is_open()) {
<a name="l00780"></a>00780           file_config_ &lt;&lt; <a class="code" href="namespaceoperations__research.html#71bc61e635aa6ccca17128f87c1cd200">kConfigXml</a>;
<a name="l00781"></a>00781           file_config_.close();
<a name="l00782"></a>00782         } <span class="keywordflow">else</span> {
<a name="l00783"></a>00783           LG &lt;&lt; <span class="stringliteral">"Failed to gain write access to file: "</span> &lt;&lt; <a class="code" href="classoperations__research_1_1TreeMonitor.html#3327745d588722af83aa61af17c62095">filename_config_</a>;
<a name="l00784"></a>00784         }
<a name="l00785"></a>00785       }
<a name="l00786"></a>00786     } <span class="keywordflow">else</span> {
<a name="l00787"></a>00787       CHECK_NOTNULL(<a class="code" href="classoperations__research_1_1TreeMonitor.html#f99e22f8b4d46befdf8579f09616ca4e">tree_xml_</a>);
<a name="l00788"></a>00788       *<a class="code" href="classoperations__research_1_1TreeMonitor.html#f99e22f8b4d46befdf8579f09616ca4e">tree_xml_</a> = <a class="code" href="classoperations__research_1_1TreeMonitor.html#5ab67c20c35f6ca66cce2558db5298db" title="Generates and returns the Tree XML file for CPVIZ.">GenerateTreeXML</a>();
<a name="l00789"></a>00789 
<a name="l00790"></a>00790       CHECK_NOTNULL(<a class="code" href="classoperations__research_1_1TreeMonitor.html#0baeca759ce4772fdc7d29890947827d">visualization_xml_</a>);
<a name="l00791"></a>00791       *<a class="code" href="classoperations__research_1_1TreeMonitor.html#0baeca759ce4772fdc7d29890947827d">visualization_xml_</a> = <a class="code" href="classoperations__research_1_1TreeMonitor.html#ef399c48be3b4d3d4ba1ae62f52345a7" title="Generates and returns the Visualization XML file for CPVIZ.">GenerateVisualizationXML</a>();
<a name="l00792"></a>00792 
<a name="l00793"></a>00793       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1TreeMonitor.html#60859e964b15b496e286f57a73192128">config_xml_</a>) {
<a name="l00794"></a>00794         *<a class="code" href="classoperations__research_1_1TreeMonitor.html#60859e964b15b496e286f57a73192128">config_xml_</a> = <a class="code" href="namespaceoperations__research.html#71bc61e635aa6ccca17128f87c1cd200">kConfigXml</a>;
<a name="l00795"></a>00795       }
<a name="l00796"></a>00796     }
<a name="l00797"></a>00797   }
<a name="l00798"></a>00798 }
<a name="l00799"></a>00799 
<a name="l00800"></a><a class="code" href="classoperations__research_1_1TreeMonitor.html#66225732ee88be44d287efa9c013b269">00800</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1TreeMonitor.html#66225732ee88be44d287efa9c013b269" title="Strips characters that cause problems with CPViz from attributes.">TreeMonitor::StripSpecialCharacters</a>(<span class="keywordtype">string</span> attribute) {
<a name="l00801"></a>00801   <span class="comment">// Numbers, characters, dashes, underscored, brackets, colons, slashes,</span>
<a name="l00802"></a>00802   <span class="comment">// periods, question marks, and parentheses are allowed</span>
<a name="l00803"></a>00803   <span class="keyword">const</span> <span class="keywordtype">char</span>* kAllowedCharacters = <span class="stringliteral">"0123456789abcdefghijklmnopqrstuvwxyz"</span>
<a name="l00804"></a>00804                                    <span class="stringliteral">"ABCDEFGHIJKLMNOPQRSTUVWXYZ_-[]:/.?()"</span>;
<a name="l00805"></a>00805 
<a name="l00806"></a>00806   set&lt;char&gt; character_set;
<a name="l00807"></a>00807 
<a name="l00808"></a>00808   <span class="keywordtype">char</span>* allowed = <span class="keyword">const_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(kAllowedCharacters);
<a name="l00809"></a>00809 
<a name="l00810"></a>00810   <span class="keywordflow">while</span> (*allowed) {
<a name="l00811"></a>00811     character_set.insert(*(allowed++));
<a name="l00812"></a>00812   }
<a name="l00813"></a>00813 
<a name="l00814"></a>00814   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; attribute.length(); ++i) {
<a name="l00815"></a>00815     <span class="keywordflow">if</span> (character_set.find(attribute[i]) == character_set.end()) {
<a name="l00816"></a>00816       attribute.replace(i,1,<span class="stringliteral">"_"</span>);
<a name="l00817"></a>00817     }
<a name="l00818"></a>00818   }
<a name="l00819"></a>00819 
<a name="l00820"></a>00820   <span class="keywordflow">return</span> attribute;
<a name="l00821"></a>00821 }
<a name="l00822"></a>00822 }  <span class="comment">// namespace</span>
</pre></div></div>

  <!-- Start of footer. -->
  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <tr valign=top>
      <td colspan=2 height=10></td>
    </tr>
    <tr valign=top>
      <td colspan=2 bgcolor=#389613 height=3></td>
    </tr>
  </table>

  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br />

  
  </body>
</html>
