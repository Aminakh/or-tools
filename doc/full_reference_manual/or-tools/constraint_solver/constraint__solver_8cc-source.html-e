<!-- Good morning, Mr. Phelps. -->
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
    <title>google3/constraint_solver/constraint_solver.cc Source File - Doxy</title>
    <link rel="shortcut icon" href="../../favicon.ico">
    <!-- Both stylesheets are supplied by Doxygen, with maybe minor tweaks from Google. -->
    <link href="../../doxygen.css" rel="stylesheet" type="text/css">
    <link href="../../tabs.css" rel="stylesheet" type="text/css">
  </head>

  <body topmargin=0 leftmargin=20 bottommargin=0 rightmargin=20 marginwidth=20 marginheight=0>
  <!-- Second part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
  <style>
    a.doxy_logo:hover {
      background-color: #389613
    }
  </style>

  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <!-- Top horizontal line with the color of the day. -->
    <tr valign=top>
      <td colspan=3 bgcolor=#389613 height=3></td>
    </tr>

    <!-- Header row with the links at the right. -->
    <tr valign=top>
      <td colspan=3 align=right>
        <font size=-1>
          Generated on: <font color=#389613><b>Fri Apr  1 14:13:18 PDT 2011</b></font>
            for <b>custom file set</b>
        </font>
      </td>
    </tr>

    <!-- Header row with the logo and the search form. -->
    <tr valign=top>
      <!-- Logo. -->
      <td align=left width=150>
        <table width=150 height=54 cellpadding=0 cellspacing=0 border=0>
          <tr valign=top>
            <!-- First part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
            <td bgcolor=#389613>
              <a class="doxy_logo" href="../../index.html"><img src="../../doxy_logo.png" alt="Doxy" border=0></a>
            </td>
          </tr>
        </table>
      </td>
    </tr>

    <!-- Tiny vertical space below the form. -->
    <tr valign=top>
      <td colspan=3 height=3></td>
    </tr>
  </table>

  <!-- Header navigation row. -->
  <div class="memproto">
    <table width=100% cellpadding=0 cellspacing=0 border=0>
      <tr>
        <td align=left style="padding-left: 20px"><font size=+1><b><tt><font color=#333333>//
            <a href="../../index.html"><font color=#389613>doxy</font></a>/</font>
            <a href="../../google3/index.html">google3</a>/
            <a href="../../google3/constraint_solver/index.html">constraint_solver</a>/
            </tt></b></font>
        </td>
      </tr>
    </table>
  </div>
  <br />
    <!-- No subdirs found. -->
  <!-- End of header. -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>google3/constraint_solver/constraint_solver.cc</h1><a href="constraint__solver_8cc.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright 2010 Google</span>
<a name="l00002"></a>00002 <span class="comment">// Licensed under the Apache License, Version 2.0 (the "License");</span>
<a name="l00003"></a>00003 <span class="comment">// you may not use this file except in compliance with the License.</span>
<a name="l00004"></a>00004 <span class="comment">// You may obtain a copy of the License at</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">//     http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Unless required by applicable law or agreed to in writing, software</span>
<a name="l00009"></a>00009 <span class="comment">// distributed under the License is distributed on an "AS IS" BASIS,</span>
<a name="l00010"></a>00010 <span class="comment">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00011"></a>00011 <span class="comment">// See the License for the specific language governing permissions and</span>
<a name="l00012"></a>00012 <span class="comment">// limitations under the License.</span>
<a name="l00013"></a>00013 <span class="comment">//</span>
<a name="l00014"></a>00014 <span class="comment">// This file implements the core objects of the constraint solver:</span>
<a name="l00015"></a>00015 <span class="comment">// Solver, Search, Queue, ... along with the main resolution loop.</span>
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 <span class="preprocessor">#include "<a class="code" href="constraint__solver_8h.html">constraint_solver/constraint_solver.h</a>"</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#include &lt;setjmp.h&gt;</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;deque&gt;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="preprocessor">#include "base/callback.h"</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include "base/commandlineflags.h"</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include "base/integral_types.h"</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include "base/logging.h"</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include "base/macros.h"</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include "base/scoped_ptr.h"</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include "base/stringprintf.h"</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include "zlib.h"</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include "base/stringpiece.h"</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include "base/map-util.h"</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include "<a class="code" href="constraint__solveri_8h.html">constraint_solver/constraint_solveri.h</a>"</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <a class="code" href="constraint__solver_8cc.html#719402189437f220cea9507e5677fb6b" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_bool</a>(cp_trace_demons, <span class="keyword">false</span>, <span class="stringliteral">"trace all demon executions"</span>);
<a name="l00037"></a>00037 <a class="code" href="constraint__solver_8cc.html#719402189437f220cea9507e5677fb6b" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_bool</a>(cp_show_constraints, <span class="keyword">false</span>,
<a name="l00038"></a>00038             <span class="stringliteral">"show all constraints added to the solver"</span>);
<a name="l00039"></a>00039 
<a name="l00040"></a><a class="code" href="constraint__solver_8cc.html#8268f656ace2e508d905bcd6acff2679">00040</a> <span class="keywordtype">void</span> <a class="code" href="constraint__solver_8cc.html#8268f656ace2e508d905bcd6acff2679">ConstraintSolverFailHere</a>() {
<a name="l00041"></a>00041   VLOG(3) &lt;&lt; <span class="stringliteral">"Fail"</span>;
<a name="l00042"></a>00042 }
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="preprocessor">#if defined(_MSC_VER)  // WINDOWS</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span><span class="preprocessor">#pragma warning(disable : 4351 4355)</span>
<a name="l00046"></a>00046 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span>
<a name="l00048"></a>00048 <span class="keyword">namespace </span>operations_research {
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 <span class="comment">// ----- Forward Declarations -----</span>
<a name="l00051"></a>00051 <span class="keyword">extern</span> DemonMonitor* <a class="code" href="namespaceoperations__research.html#4f23ca3c2d6b448b3e6f1fa078d6ff88" title="Forward Declarations.">BuildDemonMonitor</a>(<a class="code" href="structoperations__research_1_1SolverParameters.html#bb1b746ad99155bea2d44ba46db07187">SolverParameters::ProfileLevel</a> level);
<a name="l00052"></a>00052 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="namespaceoperations__research.html#c7e3e4722c51d781636e24d843c0e542">DeleteDemonMonitor</a>(DemonMonitor* <span class="keyword">const</span> monitor);
<a name="l00053"></a>00053 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="namespaceoperations__research.html#b5240e8c0ba682f97baea46641082c70">DemonMonitorStartInitialPropagation</a>(
<a name="l00054"></a>00054     DemonMonitor* <span class="keyword">const</span> monitor, <span class="keyword">const</span> Constraint* <span class="keyword">const</span> constraint);
<a name="l00055"></a>00055 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="namespaceoperations__research.html#aa11d663f99a1dda5d5228aaf3014602">DemonMonitorEndInitialPropagation</a>(
<a name="l00056"></a>00056     DemonMonitor* <span class="keyword">const</span> monitor, <span class="keyword">const</span> Constraint* <span class="keyword">const</span> constraint);
<a name="l00057"></a>00057 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="namespaceoperations__research.html#2d60edc96e40e663962f32ffa4685ec6">DemonMonitorRestartSearch</a>(DemonMonitor* <span class="keyword">const</span> monitor);
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="comment">// ------------------ Demon class ----------------</span>
<a name="l00061"></a>00061 
<a name="l00062"></a><a class="code" href="classoperations__research_1_1Demon.html#b7daa02f7052c9a43c64561c9d291605">00062</a> <a class="code" href="classoperations__research_1_1Solver.html#4b0972c731faf884eba5acab99ebb2b4">Solver::DemonPriority</a> <a class="code" href="classoperations__research_1_1Demon.html#b7daa02f7052c9a43c64561c9d291605" title="This method returns the priority of the demon.">Demon::priority</a>()<span class="keyword"> const </span>{
<a name="l00063"></a>00063   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#4b0972c731faf884eba5acab99ebb2b44f432957a8b27277538d5ee856201a4c">Solver::NORMAL_PRIORITY</a>;
<a name="l00064"></a>00064 }
<a name="l00065"></a>00065 
<a name="l00066"></a><a class="code" href="classoperations__research_1_1Demon.html#d426e69437928dfa0096525369aead1c">00066</a> <span class="keywordtype">string</span> Demon::DebugString()<span class="keyword"> const </span>{
<a name="l00067"></a>00067   <span class="keywordflow">return</span> <span class="stringliteral">"Demon"</span>;
<a name="l00068"></a>00068 }
<a name="l00069"></a>00069 
<a name="l00070"></a><a class="code" href="classoperations__research_1_1Demon.html#4e51b1b49f9a937b335cd9381f95614d">00070</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Demon.html#4e51b1b49f9a937b335cd9381f95614d" title="This method inhibits the demon in the search tree below the current position.">Demon::inhibit</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s) {
<a name="l00071"></a>00071   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1Demon.html#03f4d521aaeb25183bd6d55ad7c97d89">stamp_</a> &lt; kuint64max) {
<a name="l00072"></a>00072     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1Demon.html#03f4d521aaeb25183bd6d55ad7c97d89">stamp_</a>, kuint64max);
<a name="l00073"></a>00073   }
<a name="l00074"></a>00074 }
<a name="l00075"></a>00075 
<a name="l00076"></a><a class="code" href="classoperations__research_1_1Demon.html#e63a7d849eb2b518ac708c736c670f9c">00076</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Demon.html#e63a7d849eb2b518ac708c736c670f9c" title="This method un-inhibit the demon that was inhibited.">Demon::desinhibit</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s) {
<a name="l00077"></a>00077   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1Demon.html#03f4d521aaeb25183bd6d55ad7c97d89">stamp_</a> == kuint64max) {
<a name="l00078"></a>00078     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1Demon.html#03f4d521aaeb25183bd6d55ad7c97d89">stamp_</a>, s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#f17dc31a0a12a7c6c9c09a8a8e2d94e4" title="The stamp indicates how many moves in the search tree we have performed.">stamp</a>() - 1);
<a name="l00079"></a>00079   }
<a name="l00080"></a>00080 }
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 <span class="comment">// ------------------ Action class ------------------</span>
<a name="l00083"></a>00083 
<a name="l00084"></a><a class="code" href="classoperations__research_1_1Action.html#47ea9f9072ca2eb9861b92858c38e11f">00084</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Action.html#47ea9f9072ca2eb9861b92858c38e11f" title="Action class.">Action::DebugString</a>()<span class="keyword"> const </span>{
<a name="l00085"></a>00085   <span class="keywordflow">return</span> <span class="stringliteral">"Action"</span>;
<a name="l00086"></a>00086 }
<a name="l00087"></a>00087 
<a name="l00088"></a>00088 <span class="comment">// ------------------ Queue class ------------------</span>
<a name="l00089"></a>00089 
<a name="l00090"></a><a class="code" href="classoperations__research_1_1SinglePriorityQueue.html">00090</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1SinglePriorityQueue.html" title="Queue class.">SinglePriorityQueue</a> {
<a name="l00091"></a>00091  <span class="keyword">public</span>:
<a name="l00092"></a><a class="code" href="classoperations__research_1_1SinglePriorityQueue.html#9f31f0dcd91c5001504534ffd7708dba">00092</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1SinglePriorityQueue.html" title="Queue class.">SinglePriorityQueue</a>() {}
<a name="l00093"></a>00093   <span class="keyword">virtual</span> <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* NextDemon() = 0;
<a name="l00094"></a>00094   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Enqueue(<a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* <span class="keyword">const</span> d) = 0;
<a name="l00095"></a>00095   <span class="keyword">virtual</span> <span class="keywordtype">void</span> AfterFailure() = 0;
<a name="l00096"></a>00096   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Init() = 0;
<a name="l00097"></a>00097   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Empty() <span class="keyword">const</span> = 0;
<a name="l00098"></a>00098 };
<a name="l00099"></a>00099 
<a name="l00100"></a><a class="code" href="classoperations__research_1_1FifoPriorityQueue.html">00100</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1FifoPriorityQueue.html">FifoPriorityQueue</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1SinglePriorityQueue.html" title="Queue class.">SinglePriorityQueue</a> {
<a name="l00101"></a>00101  <span class="keyword">public</span>:
<a name="l00102"></a><a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html">00102</a>   <span class="keyword">struct </span><a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html">Cell</a> {
<a name="l00103"></a><a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html#79cbc3d465aa91b6973cf0233653329b">00103</a>     <span class="keyword">explicit</span> <a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html">Cell</a>(<a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* <span class="keyword">const</span> d) : demon(d), next(NULL) {}
<a name="l00104"></a><a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html#3950be50f4b3f715f9c9d9f76030871e">00104</a>     <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* demon;
<a name="l00105"></a><a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html#a1092208e3cf5bbf3f6b38952e39e0a8">00105</a>     <a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html">Cell</a>* next;
<a name="l00106"></a>00106   };
<a name="l00107"></a>00107 
<a name="l00108"></a><a class="code" href="classoperations__research_1_1FifoPriorityQueue.html#657af24c373e0a3998eb2ea77e7323e0">00108</a>   <a class="code" href="classoperations__research_1_1FifoPriorityQueue.html">FifoPriorityQueue</a>() : first_(NULL), last_(NULL), free_cells_(NULL) {}
<a name="l00109"></a>00109 
<a name="l00110"></a><a class="code" href="classoperations__research_1_1FifoPriorityQueue.html#add08d2b184d88ffcb41674ff3e65bfe">00110</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1FifoPriorityQueue.html">FifoPriorityQueue</a>() {
<a name="l00111"></a>00111     <span class="keywordflow">while</span> (first_ != NULL) {
<a name="l00112"></a>00112       <a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html">Cell</a>* <span class="keyword">const</span> tmp = first_;
<a name="l00113"></a>00113       first_ = tmp-&gt;<a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html#a1092208e3cf5bbf3f6b38952e39e0a8">next</a>;
<a name="l00114"></a>00114       <span class="keyword">delete</span> tmp;
<a name="l00115"></a>00115     }
<a name="l00116"></a>00116     <span class="keywordflow">while</span> (free_cells_ != NULL) {
<a name="l00117"></a>00117       <a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html">Cell</a>* <span class="keyword">const</span> tmp = free_cells_;
<a name="l00118"></a>00118       free_cells_ = tmp-&gt;<a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html#a1092208e3cf5bbf3f6b38952e39e0a8">next</a>;
<a name="l00119"></a>00119       <span class="keyword">delete</span> tmp;
<a name="l00120"></a>00120     }
<a name="l00121"></a>00121   }
<a name="l00122"></a>00122 
<a name="l00123"></a><a class="code" href="classoperations__research_1_1FifoPriorityQueue.html#40ddbb8362f2a8d69b0ac1ffe7a7c1b2">00123</a>   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Empty()<span class="keyword"> const </span>{
<a name="l00124"></a>00124     <span class="keywordflow">return</span> first_ == NULL;
<a name="l00125"></a>00125   }
<a name="l00126"></a>00126 
<a name="l00127"></a><a class="code" href="classoperations__research_1_1FifoPriorityQueue.html#66e0d35def625b7e21a3712c5bf81940">00127</a>   <span class="keyword">virtual</span> <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* NextDemon() {
<a name="l00128"></a>00128     <span class="keywordflow">if</span> (first_ != NULL) {
<a name="l00129"></a>00129       DCHECK(last_ != NULL);
<a name="l00130"></a>00130       <a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html">Cell</a>* <span class="keyword">const</span> tmp_cell = first_;
<a name="l00131"></a>00131       <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* <span class="keyword">const</span> demon = tmp_cell-&gt;<a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html#3950be50f4b3f715f9c9d9f76030871e">demon</a>;
<a name="l00132"></a>00132       first_ = tmp_cell-&gt;<a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html#a1092208e3cf5bbf3f6b38952e39e0a8">next</a>;
<a name="l00133"></a>00133       <span class="keywordflow">if</span> (first_ == NULL) {
<a name="l00134"></a>00134         last_ = NULL;
<a name="l00135"></a>00135       }
<a name="l00136"></a>00136       tmp_cell-&gt;<a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html#a1092208e3cf5bbf3f6b38952e39e0a8">next</a> = free_cells_;
<a name="l00137"></a>00137       free_cells_ = tmp_cell;
<a name="l00138"></a>00138       <span class="keywordflow">return</span> demon;
<a name="l00139"></a>00139     }
<a name="l00140"></a>00140     <span class="keywordflow">return</span> NULL;
<a name="l00141"></a>00141   }
<a name="l00142"></a>00142 
<a name="l00143"></a><a class="code" href="classoperations__research_1_1FifoPriorityQueue.html#1f215d8db6936427ef3378bc548c8203">00143</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Enqueue(<a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* <span class="keyword">const</span> d) {
<a name="l00144"></a>00144     <a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html">Cell</a>* cell = free_cells_;
<a name="l00145"></a>00145     <span class="keywordflow">if</span> (cell != NULL) {
<a name="l00146"></a>00146       cell-&gt;<a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html#3950be50f4b3f715f9c9d9f76030871e">demon</a> = d;
<a name="l00147"></a>00147       free_cells_ = cell-&gt;<a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html#a1092208e3cf5bbf3f6b38952e39e0a8">next</a>;
<a name="l00148"></a>00148       cell-&gt;<a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html#a1092208e3cf5bbf3f6b38952e39e0a8">next</a> = NULL;
<a name="l00149"></a>00149     } <span class="keywordflow">else</span> {
<a name="l00150"></a>00150       cell = <span class="keyword">new</span> <a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html">Cell</a>(d);
<a name="l00151"></a>00151     }
<a name="l00152"></a>00152     <span class="keywordflow">if</span> (last_ != NULL) {
<a name="l00153"></a>00153       last_-&gt;next = cell;
<a name="l00154"></a>00154       last_ = cell;
<a name="l00155"></a>00155     } <span class="keywordflow">else</span> {
<a name="l00156"></a>00156       first_ = cell;
<a name="l00157"></a>00157       last_ = cell;
<a name="l00158"></a>00158     }
<a name="l00159"></a>00159   }
<a name="l00160"></a>00160 
<a name="l00161"></a><a class="code" href="classoperations__research_1_1FifoPriorityQueue.html#7016863b6d3506bc8287c2f5b4a87fdd">00161</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> AfterFailure() {
<a name="l00162"></a>00162     <span class="keywordflow">if</span> (first_ != NULL) {
<a name="l00163"></a>00163       last_-&gt;<a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html#a1092208e3cf5bbf3f6b38952e39e0a8">next</a> = free_cells_;
<a name="l00164"></a>00164       free_cells_ = first_;
<a name="l00165"></a>00165       first_ = NULL;
<a name="l00166"></a>00166       last_ = NULL;
<a name="l00167"></a>00167     }
<a name="l00168"></a>00168   }
<a name="l00169"></a>00169 
<a name="l00170"></a><a class="code" href="classoperations__research_1_1FifoPriorityQueue.html#7f20b6d4454fa032989681f256e08d68">00170</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Init() {}
<a name="l00171"></a>00171  <span class="keyword">private</span>:
<a name="l00172"></a><a class="code" href="classoperations__research_1_1FifoPriorityQueue.html#cccab41b96408ed03a94f078aa14709c">00172</a>   <a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html">Cell</a>* first_;
<a name="l00173"></a><a class="code" href="classoperations__research_1_1FifoPriorityQueue.html#18daed77cd524dcc57abc29c7265fde2">00173</a>   <a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html">Cell</a>* last_;
<a name="l00174"></a><a class="code" href="classoperations__research_1_1FifoPriorityQueue.html#593ec50b1e98143c0a14552d13383f7b">00174</a>   <a class="code" href="structoperations__research_1_1FifoPriorityQueue_1_1Cell.html">Cell</a>* free_cells_;
<a name="l00175"></a>00175 };
<a name="l00176"></a>00176 
<a name="l00177"></a><a class="code" href="classoperations__research_1_1Queue.html">00177</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1Queue.html">Queue</a> {
<a name="l00178"></a>00178  <span class="keyword">public</span>:
<a name="l00179"></a><a class="code" href="classoperations__research_1_1Queue.html#79c358dddeddaa821396f96cab72a07b">00179</a>   <span class="keyword">explicit</span> <a class="code" href="classoperations__research_1_1Queue.html">Queue</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s)
<a name="l00180"></a>00180       : solver_(s),
<a name="l00181"></a>00181         stamp_(1),
<a name="l00182"></a>00182         freeze_level_(0),
<a name="l00183"></a>00183         in_process_(false),
<a name="l00184"></a>00184         clear_action_(NULL),
<a name="l00185"></a>00185         in_add_(false) {
<a name="l00186"></a>00186     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1Solver.html#d4faf53cefb2c2cdb8892b978a4b93a9" title="Number of priorities for demons.">Solver::kNumPriorities</a>; ++i) {
<a name="l00187"></a>00187       containers_[i] = <span class="keyword">new</span> <a class="code" href="classoperations__research_1_1FifoPriorityQueue.html">FifoPriorityQueue</a>();
<a name="l00188"></a>00188       containers_[i]-&gt;Init();
<a name="l00189"></a>00189     }
<a name="l00190"></a>00190   }
<a name="l00191"></a>00191 
<a name="l00192"></a><a class="code" href="classoperations__research_1_1Queue.html#8701f7d8435259101fcb47741387dfd5">00192</a>   ~<a class="code" href="classoperations__research_1_1Queue.html">Queue</a>() {
<a name="l00193"></a>00193     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1Solver.html#d4faf53cefb2c2cdb8892b978a4b93a9" title="Number of priorities for demons.">Solver::kNumPriorities</a>; ++i) {
<a name="l00194"></a>00194       <span class="keyword">delete</span> containers_[i];
<a name="l00195"></a>00195       containers_[i] = NULL;
<a name="l00196"></a>00196     }
<a name="l00197"></a>00197   }
<a name="l00198"></a>00198 
<a name="l00199"></a><a class="code" href="classoperations__research_1_1Queue.html#ac21361cb6eedd26710bf86e5066ca0d">00199</a>   <span class="keywordtype">void</span> Freeze() {
<a name="l00200"></a>00200     freeze_level_++;
<a name="l00201"></a>00201     stamp_++;
<a name="l00202"></a>00202   }
<a name="l00203"></a>00203 
<a name="l00204"></a><a class="code" href="classoperations__research_1_1Queue.html#c78f07b0fe8b17af9c5575118a8f900c">00204</a>   <span class="keywordtype">void</span> Unfreeze() {
<a name="l00205"></a>00205     freeze_level_--;
<a name="l00206"></a>00206     ProcessIfUnfrozen();
<a name="l00207"></a>00207   }
<a name="l00208"></a>00208 
<a name="l00209"></a><a class="code" href="classoperations__research_1_1Queue.html#6b155e084f5237feb1ad5140911537ee">00209</a>   <span class="keywordtype">void</span> ProcessOneDemon(<a class="code" href="classoperations__research_1_1Solver.html#4b0972c731faf884eba5acab99ebb2b4">Solver::DemonPriority</a> prio) {
<a name="l00210"></a>00210     <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* <span class="keyword">const</span> demon = containers_[prio]-&gt;NextDemon();
<a name="l00211"></a>00211     <span class="comment">// A NULL demon will just be ignored</span>
<a name="l00212"></a>00212     <span class="keywordflow">if</span> (demon != NULL) {
<a name="l00213"></a>00213       <span class="keywordflow">if</span> (FLAGS_cp_trace_demons) {
<a name="l00214"></a>00214         LG &lt;&lt; <span class="stringliteral">"### Running demon ("</span> &lt;&lt; prio &lt;&lt; <span class="stringliteral">"):"</span>
<a name="l00215"></a>00215            &lt;&lt; demon-&gt;<a class="code" href="classoperations__research_1_1Demon.html#d426e69437928dfa0096525369aead1c">DebugString</a>() &lt;&lt; <span class="stringliteral">" ###"</span>;
<a name="l00216"></a>00216       }
<a name="l00217"></a>00217       demon-&gt;<a class="code" href="classoperations__research_1_1Demon.html#614b0b652e620c4c7151d86f09dead55">set_stamp</a>(stamp_ - 1);
<a name="l00218"></a>00218       DCHECK_EQ(prio, demon-&gt;<a class="code" href="classoperations__research_1_1Demon.html#b7daa02f7052c9a43c64561c9d291605" title="This method returns the priority of the demon.">priority</a>());
<a name="l00219"></a>00219       solver_-&gt;demon_runs_[prio]++;
<a name="l00220"></a>00220       demon-&gt;<a class="code" href="classoperations__research_1_1Demon.html#7d3876bb3b369f0ae115e08ce9a6dc72" title="This is the main callback of the demon.">Run</a>(solver_);
<a name="l00221"></a>00221     }
<a name="l00222"></a>00222   }
<a name="l00223"></a>00223 
<a name="l00224"></a><a class="code" href="classoperations__research_1_1Queue.html#d0529d4fa99e51d4bfd17974360cbc80">00224</a>   <span class="keywordtype">void</span> ProcessDemons() {
<a name="l00225"></a>00225     <span class="keywordflow">while</span> (!containers_[<a class="code" href="classoperations__research_1_1Solver.html#4b0972c731faf884eba5acab99ebb2b44f432957a8b27277538d5ee856201a4c">Solver::NORMAL_PRIORITY</a>]-&gt;Empty()) {
<a name="l00226"></a>00226       ProcessOneDemon(<a class="code" href="classoperations__research_1_1Solver.html#4b0972c731faf884eba5acab99ebb2b44f432957a8b27277538d5ee856201a4c">Solver::NORMAL_PRIORITY</a>);
<a name="l00227"></a>00227     }
<a name="l00228"></a>00228   }
<a name="l00229"></a>00229 
<a name="l00230"></a><a class="code" href="classoperations__research_1_1Queue.html#20418f62989173ee804f2a873c0123e2">00230</a>   <span class="keywordtype">void</span> Process() {
<a name="l00231"></a>00231     <span class="keywordflow">if</span> (!in_process_) {
<a name="l00232"></a>00232       in_process_ = <span class="keyword">true</span>;
<a name="l00233"></a>00233       <span class="keywordflow">while</span> (!containers_[<a class="code" href="classoperations__research_1_1Solver.html#4b0972c731faf884eba5acab99ebb2b4e5f79fc80ef9ae665bcd7c0e55c02aa6">Solver::VAR_PRIORITY</a>]-&gt;Empty() ||
<a name="l00234"></a>00234              !containers_[<a class="code" href="classoperations__research_1_1Solver.html#4b0972c731faf884eba5acab99ebb2b44f432957a8b27277538d5ee856201a4c">Solver::NORMAL_PRIORITY</a>]-&gt;Empty() ||
<a name="l00235"></a>00235              !containers_[<a class="code" href="classoperations__research_1_1Solver.html#4b0972c731faf884eba5acab99ebb2b4f8769149902a8a2b168069cb93cc6370">Solver::DELAYED_PRIORITY</a>]-&gt;Empty()) {
<a name="l00236"></a>00236         <span class="keywordflow">while</span> (!containers_[<a class="code" href="classoperations__research_1_1Solver.html#4b0972c731faf884eba5acab99ebb2b4e5f79fc80ef9ae665bcd7c0e55c02aa6">Solver::VAR_PRIORITY</a>]-&gt;Empty() ||
<a name="l00237"></a>00237                !containers_[<a class="code" href="classoperations__research_1_1Solver.html#4b0972c731faf884eba5acab99ebb2b44f432957a8b27277538d5ee856201a4c">Solver::NORMAL_PRIORITY</a>]-&gt;Empty()) {
<a name="l00238"></a>00238           <span class="keywordflow">while</span> (!containers_[<a class="code" href="classoperations__research_1_1Solver.html#4b0972c731faf884eba5acab99ebb2b44f432957a8b27277538d5ee856201a4c">Solver::NORMAL_PRIORITY</a>]-&gt;Empty()) {
<a name="l00239"></a>00239             ProcessOneDemon(<a class="code" href="classoperations__research_1_1Solver.html#4b0972c731faf884eba5acab99ebb2b44f432957a8b27277538d5ee856201a4c">Solver::NORMAL_PRIORITY</a>);
<a name="l00240"></a>00240           }
<a name="l00241"></a>00241           ProcessOneDemon(<a class="code" href="classoperations__research_1_1Solver.html#4b0972c731faf884eba5acab99ebb2b4e5f79fc80ef9ae665bcd7c0e55c02aa6">Solver::VAR_PRIORITY</a>);
<a name="l00242"></a>00242         }
<a name="l00243"></a>00243         ProcessOneDemon(<a class="code" href="classoperations__research_1_1Solver.html#4b0972c731faf884eba5acab99ebb2b4f8769149902a8a2b168069cb93cc6370">Solver::DELAYED_PRIORITY</a>);
<a name="l00244"></a>00244       }
<a name="l00245"></a>00245       in_process_ = <span class="keyword">false</span>;
<a name="l00246"></a>00246     }
<a name="l00247"></a>00247   }
<a name="l00248"></a>00248 
<a name="l00249"></a><a class="code" href="classoperations__research_1_1Queue.html#39f395e16b4d8634c0d8ab12389d38f2">00249</a>   <span class="keywordtype">void</span> Enqueue(<a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* <span class="keyword">const</span> demon) {
<a name="l00250"></a>00250     <span class="keywordflow">if</span> (demon-&gt;<a class="code" href="classoperations__research_1_1Demon.html#135f1e1a1e8e2901d2e095b50d439650">stamp</a>() &lt; stamp_) {
<a name="l00251"></a>00251       demon-&gt;<a class="code" href="classoperations__research_1_1Demon.html#614b0b652e620c4c7151d86f09dead55">set_stamp</a>(stamp_);
<a name="l00252"></a>00252       containers_[demon-&gt;<a class="code" href="classoperations__research_1_1Demon.html#b7daa02f7052c9a43c64561c9d291605" title="This method returns the priority of the demon.">priority</a>()]-&gt;Enqueue(demon);
<a name="l00253"></a>00253       ProcessIfUnfrozen();
<a name="l00254"></a>00254     }
<a name="l00255"></a>00255   }
<a name="l00256"></a>00256 
<a name="l00257"></a><a class="code" href="classoperations__research_1_1Queue.html#db7a60ba9dd657dff2d727017171a424">00257</a>   <span class="keywordtype">void</span> AfterFailure() {
<a name="l00258"></a>00258     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1Solver.html#d4faf53cefb2c2cdb8892b978a4b93a9" title="Number of priorities for demons.">Solver::kNumPriorities</a>; ++i) {
<a name="l00259"></a>00259       containers_[i]-&gt;AfterFailure();
<a name="l00260"></a>00260     }
<a name="l00261"></a>00261     <span class="keywordflow">if</span> (clear_action_ != NULL) {
<a name="l00262"></a>00262       clear_action_-&gt;Run(solver_);
<a name="l00263"></a>00263       clear_action_ = NULL;
<a name="l00264"></a>00264     }
<a name="l00265"></a>00265     freeze_level_ = 0;
<a name="l00266"></a>00266     in_process_ = <span class="keyword">false</span>;
<a name="l00267"></a>00267     in_add_ = <span class="keyword">false</span>;
<a name="l00268"></a>00268     to_add_.clear();
<a name="l00269"></a>00269   }
<a name="l00270"></a>00270 
<a name="l00271"></a><a class="code" href="classoperations__research_1_1Queue.html#2ec18094b92e88d27c28f196278859dd">00271</a>   <span class="keywordtype">void</span> increase_stamp() {
<a name="l00272"></a>00272     stamp_++;
<a name="l00273"></a>00273   }
<a name="l00274"></a>00274 
<a name="l00275"></a><a class="code" href="classoperations__research_1_1Queue.html#e66aadfbaaa362ce5fcab3dca3a642b6">00275</a>   uint64 stamp()<span class="keyword"> const </span>{
<a name="l00276"></a>00276     <span class="keywordflow">return</span> stamp_;
<a name="l00277"></a>00277   }
<a name="l00278"></a>00278 
<a name="l00279"></a><a class="code" href="classoperations__research_1_1Queue.html#4def4b68e3661b89aa06b319908fced0">00279</a>   <span class="keywordtype">void</span> set_action_on_fail(<a class="code" href="classoperations__research_1_1Action.html" title="An action is the base callback method.">Action</a>* <span class="keyword">const</span> a) {
<a name="l00280"></a>00280     clear_action_ = a;
<a name="l00281"></a>00281   }
<a name="l00282"></a>00282 
<a name="l00283"></a><a class="code" href="classoperations__research_1_1Queue.html#95754f9530734d72b50aa96504d6b09e">00283</a>   <span class="keywordtype">void</span> clear_action_on_fail() {
<a name="l00284"></a>00284     clear_action_ = NULL;
<a name="l00285"></a>00285   }
<a name="l00286"></a>00286 
<a name="l00287"></a><a class="code" href="classoperations__research_1_1Queue.html#7e2a23c5cb5bf7c71e45a99c3355b12b">00287</a>   <span class="keywordtype">void</span> AddConstraint(<a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <span class="keyword">const</span> c) {
<a name="l00288"></a>00288     to_add_.push_back(c);
<a name="l00289"></a>00289     ProcessConstraints();
<a name="l00290"></a>00290   }
<a name="l00291"></a>00291 
<a name="l00292"></a><a class="code" href="classoperations__research_1_1Queue.html#014c7261e4c1b40cd8d81d22e22c3e94">00292</a>   <span class="keywordtype">void</span> ProcessConstraints() {
<a name="l00293"></a>00293     <span class="keywordflow">if</span> (!in_add_) {
<a name="l00294"></a>00294       in_add_ = <span class="keyword">true</span>;
<a name="l00295"></a>00295       <span class="comment">// We cannot store to_add_.size() as constraints can add other</span>
<a name="l00296"></a>00296       <span class="comment">// constraints.</span>
<a name="l00297"></a>00297       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> counter = 0; counter &lt; to_add_.size(); ++counter) {
<a name="l00298"></a>00298         <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <span class="keyword">const</span> constraint = to_add_[counter];
<a name="l00299"></a>00299         <span class="comment">// TODO(user): Add profiling to initial propagation</span>
<a name="l00300"></a>00300         constraint-&gt;<a class="code" href="classoperations__research_1_1Constraint.html#92c3bfe86238b5c95448d4a0384a327f" title="We no longer need those.">PostAndPropagate</a>();
<a name="l00301"></a>00301       }
<a name="l00302"></a>00302       in_add_ = <span class="keyword">false</span>;
<a name="l00303"></a>00303       to_add_.clear();
<a name="l00304"></a>00304     }
<a name="l00305"></a>00305   }
<a name="l00306"></a>00306  <span class="keyword">private</span>:
<a name="l00307"></a><a class="code" href="classoperations__research_1_1Queue.html#562996aa39107c0e5ed9eb49417c7b9b">00307</a>   <span class="keywordtype">void</span> ProcessIfUnfrozen() {
<a name="l00308"></a>00308     <span class="keywordflow">if</span> (freeze_level_ == 0) {
<a name="l00309"></a>00309       Process();
<a name="l00310"></a>00310     }
<a name="l00311"></a>00311   }
<a name="l00312"></a>00312 
<a name="l00313"></a><a class="code" href="classoperations__research_1_1Queue.html#ce573fbf523219968f1f79376cbcd7bd">00313</a>   <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> solver_;
<a name="l00314"></a><a class="code" href="classoperations__research_1_1Queue.html#41ddf47fdfeae05a93468f5537916055">00314</a>   <a class="code" href="classoperations__research_1_1SinglePriorityQueue.html" title="Queue class.">SinglePriorityQueue</a>* containers_[<a class="code" href="classoperations__research_1_1Solver.html#d4faf53cefb2c2cdb8892b978a4b93a9" title="Number of priorities for demons.">Solver::kNumPriorities</a>];
<a name="l00315"></a><a class="code" href="classoperations__research_1_1Queue.html#6f9c6122da7319dca356b24fd906973b">00315</a>   uint64 stamp_;
<a name="l00316"></a>00316   <span class="comment">// The number of nested freeze levels. The queue is frozen if and only if</span>
<a name="l00317"></a>00317   <span class="comment">// freeze_level_ &gt; 0.</span>
<a name="l00318"></a><a class="code" href="classoperations__research_1_1Queue.html#9cffc0d38dcc44cbc3dcd1bbe68a98aa">00318</a>   uint32 freeze_level_;
<a name="l00319"></a><a class="code" href="classoperations__research_1_1Queue.html#9a6bf354ccd8d10b77d5e95de9a36850">00319</a>   <span class="keywordtype">bool</span> in_process_;
<a name="l00320"></a><a class="code" href="classoperations__research_1_1Queue.html#518f6da096dca6c073840f84f7ce80df">00320</a>   <a class="code" href="classoperations__research_1_1Action.html" title="An action is the base callback method.">Action</a>* clear_action_;
<a name="l00321"></a><a class="code" href="classoperations__research_1_1Queue.html#c784f63d293a26b2c1c4be9a12c5d4df">00321</a>   vector&lt;Constraint*&gt; to_add_;
<a name="l00322"></a><a class="code" href="classoperations__research_1_1Queue.html#317c4cf97bb24edb30543113eda2e937">00322</a>   <span class="keywordtype">bool</span> in_add_;
<a name="l00323"></a>00323 };
<a name="l00324"></a>00324 
<a name="l00325"></a>00325 <span class="comment">// ------------------ StateMarker / StateInfo struct -----------</span>
<a name="l00326"></a>00326 
<a name="l00327"></a><a class="code" href="structoperations__research_1_1StateInfo.html">00327</a> <span class="keyword">struct </span><a class="code" href="structoperations__research_1_1StateInfo.html" title="StateMarker / StateInfo struct.">StateInfo</a> {  <span class="comment">// This is an internal structure to store</span>
<a name="l00328"></a>00328                     <span class="comment">// additional information on the choice point.</span>
<a name="l00329"></a>00329  <span class="keyword">public</span>:
<a name="l00330"></a><a class="code" href="structoperations__research_1_1StateInfo.html#fad72143d9616d487be939548da6dff2">00330</a>   <a class="code" href="structoperations__research_1_1StateInfo.html" title="StateMarker / StateInfo struct.">StateInfo</a>() : ptr_info(NULL), int_info(0), depth(0), left_depth(0) {}
<a name="l00331"></a><a class="code" href="structoperations__research_1_1StateInfo.html#d94aa9259ee22adc0b9b1f58fa707f5f">00331</a>   <a class="code" href="structoperations__research_1_1StateInfo.html" title="StateMarker / StateInfo struct.">StateInfo</a>(<span class="keywordtype">void</span>* pinfo, <span class="keywordtype">int</span> iinfo)
<a name="l00332"></a>00332       : ptr_info(pinfo), int_info(iinfo), depth(0), left_depth(0) {}
<a name="l00333"></a><a class="code" href="structoperations__research_1_1StateInfo.html#ed5c2d0c003794c99fa76f465b447149">00333</a>   <a class="code" href="structoperations__research_1_1StateInfo.html" title="StateMarker / StateInfo struct.">StateInfo</a>(<span class="keywordtype">void</span>* pinfo, <span class="keywordtype">int</span> iinfo, <span class="keywordtype">int</span> d, <span class="keywordtype">int</span> ld)
<a name="l00334"></a>00334       : ptr_info(pinfo), int_info(iinfo), depth(d), left_depth(ld) {}
<a name="l00335"></a><a class="code" href="structoperations__research_1_1StateInfo.html#23808ad010fb33b8103e7f9713816c62">00335</a>   <span class="keywordtype">void</span>* ptr_info;
<a name="l00336"></a><a class="code" href="structoperations__research_1_1StateInfo.html#000fb6644096e817fbaaa6f0ec4d2dc7">00336</a>   <span class="keywordtype">int</span> int_info;
<a name="l00337"></a><a class="code" href="structoperations__research_1_1StateInfo.html#30afd4fe3478fb7523c1839aeae271cc">00337</a>   <span class="keywordtype">int</span> depth;
<a name="l00338"></a><a class="code" href="structoperations__research_1_1StateInfo.html#c8718ab0b1cccc16ce50235e93d6fb3e">00338</a>   <span class="keywordtype">int</span> left_depth;
<a name="l00339"></a>00339 };
<a name="l00340"></a>00340 
<a name="l00341"></a><a class="code" href="structoperations__research_1_1StateMarker.html">00341</a> <span class="keyword">struct </span><a class="code" href="structoperations__research_1_1StateMarker.html">StateMarker</a> {
<a name="l00342"></a>00342  <span class="keyword">public</span>:
<a name="l00343"></a>00343   <a class="code" href="structoperations__research_1_1StateMarker.html">StateMarker</a>(<a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e" title="This enum is used internally to tag states in the search tree.">MarkerType</a> t, <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1StateInfo.html" title="StateMarker / StateInfo struct.">StateInfo</a>&amp; info);
<a name="l00344"></a><a class="code" href="structoperations__research_1_1StateMarker.html#16432758b314f3cedad3fba81c895417">00344</a>   <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>;
<a name="l00345"></a><a class="code" href="structoperations__research_1_1StateMarker.html#3ffe707082206cf6d91b65922bafe2e2">00345</a>   <span class="keyword">friend</span> <span class="keyword">struct </span><a class="code" href="structoperations__research_1_1Trail.html">Trail</a>;
<a name="l00346"></a>00346  <span class="keyword">private</span>:
<a name="l00347"></a><a class="code" href="structoperations__research_1_1StateMarker.html#5945e8fa6615f411642c0a8f7b254e9f">00347</a>   <a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e" title="This enum is used internally to tag states in the search tree.">MarkerType</a> type_;
<a name="l00348"></a><a class="code" href="structoperations__research_1_1StateMarker.html#47e232d3c97f162917eb26a62370a3b0">00348</a>   <span class="keywordtype">int</span> rev_int_index_;
<a name="l00349"></a><a class="code" href="structoperations__research_1_1StateMarker.html#59a871b8eb960f4f605ce92ae0b0b5cb">00349</a>   <span class="keywordtype">int</span> rev_int64_index_;
<a name="l00350"></a><a class="code" href="structoperations__research_1_1StateMarker.html#98de7b131b404376d33337b01eb28031">00350</a>   <span class="keywordtype">int</span> rev_uint64_index_;
<a name="l00351"></a><a class="code" href="structoperations__research_1_1StateMarker.html#611fa35102e6366583df213d9a033ce5">00351</a>   <span class="keywordtype">int</span> rev_ptr_index_;
<a name="l00352"></a><a class="code" href="structoperations__research_1_1StateMarker.html#e15d50e63cbb570a6c5bd9b207e4fd86">00352</a>   <span class="keywordtype">int</span> rev_boolvar_list_index_;
<a name="l00353"></a><a class="code" href="structoperations__research_1_1StateMarker.html#cfe80591d75fad1f8b61d0be54f83be1">00353</a>   <span class="keywordtype">int</span> rev_bools_index_;
<a name="l00354"></a><a class="code" href="structoperations__research_1_1StateMarker.html#567759b019a07447185219b3b049a56b">00354</a>   <span class="keywordtype">int</span> rev_int_memory_index_;
<a name="l00355"></a><a class="code" href="structoperations__research_1_1StateMarker.html#3716106fcd2f164dd83d0ee3d7f48ea4">00355</a>   <span class="keywordtype">int</span> rev_int64_memory_index_;
<a name="l00356"></a><a class="code" href="structoperations__research_1_1StateMarker.html#0d2c3347f6d80cf1754b596f5c4cd3f3">00356</a>   <span class="keywordtype">int</span> rev_object_memory_index_;
<a name="l00357"></a><a class="code" href="structoperations__research_1_1StateMarker.html#b9edca8db5e3933b8343ebc6242c51b0">00357</a>   <span class="keywordtype">int</span> rev_object_array_memory_index_;
<a name="l00358"></a><a class="code" href="structoperations__research_1_1StateMarker.html#59f571a7c091f1c6613f7a3fd81e2b9f">00358</a>   <span class="keywordtype">int</span> rev_memory_index_;
<a name="l00359"></a><a class="code" href="structoperations__research_1_1StateMarker.html#7376e157224557b0ac9471eee71c2e04">00359</a>   <span class="keywordtype">int</span> rev_memory_array_index_;
<a name="l00360"></a><a class="code" href="structoperations__research_1_1StateMarker.html#a511a58fff101f893be1792b30533a99">00360</a>   <a class="code" href="structoperations__research_1_1StateInfo.html" title="StateMarker / StateInfo struct.">StateInfo</a> info_;
<a name="l00361"></a>00361 };
<a name="l00362"></a>00362 
<a name="l00363"></a><a class="code" href="structoperations__research_1_1StateMarker.html#060f5d89d9a6823461479e26f62bafd8">00363</a> <a class="code" href="structoperations__research_1_1StateMarker.html#060f5d89d9a6823461479e26f62bafd8">StateMarker::StateMarker</a>(<a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e" title="This enum is used internally to tag states in the search tree.">MarkerType</a> t, <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1StateInfo.html" title="StateMarker / StateInfo struct.">StateInfo</a>&amp; info)
<a name="l00364"></a>00364     : type_(t),
<a name="l00365"></a>00365       rev_int_index_(0),
<a name="l00366"></a>00366       rev_int64_index_(0),
<a name="l00367"></a>00367       rev_uint64_index_(0),
<a name="l00368"></a>00368       rev_ptr_index_(0),
<a name="l00369"></a>00369       rev_boolvar_list_index_(0),
<a name="l00370"></a>00370       rev_bools_index_(0),
<a name="l00371"></a>00371       rev_int_memory_index_(0),
<a name="l00372"></a>00372       rev_int64_memory_index_(0),
<a name="l00373"></a>00373       rev_object_memory_index_(0),
<a name="l00374"></a>00374       rev_object_array_memory_index_(0),
<a name="l00375"></a>00375       info_(info) {}
<a name="l00376"></a>00376 
<a name="l00377"></a>00377 <span class="comment">// ---------- Trail and Reversibility ----------</span>
<a name="l00378"></a>00378 
<a name="l00379"></a>00379 <span class="comment">// ----- addrval struct -----</span>
<a name="l00380"></a>00380 
<a name="l00381"></a>00381 <span class="comment">// This template class is used internally to implement reversibility.</span>
<a name="l00382"></a>00382 <span class="comment">// It stores an address and the value that was at the address.</span>
<a name="l00383"></a>00383 
<a name="l00384"></a><a class="code" href="structoperations__research_1_1addrval.html">00384</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">struct </span><a class="code" href="structoperations__research_1_1addrval.html" title="Trail and Reversibility.">addrval</a> {
<a name="l00385"></a>00385  <span class="keyword">public</span>:
<a name="l00386"></a><a class="code" href="structoperations__research_1_1addrval.html#d8a3f503bf45bd6a57916d7b35ee788c">00386</a>   <a class="code" href="structoperations__research_1_1addrval.html" title="Trail and Reversibility.">addrval</a>() : address_(NULL) {}
<a name="l00387"></a><a class="code" href="structoperations__research_1_1addrval.html#ee3c854ff4af840b51203e8353d22c70">00387</a>   <span class="keyword">explicit</span> <a class="code" href="structoperations__research_1_1addrval.html" title="Trail and Reversibility.">addrval</a>(T* adr) : address_(adr), old_value_(*adr) {}
<a name="l00388"></a><a class="code" href="structoperations__research_1_1addrval.html#6287fd3e48d6d8eae208a3258516442d">00388</a>   <span class="keywordtype">void</span> restore()<span class="keyword"> const </span>{ (*address_) = old_value_; }
<a name="l00389"></a>00389  <span class="keyword">private</span>:
<a name="l00390"></a><a class="code" href="structoperations__research_1_1addrval.html#62b2eac896360a66f2b84bbc3e426ce6">00390</a>   T* address_;
<a name="l00391"></a><a class="code" href="structoperations__research_1_1addrval.html#ad87d924025bc0ff7fb43fb0a4b08183">00391</a>   T old_value_;
<a name="l00392"></a>00392 };
<a name="l00393"></a>00393 
<a name="l00394"></a>00394 <span class="comment">// ----- Compressed trail -----</span>
<a name="l00395"></a>00395 
<a name="l00396"></a>00396 <span class="comment">// ---------- Trail Packer ---------</span>
<a name="l00397"></a>00397 <span class="comment">// Abstract class to pack trail blocks.</span>
<a name="l00398"></a>00398 
<a name="l00399"></a><a class="code" href="classoperations__research_1_1TrailPacker.html">00399</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class </span><a class="code" href="classoperations__research_1_1TrailPacker.html" title="Compressed trail.">TrailPacker</a> {
<a name="l00400"></a>00400  <span class="keyword">public</span>:
<a name="l00401"></a><a class="code" href="classoperations__research_1_1TrailPacker.html#f7ebd3498ff13b0cf339d506a90f0fe5">00401</a>   <span class="keyword">explicit</span> <a class="code" href="classoperations__research_1_1TrailPacker.html" title="Compressed trail.">TrailPacker</a>(<span class="keywordtype">int</span> block_size) : block_size_(block_size) {}
<a name="l00402"></a><a class="code" href="classoperations__research_1_1TrailPacker.html#58d08fb5f24f75f2330917a351930973">00402</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1TrailPacker.html" title="Compressed trail.">TrailPacker</a>() {}
<a name="l00403"></a><a class="code" href="classoperations__research_1_1TrailPacker.html#eb12e6c8fe5e6037f54da884d8f43487">00403</a>   <span class="keywordtype">int</span> input_size()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> block_size_ * <span class="keyword">sizeof</span>(<a class="code" href="structoperations__research_1_1addrval.html" title="Trail and Reversibility.">addrval&lt;T&gt;</a>); }
<a name="l00404"></a>00404   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Pack.html" title="Pack Constraint.">Pack</a>(<span class="keyword">const</span> <a class="code" href="structoperations__research_1_1addrval.html" title="Trail and Reversibility.">addrval&lt;T&gt;</a>* block, <span class="keywordtype">string</span>* packed_block) = 0;
<a name="l00405"></a>00405   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Unpack(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; packed_block, <a class="code" href="structoperations__research_1_1addrval.html" title="Trail and Reversibility.">addrval&lt;T&gt;</a>* block) = 0;
<a name="l00406"></a>00406  <span class="keyword">private</span>:
<a name="l00407"></a><a class="code" href="classoperations__research_1_1TrailPacker.html#1a8541780a59b1d58b6c99cc4c5ff29c">00407</a>   <span class="keyword">const</span> <span class="keywordtype">int</span> block_size_;
<a name="l00408"></a>00408   DISALLOW_COPY_AND_ASSIGN(<a class="code" href="classoperations__research_1_1TrailPacker.html" title="Compressed trail.">TrailPacker</a>);
<a name="l00409"></a>00409 };
<a name="l00410"></a>00410 
<a name="l00411"></a>00411 
<a name="l00412"></a><a class="code" href="classoperations__research_1_1NoCompressionTrailPacker.html">00412</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class </span><a class="code" href="classoperations__research_1_1NoCompressionTrailPacker.html">NoCompressionTrailPacker</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1TrailPacker.html" title="Compressed trail.">TrailPacker</a>&lt;T&gt; {
<a name="l00413"></a>00413  <span class="keyword">public</span>:
<a name="l00414"></a><a class="code" href="classoperations__research_1_1NoCompressionTrailPacker.html#ec95d86133bfee3269a0372b0c056c41">00414</a>   <span class="keyword">explicit</span> <a class="code" href="classoperations__research_1_1NoCompressionTrailPacker.html">NoCompressionTrailPacker</a>(<span class="keywordtype">int</span> block_size)
<a name="l00415"></a>00415       : <a class="code" href="classoperations__research_1_1TrailPacker.html" title="Compressed trail.">TrailPacker</a>&lt;T&gt;(block_size) {}
<a name="l00416"></a><a class="code" href="classoperations__research_1_1NoCompressionTrailPacker.html#69a6ccbd39d4ecf75202f692297e619d">00416</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1NoCompressionTrailPacker.html">NoCompressionTrailPacker</a>() {}
<a name="l00417"></a><a class="code" href="classoperations__research_1_1NoCompressionTrailPacker.html#3c2bffeeae39dcba87bdfe6467a84d96">00417</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Pack.html" title="Pack Constraint.">Pack</a>(<span class="keyword">const</span> <a class="code" href="structoperations__research_1_1addrval.html" title="Trail and Reversibility.">addrval&lt;T&gt;</a>* block, <span class="keywordtype">string</span>* packed_block) {
<a name="l00418"></a>00418     DCHECK(block != NULL);
<a name="l00419"></a>00419     DCHECK(packed_block != NULL);
<a name="l00420"></a>00420     StringPiece block_str;
<a name="l00421"></a>00421     block_str.set(block, this-&gt;input_size());
<a name="l00422"></a>00422     block_str.CopyToString(packed_block);
<a name="l00423"></a>00423   }
<a name="l00424"></a><a class="code" href="classoperations__research_1_1NoCompressionTrailPacker.html#97eadf6480db7812566e96b0df9ddca0">00424</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Unpack(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; packed_block, <a class="code" href="structoperations__research_1_1addrval.html" title="Trail and Reversibility.">addrval&lt;T&gt;</a>* block) {
<a name="l00425"></a>00425     DCHECK(block != NULL);
<a name="l00426"></a>00426     memcpy(block, packed_block.c_str(), packed_block.size());
<a name="l00427"></a>00427   }
<a name="l00428"></a>00428  <span class="keyword">private</span>:
<a name="l00429"></a>00429   DISALLOW_COPY_AND_ASSIGN(<a class="code" href="classoperations__research_1_1NoCompressionTrailPacker.html">NoCompressionTrailPacker&lt;T&gt;</a>);
<a name="l00430"></a>00430 };
<a name="l00431"></a>00431 
<a name="l00432"></a><a class="code" href="classoperations__research_1_1ZlibTrailPacker.html">00432</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class </span><a class="code" href="classoperations__research_1_1ZlibTrailPacker.html">ZlibTrailPacker</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1TrailPacker.html" title="Compressed trail.">TrailPacker</a>&lt;T&gt; {
<a name="l00433"></a>00433  <span class="keyword">public</span>:
<a name="l00434"></a><a class="code" href="classoperations__research_1_1ZlibTrailPacker.html#58253cdaad1ae7e5301ebc29e654f955">00434</a>   <span class="keyword">explicit</span> <a class="code" href="classoperations__research_1_1ZlibTrailPacker.html">ZlibTrailPacker</a>(<span class="keywordtype">int</span> block_size)
<a name="l00435"></a>00435       : <a class="code" href="classoperations__research_1_1TrailPacker.html" title="Compressed trail.">TrailPacker</a>&lt;T&gt;(block_size),
<a name="l00436"></a>00436         tmp_size_(compressBound(this-&gt;input_size())),
<a name="l00437"></a>00437         tmp_block_(new char[tmp_size_]) {}
<a name="l00438"></a>00438 
<a name="l00439"></a><a class="code" href="classoperations__research_1_1ZlibTrailPacker.html#cc2e6f9ec742f20487dd885f2a3f4da6">00439</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1ZlibTrailPacker.html">ZlibTrailPacker</a>() {}
<a name="l00440"></a>00440 
<a name="l00441"></a><a class="code" href="classoperations__research_1_1ZlibTrailPacker.html#4f2b6a03e364ea2dadb0e5f4b8c416db">00441</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Pack.html" title="Pack Constraint.">Pack</a>(<span class="keyword">const</span> <a class="code" href="structoperations__research_1_1addrval.html" title="Trail and Reversibility.">addrval&lt;T&gt;</a>* block, <span class="keywordtype">string</span>* packed_block) {
<a name="l00442"></a>00442     DCHECK(block != NULL);
<a name="l00443"></a>00443     DCHECK(packed_block != NULL);
<a name="l00444"></a>00444     uLongf size = tmp_size_;
<a name="l00445"></a>00445     <span class="keyword">const</span> <span class="keywordtype">int</span> result = compress(reinterpret_cast&lt;Bytef*&gt;(tmp_block_.get()),
<a name="l00446"></a>00446                                 &amp;size,
<a name="l00447"></a>00447                                 reinterpret_cast&lt;const Bytef*&gt;(block),
<a name="l00448"></a>00448                                 this-&gt;input_size());
<a name="l00449"></a>00449     CHECK_EQ(Z_OK, result);
<a name="l00450"></a>00450     StringPiece block_str;
<a name="l00451"></a>00451     block_str.set(tmp_block_.get(), size);
<a name="l00452"></a>00452     block_str.CopyToString(packed_block);
<a name="l00453"></a>00453   }
<a name="l00454"></a>00454 
<a name="l00455"></a><a class="code" href="classoperations__research_1_1ZlibTrailPacker.html#8e03c091043c80faaa684e4955e47ba6">00455</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Unpack(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; packed_block, <a class="code" href="structoperations__research_1_1addrval.html" title="Trail and Reversibility.">addrval&lt;T&gt;</a>* block) {
<a name="l00456"></a>00456     DCHECK(block != NULL);
<a name="l00457"></a>00457     uLongf size = this-&gt;input_size();
<a name="l00458"></a>00458     <span class="keyword">const</span> <span class="keywordtype">int</span> result =
<a name="l00459"></a>00459         uncompress(reinterpret_cast&lt;Bytef*&gt;(block),
<a name="l00460"></a>00460                    &amp;size,
<a name="l00461"></a>00461                    reinterpret_cast&lt;const Bytef*&gt;(packed_block.c_str()),
<a name="l00462"></a>00462                    packed_block.size());
<a name="l00463"></a>00463     CHECK_EQ(Z_OK, result);
<a name="l00464"></a>00464   }
<a name="l00465"></a>00465  <span class="keyword">private</span>:
<a name="l00466"></a><a class="code" href="classoperations__research_1_1ZlibTrailPacker.html#93734d881b5612b70d076c084d717785">00466</a>   <span class="keyword">const</span> uint64 tmp_size_;
<a name="l00467"></a><a class="code" href="classoperations__research_1_1ZlibTrailPacker.html#eb6396f80a46bb324879a8f19b27f219">00467</a>   scoped_array&lt;char&gt; tmp_block_;
<a name="l00468"></a>00468   DISALLOW_COPY_AND_ASSIGN(<a class="code" href="classoperations__research_1_1ZlibTrailPacker.html">ZlibTrailPacker&lt;T&gt;</a>);
<a name="l00469"></a>00469 };
<a name="l00470"></a>00470 
<a name="l00471"></a>00471 
<a name="l00472"></a><a class="code" href="classoperations__research_1_1CompressedTrail.html">00472</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class </span><a class="code" href="classoperations__research_1_1CompressedTrail.html">CompressedTrail</a> {
<a name="l00473"></a>00473  <span class="keyword">public</span>:
<a name="l00474"></a><a class="code" href="classoperations__research_1_1CompressedTrail.html#506cad9e05cc920d64f445b427b47917">00474</a>   <a class="code" href="classoperations__research_1_1CompressedTrail.html">CompressedTrail</a>(<span class="keywordtype">int</span> block_size,
<a name="l00475"></a>00475                   <a class="code" href="structoperations__research_1_1SolverParameters.html#63c6fe2e32ced9f83a4064c800130651">SolverParameters::TrailCompression</a> compression_level)
<a name="l00476"></a>00476       : block_size_(block_size),
<a name="l00477"></a>00477         blocks_(NULL),
<a name="l00478"></a>00478         free_blocks_(NULL),
<a name="l00479"></a>00479         data_(new <a class="code" href="structoperations__research_1_1addrval.html" title="Trail and Reversibility.">addrval</a>&lt;T&gt;[block_size]),
<a name="l00480"></a>00480         buffer_(new <a class="code" href="structoperations__research_1_1addrval.html" title="Trail and Reversibility.">addrval</a>&lt;T&gt;[block_size]),
<a name="l00481"></a>00481         buffer_used_(false),
<a name="l00482"></a>00482         current_(0),
<a name="l00483"></a>00483         size_(0) {
<a name="l00484"></a>00484     <span class="keywordflow">switch</span> (compression_level) {
<a name="l00485"></a>00485       <span class="keywordflow">case</span> <a class="code" href="structoperations__research_1_1SolverParameters.html#63c6fe2e32ced9f83a4064c80013065161440a766f50f6084eb75e9475441c9b">SolverParameters::NO_COMPRESSION</a>: {
<a name="l00486"></a>00486         packer_.reset(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1NoCompressionTrailPacker.html">NoCompressionTrailPacker&lt;T&gt;</a>(block_size));
<a name="l00487"></a>00487         <span class="keywordflow">break</span>;
<a name="l00488"></a>00488       }
<a name="l00489"></a>00489       <span class="keywordflow">case</span> <a class="code" href="structoperations__research_1_1SolverParameters.html#63c6fe2e32ced9f83a4064c800130651be0708fd20ec0a9fc653ee2d2ee2f10f">SolverParameters::COMPRESS_WITH_ZLIB</a>: {
<a name="l00490"></a>00490         packer_.reset(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1ZlibTrailPacker.html">ZlibTrailPacker&lt;T&gt;</a>(block_size));
<a name="l00491"></a>00491         <span class="keywordflow">break</span>;
<a name="l00492"></a>00492       }
<a name="l00493"></a>00493     }
<a name="l00494"></a>00494 
<a name="l00495"></a>00495     <span class="comment">// We zero all memory used by addrval arrays.</span>
<a name="l00496"></a>00496     <span class="comment">// Because of padding, all bytes may not be initialized, while compression</span>
<a name="l00497"></a>00497     <span class="comment">// will read them all, even if the uninitialized bytes are never used.</span>
<a name="l00498"></a>00498     <span class="comment">// This makes valgrind happy.</span>
<a name="l00499"></a>00499 
<a name="l00500"></a>00500     memset(data_.get(), 0, <span class="keyword">sizeof</span>(*data_.get()) * block_size);
<a name="l00501"></a>00501     memset(buffer_.get(), 0, <span class="keyword">sizeof</span>(*buffer_.get()) * block_size);
<a name="l00502"></a>00502   }
<a name="l00503"></a><a class="code" href="classoperations__research_1_1CompressedTrail.html#03f1cae616734a6ee916a6ac41c53730">00503</a>   ~<a class="code" href="classoperations__research_1_1CompressedTrail.html">CompressedTrail</a>() {
<a name="l00504"></a>00504     FreeBlocks(blocks_);
<a name="l00505"></a>00505     FreeBlocks(free_blocks_);
<a name="l00506"></a>00506   }
<a name="l00507"></a><a class="code" href="classoperations__research_1_1CompressedTrail.html#8d3bc7d7e4ebf788b6e0f98f6b2f80e9">00507</a>   <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1addrval.html" title="Trail and Reversibility.">addrval&lt;T&gt;</a>&amp; Back()<span class="keyword"> const </span>{
<a name="l00508"></a>00508     <span class="comment">// Back of empty trail.</span>
<a name="l00509"></a>00509     DCHECK_GT(current_, 0);
<a name="l00510"></a>00510     <span class="keywordflow">return</span> data_[current_ - 1];
<a name="l00511"></a>00511   }
<a name="l00512"></a><a class="code" href="classoperations__research_1_1CompressedTrail.html#f1ebe95c23bf74edaf1efcae19dc3fd2">00512</a>   <span class="keywordtype">void</span> PopBack() {
<a name="l00513"></a>00513     <span class="keywordflow">if</span> (size_ &gt; 0) {
<a name="l00514"></a>00514       --current_;
<a name="l00515"></a>00515       <span class="keywordflow">if</span> (current_ &lt;= 0) {
<a name="l00516"></a>00516         <span class="keywordflow">if</span> (buffer_used_) {
<a name="l00517"></a>00517           data_.swap(buffer_);
<a name="l00518"></a>00518           current_ = block_size_;
<a name="l00519"></a>00519           buffer_used_ = <span class="keyword">false</span>;
<a name="l00520"></a>00520         } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (blocks_ != NULL) {
<a name="l00521"></a>00521           packer_-&gt;Unpack(blocks_-&gt;compressed, data_.get());
<a name="l00522"></a>00522           FreeTopBlock();
<a name="l00523"></a>00523           current_ = block_size_;
<a name="l00524"></a>00524         }
<a name="l00525"></a>00525       }
<a name="l00526"></a>00526       --size_;
<a name="l00527"></a>00527     }
<a name="l00528"></a>00528   }
<a name="l00529"></a><a class="code" href="classoperations__research_1_1CompressedTrail.html#75d6be42565e0ae80b6287c6615fa18b">00529</a>   <span class="keywordtype">void</span> PushBack(<span class="keyword">const</span> <a class="code" href="structoperations__research_1_1addrval.html" title="Trail and Reversibility.">addrval&lt;T&gt;</a>&amp; addr_val) {
<a name="l00530"></a>00530     <span class="keywordflow">if</span> (current_ &gt;= block_size_) {
<a name="l00531"></a>00531       <span class="keywordflow">if</span> (buffer_used_) {  <span class="comment">// Buffer is used.</span>
<a name="l00532"></a>00532         NewTopBlock();
<a name="l00533"></a>00533         packer_-&gt;Pack(buffer_.get(), &amp;blocks_-&gt;compressed);
<a name="l00534"></a>00534         <span class="comment">// O(1) operation.</span>
<a name="l00535"></a>00535         data_.swap(buffer_);
<a name="l00536"></a>00536       } <span class="keywordflow">else</span> {
<a name="l00537"></a>00537         data_.swap(buffer_);
<a name="l00538"></a>00538         buffer_used_ = <span class="keyword">true</span>;
<a name="l00539"></a>00539       }
<a name="l00540"></a>00540       current_ = 0;
<a name="l00541"></a>00541     }
<a name="l00542"></a>00542     data_[current_] = addr_val;
<a name="l00543"></a>00543     ++current_;
<a name="l00544"></a>00544     ++size_;
<a name="l00545"></a>00545   }
<a name="l00546"></a><a class="code" href="classoperations__research_1_1CompressedTrail.html#8c0b09b26b8be5e338be003b1976ba66">00546</a>   <span class="keywordtype">int</span> size()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> size_; }
<a name="l00547"></a>00547  <span class="keyword">private</span>:
<a name="l00548"></a><a class="code" href="structoperations__research_1_1CompressedTrail_1_1Block.html">00548</a>   <span class="keyword">struct </span><a class="code" href="structoperations__research_1_1CompressedTrail_1_1Block.html">Block</a> {
<a name="l00549"></a><a class="code" href="structoperations__research_1_1CompressedTrail_1_1Block.html#4dbe0abb96558bf3bca3518ad5773eef">00549</a>     <span class="keywordtype">string</span> compressed;
<a name="l00550"></a><a class="code" href="structoperations__research_1_1CompressedTrail_1_1Block.html#0fdee2cc3d08d4dbf456c99e9df5e0f4">00550</a>     <a class="code" href="structoperations__research_1_1CompressedTrail_1_1Block.html">Block</a>* next;
<a name="l00551"></a>00551   };
<a name="l00552"></a>00552 
<a name="l00553"></a><a class="code" href="classoperations__research_1_1CompressedTrail.html#ef3488fff312061f9d39e66be0e867fc">00553</a>   <span class="keywordtype">void</span> FreeTopBlock() {
<a name="l00554"></a>00554     Block* block = blocks_;
<a name="l00555"></a>00555     blocks_ = block-&gt;next;
<a name="l00556"></a>00556     block-&gt;compressed.clear();
<a name="l00557"></a>00557     block-&gt;next = free_blocks_;
<a name="l00558"></a>00558     free_blocks_ = block;
<a name="l00559"></a>00559   }
<a name="l00560"></a><a class="code" href="classoperations__research_1_1CompressedTrail.html#1b4b4bdd750ca3339dcd09e768c93a12">00560</a>   <span class="keywordtype">void</span> NewTopBlock() {
<a name="l00561"></a>00561     Block* block = NULL;
<a name="l00562"></a>00562     <span class="keywordflow">if</span> (free_blocks_ != NULL) {
<a name="l00563"></a>00563       block = free_blocks_;
<a name="l00564"></a>00564       free_blocks_ = block-&gt;next;
<a name="l00565"></a>00565     } <span class="keywordflow">else</span> {
<a name="l00566"></a>00566       block = <span class="keyword">new</span> Block;
<a name="l00567"></a>00567     }
<a name="l00568"></a>00568     block-&gt;next = blocks_;
<a name="l00569"></a>00569     blocks_ = block;
<a name="l00570"></a>00570   }
<a name="l00571"></a><a class="code" href="classoperations__research_1_1CompressedTrail.html#5d490a49c125657f0ff2de9b044d3b81">00571</a>   <span class="keywordtype">void</span> FreeBlocks(Block* blocks) {
<a name="l00572"></a>00572     <span class="keywordflow">while</span> (NULL != blocks) {
<a name="l00573"></a>00573       Block* next = blocks-&gt;next;
<a name="l00574"></a>00574       <span class="keyword">delete</span> blocks;
<a name="l00575"></a>00575       blocks = next;
<a name="l00576"></a>00576     }
<a name="l00577"></a>00577   }
<a name="l00578"></a>00578 
<a name="l00579"></a><a class="code" href="classoperations__research_1_1CompressedTrail.html#28feb7de86e43d2c4dd3a4554c1033a0">00579</a>   scoped_ptr&lt;TrailPacker&lt;T&gt; &gt; packer_;
<a name="l00580"></a><a class="code" href="classoperations__research_1_1CompressedTrail.html#bf366ad0a09a07f6a1372c2cb161037a">00580</a>   <span class="keyword">const</span> <span class="keywordtype">int</span> block_size_;
<a name="l00581"></a><a class="code" href="classoperations__research_1_1CompressedTrail.html#bd395c9aa0b718b9d67a55df4c1968a3">00581</a>   Block* blocks_;
<a name="l00582"></a><a class="code" href="classoperations__research_1_1CompressedTrail.html#9000e58302a95130e9c93272076d9521">00582</a>   Block* free_blocks_;
<a name="l00583"></a><a class="code" href="classoperations__research_1_1CompressedTrail.html#fb9ea0d330186075212653a0582e4bae">00583</a>   scoped_array&lt;addrval&lt;T&gt; &gt; data_;
<a name="l00584"></a><a class="code" href="classoperations__research_1_1CompressedTrail.html#bc7211856e70df036895316f17aed6bf">00584</a>   scoped_array&lt;addrval&lt;T&gt; &gt; buffer_;
<a name="l00585"></a><a class="code" href="classoperations__research_1_1CompressedTrail.html#9162d5834cd36570c6ee8ece4af76b1c">00585</a>   <span class="keywordtype">bool</span> buffer_used_;
<a name="l00586"></a><a class="code" href="classoperations__research_1_1CompressedTrail.html#059968b83ede1ba13a355084749103d1">00586</a>   <span class="keywordtype">int</span> current_;
<a name="l00587"></a><a class="code" href="classoperations__research_1_1CompressedTrail.html#df76c63c57f6ef05ef230cb6358d1721">00587</a>   <span class="keywordtype">int</span> size_;
<a name="l00588"></a>00588 };
<a name="l00589"></a>00589 
<a name="l00590"></a>00590 <span class="comment">// ----- Trail -----</span>
<a name="l00591"></a>00591 
<a name="l00592"></a>00592 <span class="comment">// Object are explicitely copied using the copy ctor instead of</span>
<a name="l00593"></a>00593 <span class="comment">// passing and storing a pointer. As objects are small, copying is</span>
<a name="l00594"></a>00594 <span class="comment">// much faster than allocating (around 35% on a complete solve).</span>
<a name="l00595"></a>00595 
<a name="l00596"></a>00596 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="namespaceoperations__research.html#ddf929c71f8f0ae03a67d76e73a02e96" title="Trail.">RestoreBoolValue</a>(<a class="code" href="classoperations__research_1_1BooleanVar.html" title="namespace">BooleanVar</a>* <span class="keyword">const</span> var);
<a name="l00597"></a>00597 
<a name="l00598"></a><a class="code" href="structoperations__research_1_1Trail.html">00598</a> <span class="keyword">struct </span><a class="code" href="structoperations__research_1_1Trail.html">Trail</a> {
<a name="l00599"></a><a class="code" href="structoperations__research_1_1Trail.html#2d4bed7f601d9c2b91c436bf26d06b3f">00599</a>   <a class="code" href="classoperations__research_1_1CompressedTrail.html">CompressedTrail&lt;int&gt;</a> rev_ints_;
<a name="l00600"></a><a class="code" href="structoperations__research_1_1Trail.html#560c3b50561fbad23f5d0eb2c23ebfab">00600</a>   <a class="code" href="classoperations__research_1_1CompressedTrail.html">CompressedTrail&lt;int64&gt;</a> rev_int64s_;
<a name="l00601"></a><a class="code" href="structoperations__research_1_1Trail.html#4955abe64f41d7b61b70a50cecd54e6e">00601</a>   <a class="code" href="classoperations__research_1_1CompressedTrail.html">CompressedTrail&lt;uint64&gt;</a> rev_uint64s_;
<a name="l00602"></a><a class="code" href="structoperations__research_1_1Trail.html#dbd038e5ae46c593614742f8a99a5e2f">00602</a>   <a class="code" href="classoperations__research_1_1CompressedTrail.html">CompressedTrail&lt;void*&gt;</a> rev_ptrs_;
<a name="l00603"></a><a class="code" href="structoperations__research_1_1Trail.html#077a0a37adb3513c31575165bed88a90">00603</a>   vector&lt;BooleanVar*&gt; rev_boolvar_list_;
<a name="l00604"></a><a class="code" href="structoperations__research_1_1Trail.html#dcadcfdf9e29247d34e979e350cfaecc">00604</a>   vector&lt;bool*&gt; rev_bools_;
<a name="l00605"></a><a class="code" href="structoperations__research_1_1Trail.html#727f4d48105c57adc71d57fd3968c85f">00605</a>   vector&lt;bool&gt; rev_bool_value_;
<a name="l00606"></a><a class="code" href="structoperations__research_1_1Trail.html#838b40fc3f207143ac9f9c554b8fbf73">00606</a>   vector&lt;int*&gt; rev_int_memory_;
<a name="l00607"></a><a class="code" href="structoperations__research_1_1Trail.html#a55da0ee8018184b34d9d6147462b571">00607</a>   vector&lt;int64*&gt; rev_int64_memory_;
<a name="l00608"></a><a class="code" href="structoperations__research_1_1Trail.html#b039cc31ce509d0866a7c3ea10cff9f2">00608</a>   vector&lt;BaseObject*&gt; rev_object_memory_;
<a name="l00609"></a><a class="code" href="structoperations__research_1_1Trail.html#dd7c9189a59d38df588977d45ade56d4">00609</a>   vector&lt;BaseObject**&gt; rev_object_array_memory_;
<a name="l00610"></a><a class="code" href="structoperations__research_1_1Trail.html#47f46f3889ecb8e2092cc535343102e9">00610</a>   vector&lt;void*&gt; rev_memory_;
<a name="l00611"></a><a class="code" href="structoperations__research_1_1Trail.html#09851e6b5871ccd4324ff030469298ce">00611</a>   vector&lt;void**&gt; rev_memory_array_;
<a name="l00612"></a>00612 
<a name="l00613"></a><a class="code" href="structoperations__research_1_1Trail.html#bdf8beb7e8d0082af1e7d8efa2e9f9e6">00613</a>   <a class="code" href="structoperations__research_1_1StateMarker.html#3ffe707082206cf6d91b65922bafe2e2">Trail</a>(<span class="keywordtype">int</span> block_size, <a class="code" href="structoperations__research_1_1SolverParameters.html#63c6fe2e32ced9f83a4064c800130651">SolverParameters::TrailCompression</a> compression_level)
<a name="l00614"></a>00614       : rev_ints_(block_size, compression_level),
<a name="l00615"></a>00615         rev_int64s_(block_size, compression_level),
<a name="l00616"></a>00616         rev_uint64s_(block_size, compression_level),
<a name="l00617"></a>00617         rev_ptrs_(block_size, compression_level) {}
<a name="l00618"></a>00618 
<a name="l00619"></a><a class="code" href="structoperations__research_1_1Trail.html#9bcb808935c3276e422e896453335a3c">00619</a>   <span class="keywordtype">void</span> BacktrackTo(<a class="code" href="structoperations__research_1_1StateMarker.html">StateMarker</a>* m) {
<a name="l00620"></a>00620     <span class="keywordtype">int</span> target = m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#47e232d3c97f162917eb26a62370a3b0">rev_int_index_</a>;
<a name="l00621"></a>00621     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> curr = rev_ints_.size(); curr &gt; target; --curr) {
<a name="l00622"></a>00622       <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1addrval.html" title="Trail and Reversibility.">addrval&lt;int&gt;</a>&amp; cell = rev_ints_.Back();
<a name="l00623"></a>00623       cell.<a class="code" href="structoperations__research_1_1addrval.html#6287fd3e48d6d8eae208a3258516442d">restore</a>();
<a name="l00624"></a>00624       rev_ints_.PopBack();
<a name="l00625"></a>00625     }
<a name="l00626"></a>00626     DCHECK_EQ(rev_ints_.size(), target);
<a name="l00627"></a>00627     <span class="comment">// Incorrect trail size after backtrack.</span>
<a name="l00628"></a>00628     target = m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#59a871b8eb960f4f605ce92ae0b0b5cb">rev_int64_index_</a>;
<a name="l00629"></a>00629     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> curr = rev_int64s_.size(); curr &gt; target; --curr) {
<a name="l00630"></a>00630       <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1addrval.html" title="Trail and Reversibility.">addrval&lt;int64&gt;</a>&amp; cell = rev_int64s_.Back();
<a name="l00631"></a>00631       cell.<a class="code" href="structoperations__research_1_1addrval.html#6287fd3e48d6d8eae208a3258516442d">restore</a>();
<a name="l00632"></a>00632       rev_int64s_.PopBack();
<a name="l00633"></a>00633     }
<a name="l00634"></a>00634     DCHECK_EQ(rev_int64s_.size(), target);
<a name="l00635"></a>00635     <span class="comment">// Incorrect trail size after backtrack.</span>
<a name="l00636"></a>00636     target = m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#98de7b131b404376d33337b01eb28031">rev_uint64_index_</a>;
<a name="l00637"></a>00637     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> curr = rev_uint64s_.size(); curr &gt; target; --curr) {
<a name="l00638"></a>00638       <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1addrval.html" title="Trail and Reversibility.">addrval&lt;uint64&gt;</a>&amp; cell = rev_uint64s_.Back();
<a name="l00639"></a>00639       cell.<a class="code" href="structoperations__research_1_1addrval.html#6287fd3e48d6d8eae208a3258516442d">restore</a>();
<a name="l00640"></a>00640       rev_uint64s_.PopBack();
<a name="l00641"></a>00641     }
<a name="l00642"></a>00642     DCHECK_EQ(rev_uint64s_.size(), target);
<a name="l00643"></a>00643     <span class="comment">// Incorrect trail size after backtrack.</span>
<a name="l00644"></a>00644     target = m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#611fa35102e6366583df213d9a033ce5">rev_ptr_index_</a>;
<a name="l00645"></a>00645     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> curr = rev_ptrs_.size(); curr &gt; target; --curr) {
<a name="l00646"></a>00646       <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1addrval.html" title="Trail and Reversibility.">addrval&lt;void*&gt;</a>&amp; cell = rev_ptrs_.Back();
<a name="l00647"></a>00647       cell.<a class="code" href="structoperations__research_1_1addrval.html#6287fd3e48d6d8eae208a3258516442d">restore</a>();
<a name="l00648"></a>00648       rev_ptrs_.PopBack();
<a name="l00649"></a>00649     }
<a name="l00650"></a>00650     DCHECK_EQ(rev_ptrs_.size(), target);
<a name="l00651"></a>00651     <span class="comment">// Incorrect trail size after backtrack.</span>
<a name="l00652"></a>00652     target = m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#e15d50e63cbb570a6c5bd9b207e4fd86">rev_boolvar_list_index_</a>;
<a name="l00653"></a>00653     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> curr = rev_boolvar_list_.size() - 1; curr &gt;= target; --curr) {
<a name="l00654"></a>00654       <a class="code" href="classoperations__research_1_1BooleanVar.html" title="namespace">BooleanVar</a>* <span class="keyword">const</span> var = rev_boolvar_list_[curr];
<a name="l00655"></a>00655       <a class="code" href="namespaceoperations__research.html#ddf929c71f8f0ae03a67d76e73a02e96" title="Trail.">RestoreBoolValue</a>(var);
<a name="l00656"></a>00656     }
<a name="l00657"></a>00657     rev_boolvar_list_.resize(target);
<a name="l00658"></a>00658 
<a name="l00659"></a>00659     DCHECK_EQ(rev_bools_.size(), rev_bool_value_.size());
<a name="l00660"></a>00660     target = m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#cfe80591d75fad1f8b61d0be54f83be1">rev_bools_index_</a>;
<a name="l00661"></a>00661     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> curr = rev_bools_.size() - 1; curr &gt;= target; --curr) {
<a name="l00662"></a>00662       *(rev_bools_[curr]) = rev_bool_value_[curr];
<a name="l00663"></a>00663     }
<a name="l00664"></a>00664     rev_bools_.resize(target);
<a name="l00665"></a>00665     rev_bool_value_.resize(target);
<a name="l00666"></a>00666 
<a name="l00667"></a>00667     target = m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#567759b019a07447185219b3b049a56b">rev_int_memory_index_</a>;
<a name="l00668"></a>00668     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> curr = rev_int_memory_.size() - 1; curr &gt;= target; --curr) {
<a name="l00669"></a>00669       <span class="keyword">delete</span>[] rev_int_memory_[curr];
<a name="l00670"></a>00670     }
<a name="l00671"></a>00671     rev_int_memory_.resize(target);
<a name="l00672"></a>00672 
<a name="l00673"></a>00673     target = m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#3716106fcd2f164dd83d0ee3d7f48ea4">rev_int64_memory_index_</a>;
<a name="l00674"></a>00674     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> curr = rev_int64_memory_.size() - 1; curr &gt;= target; --curr) {
<a name="l00675"></a>00675       <span class="keyword">delete</span>[] rev_int64_memory_[curr];
<a name="l00676"></a>00676     }
<a name="l00677"></a>00677     rev_int64_memory_.resize(target);
<a name="l00678"></a>00678 
<a name="l00679"></a>00679     target = m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#0d2c3347f6d80cf1754b596f5c4cd3f3">rev_object_memory_index_</a>;
<a name="l00680"></a>00680     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> curr = rev_object_memory_.size() - 1; curr &gt;= target; --curr) {
<a name="l00681"></a>00681       <span class="keyword">delete</span> rev_object_memory_[curr];
<a name="l00682"></a>00682     }
<a name="l00683"></a>00683     rev_object_memory_.resize(target);
<a name="l00684"></a>00684 
<a name="l00685"></a>00685     target = m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#b9edca8db5e3933b8343ebc6242c51b0">rev_object_array_memory_index_</a>;
<a name="l00686"></a>00686     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> curr = rev_object_array_memory_.size() - 1;
<a name="l00687"></a>00687          curr &gt;= target; --curr) {
<a name="l00688"></a>00688       <span class="keyword">delete</span>[] rev_object_array_memory_[curr];
<a name="l00689"></a>00689     }
<a name="l00690"></a>00690     rev_object_array_memory_.resize(target);
<a name="l00691"></a>00691 
<a name="l00692"></a>00692     target = m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#59f571a7c091f1c6613f7a3fd81e2b9f">rev_memory_index_</a>;
<a name="l00693"></a>00693     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> curr = rev_memory_.size() - 1; curr &gt;= target; --curr) {
<a name="l00694"></a>00694       <span class="keyword">delete</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(rev_memory_[curr]);
<a name="l00695"></a>00695       <span class="comment">// The previous cast is necessary to deallocate generic memory</span>
<a name="l00696"></a>00696       <span class="comment">// described by a void* when passed to the RevAlloc procedure</span>
<a name="l00697"></a>00697       <span class="comment">// We cannot do a delete[] there</span>
<a name="l00698"></a>00698       <span class="comment">// This is useful for cells of RevFIFO and should not be used outside</span>
<a name="l00699"></a>00699       <span class="comment">// of the product</span>
<a name="l00700"></a>00700     }
<a name="l00701"></a>00701     rev_memory_.resize(target);
<a name="l00702"></a>00702 
<a name="l00703"></a>00703     target = m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#7376e157224557b0ac9471eee71c2e04">rev_memory_array_index_</a>;
<a name="l00704"></a>00704     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> curr = rev_memory_array_.size() - 1; curr &gt;= target; --curr) {
<a name="l00705"></a>00705       <span class="keyword">delete</span> [] rev_memory_array_[curr];
<a name="l00706"></a>00706       <span class="comment">// delete [] version of the previous unsafe case.</span>
<a name="l00707"></a>00707     }
<a name="l00708"></a>00708     rev_memory_array_.resize(target);
<a name="l00709"></a>00709   }
<a name="l00710"></a>00710 };
<a name="l00711"></a>00711 
<a name="l00712"></a><a class="code" href="classoperations__research_1_1Solver.html#b8b6d2ca213913b9e2d7785d8d2bea4a">00712</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#b8b6d2ca213913b9e2d7785d8d2bea4a">Solver::InternalSaveValue</a>(<span class="keywordtype">int</span>* valptr) {
<a name="l00713"></a>00713   <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_ints_.PushBack(<a class="code" href="structoperations__research_1_1addrval.html" title="Trail and Reversibility.">addrval&lt;int&gt;</a>(valptr));
<a name="l00714"></a>00714 }
<a name="l00715"></a>00715 
<a name="l00716"></a><a class="code" href="classoperations__research_1_1Solver.html#c1a220f96e58ee6c0e60549892d21cdf">00716</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#b8b6d2ca213913b9e2d7785d8d2bea4a">Solver::InternalSaveValue</a>(int64* valptr) {
<a name="l00717"></a>00717   <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_int64s_.PushBack(<a class="code" href="structoperations__research_1_1addrval.html" title="Trail and Reversibility.">addrval&lt;int64&gt;</a>(valptr));
<a name="l00718"></a>00718 }
<a name="l00719"></a>00719 
<a name="l00720"></a><a class="code" href="classoperations__research_1_1Solver.html#36828410bb3c2bb8ca5523169ac9e88c">00720</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#b8b6d2ca213913b9e2d7785d8d2bea4a">Solver::InternalSaveValue</a>(uint64* valptr) {
<a name="l00721"></a>00721   <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_uint64s_.PushBack(<a class="code" href="structoperations__research_1_1addrval.html" title="Trail and Reversibility.">addrval&lt;uint64&gt;</a>(valptr));
<a name="l00722"></a>00722 }
<a name="l00723"></a>00723 
<a name="l00724"></a><a class="code" href="classoperations__research_1_1Solver.html#48167426a41189617e61aff9bd7293e5">00724</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#b8b6d2ca213913b9e2d7785d8d2bea4a">Solver::InternalSaveValue</a>(<span class="keywordtype">void</span>** valptr) {
<a name="l00725"></a>00725   <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_ptrs_.PushBack(<a class="code" href="structoperations__research_1_1addrval.html" title="Trail and Reversibility.">addrval&lt;void*&gt;</a>(valptr));
<a name="l00726"></a>00726 }
<a name="l00727"></a>00727 
<a name="l00728"></a>00728 <span class="comment">// TODO(user) : this code is unsafe if you save the same alternating</span>
<a name="l00729"></a>00729 <span class="comment">// bool multiple times.</span>
<a name="l00730"></a>00730 <span class="comment">// The correct code should use a bitset and a single list.</span>
<a name="l00731"></a><a class="code" href="classoperations__research_1_1Solver.html#8b5d08fd28f44d86770451eb69007798">00731</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#b8b6d2ca213913b9e2d7785d8d2bea4a">Solver::InternalSaveValue</a>(<span class="keywordtype">bool</span>* valptr) {
<a name="l00732"></a>00732   <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_bools_.push_back(valptr);
<a name="l00733"></a>00733   <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_bool_value_.push_back(*valptr);
<a name="l00734"></a>00734 }
<a name="l00735"></a>00735 
<a name="l00736"></a><a class="code" href="classoperations__research_1_1Solver.html#c842985bdd84faccda55a2359a8e40c0">00736</a> <span class="keywordtype">int</span>* <a class="code" href="classoperations__research_1_1Solver.html#c842985bdd84faccda55a2359a8e40c0">Solver::SafeRevAlloc</a>(<span class="keywordtype">int</span>* ptr) {
<a name="l00737"></a>00737   <a class="code" href="classoperations__research_1_1Solver.html#02c048ac30577e0224b905ad2e9324bc">check_alloc_state</a>();
<a name="l00738"></a>00738   <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_int_memory_.push_back(ptr);
<a name="l00739"></a>00739   <span class="keywordflow">return</span> ptr;
<a name="l00740"></a>00740 }
<a name="l00741"></a>00741 
<a name="l00742"></a><a class="code" href="classoperations__research_1_1Solver.html#1b56c0f65bf211d3b55a26c901dc2348">00742</a> int64* <a class="code" href="classoperations__research_1_1Solver.html#c842985bdd84faccda55a2359a8e40c0">Solver::SafeRevAlloc</a>(int64* ptr) {
<a name="l00743"></a>00743   <a class="code" href="classoperations__research_1_1Solver.html#02c048ac30577e0224b905ad2e9324bc">check_alloc_state</a>();
<a name="l00744"></a>00744   <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_int64_memory_.push_back(ptr);
<a name="l00745"></a>00745   <span class="keywordflow">return</span> ptr;
<a name="l00746"></a>00746 }
<a name="l00747"></a>00747 
<a name="l00748"></a><a class="code" href="classoperations__research_1_1Solver.html#34477ad74f75c8f8003d613633c4004e">00748</a> uint64* <a class="code" href="classoperations__research_1_1Solver.html#c842985bdd84faccda55a2359a8e40c0">Solver::SafeRevAlloc</a>(uint64* ptr) {
<a name="l00749"></a>00749   <a class="code" href="classoperations__research_1_1Solver.html#02c048ac30577e0224b905ad2e9324bc">check_alloc_state</a>();
<a name="l00750"></a>00750   <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_int64_memory_.push_back(reinterpret_cast&lt;int64*&gt;(ptr));
<a name="l00751"></a>00751   <span class="keywordflow">return</span> ptr;
<a name="l00752"></a>00752 }
<a name="l00753"></a>00753 
<a name="l00754"></a><a class="code" href="classoperations__research_1_1Solver.html#1455be111480801a5923d3a21d6882ec">00754</a> <a class="code" href="classoperations__research_1_1BaseObject.html" title="Useful Search and Modeling Objects.">BaseObject</a>* <a class="code" href="classoperations__research_1_1Solver.html#c842985bdd84faccda55a2359a8e40c0">Solver::SafeRevAlloc</a>(<a class="code" href="classoperations__research_1_1BaseObject.html" title="Useful Search and Modeling Objects.">BaseObject</a>* ptr) {
<a name="l00755"></a>00755   <a class="code" href="classoperations__research_1_1Solver.html#02c048ac30577e0224b905ad2e9324bc">check_alloc_state</a>();
<a name="l00756"></a>00756   <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_object_memory_.push_back(ptr);
<a name="l00757"></a>00757   <span class="keywordflow">return</span> ptr;
<a name="l00758"></a>00758 }
<a name="l00759"></a>00759 
<a name="l00760"></a><a class="code" href="classoperations__research_1_1Solver.html#3181ef36e53a86490ceaca1bdeda8599">00760</a> <a class="code" href="classoperations__research_1_1BaseObject.html" title="Useful Search and Modeling Objects.">BaseObject</a>** <a class="code" href="classoperations__research_1_1Solver.html#c842985bdd84faccda55a2359a8e40c0">Solver::SafeRevAlloc</a>(<a class="code" href="classoperations__research_1_1BaseObject.html" title="Useful Search and Modeling Objects.">BaseObject</a>** ptr) {
<a name="l00761"></a>00761   <a class="code" href="classoperations__research_1_1Solver.html#02c048ac30577e0224b905ad2e9324bc">check_alloc_state</a>();
<a name="l00762"></a>00762   <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_object_array_memory_.push_back(ptr);
<a name="l00763"></a>00763   <span class="keywordflow">return</span> ptr;
<a name="l00764"></a>00764 }
<a name="l00765"></a>00765 
<a name="l00766"></a><a class="code" href="classoperations__research_1_1Solver.html#917cc2a87058fd0392ecc98a86c60cd2">00766</a> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>** <a class="code" href="classoperations__research_1_1Solver.html#c842985bdd84faccda55a2359a8e40c0">Solver::SafeRevAlloc</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>** ptr) {
<a name="l00767"></a>00767   <a class="code" href="classoperations__research_1_1BaseObject.html" title="Useful Search and Modeling Objects.">BaseObject</a>** in = <a class="code" href="classoperations__research_1_1Solver.html#c842985bdd84faccda55a2359a8e40c0">SafeRevAlloc</a>(reinterpret_cast&lt;BaseObject**&gt;(ptr));
<a name="l00768"></a>00768   <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>**<span class="keyword">&gt;</span>(in);
<a name="l00769"></a>00769 }
<a name="l00770"></a>00770 
<a name="l00771"></a><a class="code" href="classoperations__research_1_1Solver.html#7a6c350769205979ffb12b53ec61269a">00771</a> <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>** <a class="code" href="classoperations__research_1_1Solver.html#c842985bdd84faccda55a2359a8e40c0">Solver::SafeRevAlloc</a>(<a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>** ptr) {
<a name="l00772"></a>00772   <a class="code" href="classoperations__research_1_1BaseObject.html" title="Useful Search and Modeling Objects.">BaseObject</a>** in = <a class="code" href="classoperations__research_1_1Solver.html#c842985bdd84faccda55a2359a8e40c0">SafeRevAlloc</a>(reinterpret_cast&lt;BaseObject**&gt;(ptr));
<a name="l00773"></a>00773   <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>**<span class="keyword">&gt;</span>(in);
<a name="l00774"></a>00774 }
<a name="l00775"></a>00775 
<a name="l00776"></a><a class="code" href="classoperations__research_1_1Solver.html#3de3fff5095a1cd801f3da6aa4ea928c">00776</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>** <a class="code" href="classoperations__research_1_1Solver.html#c842985bdd84faccda55a2359a8e40c0">Solver::SafeRevAlloc</a>(<a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>** ptr) {
<a name="l00777"></a>00777   <a class="code" href="classoperations__research_1_1BaseObject.html" title="Useful Search and Modeling Objects.">BaseObject</a>** in = <a class="code" href="classoperations__research_1_1Solver.html#c842985bdd84faccda55a2359a8e40c0">SafeRevAlloc</a>(reinterpret_cast&lt;BaseObject**&gt;(ptr));
<a name="l00778"></a>00778   <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>**<span class="keyword">&gt;</span>(in);
<a name="l00779"></a>00779 }
<a name="l00780"></a>00780 
<a name="l00781"></a><a class="code" href="classoperations__research_1_1Solver.html#acfc36cfac42a50091e9214f9826d502">00781</a> <span class="keywordtype">void</span>* <a class="code" href="classoperations__research_1_1Solver.html#acfc36cfac42a50091e9214f9826d502" title="UnsafeRevAlloc is used internally for cells in SimpleRevFIFO and other structures...">Solver::UnsafeRevAllocAux</a>(<span class="keywordtype">void</span>* ptr) {
<a name="l00782"></a>00782   <a class="code" href="classoperations__research_1_1Solver.html#02c048ac30577e0224b905ad2e9324bc">check_alloc_state</a>();
<a name="l00783"></a>00783   <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_memory_.push_back(ptr);
<a name="l00784"></a>00784   <span class="keywordflow">return</span> ptr;
<a name="l00785"></a>00785 }
<a name="l00786"></a>00786 
<a name="l00787"></a><a class="code" href="classoperations__research_1_1Solver.html#34d5a434d2691ea51c462b235009180f">00787</a> <span class="keywordtype">void</span>** <a class="code" href="classoperations__research_1_1Solver.html#34d5a434d2691ea51c462b235009180f">Solver::UnsafeRevAllocArrayAux</a>(<span class="keywordtype">void</span>** ptr) {
<a name="l00788"></a>00788   <a class="code" href="classoperations__research_1_1Solver.html#02c048ac30577e0224b905ad2e9324bc">check_alloc_state</a>();
<a name="l00789"></a>00789   <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_memory_array_.push_back(ptr);
<a name="l00790"></a>00790   <span class="keywordflow">return</span> ptr;
<a name="l00791"></a>00791 }
<a name="l00792"></a>00792 
<a name="l00793"></a><a class="code" href="classoperations__research_1_1Solver.html#5186326781fbc01d0a295127ab76e154">00793</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#5186326781fbc01d0a295127ab76e154">Solver::InternalSaveBooleanVarValue</a>(<a class="code" href="classoperations__research_1_1BooleanVar.html" title="namespace">BooleanVar</a>* <span class="keyword">const</span> var) {
<a name="l00794"></a>00794   <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_boolvar_list_.push_back(var);
<a name="l00795"></a>00795 }
<a name="l00796"></a>00796 
<a name="l00797"></a>00797 <span class="comment">// ------------------ Search class -----------------</span>
<a name="l00798"></a>00798 
<a name="l00799"></a><a class="code" href="classoperations__research_1_1Search.html">00799</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1Search.html" title="Search class.">Search</a> {
<a name="l00800"></a>00800  <span class="keyword">public</span>:
<a name="l00801"></a><a class="code" href="classoperations__research_1_1Search.html#4a8159adb90f38dbfda2efcace82d233">00801</a>   <span class="keyword">explicit</span> <a class="code" href="classoperations__research_1_1Search.html" title="Search class.">Search</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s)
<a name="l00802"></a>00802       : solver_(s), marker_stack_(), fail_buffer_(), solution_counter_(0),
<a name="l00803"></a>00803         decision_builder_(NULL), created_by_solve_(false),
<a name="l00804"></a>00804         selector_(NULL), search_depth_(0), left_search_depth_(0),
<a name="l00805"></a>00805         should_restart_(false), should_finish_(false),
<a name="l00806"></a>00806         sentinel_pushed_(0), jmpbuf_filled_(false) {}
<a name="l00807"></a>00807 
<a name="l00808"></a>00808   <span class="keywordtype">void</span> EnterSearch();
<a name="l00809"></a>00809   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#13e7e93a66ce0f15343c48c66d615e47">RestartSearch</a>();
<a name="l00810"></a>00810   <span class="keywordtype">void</span> ExitSearch();
<a name="l00811"></a>00811   <span class="keywordtype">void</span> BeginNextDecision(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> b);
<a name="l00812"></a>00812   <span class="keywordtype">void</span> EndNextDecision(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> b, <a class="code" href="classoperations__research_1_1Decision.html" title="A Decision represents a choice point in the search tree.">Decision</a>* <span class="keyword">const</span> d);
<a name="l00813"></a>00813   <span class="keywordtype">void</span> ApplyDecision(<a class="code" href="classoperations__research_1_1Decision.html" title="A Decision represents a choice point in the search tree.">Decision</a>* <span class="keyword">const</span> d);
<a name="l00814"></a>00814   <span class="keywordtype">void</span> AfterDecision(<a class="code" href="classoperations__research_1_1Decision.html" title="A Decision represents a choice point in the search tree.">Decision</a>* <span class="keyword">const</span> d, <span class="keywordtype">bool</span> apply);
<a name="l00815"></a>00815   <span class="keywordtype">void</span> RefuteDecision(<a class="code" href="classoperations__research_1_1Decision.html" title="A Decision represents a choice point in the search tree.">Decision</a>* <span class="keyword">const</span> d);
<a name="l00816"></a>00816   <span class="keywordtype">void</span> BeginFail();
<a name="l00817"></a>00817   <span class="keywordtype">void</span> EndFail();
<a name="l00818"></a>00818   <span class="keywordtype">void</span> BeginInitialPropagation();
<a name="l00819"></a>00819   <span class="keywordtype">void</span> EndInitialPropagation();
<a name="l00820"></a>00820   <span class="keywordtype">bool</span> AtSolution();
<a name="l00821"></a>00821   <span class="keywordtype">bool</span> AcceptSolution();
<a name="l00822"></a>00822   <span class="keywordtype">void</span> NoMoreSolutions();
<a name="l00823"></a>00823   <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Solver.html#1176bbd276eb06ffbfbb85f5556d05b9" title="Ensures communication of local optima between monitors and search.">LocalOptimum</a>();
<a name="l00824"></a>00824   <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Solver.html#72af137f31ed95a5b1810490cbb73b68" title="Checks with monitors if delta is acceptable.">AcceptDelta</a>(<a class="code" href="classoperations__research_1_1Assignment.html" title="Assignment.">Assignment</a>* delta, <a class="code" href="classoperations__research_1_1Assignment.html" title="Assignment.">Assignment</a>* deltadelta);
<a name="l00825"></a>00825   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#81af3cc927a7e10da0c631b8005f36ad" title="Ensures communication of accepted neighbors between monitors and search.">AcceptNeighbor</a>();
<a name="l00826"></a>00826   <span class="keywordtype">void</span> PeriodicCheck();
<a name="l00827"></a>00827   <span class="keywordtype">void</span> push_monitor(<a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m);
<a name="l00828"></a>00828   <span class="keywordtype">void</span> Clear();
<a name="l00829"></a><a class="code" href="classoperations__research_1_1Search.html#2c42984a7ff88ebd0b51d37e43adc352">00829</a>   <span class="keywordtype">void</span> IncrementSolutionCounter() { ++solution_counter_; }
<a name="l00830"></a><a class="code" href="classoperations__research_1_1Search.html#2eb6d13dcbce28d116b399f5b7da3c10">00830</a>   int64 solution_counter()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> solution_counter_; }
<a name="l00831"></a><a class="code" href="classoperations__research_1_1Search.html#4b37a519f7faebaeb4b6be5c62757c2b">00831</a>   <span class="keywordtype">void</span> set_decision_builder(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> db) {
<a name="l00832"></a>00832     decision_builder_ = db;
<a name="l00833"></a>00833   }
<a name="l00834"></a><a class="code" href="classoperations__research_1_1Search.html#c63b1e9d7e458a8833d948e1f1a293d2">00834</a>   <a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* decision_builder()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> decision_builder_; }
<a name="l00835"></a><a class="code" href="classoperations__research_1_1Search.html#1fcd92000011aeb8f6dc5454bfba38a9">00835</a>   <span class="keywordtype">void</span> set_created_by_solve(<span class="keywordtype">bool</span> c) { created_by_solve_ = c; }
<a name="l00836"></a><a class="code" href="classoperations__research_1_1Search.html#79b3af967780427b6c44a8772f3567d0">00836</a>   <span class="keywordtype">bool</span> created_by_solve()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> created_by_solve_; }
<a name="l00837"></a>00837   <a class="code" href="classoperations__research_1_1Solver.html#5f87c832967334179f0f9c8d05380847">Solver::DecisionModification</a> ModifyDecision();
<a name="l00838"></a>00838   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#b41a0969e90e13da5e75476eef9d705e" title="Sets the given branch selector on the current active search.">SetBranchSelector</a>(
<a name="l00839"></a>00839       ResultCallback1&lt;Solver::DecisionModification, Solver*&gt;* <span class="keyword">const</span> s);
<a name="l00840"></a><a class="code" href="classoperations__research_1_1Search.html#b55c57687534c2850947b41dc3171f46">00840</a>   <span class="keywordtype">void</span> LeftMove() {
<a name="l00841"></a>00841     search_depth_++;
<a name="l00842"></a>00842     left_search_depth_++;
<a name="l00843"></a>00843   }
<a name="l00844"></a><a class="code" href="classoperations__research_1_1Search.html#0da30980d5c9c977186c5efbe671b7f1">00844</a>   <span class="keywordtype">void</span> RightMove() {
<a name="l00845"></a>00845     search_depth_++;
<a name="l00846"></a>00846   }
<a name="l00847"></a><a class="code" href="classoperations__research_1_1Search.html#26654e9a2a907f90fa37dd5585d509e5">00847</a>   <span class="keywordtype">int</span> search_depth()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> search_depth_; }
<a name="l00848"></a><a class="code" href="classoperations__research_1_1Search.html#1ff26a6a5c4835440aaeba8bbd92c0ec">00848</a>   <span class="keywordtype">void</span> set_search_depth(<span class="keywordtype">int</span> d) { search_depth_ = d; }
<a name="l00849"></a><a class="code" href="classoperations__research_1_1Search.html#af419d2ffa1078d7b8a0260103862525">00849</a>   <span class="keywordtype">int</span> left_search_depth()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> left_search_depth_; }
<a name="l00850"></a><a class="code" href="classoperations__research_1_1Search.html#578d5df848003bfa499f3547ce30b3c1">00850</a>   <span class="keywordtype">void</span> set_search_left_depth(<span class="keywordtype">int</span> d) { left_search_depth_ = d; }
<a name="l00851"></a><a class="code" href="classoperations__research_1_1Search.html#e6f39170dfd0cc811a75d43a449e1ba9">00851</a>   <span class="keywordtype">void</span> set_should_restart(<span class="keywordtype">bool</span> s) { should_restart_ = s; }
<a name="l00852"></a><a class="code" href="classoperations__research_1_1Search.html#096a692a55fb43267be4e48b56b16a08">00852</a>   <span class="keywordtype">bool</span> should_restart()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> should_restart_; }
<a name="l00853"></a><a class="code" href="classoperations__research_1_1Search.html#c8d6976508790637ceb0522654a8e126">00853</a>   <span class="keywordtype">void</span> set_should_finish(<span class="keywordtype">bool</span> s) { should_finish_ = s; }
<a name="l00854"></a><a class="code" href="classoperations__research_1_1Search.html#cb882bb5a1c696e8f555e3be64d46c3f">00854</a>   <span class="keywordtype">bool</span> should_finish()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> should_finish_; }
<a name="l00855"></a><a class="code" href="classoperations__research_1_1Search.html#2e6691a9e4597739ede2ec697e8746ed">00855</a>   <span class="keywordtype">void</span> CheckFail() {
<a name="l00856"></a>00856     <span class="keywordflow">if</span> (should_finish_ || should_restart_) {
<a name="l00857"></a>00857       solver_-&gt;Fail();
<a name="l00858"></a>00858     }
<a name="l00859"></a>00859   }
<a name="l00860"></a><a class="code" href="classoperations__research_1_1Search.html#16432758b314f3cedad3fba81c895417">00860</a>   <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>;
<a name="l00861"></a>00861  <span class="keyword">private</span>:
<a name="l00862"></a>00862   <span class="comment">// Jumps back to the previous choice point, Checks if it was correctly set.</span>
<a name="l00863"></a>00863   <span class="keywordtype">void</span> JumpBack();
<a name="l00864"></a><a class="code" href="classoperations__research_1_1Search.html#6fc83457fbe28d44be2e0faf8a432a56">00864</a>   <span class="keywordtype">void</span> ClearBuffer() {
<a name="l00865"></a>00865     CHECK(jmpbuf_filled_) &lt;&lt; <span class="stringliteral">"Internal error in backtracking"</span>;
<a name="l00866"></a>00866     jmpbuf_filled_ = <span class="keyword">false</span>;
<a name="l00867"></a>00867   }
<a name="l00868"></a>00868 
<a name="l00869"></a><a class="code" href="classoperations__research_1_1Search.html#b43daf5d229e3be1df1a79c0ef1b72c1">00869</a>   <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> solver_;
<a name="l00870"></a><a class="code" href="classoperations__research_1_1Search.html#dce47440c41909a123cd7a83ea17acb0">00870</a>   vector&lt;StateMarker*&gt; marker_stack_;
<a name="l00871"></a><a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">00871</a>   vector&lt;SearchMonitor*&gt; monitors_;
<a name="l00872"></a><a class="code" href="classoperations__research_1_1Search.html#a5f7c562bdd99b71caff5875aecc27a6">00872</a>   jmp_buf fail_buffer_;
<a name="l00873"></a><a class="code" href="classoperations__research_1_1Search.html#3b3ee6383b584c3dc630bbd4b0ea8beb">00873</a>   int64 solution_counter_;
<a name="l00874"></a><a class="code" href="classoperations__research_1_1Search.html#65dac695365840f48d6a6f7043c30fa1">00874</a>   <a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* decision_builder_;
<a name="l00875"></a><a class="code" href="classoperations__research_1_1Search.html#892044fb014e77bcdd46dafccd18d17f">00875</a>   <span class="keywordtype">bool</span> created_by_solve_;
<a name="l00876"></a><a class="code" href="classoperations__research_1_1Search.html#c3e0567b2588459c334c1dec05bb0095">00876</a>   scoped_ptr&lt;ResultCallback1&lt;Solver::DecisionModification, Solver*&gt; &gt; selector_;
<a name="l00877"></a><a class="code" href="classoperations__research_1_1Search.html#e2933d5963e74cada4b8bae5ea9a17b9">00877</a>   <span class="keywordtype">int</span> search_depth_;
<a name="l00878"></a><a class="code" href="classoperations__research_1_1Search.html#79421bb94c32dd689ea5cb88b088a70f">00878</a>   <span class="keywordtype">int</span> left_search_depth_;
<a name="l00879"></a><a class="code" href="classoperations__research_1_1Search.html#a42d3997ca7775bdec70fd4dace305c9">00879</a>   <span class="keywordtype">bool</span> should_restart_;
<a name="l00880"></a><a class="code" href="classoperations__research_1_1Search.html#8ebbfd00c6429aa2570a1e44b089a2ad">00880</a>   <span class="keywordtype">bool</span> should_finish_;
<a name="l00881"></a><a class="code" href="classoperations__research_1_1Search.html#e41455d55c90d9ce868968bd2a62f737">00881</a>   <span class="keywordtype">int</span> sentinel_pushed_;
<a name="l00882"></a><a class="code" href="classoperations__research_1_1Search.html#e9becd3ab5d5a8ba0c1401a479c97f69">00882</a>   <span class="keywordtype">bool</span> jmpbuf_filled_;
<a name="l00883"></a>00883 };
<a name="l00884"></a>00884 
<a name="l00885"></a>00885 <span class="comment">// Backtrack is implemented using 3 primitives:</span>
<a name="l00886"></a>00886 <span class="comment">// CP_TRY to start searching</span>
<a name="l00887"></a>00887 <span class="comment">// CP_DO_FAIL to signal a failure. The program will continue on the CP_ON_FAIL</span>
<a name="l00888"></a>00888 <span class="comment">// primitive.</span>
<a name="l00889"></a>00889 <span class="comment">// CP_FAST_BACKTRACK protects an implementation of backtrack using</span>
<a name="l00890"></a>00890 <span class="comment">// setjmp/longjmp.  The clean portable way is to use exceptions,</span>
<a name="l00891"></a>00891 <span class="comment">// unfortunately, it can be much slower.  Thus we use ideas from</span>
<a name="l00892"></a>00892 <span class="comment">// Prolog, CP/CLP implementations, continuations in C and implement failing</span>
<a name="l00893"></a>00893 <span class="comment">// and backtracking using setjmp/longjmp.</span>
<a name="l00894"></a><a class="code" href="constraint__solver_8cc.html#6fefff344468722cbdd7e1776ea5c806">00894</a> <span class="preprocessor">#define CP_FAST_BACKTRACK</span>
<a name="l00895"></a>00895 <span class="preprocessor"></span><span class="preprocessor">#if defined(CP_FAST_BACKTRACK)</span>
<a name="l00896"></a>00896 <span class="preprocessor"></span><span class="comment">// We cannot use a method/function for this as we would lose the</span>
<a name="l00897"></a>00897 <span class="comment">// context in the setjmp implementation.</span>
<a name="l00898"></a><a class="code" href="constraint__solver_8cc.html#458c844702d69839c667500d86ae49c8">00898</a> <span class="preprocessor">#define CP_TRY(search)                                              \</span>
<a name="l00899"></a>00899 <span class="preprocessor">  CHECK(!search-&gt;jmpbuf_filled_) &lt;&lt; "Fail() called outside search"; \</span>
<a name="l00900"></a>00900 <span class="preprocessor">  search-&gt;jmpbuf_filled_ = true;                                    \</span>
<a name="l00901"></a>00901 <span class="preprocessor">  if (setjmp(search-&gt;fail_buffer_) == 0)</span>
<a name="l00902"></a><a class="code" href="constraint__solver_8cc.html#40910cf9a9eb89daac6c929006a03416">00902</a> <span class="preprocessor"></span><span class="preprocessor">#define CP_ON_FAIL else</span>
<a name="l00903"></a><a class="code" href="constraint__solver_8cc.html#61301f951c309e0078fcaa570fa0e262">00903</a> <span class="preprocessor"></span><span class="preprocessor">#define CP_DO_FAIL(search) longjmp(search-&gt;fail_buffer_, 1)</span>
<a name="l00904"></a>00904 <span class="preprocessor"></span><span class="preprocessor">#else  // CP_FAST_BACKTRACK</span>
<a name="l00905"></a>00905 <span class="preprocessor"></span><span class="keyword">class </span>FailException {};
<a name="l00906"></a>00906 <span class="preprocessor">#define CP_TRY(search)                                                 \</span>
<a name="l00907"></a>00907 <span class="preprocessor">  CHECK(!search-&gt;jmpbuf_filled_) &lt;&lt; "Fail() called outside search";    \</span>
<a name="l00908"></a>00908 <span class="preprocessor">  search-&gt;jmpbuf_filled_ = true;                                       \</span>
<a name="l00909"></a>00909 <span class="preprocessor">  try</span>
<a name="l00910"></a>00910 <span class="preprocessor"></span><span class="preprocessor">#define CP_ON_FAIL catch(FailException&amp;)</span>
<a name="l00911"></a>00911 <span class="preprocessor"></span><span class="preprocessor">#define CP_DO_FAIL(search) throw FailException()</span>
<a name="l00912"></a>00912 <span class="preprocessor"></span><span class="preprocessor">#endif  // CP_FAST_BACKTRACK</span>
<a name="l00913"></a>00913 <span class="preprocessor"></span>
<a name="l00914"></a>00914 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Search.html#0c70aa3a5a9bab93dafb50be0b76563d" title="Jumps back to the previous choice point, Checks if it was correctly set.">Search::JumpBack</a>() {
<a name="l00915"></a>00915   ClearBuffer();
<a name="l00916"></a>00916   <a class="code" href="constraint__solver_8cc.html#61301f951c309e0078fcaa570fa0e262" title="CP_FAST_BACKTRACK.">CP_DO_FAIL</a>(<span class="keyword">this</span>);
<a name="l00917"></a>00917 }
<a name="l00918"></a>00918 
<a name="l00919"></a>00919 <span class="keywordtype">void</span> Search::SetBranchSelector(
<a name="l00920"></a>00920     ResultCallback1&lt;Solver::DecisionModification, Solver*&gt;* <span class="keyword">const</span> bs) {
<a name="l00921"></a>00921   CHECK(bs == selector_ || selector_ == NULL || bs == NULL);
<a name="l00922"></a>00922   <span class="keywordflow">if</span> (selector_ != bs) {
<a name="l00923"></a><a class="code" href="classoperations__research_1_1Search.html#0c70aa3a5a9bab93dafb50be0b76563d">00923</a>     selector_.reset(bs);
<a name="l00924"></a>00924   }
<a name="l00925"></a>00925 }
<a name="l00926"></a>00926 
<a name="l00927"></a>00927 <span class="keyword">class </span>UndoBranchSelector : <span class="keyword">public</span> Action {
<a name="l00928"></a><a class="code" href="classoperations__research_1_1Search.html#cc7c99d8cdb8c6ab2b6c3ba6ab04df1e">00928</a>  <span class="keyword">public</span>:
<a name="l00929"></a>00929   <span class="keyword">explicit</span> <a class="code" href="classoperations__research_1_1UndoBranchSelector.html">UndoBranchSelector</a>(<span class="keywordtype">int</span> depth) : depth_(depth) {}
<a name="l00930"></a>00930   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1UndoBranchSelector.html">UndoBranchSelector</a>() {}
<a name="l00931"></a>00931   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Run(Solver* <span class="keyword">const</span> s) {
<a name="l00932"></a>00932     <span class="keywordflow">if</span> (s-&gt;searches_.size() == depth_) {
<a name="l00933"></a>00933       s-&gt;searches_.back()-&gt;SetBranchSelector(NULL);
<a name="l00934"></a>00934     }
<a name="l00935"></a>00935   }
<a name="l00936"></a><a class="code" href="classoperations__research_1_1UndoBranchSelector.html">00936</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> DebugString()<span class="keyword"> const </span>{
<a name="l00937"></a>00937     <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"UndoBranchSelector(%i)"</span>, depth_);
<a name="l00938"></a><a class="code" href="classoperations__research_1_1UndoBranchSelector.html#b0e74422b1c6c361d0ffdefc23ddcd33">00938</a>   }
<a name="l00939"></a><a class="code" href="classoperations__research_1_1UndoBranchSelector.html#16cb02950edd52aea4cef5ead4889184">00939</a>  <span class="keyword">private</span>:
<a name="l00940"></a><a class="code" href="classoperations__research_1_1UndoBranchSelector.html#9f3e963a7d27d017955d6a0ebf1705a9">00940</a>   <span class="keyword">const</span> <span class="keywordtype">int</span> depth_;
<a name="l00941"></a>00941 };
<a name="l00942"></a>00942 
<a name="l00943"></a>00943 <span class="keywordtype">void</span> Solver::SetBranchSelector(
<a name="l00944"></a>00944     ResultCallback1&lt;Solver::DecisionModification, Solver*&gt;* <span class="keyword">const</span> bs) {
<a name="l00945"></a><a class="code" href="classoperations__research_1_1UndoBranchSelector.html#c470a8f671bf7622b99e30ca9614b12a">00945</a>   bs-&gt;CheckIsRepeatable();
<a name="l00946"></a>00946   <span class="keywordflow">if</span> (searches_.size() &gt; 0 &amp;&amp; searches_.back() != NULL) {
<a name="l00947"></a>00947     <span class="comment">// We cannot use the trail as the search can be nested and thus</span>
<a name="l00948"></a>00948     <span class="comment">// deleted upon backtrack. Thus we guard the undo action by a</span>
<a name="l00949"></a><a class="code" href="classoperations__research_1_1UndoBranchSelector.html#8a76603d0fef43a95501355101e42640">00949</a>     <span class="comment">// check on the number of nesting of solve().</span>
<a name="l00950"></a>00950     AddBacktrackAction(RevAlloc(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1UndoBranchSelector.html#b0e74422b1c6c361d0ffdefc23ddcd33">UndoBranchSelector</a>(searches_.size())),
<a name="l00951"></a>00951                        <span class="keyword">false</span>);
<a name="l00952"></a><a class="code" href="classoperations__research_1_1Solver.html#b41a0969e90e13da5e75476eef9d705e">00952</a>     searches_.back()-&gt;SetBranchSelector(bs);
<a name="l00953"></a>00953   }
<a name="l00954"></a>00954 }
<a name="l00955"></a>00955 
<a name="l00956"></a>00956 <span class="keyword">class </span>ApplyBranchSelector : <span class="keyword">public</span> DecisionBuilder {
<a name="l00957"></a>00957  <span class="keyword">public</span>:
<a name="l00958"></a>00958   <span class="keyword">explicit</span> ApplyBranchSelector(
<a name="l00959"></a>00959       ResultCallback1&lt;Solver::DecisionModification, Solver*&gt;* <span class="keyword">const</span> bs)
<a name="l00960"></a>00960       : selector_(bs) {}
<a name="l00961"></a>00961   <span class="keyword">virtual</span> ~ApplyBranchSelector() {}
<a name="l00962"></a>00962 
<a name="l00963"></a>00963   <span class="keyword">virtual</span> Decision* Next(Solver* <span class="keyword">const</span> s) {
<a name="l00964"></a>00964     s-&gt;SetBranchSelector(selector_);
<a name="l00965"></a><a class="code" href="classoperations__research_1_1ApplyBranchSelector.html">00965</a>     <span class="keywordflow">return</span> NULL;
<a name="l00966"></a>00966   }
<a name="l00967"></a><a class="code" href="classoperations__research_1_1ApplyBranchSelector.html#ac925a611714cb9c369734cea10c5469">00967</a> 
<a name="l00968"></a>00968   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1UndoBranchSelector.html#c470a8f671bf7622b99e30ca9614b12a" title="Action class.">DebugString</a>()<span class="keyword"> const </span>{
<a name="l00969"></a>00969     <span class="keywordflow">return</span> <span class="stringliteral">"Apply(BranchSelector)"</span>;
<a name="l00970"></a><a class="code" href="classoperations__research_1_1ApplyBranchSelector.html#aa40fa1eef21fccd95c828109b05953d">00970</a>   }
<a name="l00971"></a>00971  <span class="keyword">private</span>:
<a name="l00972"></a><a class="code" href="classoperations__research_1_1ApplyBranchSelector.html#3af3371b9433d41200540f3a541f3927">00972</a>   ResultCallback1&lt;Solver::DecisionModification, Solver*&gt;* <span class="keyword">const</span> selector_;
<a name="l00973"></a>00973 };
<a name="l00974"></a>00974 
<a name="l00975"></a>00975 <a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <a class="code" href="classoperations__research_1_1Solver.html#5801021363a9d2e8ca295ea388292876" title="Creates a decision builder that will set the branch selector.">Solver::MakeApplyBranchSelector</a>(
<a name="l00976"></a>00976     ResultCallback1&lt;Solver::DecisionModification, Solver*&gt;* <span class="keyword">const</span> bs) {
<a name="l00977"></a><a class="code" href="classoperations__research_1_1ApplyBranchSelector.html#0ca5a7072ed517ea49ee0fa42b8faf9d">00977</a>   <span class="keywordflow">return</span> RevAlloc(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1ApplyBranchSelector.html#ac925a611714cb9c369734cea10c5469">ApplyBranchSelector</a>(bs));
<a name="l00978"></a>00978 }
<a name="l00979"></a>00979 
<a name="l00980"></a>00980 <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1Solver.html#0f605fdb1307a1ac4931e6a181c9e154" title="Gets the number of nested searches.">Solver::SolveDepth</a>()<span class="keyword"> const </span>{
<a name="l00981"></a><a class="code" href="classoperations__research_1_1ApplyBranchSelector.html#4d53e3a4f3e56510937ee93adf3623f5">00981</a>   <span class="keywordflow">switch</span> (state_) {
<a name="l00982"></a>00982     <span class="keywordflow">case</span> IN_SEARCH:
<a name="l00983"></a>00983       <span class="keywordflow">return</span> searches_.size();
<a name="l00984"></a><a class="code" href="classoperations__research_1_1Solver.html#5801021363a9d2e8ca295ea388292876">00984</a>     <span class="keywordflow">default</span>:
<a name="l00985"></a>00985       <span class="keywordflow">return</span> 0;
<a name="l00986"></a>00986   }
<a name="l00987"></a>00987 }
<a name="l00988"></a>00988 
<a name="l00989"></a><a class="code" href="classoperations__research_1_1Solver.html#0f605fdb1307a1ac4931e6a181c9e154">00989</a> <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1Solver.html#14dc7b55e3664d49fc59a90044bf6fdc" title="Gets the search depth of the current active search.">Solver::SearchDepth</a>()<span class="keyword"> const </span>{
<a name="l00990"></a>00990   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.size() &gt; 0 &amp;&amp; <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back() != NULL) {
<a name="l00991"></a>00991     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back()-&gt;search_depth();
<a name="l00992"></a>00992   }
<a name="l00993"></a>00993   <span class="keywordflow">return</span> -1;
<a name="l00994"></a>00994 }
<a name="l00995"></a>00995 
<a name="l00996"></a>00996 <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1Solver.html#28506c5cdd51070a0bd38534dbc40c51" title="Gets the search left depth of the current active search.">Solver::SearchLeftDepth</a>()<span class="keyword"> const </span>{
<a name="l00997"></a>00997   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.size() &gt; 0 &amp;&amp; <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back() != NULL) {
<a name="l00998"></a><a class="code" href="classoperations__research_1_1Solver.html#14dc7b55e3664d49fc59a90044bf6fdc">00998</a>     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back()-&gt;left_search_depth();
<a name="l00999"></a>00999   }
<a name="l01000"></a>01000   <span class="keywordflow">return</span> -1;
<a name="l01001"></a>01001 }
<a name="l01002"></a>01002 
<a name="l01003"></a>01003 <a class="code" href="classoperations__research_1_1Solver.html#5f87c832967334179f0f9c8d05380847">Solver::DecisionModification</a> <a class="code" href="classoperations__research_1_1Search.html#afd69327361f5242cc981094f5064900">Search::ModifyDecision</a>() {
<a name="l01004"></a>01004   <span class="keywordflow">if</span> (selector_ != NULL) {
<a name="l01005"></a><a class="code" href="classoperations__research_1_1Solver.html#28506c5cdd51070a0bd38534dbc40c51">01005</a>     <span class="keywordflow">return</span> selector_-&gt;Run(solver_);
<a name="l01006"></a>01006   }
<a name="l01007"></a>01007   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#5f87c832967334179f0f9c8d05380847a8dfadb94521ac7979525ae94f618d57">Solver::NO_CHANGE</a>;
<a name="l01008"></a>01008 }
<a name="l01009"></a>01009 
<a name="l01010"></a>01010 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Search.html#b75f27d7740f8a0d5428878f589c0b49">Search::push_monitor</a>(<a class="code" href="classoperations__research_1_1Solver.html#ac32a6eabe1d316d7ff5f92fedd1ec5b">SearchMonitor</a>* <span class="keyword">const</span> m) {
<a name="l01011"></a>01011   <span class="keywordflow">if</span> (m) {
<a name="l01012"></a><a class="code" href="classoperations__research_1_1Search.html#afd69327361f5242cc981094f5064900">01012</a>     monitors_.push_back(m);
<a name="l01013"></a>01013   }
<a name="l01014"></a>01014 }
<a name="l01015"></a>01015 
<a name="l01016"></a>01016 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Search.html#7768604c0fbc85bc05b12d8d0da745b0">Search::Clear</a>() {
<a name="l01017"></a>01017   <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.clear();
<a name="l01018"></a>01018   <a class="code" href="classoperations__research_1_1Search.html#e2933d5963e74cada4b8bae5ea9a17b9">search_depth_</a> = 0;
<a name="l01019"></a><a class="code" href="classoperations__research_1_1Search.html#b75f27d7740f8a0d5428878f589c0b49">01019</a>   <a class="code" href="classoperations__research_1_1Search.html#79421bb94c32dd689ea5cb88b088a70f">left_search_depth_</a> = 0;
<a name="l01020"></a>01020 }
<a name="l01021"></a>01021 
<a name="l01022"></a>01022 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Search.html#b3a81afa65291b9bdd3f3a168ce55aa4">Search::EnterSearch</a>() {
<a name="l01023"></a>01023   <span class="comment">// We clean the solution counter when entering the search instead of</span>
<a name="l01024"></a>01024   <span class="comment">// when clearing it to have the information persist outside of the</span>
<a name="l01025"></a><a class="code" href="classoperations__research_1_1Search.html#7768604c0fbc85bc05b12d8d0da745b0">01025</a>   <span class="comment">// top level search.</span>
<a name="l01026"></a>01026   <a class="code" href="classoperations__research_1_1Search.html#3b3ee6383b584c3dc630bbd4b0ea8beb">solution_counter_</a> = 0;
<a name="l01027"></a>01027 
<a name="l01028"></a>01028   <span class="keywordflow">for</span> (vector&lt;SearchMonitor*&gt;::iterator it = <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.begin();
<a name="l01029"></a>01029        it != <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.end();
<a name="l01030"></a>01030        ++it) {
<a name="l01031"></a><a class="code" href="classoperations__research_1_1Search.html#b3a81afa65291b9bdd3f3a168ce55aa4">01031</a>     (*it)-&gt;EnterSearch();
<a name="l01032"></a>01032   }
<a name="l01033"></a>01033 }
<a name="l01034"></a>01034 
<a name="l01035"></a>01035 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Search.html#b6c851370a6efe0318b8d4b9c71a85ed">Search::ExitSearch</a>() {
<a name="l01036"></a>01036   <span class="keywordflow">for</span> (vector&lt;SearchMonitor*&gt;::iterator it = <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.begin();
<a name="l01037"></a>01037        it != <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.end();
<a name="l01038"></a>01038        ++it) {
<a name="l01039"></a>01039     (*it)-&gt;ExitSearch();
<a name="l01040"></a>01040   }
<a name="l01041"></a>01041 }
<a name="l01042"></a>01042 
<a name="l01043"></a>01043 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Search.html#c6366ad1cb26f567fe888ff8cc254a63">Search::RestartSearch</a>() {
<a name="l01044"></a><a class="code" href="classoperations__research_1_1Search.html#b6c851370a6efe0318b8d4b9c71a85ed">01044</a>   <span class="keywordflow">for</span> (vector&lt;SearchMonitor*&gt;::iterator it = <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.begin();
<a name="l01045"></a>01045        it != <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.end();
<a name="l01046"></a>01046        ++it) {
<a name="l01047"></a>01047     (*it)-&gt;RestartSearch();
<a name="l01048"></a>01048   }
<a name="l01049"></a>01049 }
<a name="l01050"></a>01050 
<a name="l01051"></a>01051 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Search.html#ea34d6d09da7f3d264f84d5502414da0">Search::BeginNextDecision</a>(DecisionBuilder* <span class="keyword">const</span> db) {
<a name="l01052"></a><a class="code" href="classoperations__research_1_1Search.html#c6366ad1cb26f567fe888ff8cc254a63">01052</a>   <span class="keywordflow">for</span> (vector&lt;SearchMonitor*&gt;::iterator it = <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.begin();
<a name="l01053"></a>01053        it != <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.end();
<a name="l01054"></a>01054        ++it) {
<a name="l01055"></a>01055     (*it)-&gt;BeginNextDecision(db);
<a name="l01056"></a>01056   }
<a name="l01057"></a>01057   <a class="code" href="classoperations__research_1_1Search.html#2e6691a9e4597739ede2ec697e8746ed">CheckFail</a>();
<a name="l01058"></a>01058 }
<a name="l01059"></a>01059 
<a name="l01060"></a><a class="code" href="classoperations__research_1_1Search.html#ea34d6d09da7f3d264f84d5502414da0">01060</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Search.html#fb04411efa806e4d8da60b47750357a3">Search::EndNextDecision</a>(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> db, <a class="code" href="classoperations__research_1_1Decision.html" title="A Decision represents a choice point in the search tree.">Decision</a>* <span class="keyword">const</span> d) {
<a name="l01061"></a>01061   <span class="keywordflow">for</span> (vector&lt;SearchMonitor*&gt;::iterator it = <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.begin();
<a name="l01062"></a>01062        it != <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.end();
<a name="l01063"></a>01063        ++it) {
<a name="l01064"></a>01064     (*it)-&gt;EndNextDecision(db, d);
<a name="l01065"></a>01065   }
<a name="l01066"></a>01066   <a class="code" href="classoperations__research_1_1Search.html#2e6691a9e4597739ede2ec697e8746ed">CheckFail</a>();
<a name="l01067"></a>01067 }
<a name="l01068"></a>01068 
<a name="l01069"></a><a class="code" href="classoperations__research_1_1Search.html#fb04411efa806e4d8da60b47750357a3">01069</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Search.html#fb4b1e39a8f2bfdabb87b445fef0a1ca">Search::ApplyDecision</a>(<a class="code" href="classoperations__research_1_1Decision.html" title="A Decision represents a choice point in the search tree.">Decision</a>* <span class="keyword">const</span> d) {
<a name="l01070"></a>01070   <span class="keywordflow">for</span> (vector&lt;SearchMonitor*&gt;::iterator it = <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.begin();
<a name="l01071"></a>01071        it != <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.end();
<a name="l01072"></a>01072        ++it) {
<a name="l01073"></a>01073     (*it)-&gt;ApplyDecision(d);
<a name="l01074"></a>01074   }
<a name="l01075"></a>01075   <a class="code" href="classoperations__research_1_1Search.html#2e6691a9e4597739ede2ec697e8746ed">CheckFail</a>();
<a name="l01076"></a>01076 }
<a name="l01077"></a>01077 
<a name="l01078"></a><a class="code" href="classoperations__research_1_1Search.html#fb4b1e39a8f2bfdabb87b445fef0a1ca">01078</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Search.html#86094dde74cc625735aa2f87daee7ed0">Search::AfterDecision</a>(<a class="code" href="classoperations__research_1_1Decision.html" title="A Decision represents a choice point in the search tree.">Decision</a>* <span class="keyword">const</span> d, <span class="keywordtype">bool</span> apply) {
<a name="l01079"></a>01079   <span class="keywordflow">for</span> (vector&lt;SearchMonitor*&gt;::iterator it = <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.begin();
<a name="l01080"></a>01080        it != <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.end();
<a name="l01081"></a>01081        ++it) {
<a name="l01082"></a>01082     (*it)-&gt;AfterDecision(d, apply);
<a name="l01083"></a>01083   }
<a name="l01084"></a>01084   <a class="code" href="classoperations__research_1_1Search.html#2e6691a9e4597739ede2ec697e8746ed">CheckFail</a>();
<a name="l01085"></a>01085 }
<a name="l01086"></a>01086 
<a name="l01087"></a><a class="code" href="classoperations__research_1_1Search.html#86094dde74cc625735aa2f87daee7ed0">01087</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Search.html#fdaa6f24db0d9192cee6e02d14084262">Search::RefuteDecision</a>(<a class="code" href="classoperations__research_1_1Decision.html" title="A Decision represents a choice point in the search tree.">Decision</a>* <span class="keyword">const</span> d) {
<a name="l01088"></a>01088   <span class="keywordflow">for</span> (vector&lt;SearchMonitor*&gt;::iterator it = <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.begin();
<a name="l01089"></a>01089        it != <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.end();
<a name="l01090"></a>01090        ++it) {
<a name="l01091"></a>01091     (*it)-&gt;RefuteDecision(d);
<a name="l01092"></a>01092   }
<a name="l01093"></a>01093   <a class="code" href="classoperations__research_1_1Search.html#2e6691a9e4597739ede2ec697e8746ed">CheckFail</a>();
<a name="l01094"></a>01094 }
<a name="l01095"></a>01095 
<a name="l01096"></a><a class="code" href="classoperations__research_1_1Search.html#fdaa6f24db0d9192cee6e02d14084262">01096</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Search.html#2727bfb415bf86bcc2b07dbad57c1142">Search::BeginFail</a>() {
<a name="l01097"></a>01097   <span class="keywordflow">for</span> (vector&lt;SearchMonitor*&gt;::iterator it = <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.begin();
<a name="l01098"></a>01098        it != <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.end();
<a name="l01099"></a>01099        ++it) {
<a name="l01100"></a>01100     (*it)-&gt;BeginFail();
<a name="l01101"></a>01101   }
<a name="l01102"></a>01102 }
<a name="l01103"></a>01103 
<a name="l01104"></a>01104 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Search.html#eb0a7901d42bd0cb246f26e118ee8454">Search::EndFail</a>() {
<a name="l01105"></a><a class="code" href="classoperations__research_1_1Search.html#2727bfb415bf86bcc2b07dbad57c1142">01105</a>   <span class="keywordflow">for</span> (vector&lt;SearchMonitor*&gt;::iterator it = <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.begin();
<a name="l01106"></a>01106        it != <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.end();
<a name="l01107"></a>01107        ++it) {
<a name="l01108"></a>01108     (*it)-&gt;EndFail();
<a name="l01109"></a>01109   }
<a name="l01110"></a>01110 }
<a name="l01111"></a>01111 
<a name="l01112"></a>01112 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Search.html#a6ccaf4a499ea8a40495f2e608e9d553">Search::BeginInitialPropagation</a>() {
<a name="l01113"></a><a class="code" href="classoperations__research_1_1Search.html#eb0a7901d42bd0cb246f26e118ee8454">01113</a>   <span class="keywordflow">for</span> (vector&lt;SearchMonitor*&gt;::iterator it = <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.begin();
<a name="l01114"></a>01114        it != <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.end();
<a name="l01115"></a>01115        ++it) {
<a name="l01116"></a>01116     (*it)-&gt;BeginInitialPropagation();
<a name="l01117"></a>01117   }
<a name="l01118"></a>01118 }
<a name="l01119"></a>01119 
<a name="l01120"></a>01120 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Search.html#8080b25049761226f4d6c4f7e00e0709">Search::EndInitialPropagation</a>() {
<a name="l01121"></a><a class="code" href="classoperations__research_1_1Search.html#a6ccaf4a499ea8a40495f2e608e9d553">01121</a>   <span class="keywordflow">for</span> (vector&lt;SearchMonitor*&gt;::iterator it = <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.begin();
<a name="l01122"></a>01122        it != <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.end();
<a name="l01123"></a>01123        ++it) {
<a name="l01124"></a>01124     (*it)-&gt;EndInitialPropagation();
<a name="l01125"></a>01125   }
<a name="l01126"></a>01126 }
<a name="l01127"></a>01127 
<a name="l01128"></a>01128 <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Search.html#bf4066e10d0f2e2bb8452e9c5ebedf8b">Search::AcceptSolution</a>() {
<a name="l01129"></a><a class="code" href="classoperations__research_1_1Search.html#8080b25049761226f4d6c4f7e00e0709">01129</a>   <span class="keywordtype">bool</span> valid = <span class="keyword">true</span>;
<a name="l01130"></a>01130   <span class="keywordflow">for</span> (vector&lt;SearchMonitor*&gt;::iterator it = <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.begin();
<a name="l01131"></a>01131        it != <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.end();
<a name="l01132"></a>01132        ++it) {
<a name="l01133"></a>01133     <span class="keywordflow">if</span> (!(*it)-&gt;AcceptSolution()) {
<a name="l01134"></a>01134       valid = <span class="keyword">false</span>;
<a name="l01135"></a>01135     }
<a name="l01136"></a>01136   }
<a name="l01137"></a><a class="code" href="classoperations__research_1_1Search.html#bf4066e10d0f2e2bb8452e9c5ebedf8b">01137</a>   <span class="keywordflow">return</span> valid;
<a name="l01138"></a>01138 }
<a name="l01139"></a>01139 
<a name="l01140"></a>01140 <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Search.html#1223d31a66d8516f2dbcc7088ab2dd0e">Search::AtSolution</a>() {
<a name="l01141"></a>01141   <span class="keywordtype">bool</span> should_continue = <span class="keyword">false</span>;
<a name="l01142"></a>01142   <span class="keywordflow">for</span> (vector&lt;SearchMonitor*&gt;::iterator it = <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.begin();
<a name="l01143"></a>01143        it != <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.end();
<a name="l01144"></a>01144        ++it) {
<a name="l01145"></a>01145     <span class="keywordflow">if</span> ((*it)-&gt;AtSolution()) {
<a name="l01146"></a>01146       should_continue = <span class="keyword">true</span>;
<a name="l01147"></a>01147     }
<a name="l01148"></a>01148   }
<a name="l01149"></a><a class="code" href="classoperations__research_1_1Search.html#1223d31a66d8516f2dbcc7088ab2dd0e">01149</a>   <span class="keywordflow">return</span> should_continue;
<a name="l01150"></a>01150 }
<a name="l01151"></a>01151 
<a name="l01152"></a>01152 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Search.html#c3d7a10701d0f27c98c96d1888ac9bbc">Search::NoMoreSolutions</a>() {
<a name="l01153"></a>01153   <span class="keywordflow">for</span> (vector&lt;SearchMonitor*&gt;::iterator it = <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.begin();
<a name="l01154"></a>01154        it != <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.end();
<a name="l01155"></a>01155        ++it) {
<a name="l01156"></a>01156     (*it)-&gt;NoMoreSolutions();
<a name="l01157"></a>01157   }
<a name="l01158"></a>01158 }
<a name="l01159"></a>01159 
<a name="l01160"></a>01160 <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Search.html#346508b5222d06d807af16c188bb30e5">Search::LocalOptimum</a>() {
<a name="l01161"></a><a class="code" href="classoperations__research_1_1Search.html#c3d7a10701d0f27c98c96d1888ac9bbc">01161</a>   <span class="keywordtype">bool</span> res = <span class="keyword">false</span>;
<a name="l01162"></a>01162   <span class="keywordflow">for</span> (vector&lt;SearchMonitor*&gt;::iterator it = <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.begin();
<a name="l01163"></a>01163        it != <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.end();
<a name="l01164"></a>01164        ++it) {
<a name="l01165"></a>01165     <span class="keywordflow">if</span> ((*it)-&gt;LocalOptimum()) {
<a name="l01166"></a>01166       res = <span class="keyword">true</span>;
<a name="l01167"></a>01167     }
<a name="l01168"></a>01168   }
<a name="l01169"></a><a class="code" href="classoperations__research_1_1Search.html#346508b5222d06d807af16c188bb30e5">01169</a>   <span class="keywordflow">return</span> res;
<a name="l01170"></a>01170 }
<a name="l01171"></a>01171 
<a name="l01172"></a>01172 <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Search.html#44a0b488d0c0df43d6bea1606a30f85d">Search::AcceptDelta</a>(<a class="code" href="classoperations__research_1_1Assignment.html" title="Assignment.">Assignment</a>* delta, <a class="code" href="classoperations__research_1_1Assignment.html" title="Assignment.">Assignment</a>* deltadelta) {
<a name="l01173"></a>01173   <span class="keywordtype">bool</span> accept = <span class="keyword">true</span>;
<a name="l01174"></a>01174   <span class="keywordflow">for</span> (vector&lt;SearchMonitor*&gt;::iterator it = <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.begin();
<a name="l01175"></a>01175        it != <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.end();
<a name="l01176"></a>01176        ++it) {
<a name="l01177"></a>01177     <span class="keywordflow">if</span> (!(*it)-&gt;AcceptDelta(delta, deltadelta)) {
<a name="l01178"></a>01178       accept = <span class="keyword">false</span>;
<a name="l01179"></a>01179     }
<a name="l01180"></a>01180   }
<a name="l01181"></a><a class="code" href="classoperations__research_1_1Search.html#44a0b488d0c0df43d6bea1606a30f85d">01181</a>   <span class="keywordflow">return</span> accept;
<a name="l01182"></a>01182 }
<a name="l01183"></a>01183 
<a name="l01184"></a>01184 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Search.html#44b05979e5f6c941cf9c06e387fd28a4">Search::AcceptNeighbor</a>() {
<a name="l01185"></a>01185   <span class="keywordflow">for</span> (vector&lt;SearchMonitor*&gt;::iterator it = <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.begin();
<a name="l01186"></a>01186        it != <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.end();
<a name="l01187"></a>01187        ++it) {
<a name="l01188"></a>01188     (*it)-&gt;AcceptNeighbor();
<a name="l01189"></a>01189   }
<a name="l01190"></a>01190 }
<a name="l01191"></a>01191 
<a name="l01192"></a>01192 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Search.html#9723908316a806be6eca0eae11379680">Search::PeriodicCheck</a>() {
<a name="l01193"></a><a class="code" href="classoperations__research_1_1Search.html#44b05979e5f6c941cf9c06e387fd28a4">01193</a>   <span class="keywordflow">for</span> (vector&lt;SearchMonitor*&gt;::iterator it = <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.begin();
<a name="l01194"></a>01194        it != <a class="code" href="classoperations__research_1_1Search.html#2835dd52d3b6d34c0f6d6e670a4440d5">monitors_</a>.end();
<a name="l01195"></a>01195        ++it) {
<a name="l01196"></a>01196     (*it)-&gt;PeriodicCheck();
<a name="l01197"></a>01197   }
<a name="l01198"></a>01198 }
<a name="l01199"></a>01199 
<a name="l01200"></a>01200 <span class="comment">// ---------- Fail Decision ----------</span>
<a name="l01201"></a><a class="code" href="classoperations__research_1_1Search.html#9723908316a806be6eca0eae11379680">01201</a> 
<a name="l01202"></a>01202 <span class="keyword">class </span><a class="code" href="classoperations__research_1_1FailDecision.html" title="Fail Decision.">FailDecision</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Decision.html" title="A Decision represents a choice point in the search tree.">Decision</a> {
<a name="l01203"></a>01203  <span class="keyword">public</span>:
<a name="l01204"></a>01204   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Apply(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s) {
<a name="l01205"></a>01205     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l01206"></a>01206   }
<a name="l01207"></a>01207   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Refute(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s) {
<a name="l01208"></a>01208     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l01209"></a>01209   }
<a name="l01210"></a>01210 };
<a name="l01211"></a><a class="code" href="classoperations__research_1_1FailDecision.html">01211</a> 
<a name="l01212"></a>01212 <a class="code" href="classoperations__research_1_1Decision.html" title="A Decision represents a choice point in the search tree.">Decision</a>* <a class="code" href="classoperations__research_1_1Solver.html#ef168545c53462b00e474770d7948170">Solver::MakeFailDecision</a>() {
<a name="l01213"></a><a class="code" href="classoperations__research_1_1FailDecision.html#f3c1f462a0d324df43fc83e54829afd2">01213</a>   <span class="keywordflow">return</span> fail_decision_.get();
<a name="l01214"></a>01214 }
<a name="l01215"></a>01215 
<a name="l01216"></a><a class="code" href="classoperations__research_1_1FailDecision.html#54b90dc5027ba9761cc9db64350aecee">01216</a> <span class="comment">// Balancing decision</span>
<a name="l01217"></a>01217 
<a name="l01218"></a>01218 <span class="keyword">namespace </span>{
<a name="l01219"></a>01219 <span class="keyword">class </span>BalancingDecision : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Decision.html" title="A Decision represents a choice point in the search tree.">Decision</a> {
<a name="l01220"></a>01220  <span class="keyword">public</span>:
<a name="l01221"></a><a class="code" href="classoperations__research_1_1Solver.html#ef168545c53462b00e474770d7948170">01221</a>   <span class="keyword">virtual</span> ~BalancingDecision() {}
<a name="l01222"></a>01222   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1FailDecision.html#f3c1f462a0d324df43fc83e54829afd2" title="Apply will be called first when the decision is executed.">Apply</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s) {}
<a name="l01223"></a>01223   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1FailDecision.html#54b90dc5027ba9761cc9db64350aecee" title="Refute will be called after a backtrack.">Refute</a>(Solver* <span class="keyword">const</span> s) {}
<a name="l01224"></a>01224 };
<a name="l01225"></a>01225 }
<a name="l01226"></a>01226 
<a name="l01227"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html">01227</a> 
<a name="l01228"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03_1_1BalancingDecision.html">01228</a> <span class="comment">// ------------------ Solver class -----------------</span>
<a name="l01229"></a>01229 
<a name="l01230"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03_1_1BalancingDecision.html#59b7d8245fdb302c57059d85127fd013">01230</a> <span class="comment">// These magic numbers are there to make sure we pop the correct</span>
<a name="l01231"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03_1_1BalancingDecision.html#278378f9f226fd1d17955c985d74b835">01231</a> <span class="comment">// sentinels throughout the search.</span>
<a name="l01232"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03_1_1BalancingDecision.html#b62f843b8e239e36e29802ca51fbb6a7">01232</a> <span class="keyword">namespace </span>{
<a name="l01233"></a>01233 <span class="keyword">enum</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd">SentinelMarker</a> {
<a name="l01234"></a>01234   <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd02b2511dee343d326f2a71b028b1b78e">INITIAL_SEARCH_SENTINEL</a> = 10000000,
<a name="l01235"></a>01235   <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd1468ffb746584acd9976da043763d632">ROOT_NODE_SENTINEL</a>      = 20000000,
<a name="l01236"></a>01236   <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd3965e949f83df6105ff96de4d7fad8f1">SOLVER_CTOR_SENTINEL</a>    = 40000000
<a name="l01237"></a>01237 };
<a name="l01238"></a>01238 }
<a name="l01239"></a>01239 
<a name="l01240"></a>01240 <a class="code" href="classoperations__research_1_1Solver.html#5b0165d313b9e2bfba93da6aff65052f">Solver::Solver</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; name, <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1SolverParameters.html" title="This struct holds all parameters for the Solver object.">SolverParameters</a>&amp; parameters)
<a name="l01241"></a>01241     : name_(name),
<a name="l01242"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd">01242</a>       parameters_(parameters),
<a name="l01243"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd02b2511dee343d326f2a71b028b1b78e">01243</a>       queue_(new <a class="code" href="classoperations__research_1_1Queue.html">Queue</a>(this)),
<a name="l01244"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd1468ffb746584acd9976da043763d632">01244</a>       trail_(new <a class="code" href="structoperations__research_1_1Trail.html">Trail</a>(parameters.trail_block_size, parameters.compress_trail)),
<a name="l01245"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd3965e949f83df6105ff96de4d7fad8f1">01245</a>       state_(OUTSIDE_SEARCH),
<a name="l01246"></a>01246       branches_(0),
<a name="l01247"></a>01247       fails_(0),
<a name="l01248"></a>01248       decisions_(0),
<a name="l01249"></a><a class="code" href="classoperations__research_1_1Solver.html#204c89d453a0716e5c521dc3dc2f5604">01249</a>       neighbors_(0),
<a name="l01250"></a>01250       filtered_neighbors_(0),
<a name="l01251"></a>01251       accepted_neighbors_(0),
<a name="l01252"></a>01252       variable_cleaner_(new <a class="code" href="classoperations__research_1_1VariableQueueCleaner.html" title="Variable-based queue cleaner.">VariableQueueCleaner</a>()),
<a name="l01253"></a>01253       timer_(new <a class="code" href="constraint__solver_8h.html#5237bcebc553d0f8eb7e399f04e6ad98">ClockTimer</a>),
<a name="l01254"></a>01254       searches_(),
<a name="l01255"></a>01255       random_(ACMRandom::DeterministicSeed()),
<a name="l01256"></a>01256       fail_hooks_(NULL),
<a name="l01257"></a>01257       fail_stamp_(GG_ULONGLONG(1)),
<a name="l01258"></a>01258       balancing_decision_(new BalancingDecision),
<a name="l01259"></a>01259       fail_intercept_(NULL),
<a name="l01260"></a>01260       demon_monitor_(<a class="code" href="namespaceoperations__research.html#4f23ca3c2d6b448b3e6f1fa078d6ff88" title="Forward Declarations.">BuildDemonMonitor</a>(parameters.profile_level)),
<a name="l01261"></a>01261       true_constraint_(NULL),
<a name="l01262"></a>01262       false_constraint_(NULL),
<a name="l01263"></a>01263       equality_var_cst_cache_(NULL),
<a name="l01264"></a>01264       unequality_var_cst_cache_(NULL),
<a name="l01265"></a>01265       greater_equal_var_cst_cache_(NULL),
<a name="l01266"></a>01266       less_equal_var_cst_cache_(NULL),
<a name="l01267"></a>01267       fail_decision_(new <a class="code" href="classoperations__research_1_1FailDecision.html" title="Fail Decision.">FailDecision</a>()),
<a name="l01268"></a>01268       constraints_(0) {
<a name="l01269"></a>01269   Init();
<a name="l01270"></a>01270 }
<a name="l01271"></a>01271 
<a name="l01272"></a>01272 <a class="code" href="classoperations__research_1_1Solver.html#5b0165d313b9e2bfba93da6aff65052f">Solver::Solver</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; name)
<a name="l01273"></a>01273     : name_(name),
<a name="l01274"></a>01274       parameters_(),
<a name="l01275"></a>01275       queue_(new <a class="code" href="classoperations__research_1_1Queue.html">Queue</a>(this)),
<a name="l01276"></a>01276       trail_(new <a class="code" href="structoperations__research_1_1Trail.html">Trail</a>(parameters_.trail_block_size,
<a name="l01277"></a>01277                        parameters_.compress_trail)),
<a name="l01278"></a>01278       state_(OUTSIDE_SEARCH),
<a name="l01279"></a>01279       branches_(0),
<a name="l01280"></a>01280       fails_(0),
<a name="l01281"></a><a class="code" href="classoperations__research_1_1Solver.html#5b0165d313b9e2bfba93da6aff65052f">01281</a>       decisions_(0),
<a name="l01282"></a>01282       neighbors_(0),
<a name="l01283"></a>01283       filtered_neighbors_(0),
<a name="l01284"></a>01284       accepted_neighbors_(0),
<a name="l01285"></a>01285       variable_cleaner_(new <a class="code" href="classoperations__research_1_1VariableQueueCleaner.html" title="Variable-based queue cleaner.">VariableQueueCleaner</a>()),
<a name="l01286"></a>01286       timer_(new <a class="code" href="constraint__solver_8h.html#5237bcebc553d0f8eb7e399f04e6ad98">ClockTimer</a>),
<a name="l01287"></a>01287       searches_(),
<a name="l01288"></a>01288       random_(ACMRandom::DeterministicSeed()),
<a name="l01289"></a>01289       fail_hooks_(NULL),
<a name="l01290"></a>01290       fail_stamp_(GG_ULONGLONG(1)),
<a name="l01291"></a>01291       balancing_decision_(new BalancingDecision),
<a name="l01292"></a>01292       fail_intercept_(NULL),
<a name="l01293"></a>01293       demon_monitor_(<a class="code" href="namespaceoperations__research.html#4f23ca3c2d6b448b3e6f1fa078d6ff88" title="Forward Declarations.">BuildDemonMonitor</a>(parameters_.profile_level)),
<a name="l01294"></a>01294       true_constraint_(NULL),
<a name="l01295"></a>01295       false_constraint_(NULL),
<a name="l01296"></a>01296       equality_var_cst_cache_(NULL),
<a name="l01297"></a>01297       unequality_var_cst_cache_(NULL),
<a name="l01298"></a>01298       greater_equal_var_cst_cache_(NULL),
<a name="l01299"></a>01299       less_equal_var_cst_cache_(NULL),
<a name="l01300"></a>01300       fail_decision_(new <a class="code" href="classoperations__research_1_1FailDecision.html" title="Fail Decision.">FailDecision</a>()),
<a name="l01301"></a>01301       constraints_(0) {
<a name="l01302"></a>01302   Init();
<a name="l01303"></a>01303 }
<a name="l01304"></a>01304 
<a name="l01305"></a>01305 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#ff69c43f533d38b3ed33f897c7ab3f5a" title="Init.">Solver::Init</a>() {
<a name="l01306"></a>01306   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1Solver.html#d4faf53cefb2c2cdb8892b978a4b93a9" title="Number of priorities for demons.">kNumPriorities</a>; ++i) {
<a name="l01307"></a>01307     <a class="code" href="classoperations__research_1_1Solver.html#f55961702f23983ac14a3847afb72666">demon_runs_</a>[i] = 0;
<a name="l01308"></a>01308   }
<a name="l01309"></a>01309   <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.push_back(<span class="keyword">new</span> Search(<span class="keyword">this</span>));
<a name="l01310"></a>01310   <a class="code" href="classoperations__research_1_1Solver.html#2b9d38fb77e9ea75ff565b5a229e83ec">PushSentinel</a>(<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd3965e949f83df6105ff96de4d7fad8f1">SOLVER_CTOR_SENTINEL</a>);
<a name="l01311"></a>01311   <a class="code" href="classoperations__research_1_1Solver.html#950106cd6aeb8e5060826a5fa143190f">InitCachedIntConstants</a>();  <span class="comment">// to be called after the SENTINEL is set.</span>
<a name="l01312"></a>01312   <a class="code" href="classoperations__research_1_1Solver.html#62c2cecbe70eaa5026e77ee3a91357f6">InitCachedConstraint</a>();  <span class="comment">// Cache the true constraint.</span>
<a name="l01313"></a>01313   <a class="code" href="classoperations__research_1_1Solver.html#6dd50e9b75464e41a5b146181e39b17e" title="Init Caches.">InitBoolVarCaches</a>();
<a name="l01314"></a><a class="code" href="classoperations__research_1_1Solver.html#ff69c43f533d38b3ed33f897c7ab3f5a">01314</a>   <a class="code" href="classoperations__research_1_1Solver.html#1ba0f499d7c2ab1b4683bfb6c53a6890">timer_</a>-&gt;Restart();
<a name="l01315"></a>01315 }
<a name="l01316"></a>01316 
<a name="l01317"></a>01317 <a class="code" href="classoperations__research_1_1Solver.html#663bdb75f27a96e424ad2a7a4ba397ec">Solver::~Solver</a>() {
<a name="l01318"></a>01318   <span class="comment">// solver destructor called with searches open.</span>
<a name="l01319"></a>01319   CHECK_EQ(<a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.size(), 1);
<a name="l01320"></a>01320   <a class="code" href="classoperations__research_1_1Solver.html#82d54172f1ad5af7c3b8347654416c07" title="Backtrack to the initial search sentinel.">BacktrackToSentinel</a>(<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd02b2511dee343d326f2a71b028b1b78e">INITIAL_SEARCH_SENTINEL</a>);
<a name="l01321"></a>01321 
<a name="l01322"></a>01322   <a class="code" href="structoperations__research_1_1StateInfo.html" title="StateMarker / StateInfo struct.">StateInfo</a> info;
<a name="l01323"></a>01323   <a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e" title="This enum is used internally to tag states in the search tree.">MarkerType</a> finalType = <a class="code" href="classoperations__research_1_1Solver.html#67a90d3f386c8530100f810ef54a240a">PopState</a>(&amp;info);
<a name="l01324"></a>01324   <span class="comment">// Not popping a SENTINEL in Solver destructor.</span>
<a name="l01325"></a>01325   DCHECK_EQ(finalType, <a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e9a277c2d196896995aaffb41aec2faea">SENTINEL</a>);
<a name="l01326"></a><a class="code" href="classoperations__research_1_1Solver.html#663bdb75f27a96e424ad2a7a4ba397ec">01326</a>   <span class="comment">// Not popping initial SENTINEL in Solver destructor.</span>
<a name="l01327"></a>01327   DCHECK_EQ(info.<a class="code" href="structoperations__research_1_1StateInfo.html#000fb6644096e817fbaaa6f0ec4d2dc7">int_info</a>, <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd3965e949f83df6105ff96de4d7fad8f1">SOLVER_CTOR_SENTINEL</a>);
<a name="l01328"></a>01328 
<a name="l01329"></a>01329   <a class="code" href="classoperations__research_1_1Search.html" title="Search class.">Search</a>* search = <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back();
<a name="l01330"></a>01330   <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.pop_back();
<a name="l01331"></a>01331   CHECK(<a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.empty())
<a name="l01332"></a>01332       &lt;&lt; <span class="stringliteral">"non empty list of searches when ending the solver"</span>;
<a name="l01333"></a>01333   <span class="keyword">delete</span> search;
<a name="l01334"></a>01334   <a class="code" href="namespaceoperations__research.html#c7e3e4722c51d781636e24d843c0e542">DeleteDemonMonitor</a>(<a class="code" href="classoperations__research_1_1Solver.html#c70d81a14381b4e4d7478874ed8edc05" title="Demon monitor.">demon_monitor_</a>);
<a name="l01335"></a>01335 }
<a name="l01336"></a>01336 
<a name="l01337"></a>01337 <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1SolverParameters.html#63c6fe2e32ced9f83a4064c800130651">SolverParameters::TrailCompression</a>
<a name="l01338"></a>01338 <a class="code" href="structoperations__research_1_1SolverParameters.html#6f804a79d6f2f5b989cef147e5642ecf">SolverParameters::kDefaultTrailCompression</a> = <a class="code" href="structoperations__research_1_1SolverParameters.html#63c6fe2e32ced9f83a4064c80013065161440a766f50f6084eb75e9475441c9b">SolverParameters::NO_COMPRESSION</a>;
<a name="l01339"></a>01339 <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="structoperations__research_1_1SolverParameters.html#3ca543fc47b4a89b45f5c1e5626e3226">SolverParameters::kDefaultTrailBlockSize</a> = 8000;
<a name="l01340"></a>01340 <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="structoperations__research_1_1SolverParameters.html#14b9430319840c90d5064c32e9459176">SolverParameters::kDefaultArraySplitSize</a> = 16;
<a name="l01341"></a>01341 <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="structoperations__research_1_1SolverParameters.html#b283c9875ecce4fe4991a1f73c47299f">SolverParameters::kDefaultNameStoring</a> = <span class="keyword">true</span>;
<a name="l01342"></a>01342 <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1SolverParameters.html#bb1b746ad99155bea2d44ba46db07187">SolverParameters::ProfileLevel</a> <a class="code" href="structoperations__research_1_1SolverParameters.html#8e1e96280d622b55f6e620b76032f1e6">SolverParameters::kDefaultProfileLevel</a> =
<a name="l01343"></a>01343          <a class="code" href="structoperations__research_1_1SolverParameters.html#bb1b746ad99155bea2d44ba46db0718723a03d3fac4ba780d9caa8ae38f5dea9">SolverParameters::NO_PROFILING</a>;
<a name="l01344"></a>01344 
<a name="l01345"></a>01345 <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Solver.html#a7a09bf2f27ccbdc1d1d386bd94e142a" title="misc debug string.">Solver::DebugString</a>()<span class="keyword"> const </span>{
<a name="l01346"></a>01346   <span class="keywordtype">string</span> out = <span class="stringliteral">"Solver(name = \""</span> + <a class="code" href="classoperations__research_1_1Solver.html#faebeb8ee443693c7abe3e83d25097cf">name_</a> + <span class="stringliteral">"\", state = "</span>;
<a name="l01347"></a>01347   <span class="keywordflow">switch</span> (<a class="code" href="classoperations__research_1_1Solver.html#f7458c69402c50603880a24a069decc0">state_</a>) {
<a name="l01348"></a>01348     <span class="keywordflow">case</span> <a class="code" href="classoperations__research_1_1Solver.html#5b5712802e63dcd3ee5abfd37e0f2a95c05654b6a7479316478744b3ce4a50df" title="Before search, after search.">OUTSIDE_SEARCH</a>:
<a name="l01349"></a>01349       out += <span class="stringliteral">"OUTSIDE_SEARCH"</span>;
<a name="l01350"></a>01350       <span class="keywordflow">break</span>;
<a name="l01351"></a>01351     <span class="keywordflow">case</span> <a class="code" href="classoperations__research_1_1Solver.html#5b5712802e63dcd3ee5abfd37e0f2a95066908e143fd988a03767f05e682acaf" title="Executing the search code.">IN_SEARCH</a>:
<a name="l01352"></a>01352       out += <span class="stringliteral">"IN_SEARCH"</span>;
<a name="l01353"></a>01353       <span class="keywordflow">break</span>;
<a name="l01354"></a><a class="code" href="classoperations__research_1_1Solver.html#a7a09bf2f27ccbdc1d1d386bd94e142a">01354</a>     <span class="keywordflow">case</span> <a class="code" href="classoperations__research_1_1Solver.html#5b5712802e63dcd3ee5abfd37e0f2a95d487136b6f055fa3fadfd6a3c12aa3a3" title="After successful NextSolution and before EndSearch.">AT_SOLUTION</a>:
<a name="l01355"></a>01355       out += <span class="stringliteral">"AT_SOLUTION"</span>;
<a name="l01356"></a>01356       <span class="keywordflow">break</span>;
<a name="l01357"></a>01357     <span class="keywordflow">case</span> <a class="code" href="classoperations__research_1_1Solver.html#5b5712802e63dcd3ee5abfd37e0f2a95401b0c79d1fa9261524343fce4dd5439" title="After failed NextSolution and before EndSearch.">NO_MORE_SOLUTIONS</a>:
<a name="l01358"></a>01358       out += <span class="stringliteral">"NO_MORE_SOLUTIONS"</span>;
<a name="l01359"></a>01359       <span class="keywordflow">break</span>;
<a name="l01360"></a>01360     <span class="keywordflow">case</span> <a class="code" href="classoperations__research_1_1Solver.html#5b5712802e63dcd3ee5abfd37e0f2a9530b34e2664f9b1e2fb0d1347d7a87674" title="After search, the model is infeasible.">PROBLEM_INFEASIBLE</a>:
<a name="l01361"></a>01361       out += <span class="stringliteral">"PROBLEM_INFEASIBLE"</span>;
<a name="l01362"></a>01362       <span class="keywordflow">break</span>;
<a name="l01363"></a>01363   }
<a name="l01364"></a>01364   StringAppendF(&amp;out, <span class="stringliteral">", branches = %"</span> GG_LL_FORMAT
<a name="l01365"></a>01365                 <span class="stringliteral">"d, fails = %"</span> GG_LL_FORMAT
<a name="l01366"></a>01366                 <span class="stringliteral">"d, decisions = %"</span> GG_LL_FORMAT
<a name="l01367"></a>01367                 <span class="stringliteral">"d, delayed demon runs = %"</span> GG_LL_FORMAT
<a name="l01368"></a>01368                 <span class="stringliteral">"d, var demon runs = %"</span> GG_LL_FORMAT
<a name="l01369"></a>01369                 <span class="stringliteral">"d, normal demon runs = %"</span> GG_LL_FORMAT
<a name="l01370"></a>01370                 <span class="stringliteral">"d, Run time = %"</span> GG_LL_FORMAT <span class="stringliteral">"d ms)"</span>,
<a name="l01371"></a>01371                 <a class="code" href="classoperations__research_1_1Solver.html#b9715852756b3f644fb4d3bddd657e4a">branches_</a>, <a class="code" href="classoperations__research_1_1Solver.html#8b42035abd87c11791e2fe3418c7bd4b">fails_</a>, <a class="code" href="classoperations__research_1_1Solver.html#a468c95a9dff8fb30c7881ca140e4b28">decisions_</a>, <a class="code" href="classoperations__research_1_1Solver.html#f55961702f23983ac14a3847afb72666">demon_runs_</a>[<a class="code" href="classoperations__research_1_1Solver.html#4b0972c731faf884eba5acab99ebb2b4f8769149902a8a2b168069cb93cc6370">DELAYED_PRIORITY</a>],
<a name="l01372"></a>01372                 <a class="code" href="classoperations__research_1_1Solver.html#f55961702f23983ac14a3847afb72666">demon_runs_</a>[<a class="code" href="classoperations__research_1_1Solver.html#4b0972c731faf884eba5acab99ebb2b4e5f79fc80ef9ae665bcd7c0e55c02aa6">VAR_PRIORITY</a>], <a class="code" href="classoperations__research_1_1Solver.html#f55961702f23983ac14a3847afb72666">demon_runs_</a>[<a class="code" href="classoperations__research_1_1Solver.html#4b0972c731faf884eba5acab99ebb2b44f432957a8b27277538d5ee856201a4c">NORMAL_PRIORITY</a>],
<a name="l01373"></a>01373                 <a class="code" href="classoperations__research_1_1Solver.html#e1b93d59fbe7e74c48de9a4a8ec3e910" title="wall_time() in ms since the creation of the solver.">wall_time</a>());
<a name="l01374"></a>01374   <span class="keywordflow">return</span> out;
<a name="l01375"></a>01375 }
<a name="l01376"></a>01376 
<a name="l01377"></a>01377 int64 <a class="code" href="classoperations__research_1_1Solver.html#5e71cbc298a43b9a8200254f5b1b44aa" title="Current memory usage in bytes.">Solver::MemoryUsage</a>() {
<a name="l01378"></a>01378   <span class="keywordflow">return</span> GetProcessMemoryUsage();
<a name="l01379"></a>01379 }
<a name="l01380"></a>01380 
<a name="l01381"></a>01381 
<a name="l01382"></a>01382 int64 <a class="code" href="classoperations__research_1_1Solver.html#e1b93d59fbe7e74c48de9a4a8ec3e910" title="wall_time() in ms since the creation of the solver.">Solver::wall_time</a>()<span class="keyword"> const </span>{
<a name="l01383"></a>01383   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#1ba0f499d7c2ab1b4683bfb6c53a6890">timer_</a>-&gt;GetInMs();
<a name="l01384"></a>01384 }
<a name="l01385"></a>01385 
<a name="l01386"></a><a class="code" href="classoperations__research_1_1Solver.html#5e71cbc298a43b9a8200254f5b1b44aa">01386</a> int64 <a class="code" href="classoperations__research_1_1Solver.html#27328aaeb854db363c20ba50179c154a" title="number of solutions found since the start of the search.">Solver::solutions</a>()<span class="keyword"> const </span>{
<a name="l01387"></a>01387   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.front()-&gt;solution_counter();
<a name="l01388"></a>01388 }
<a name="l01389"></a>01389 
<a name="l01390"></a>01390 <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Solver.html#1176bbd276eb06ffbfbb85f5556d05b9" title="Ensures communication of local optima between monitors and search.">Solver::LocalOptimum</a>() {
<a name="l01391"></a><a class="code" href="classoperations__research_1_1Solver.html#e1b93d59fbe7e74c48de9a4a8ec3e910">01391</a>   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.front()-&gt;LocalOptimum();
<a name="l01392"></a>01392 }
<a name="l01393"></a>01393 
<a name="l01394"></a>01394 <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Solver.html#72af137f31ed95a5b1810490cbb73b68" title="Checks with monitors if delta is acceptable.">Solver::AcceptDelta</a>(<a class="code" href="classoperations__research_1_1Assignment.html" title="Assignment.">Assignment</a>* delta, <a class="code" href="classoperations__research_1_1Assignment.html" title="Assignment.">Assignment</a>* deltadelta) {
<a name="l01395"></a><a class="code" href="classoperations__research_1_1Solver.html#27328aaeb854db363c20ba50179c154a">01395</a>   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.front()-&gt;AcceptDelta(delta, deltadelta);
<a name="l01396"></a>01396 }
<a name="l01397"></a>01397 
<a name="l01398"></a>01398 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#81af3cc927a7e10da0c631b8005f36ad" title="Ensures communication of accepted neighbors between monitors and search.">Solver::AcceptNeighbor</a>() {
<a name="l01399"></a><a class="code" href="classoperations__research_1_1Solver.html#1176bbd276eb06ffbfbb85f5556d05b9">01399</a>   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.front()-&gt;AcceptNeighbor();
<a name="l01400"></a>01400 }
<a name="l01401"></a>01401 
<a name="l01402"></a>01402 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#6ffc56653b5ef9643ce87d05c9ebd8d6" title="Performs PeriodicCheck on the top-level search; can be called from a nested solve...">Solver::TopPeriodicCheck</a>() {
<a name="l01403"></a><a class="code" href="classoperations__research_1_1Solver.html#72af137f31ed95a5b1810490cbb73b68">01403</a>   <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.front()-&gt;PeriodicCheck();
<a name="l01404"></a>01404 }
<a name="l01405"></a>01405 
<a name="l01406"></a>01406 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#6d2ae179cd6e66dc4cfd14307126b2cb" title="The PushState and PopState methods manipulates the states of the reversible objects...">Solver::PushState</a>() {
<a name="l01407"></a><a class="code" href="classoperations__research_1_1Solver.html#81af3cc927a7e10da0c631b8005f36ad">01407</a>   <a class="code" href="structoperations__research_1_1StateInfo.html" title="StateMarker / StateInfo struct.">StateInfo</a> info;
<a name="l01408"></a>01408   <a class="code" href="classoperations__research_1_1Solver.html#6d2ae179cd6e66dc4cfd14307126b2cb" title="The PushState and PopState methods manipulates the states of the reversible objects...">PushState</a>(<a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e695cce0161b127055c52d41744e97395">SIMPLE_MARKER</a>, info);
<a name="l01409"></a>01409 }
<a name="l01410"></a>01410 
<a name="l01411"></a><a class="code" href="classoperations__research_1_1Solver.html#6ffc56653b5ef9643ce87d05c9ebd8d6">01411</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#67a90d3f386c8530100f810ef54a240a">Solver::PopState</a>() {
<a name="l01412"></a>01412   <a class="code" href="structoperations__research_1_1StateInfo.html" title="StateMarker / StateInfo struct.">StateInfo</a> info;
<a name="l01413"></a>01413   <a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e" title="This enum is used internally to tag states in the search tree.">MarkerType</a> t = <a class="code" href="classoperations__research_1_1Solver.html#67a90d3f386c8530100f810ef54a240a">PopState</a>(&amp;info);
<a name="l01414"></a>01414   CHECK_EQ(<a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e695cce0161b127055c52d41744e97395">SIMPLE_MARKER</a>, t);
<a name="l01415"></a><a class="code" href="classoperations__research_1_1Solver.html#6d2ae179cd6e66dc4cfd14307126b2cb">01415</a> }
<a name="l01416"></a>01416 
<a name="l01417"></a>01417 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#6d2ae179cd6e66dc4cfd14307126b2cb" title="The PushState and PopState methods manipulates the states of the reversible objects...">Solver::PushState</a>(<a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e" title="This enum is used internally to tag states in the search tree.">MarkerType</a> t, <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1StateInfo.html" title="StateMarker / StateInfo struct.">StateInfo</a>&amp; info) {
<a name="l01418"></a>01418   <a class="code" href="structoperations__research_1_1StateMarker.html">StateMarker</a>* m = <span class="keyword">new</span> <a class="code" href="structoperations__research_1_1StateMarker.html">StateMarker</a>(t, info);
<a name="l01419"></a>01419   <span class="keywordflow">if</span> (t != <a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e7d02bd6f10e34551ac9b74d12ee3d746">REVERSIBLE_ACTION</a> || info.<a class="code" href="structoperations__research_1_1StateInfo.html#000fb6644096e817fbaaa6f0ec4d2dc7">int_info</a> == 0) {
<a name="l01420"></a><a class="code" href="classoperations__research_1_1Solver.html#67a90d3f386c8530100f810ef54a240a">01420</a>     m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#47e232d3c97f162917eb26a62370a3b0">rev_int_index_</a> = <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_ints_.size();
<a name="l01421"></a>01421     m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#59a871b8eb960f4f605ce92ae0b0b5cb">rev_int64_index_</a> = <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_int64s_.size();
<a name="l01422"></a>01422     m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#98de7b131b404376d33337b01eb28031">rev_uint64_index_</a> = <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_uint64s_.size();
<a name="l01423"></a>01423     m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#611fa35102e6366583df213d9a033ce5">rev_ptr_index_</a> = <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_ptrs_.size();
<a name="l01424"></a>01424     m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#e15d50e63cbb570a6c5bd9b207e4fd86">rev_boolvar_list_index_</a> = <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_boolvar_list_.size();
<a name="l01425"></a>01425     m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#cfe80591d75fad1f8b61d0be54f83be1">rev_bools_index_</a> = <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_bools_.size();
<a name="l01426"></a><a class="code" href="classoperations__research_1_1Solver.html#da2becf41db5ebb5a6d40c75584918a5">01426</a>     m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#567759b019a07447185219b3b049a56b">rev_int_memory_index_</a> = <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_int_memory_.size();
<a name="l01427"></a>01427     m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#3716106fcd2f164dd83d0ee3d7f48ea4">rev_int64_memory_index_</a> = <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_int64_memory_.size();
<a name="l01428"></a>01428     m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#0d2c3347f6d80cf1754b596f5c4cd3f3">rev_object_memory_index_</a> = <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_object_memory_.size();
<a name="l01429"></a>01429     m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#b9edca8db5e3933b8343ebc6242c51b0">rev_object_array_memory_index_</a> = <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_object_array_memory_.size();
<a name="l01430"></a>01430     m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#59f571a7c091f1c6613f7a3fd81e2b9f">rev_memory_index_</a> = <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_memory_.size();
<a name="l01431"></a>01431     m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#7376e157224557b0ac9471eee71c2e04">rev_memory_array_index_</a> = <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;rev_memory_array_.size();
<a name="l01432"></a>01432   }
<a name="l01433"></a>01433   <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back()-&gt;marker_stack_.push_back(m);
<a name="l01434"></a>01434   <a class="code" href="classoperations__research_1_1Solver.html#45f11281cab2fc4efb997666805c36a0">queue_</a>-&gt;increase_stamp();
<a name="l01435"></a>01435 }
<a name="l01436"></a>01436 
<a name="l01437"></a>01437 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#12783cb5a67a23a12104dfd9f51d3c92" title="When SaveValue() is not the best way to go, one can create a reversible action that...">Solver::AddBacktrackAction</a>(Action* a, <span class="keywordtype">bool</span> fast) {
<a name="l01438"></a>01438   StateInfo info(a, static_cast&lt;int&gt;(fast));
<a name="l01439"></a>01439   <a class="code" href="classoperations__research_1_1Solver.html#6d2ae179cd6e66dc4cfd14307126b2cb" title="The PushState and PopState methods manipulates the states of the reversible objects...">PushState</a>(<a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e7d02bd6f10e34551ac9b74d12ee3d746">REVERSIBLE_ACTION</a>, info);
<a name="l01440"></a>01440 }
<a name="l01441"></a>01441 
<a name="l01442"></a>01442 <a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e" title="This enum is used internally to tag states in the search tree.">MarkerType</a> <a class="code" href="classoperations__research_1_1Solver.html#67a90d3f386c8530100f810ef54a240a">Solver::PopState</a>(StateInfo* info) {
<a name="l01443"></a>01443   CHECK(!<a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back()-&gt;marker_stack_.empty())
<a name="l01444"></a>01444       &lt;&lt; <span class="stringliteral">"PopState() on an empty stack"</span>;
<a name="l01445"></a>01445   CHECK(info != NULL);
<a name="l01446"></a><a class="code" href="classoperations__research_1_1Solver.html#12783cb5a67a23a12104dfd9f51d3c92">01446</a>   <a class="code" href="structoperations__research_1_1StateMarker.html">StateMarker</a>* m = <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back()-&gt;marker_stack_.back();
<a name="l01447"></a>01447   <span class="keywordflow">if</span> (m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#5945e8fa6615f411642c0a8f7b254e9f">type_</a> != <a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e7d02bd6f10e34551ac9b74d12ee3d746">REVERSIBLE_ACTION</a> || m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#a511a58fff101f893be1792b30533a99">info_</a>.<a class="code" href="structoperations__research_1_1StateInfo.html#000fb6644096e817fbaaa6f0ec4d2dc7">int_info</a> == 0) {
<a name="l01448"></a>01448     <a class="code" href="classoperations__research_1_1Solver.html#f47aeceae83d79198b467315ad3c75e4">trail_</a>-&gt;BacktrackTo(m);
<a name="l01449"></a>01449   }
<a name="l01450"></a>01450   <a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e" title="This enum is used internally to tag states in the search tree.">MarkerType</a> t = m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#5945e8fa6615f411642c0a8f7b254e9f">type_</a>;
<a name="l01451"></a><a class="code" href="classoperations__research_1_1Solver.html#ffa22b87403e19b413d1d8e74f0e8794">01451</a>   (*info) = m-&gt;<a class="code" href="structoperations__research_1_1StateMarker.html#a511a58fff101f893be1792b30533a99">info_</a>;
<a name="l01452"></a>01452   <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back()-&gt;marker_stack_.pop_back();
<a name="l01453"></a>01453   <span class="keyword">delete</span> m;
<a name="l01454"></a>01454   <a class="code" href="classoperations__research_1_1Solver.html#45f11281cab2fc4efb997666805c36a0">queue_</a>-&gt;increase_stamp();
<a name="l01455"></a>01455   <span class="keywordflow">return</span> t;
<a name="l01456"></a>01456 }
<a name="l01457"></a>01457 
<a name="l01458"></a>01458 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#02c048ac30577e0224b905ad2e9324bc">Solver::check_alloc_state</a>() {
<a name="l01459"></a>01459   <span class="keywordflow">switch</span> (<a class="code" href="classoperations__research_1_1Solver.html#f7458c69402c50603880a24a069decc0">state_</a>) {
<a name="l01460"></a>01460     <span class="keywordflow">case</span> <a class="code" href="classoperations__research_1_1Solver.html#5b5712802e63dcd3ee5abfd37e0f2a95c05654b6a7479316478744b3ce4a50df" title="Before search, after search.">OUTSIDE_SEARCH</a>:
<a name="l01461"></a>01461     <span class="keywordflow">case</span> <a class="code" href="classoperations__research_1_1Solver.html#5b5712802e63dcd3ee5abfd37e0f2a95066908e143fd988a03767f05e682acaf" title="Executing the search code.">IN_SEARCH</a>:
<a name="l01462"></a>01462     <span class="keywordflow">case</span> <a class="code" href="classoperations__research_1_1Solver.html#5b5712802e63dcd3ee5abfd37e0f2a95401b0c79d1fa9261524343fce4dd5439" title="After failed NextSolution and before EndSearch.">NO_MORE_SOLUTIONS</a>:
<a name="l01463"></a>01463     <span class="keywordflow">case</span> <a class="code" href="classoperations__research_1_1Solver.html#5b5712802e63dcd3ee5abfd37e0f2a9530b34e2664f9b1e2fb0d1347d7a87674" title="After search, the model is infeasible.">PROBLEM_INFEASIBLE</a>:
<a name="l01464"></a>01464       <span class="keywordflow">break</span>;
<a name="l01465"></a>01465     <span class="keywordflow">case</span> <a class="code" href="classoperations__research_1_1Solver.html#5b5712802e63dcd3ee5abfd37e0f2a95d487136b6f055fa3fadfd6a3c12aa3a3" title="After successful NextSolution and before EndSearch.">AT_SOLUTION</a>:
<a name="l01466"></a>01466       LOG(FATAL) &lt;&lt; <span class="stringliteral">"allocating at a leaf node"</span>;
<a name="l01467"></a><a class="code" href="classoperations__research_1_1Solver.html#02c048ac30577e0224b905ad2e9324bc">01467</a>   }
<a name="l01468"></a>01468 }
<a name="l01469"></a>01469 
<a name="l01470"></a>01470 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#e8f2aca4ff70252d643ac2a0ca02e44d" title="Add a fail hook, that is an action that will be called after each failure.">Solver::AddFailHook</a>(Action* a) {
<a name="l01471"></a>01471   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1Solver.html#3117d532b128100e244526a6a87da249">fail_hooks_</a> == NULL) {
<a name="l01472"></a>01472     <a class="code" href="classoperations__research_1_1Solver.html#7ccd4144085fe2217fd92798283e99df" title="reversibility">SaveValue</a>(reinterpret_cast&lt;void**&gt;(&amp;<a class="code" href="classoperations__research_1_1Solver.html#3117d532b128100e244526a6a87da249">fail_hooks_</a>));
<a name="l01473"></a>01473     <a class="code" href="classoperations__research_1_1Solver.html#3117d532b128100e244526a6a87da249">fail_hooks_</a> = <a class="code" href="classoperations__research_1_1Solver.html#33e4733225dee453b75d83c991194286">UnsafeRevAlloc</a>(<span class="keyword">new</span> SimpleRevFIFO&lt;Action*&gt;);
<a name="l01474"></a>01474   }
<a name="l01475"></a>01475   <a class="code" href="classoperations__research_1_1Solver.html#3117d532b128100e244526a6a87da249">fail_hooks_</a>-&gt;Push(<span class="keyword">this</span>, a);
<a name="l01476"></a>01476 }
<a name="l01477"></a>01477 
<a name="l01478"></a>01478 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#88ea9f022b421c1eed2904b0d722adfb">Solver::CallFailHooks</a>() {
<a name="l01479"></a><a class="code" href="classoperations__research_1_1Solver.html#e8f2aca4ff70252d643ac2a0ca02e44d">01479</a>   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1Solver.html#3117d532b128100e244526a6a87da249">fail_hooks_</a> != NULL) {
<a name="l01480"></a>01480     <span class="keywordflow">for</span> (<a class="code" href="classoperations__research_1_1SimpleRevFIFO.html" title="utility classes">SimpleRevFIFO&lt;Action*&gt;::Iterator</a> it(<a class="code" href="classoperations__research_1_1Solver.html#3117d532b128100e244526a6a87da249">fail_hooks_</a>); it.ok(); ++it) {
<a name="l01481"></a>01481       (*it)-&gt;Run(<span class="keyword">this</span>);
<a name="l01482"></a>01482     }
<a name="l01483"></a>01483   }
<a name="l01484"></a>01484 }
<a name="l01485"></a>01485 
<a name="l01486"></a>01486 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#dbeef6ac351f7b77d668843e19527d8c">Solver::FreezeQueue</a>() {
<a name="l01487"></a><a class="code" href="classoperations__research_1_1Solver.html#88ea9f022b421c1eed2904b0d722adfb">01487</a>   <a class="code" href="classoperations__research_1_1Solver.html#45f11281cab2fc4efb997666805c36a0">queue_</a>-&gt;Freeze();
<a name="l01488"></a>01488 }
<a name="l01489"></a>01489 
<a name="l01490"></a>01490 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#b1dce771ac95b2c9b4c410d2740ad409">Solver::UnfreezeQueue</a>() {
<a name="l01491"></a>01491   <a class="code" href="classoperations__research_1_1Solver.html#45f11281cab2fc4efb997666805c36a0">queue_</a>-&gt;Unfreeze();
<a name="l01492"></a>01492 }
<a name="l01493"></a>01493 
<a name="l01494"></a>01494 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#d84b2322f1d652b9c744025774de6b34">Solver::Enqueue</a>(Demon* d) {
<a name="l01495"></a><a class="code" href="classoperations__research_1_1Solver.html#dbeef6ac351f7b77d668843e19527d8c">01495</a>   <a class="code" href="classoperations__research_1_1Solver.html#45f11281cab2fc4efb997666805c36a0">queue_</a>-&gt;Enqueue(d);
<a name="l01496"></a>01496 }
<a name="l01497"></a>01497 
<a name="l01498"></a>01498 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#0241fd683f1f508e48c89e5668168200">Solver::ProcessDemonsOnQueue</a>() {
<a name="l01499"></a><a class="code" href="classoperations__research_1_1Solver.html#b1dce771ac95b2c9b4c410d2740ad409">01499</a>   <a class="code" href="classoperations__research_1_1Solver.html#45f11281cab2fc4efb997666805c36a0">queue_</a>-&gt;ProcessDemons();
<a name="l01500"></a>01500 }
<a name="l01501"></a>01501 
<a name="l01502"></a>01502 uint64 <a class="code" href="classoperations__research_1_1Solver.html#f17dc31a0a12a7c6c9c09a8a8e2d94e4" title="The stamp indicates how many moves in the search tree we have performed.">Solver::stamp</a>()<span class="keyword"> const </span>{
<a name="l01503"></a><a class="code" href="classoperations__research_1_1Solver.html#d84b2322f1d652b9c744025774de6b34">01503</a>   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#45f11281cab2fc4efb997666805c36a0">queue_</a>-&gt;stamp();
<a name="l01504"></a>01504 }
<a name="l01505"></a>01505 
<a name="l01506"></a>01506 uint64 <a class="code" href="classoperations__research_1_1Solver.html#0acf6942724a40e662a40df1f804eb51" title="The fail_stamp() is incremented after each backtrack.">Solver::fail_stamp</a>()<span class="keyword"> const </span>{
<a name="l01507"></a><a class="code" href="classoperations__research_1_1Solver.html#0241fd683f1f508e48c89e5668168200">01507</a>   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#ea8ba31be8fcb91d4d1e0c373e900b92">fail_stamp_</a>;
<a name="l01508"></a>01508 }
<a name="l01509"></a>01509 
<a name="l01510"></a>01510 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#997b821af1724c8fb6b9a9219d49f26c">Solver::set_queue_action_on_fail</a>(<a class="code" href="classoperations__research_1_1Action.html" title="An action is the base callback method.">Action</a>* a) {
<a name="l01511"></a><a class="code" href="classoperations__research_1_1Solver.html#f17dc31a0a12a7c6c9c09a8a8e2d94e4">01511</a>   <a class="code" href="classoperations__research_1_1Solver.html#45f11281cab2fc4efb997666805c36a0">queue_</a>-&gt;set_action_on_fail(a);
<a name="l01512"></a>01512 }
<a name="l01513"></a>01513 
<a name="l01514"></a>01514 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#6f7a3818608c149287f045bdd4b09dfc">Solver::set_queue_cleaner_on_fail</a>(<a class="code" href="classoperations__research_1_1DomainIntVar.html" title="Subclasses of IntVar.">DomainIntVar</a>* <span class="keyword">const</span> var) {
<a name="l01515"></a><a class="code" href="classoperations__research_1_1Solver.html#0acf6942724a40e662a40df1f804eb51">01515</a>   <a class="code" href="classoperations__research_1_1Solver.html#6c8cb5b26e35e3b2bbac045c92fe0712">variable_cleaner_</a>-&gt;set_var(var);
<a name="l01516"></a>01516   <a class="code" href="classoperations__research_1_1Solver.html#997b821af1724c8fb6b9a9219d49f26c">set_queue_action_on_fail</a>(<a class="code" href="classoperations__research_1_1Solver.html#6c8cb5b26e35e3b2bbac045c92fe0712">variable_cleaner_</a>.get());
<a name="l01517"></a>01517 }
<a name="l01518"></a>01518 
<a name="l01519"></a><a class="code" href="classoperations__research_1_1Solver.html#997b821af1724c8fb6b9a9219d49f26c">01519</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#831239b38b9a6e6fd856816aac501ee6">Solver::clear_queue_action_on_fail</a>() {
<a name="l01520"></a>01520   <a class="code" href="classoperations__research_1_1Solver.html#45f11281cab2fc4efb997666805c36a0">queue_</a>-&gt;clear_action_on_fail();
<a name="l01521"></a>01521 }
<a name="l01522"></a>01522 
<a name="l01523"></a><a class="code" href="classoperations__research_1_1Solver.html#6f7a3818608c149287f045bdd4b09dfc">01523</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#9c522a6cff91adae19af5cce7d8e411f" title="propagation">Solver::AddConstraint</a>(<a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <span class="keyword">const</span> c) {
<a name="l01524"></a>01524   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1Solver.html#f7458c69402c50603880a24a069decc0">state_</a> == <a class="code" href="classoperations__research_1_1Solver.html#5b5712802e63dcd3ee5abfd37e0f2a95066908e143fd988a03767f05e682acaf" title="Executing the search code.">IN_SEARCH</a>) {
<a name="l01525"></a>01525     <a class="code" href="classoperations__research_1_1Solver.html#45f11281cab2fc4efb997666805c36a0">queue_</a>-&gt;AddConstraint(c);
<a name="l01526"></a>01526   } <span class="keywordflow">else</span> {
<a name="l01527"></a>01527     <span class="keywordflow">if</span> (FLAGS_cp_show_constraints) {
<a name="l01528"></a><a class="code" href="classoperations__research_1_1Solver.html#831239b38b9a6e6fd856816aac501ee6">01528</a>       LOG(INFO) &lt;&lt; c-&gt;<a class="code" href="classoperations__research_1_1Constraint.html#f870afb5d6c1fba1d70b38eb581f8cca" title="Constraint class.">DebugString</a>();
<a name="l01529"></a>01529     }
<a name="l01530"></a>01530     <a class="code" href="classoperations__research_1_1Solver.html#7f5d018f370369ea5cb657e0543c19b7">constraints_list_</a>.push_back(c);
<a name="l01531"></a>01531   }
<a name="l01532"></a><a class="code" href="classoperations__research_1_1Solver.html#9c522a6cff91adae19af5cce7d8e411f">01532</a> }
<a name="l01533"></a>01533 
<a name="l01534"></a>01534 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#c79214f800c03686b5c03e4f713153a0">Solver::ProcessConstraints</a>() {
<a name="l01535"></a>01535   <span class="keywordflow">for</span> (<a class="code" href="classoperations__research_1_1Solver.html#43d4761fa6a133bfba495181e36ee1ca">constraints_</a> = 0;
<a name="l01536"></a>01536        <a class="code" href="classoperations__research_1_1Solver.html#43d4761fa6a133bfba495181e36ee1ca">constraints_</a> &lt; <a class="code" href="classoperations__research_1_1Solver.html#7f5d018f370369ea5cb657e0543c19b7">constraints_list_</a>.size();
<a name="l01537"></a>01537        ++<a class="code" href="classoperations__research_1_1Solver.html#43d4761fa6a133bfba495181e36ee1ca">constraints_</a>) {
<a name="l01538"></a>01538     <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <span class="keyword">const</span> constraint = <a class="code" href="classoperations__research_1_1Solver.html#7f5d018f370369ea5cb657e0543c19b7">constraints_list_</a>[<a class="code" href="classoperations__research_1_1Solver.html#43d4761fa6a133bfba495181e36ee1ca">constraints_</a>];
<a name="l01539"></a>01539     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1Solver.html#67b763490f2c626ab7993417a66f26bd">parameters_</a>.<a class="code" href="structoperations__research_1_1SolverParameters.html#8fe1248f3b6a31d68cb718a961ea4a06" title="Support for profiling propagation.">profile_level</a> != <a class="code" href="structoperations__research_1_1SolverParameters.html#bb1b746ad99155bea2d44ba46db0718723a03d3fac4ba780d9caa8ae38f5dea9">SolverParameters::NO_PROFILING</a>) {
<a name="l01540"></a>01540       <a class="code" href="namespaceoperations__research.html#b5240e8c0ba682f97baea46641082c70">DemonMonitorStartInitialPropagation</a>(<a class="code" href="classoperations__research_1_1Solver.html#c70d81a14381b4e4d7478874ed8edc05" title="Demon monitor.">demon_monitor_</a>, constraint);
<a name="l01541"></a>01541     }
<a name="l01542"></a>01542     constraint-&gt;<a class="code" href="classoperations__research_1_1Constraint.html#92c3bfe86238b5c95448d4a0384a327f" title="We no longer need those.">PostAndPropagate</a>();
<a name="l01543"></a><a class="code" href="classoperations__research_1_1Solver.html#c79214f800c03686b5c03e4f713153a0">01543</a>     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1Solver.html#67b763490f2c626ab7993417a66f26bd">parameters_</a>.<a class="code" href="structoperations__research_1_1SolverParameters.html#8fe1248f3b6a31d68cb718a961ea4a06" title="Support for profiling propagation.">profile_level</a> != <a class="code" href="structoperations__research_1_1SolverParameters.html#bb1b746ad99155bea2d44ba46db0718723a03d3fac4ba780d9caa8ae38f5dea9">SolverParameters::NO_PROFILING</a>) {
<a name="l01544"></a>01544       <a class="code" href="namespaceoperations__research.html#aa11d663f99a1dda5d5228aaf3014602">DemonMonitorEndInitialPropagation</a>(<a class="code" href="classoperations__research_1_1Solver.html#c70d81a14381b4e4d7478874ed8edc05" title="Demon monitor.">demon_monitor_</a>, constraint);
<a name="l01545"></a>01545     }
<a name="l01546"></a>01546   }
<a name="l01547"></a>01547 }
<a name="l01548"></a>01548 
<a name="l01549"></a>01549 <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Solver.html#6d31c124181afb65d1441712e5f392d2" title="This functions returns true wether the current search has been created using a Solve()...">Solver::CurrentlyInSolve</a>()<span class="keyword"> const </span>{
<a name="l01550"></a>01550   DCHECK_GT(<a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.size(), 0);
<a name="l01551"></a>01551   DCHECK(<a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back() != NULL);
<a name="l01552"></a>01552   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back()-&gt;created_by_solve();
<a name="l01553"></a>01553 }
<a name="l01554"></a>01554 
<a name="l01555"></a>01555 <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Solver.html#7b5c21e2165843ce86b4b990c40b635c" title="search">Solver::Solve</a>(DecisionBuilder* <span class="keyword">const</span> db,
<a name="l01556"></a>01556                    <span class="keyword">const</span> vector&lt;SearchMonitor*&gt;&amp; monitors) {
<a name="l01557"></a>01557   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#7b5c21e2165843ce86b4b990c40b635c" title="search">Solve</a>(db, monitors.data(), monitors.size());
<a name="l01558"></a><a class="code" href="classoperations__research_1_1Solver.html#6d31c124181afb65d1441712e5f392d2">01558</a> }
<a name="l01559"></a>01559 
<a name="l01560"></a>01560 <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Solver.html#7b5c21e2165843ce86b4b990c40b635c" title="search">Solver::Solve</a>(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> db, <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m1) {
<a name="l01561"></a>01561   vector&lt;SearchMonitor*&gt; monitors;
<a name="l01562"></a>01562   monitors.push_back(m1);
<a name="l01563"></a>01563   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#7b5c21e2165843ce86b4b990c40b635c" title="search">Solve</a>(db, monitors.data(), monitors.size());
<a name="l01564"></a><a class="code" href="classoperations__research_1_1Solver.html#7b5c21e2165843ce86b4b990c40b635c">01564</a> }
<a name="l01565"></a>01565 
<a name="l01566"></a>01566 <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Solver.html#7b5c21e2165843ce86b4b990c40b635c" title="search">Solver::Solve</a>(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> db) {
<a name="l01567"></a>01567   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#7b5c21e2165843ce86b4b990c40b635c" title="search">Solve</a>(db, NULL, <a class="code" href="namespaceoperations__research.html#009f247167f32509baf749083e4bc984" title="Misc.">Zero</a>());
<a name="l01568"></a>01568 }
<a name="l01569"></a><a class="code" href="classoperations__research_1_1Solver.html#de33b8a9dce522094d5ce4b53fd5299d">01569</a> 
<a name="l01570"></a>01570 <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Solver.html#7b5c21e2165843ce86b4b990c40b635c" title="search">Solver::Solve</a>(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> db,
<a name="l01571"></a>01571                    <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m1,
<a name="l01572"></a>01572                    <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m2) {
<a name="l01573"></a>01573   vector&lt;SearchMonitor*&gt; monitors;
<a name="l01574"></a>01574   monitors.push_back(m1);
<a name="l01575"></a><a class="code" href="classoperations__research_1_1Solver.html#ab76d0849165f2c5b70ca910114607cd">01575</a>   monitors.push_back(m2);
<a name="l01576"></a>01576   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#7b5c21e2165843ce86b4b990c40b635c" title="search">Solve</a>(db, monitors.data(), monitors.size());
<a name="l01577"></a>01577 }
<a name="l01578"></a>01578 
<a name="l01579"></a><a class="code" href="classoperations__research_1_1Solver.html#ae3ef7a28da87aeb3fbd258210f805c7">01579</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Solver.html#7b5c21e2165843ce86b4b990c40b635c" title="search">Solver::Solve</a>(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> db,
<a name="l01580"></a>01580                    <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m1,
<a name="l01581"></a>01581                    <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m2,
<a name="l01582"></a>01582                    <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m3) {
<a name="l01583"></a>01583   vector&lt;SearchMonitor*&gt; monitors;
<a name="l01584"></a>01584   monitors.push_back(m1);
<a name="l01585"></a>01585   monitors.push_back(m2);
<a name="l01586"></a>01586   monitors.push_back(m3);
<a name="l01587"></a>01587   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#7b5c21e2165843ce86b4b990c40b635c" title="search">Solve</a>(db, monitors.data(), monitors.size());
<a name="l01588"></a><a class="code" href="classoperations__research_1_1Solver.html#18f600b8b9594c59d9da9fb1b93cfa9b">01588</a> }
<a name="l01589"></a>01589 
<a name="l01590"></a>01590 <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Solver.html#7b5c21e2165843ce86b4b990c40b635c" title="search">Solver::Solve</a>(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> db,
<a name="l01591"></a>01591                    <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m1,
<a name="l01592"></a>01592                    <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m2,
<a name="l01593"></a>01593                    <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m3,
<a name="l01594"></a>01594                    <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m4) {
<a name="l01595"></a>01595   vector&lt;SearchMonitor*&gt; monitors;
<a name="l01596"></a>01596   monitors.push_back(m1);
<a name="l01597"></a>01597   monitors.push_back(m2);
<a name="l01598"></a>01598   monitors.push_back(m3);
<a name="l01599"></a><a class="code" href="classoperations__research_1_1Solver.html#dadd60fc9e9d63a293b606376a171578">01599</a>   monitors.push_back(m4);
<a name="l01600"></a>01600   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#7b5c21e2165843ce86b4b990c40b635c" title="search">Solve</a>(db, monitors.data(), monitors.size());
<a name="l01601"></a>01601 }
<a name="l01602"></a>01602 
<a name="l01603"></a>01603 <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Solver.html#7b5c21e2165843ce86b4b990c40b635c" title="search">Solver::Solve</a>(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> db,
<a name="l01604"></a>01604                    <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> * monitors,
<a name="l01605"></a>01605                    <span class="keywordtype">int</span> size) {
<a name="l01606"></a>01606   <a class="code" href="classoperations__research_1_1Solver.html#bf340232c6d46043ea7c206d1c372621" title="Decomposed top level search.">NewSearch</a>(db, monitors, size);
<a name="l01607"></a>01607   <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back()-&gt;set_created_by_solve(<span class="keyword">true</span>);  <span class="comment">// Overwrites default.</span>
<a name="l01608"></a>01608   <a class="code" href="classoperations__research_1_1Solver.html#11ed2a5d7bb8fb1a8967fee572ab9c47" title="Search for the next solution in the search tree.">NextSolution</a>();
<a name="l01609"></a>01609   <span class="keyword">const</span> <span class="keywordtype">bool</span> solution_found = <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back()-&gt;solution_counter() &gt; 0;
<a name="l01610"></a>01610   <a class="code" href="classoperations__research_1_1Solver.html#b95c7f997dbe36deb51e7c0213bdf445">EndSearch</a>();
<a name="l01611"></a>01611   <span class="keywordflow">return</span> solution_found;
<a name="l01612"></a><a class="code" href="classoperations__research_1_1Solver.html#65c256a6d5fc54a6921b63741bbbf779">01612</a> }
<a name="l01613"></a>01613 
<a name="l01614"></a>01614 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#bf340232c6d46043ea7c206d1c372621" title="Decomposed top level search.">Solver::NewSearch</a>(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> db,
<a name="l01615"></a>01615                        <span class="keyword">const</span> vector&lt;SearchMonitor*&gt;&amp; monitors) {
<a name="l01616"></a>01616   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#bf340232c6d46043ea7c206d1c372621" title="Decomposed top level search.">NewSearch</a>(db, monitors.data(), monitors.size());
<a name="l01617"></a>01617 }
<a name="l01618"></a>01618 
<a name="l01619"></a>01619 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#bf340232c6d46043ea7c206d1c372621" title="Decomposed top level search.">Solver::NewSearch</a>(DecisionBuilder* <span class="keyword">const</span> db, <a class="code" href="classoperations__research_1_1Solver.html#ac32a6eabe1d316d7ff5f92fedd1ec5b">SearchMonitor</a>* <span class="keyword">const</span> m1) {
<a name="l01620"></a>01620   vector&lt;SearchMonitor*&gt; monitors;
<a name="l01621"></a>01621   monitors.push_back(m1);
<a name="l01622"></a>01622   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#bf340232c6d46043ea7c206d1c372621" title="Decomposed top level search.">NewSearch</a>(db, monitors.data(), monitors.size());
<a name="l01623"></a><a class="code" href="classoperations__research_1_1Solver.html#bf340232c6d46043ea7c206d1c372621">01623</a> }
<a name="l01624"></a>01624 
<a name="l01625"></a>01625 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#bf340232c6d46043ea7c206d1c372621" title="Decomposed top level search.">Solver::NewSearch</a>(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> db) {
<a name="l01626"></a>01626   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#bf340232c6d46043ea7c206d1c372621" title="Decomposed top level search.">NewSearch</a>(db, NULL, <a class="code" href="namespaceoperations__research.html#009f247167f32509baf749083e4bc984" title="Misc.">Zero</a>());
<a name="l01627"></a>01627 }
<a name="l01628"></a><a class="code" href="classoperations__research_1_1Solver.html#0e93535e454db167f3b2bac3ffc18610">01628</a> 
<a name="l01629"></a>01629 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#bf340232c6d46043ea7c206d1c372621" title="Decomposed top level search.">Solver::NewSearch</a>(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> db,
<a name="l01630"></a>01630                        <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m1,
<a name="l01631"></a>01631                        <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m2) {
<a name="l01632"></a>01632   vector&lt;SearchMonitor*&gt; monitors;
<a name="l01633"></a>01633   monitors.push_back(m1);
<a name="l01634"></a><a class="code" href="classoperations__research_1_1Solver.html#92bf29bae6bb68ecae8d09e477183689">01634</a>   monitors.push_back(m2);
<a name="l01635"></a>01635   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#bf340232c6d46043ea7c206d1c372621" title="Decomposed top level search.">NewSearch</a>(db, monitors.data(), monitors.size());
<a name="l01636"></a>01636 }
<a name="l01637"></a>01637 
<a name="l01638"></a><a class="code" href="classoperations__research_1_1Solver.html#77376dffe41cb00920902a485c137b75">01638</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#bf340232c6d46043ea7c206d1c372621" title="Decomposed top level search.">Solver::NewSearch</a>(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> db,
<a name="l01639"></a>01639                        <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m1,
<a name="l01640"></a>01640                        <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m2,
<a name="l01641"></a>01641                        <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m3) {
<a name="l01642"></a>01642   vector&lt;SearchMonitor*&gt; monitors;
<a name="l01643"></a>01643   monitors.push_back(m1);
<a name="l01644"></a>01644   monitors.push_back(m2);
<a name="l01645"></a>01645   monitors.push_back(m3);
<a name="l01646"></a>01646   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#bf340232c6d46043ea7c206d1c372621" title="Decomposed top level search.">NewSearch</a>(db, monitors.data(), monitors.size());
<a name="l01647"></a><a class="code" href="classoperations__research_1_1Solver.html#309a2fb045ca55e103b3705b3ad3ba39">01647</a> }
<a name="l01648"></a>01648 
<a name="l01649"></a>01649 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#bf340232c6d46043ea7c206d1c372621" title="Decomposed top level search.">Solver::NewSearch</a>(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> db,
<a name="l01650"></a>01650                        <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m1,
<a name="l01651"></a>01651                        <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m2,
<a name="l01652"></a>01652                        <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m3,
<a name="l01653"></a>01653                        <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m4) {
<a name="l01654"></a>01654   vector&lt;SearchMonitor*&gt; monitors;
<a name="l01655"></a>01655   monitors.push_back(m1);
<a name="l01656"></a>01656   monitors.push_back(m2);
<a name="l01657"></a>01657   monitors.push_back(m3);
<a name="l01658"></a><a class="code" href="classoperations__research_1_1Solver.html#5b0d44ae2db74b96268885785bd9c328">01658</a>   monitors.push_back(m4);
<a name="l01659"></a>01659   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#bf340232c6d46043ea7c206d1c372621" title="Decomposed top level search.">NewSearch</a>(db, monitors.data(), monitors.size());
<a name="l01660"></a>01660 }
<a name="l01661"></a>01661 
<a name="l01662"></a>01662 <span class="comment">// Opens a new top level search.</span>
<a name="l01663"></a>01663 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#bf340232c6d46043ea7c206d1c372621" title="Decomposed top level search.">Solver::NewSearch</a>(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> db,
<a name="l01664"></a>01664                        <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> * monitors,
<a name="l01665"></a>01665                        <span class="keywordtype">int</span> size) {
<a name="l01666"></a>01666   <span class="comment">// TODO(user) : reset statistics</span>
<a name="l01667"></a>01667 
<a name="l01668"></a>01668   CHECK_NOTNULL(db);
<a name="l01669"></a>01669   DCHECK_GE(size, 0);
<a name="l01670"></a>01670 
<a name="l01671"></a>01671   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1Solver.html#f7458c69402c50603880a24a069decc0">state_</a> == <a class="code" href="classoperations__research_1_1Solver.html#5b5712802e63dcd3ee5abfd37e0f2a95066908e143fd988a03767f05e682acaf" title="Executing the search code.">IN_SEARCH</a>) {
<a name="l01672"></a><a class="code" href="classoperations__research_1_1Solver.html#f1b1699d53b5182d872335aaeac0673a">01672</a>     LOG(FATAL) &lt;&lt; <span class="stringliteral">"Use NestedSolve() inside search"</span>;
<a name="l01673"></a>01673   }
<a name="l01674"></a>01674   <span class="comment">// Check state and go to OUTSIDE_SEARCH.</span>
<a name="l01675"></a>01675   <a class="code" href="classoperations__research_1_1Search.html" title="Search class.">Search</a>* <span class="keyword">const</span> search = <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back();
<a name="l01676"></a>01676   search-&gt;<a class="code" href="classoperations__research_1_1Search.html#1fcd92000011aeb8f6dc5454bfba38a9">set_created_by_solve</a>(<span class="keyword">false</span>);  <span class="comment">// default behavior.</span>
<a name="l01677"></a>01677 
<a name="l01678"></a>01678   <a class="code" href="classoperations__research_1_1Solver.html#82d54172f1ad5af7c3b8347654416c07" title="Backtrack to the initial search sentinel.">BacktrackToSentinel</a>(<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd02b2511dee343d326f2a71b028b1b78e">INITIAL_SEARCH_SENTINEL</a>);
<a name="l01679"></a>01679   <a class="code" href="classoperations__research_1_1Solver.html#f7458c69402c50603880a24a069decc0">state_</a> = <a class="code" href="classoperations__research_1_1Solver.html#5b5712802e63dcd3ee5abfd37e0f2a95c05654b6a7479316478744b3ce4a50df" title="Before search, after search.">OUTSIDE_SEARCH</a>;
<a name="l01680"></a>01680 
<a name="l01681"></a>01681   <span class="comment">// Push monitors and enter search.</span>
<a name="l01682"></a>01682   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {
<a name="l01683"></a>01683     search-&gt;<a class="code" href="classoperations__research_1_1Search.html#b75f27d7740f8a0d5428878f589c0b49">push_monitor</a>(monitors[i]);
<a name="l01684"></a>01684   }
<a name="l01685"></a>01685   search-&gt;<a class="code" href="classoperations__research_1_1Search.html#b3a81afa65291b9bdd3f3a168ce55aa4">EnterSearch</a>();
<a name="l01686"></a>01686 
<a name="l01687"></a>01687   <span class="comment">// Push sentinel and set decision builder.</span>
<a name="l01688"></a>01688   DCHECK_EQ(1, <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.size());
<a name="l01689"></a>01689   <a class="code" href="classoperations__research_1_1Solver.html#2b9d38fb77e9ea75ff565b5a229e83ec">PushSentinel</a>(<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd02b2511dee343d326f2a71b028b1b78e">INITIAL_SEARCH_SENTINEL</a>);
<a name="l01690"></a>01690   search-&gt;<a class="code" href="classoperations__research_1_1Search.html#4b37a519f7faebaeb4b6be5c62757c2b">set_decision_builder</a>(db);
<a name="l01691"></a>01691 }
<a name="l01692"></a>01692 
<a name="l01693"></a>01693 <span class="comment">// Backtrack to the last open right branch in the search tree.</span>
<a name="l01694"></a>01694 <span class="comment">// It returns true in case the search tree has been completely explored.</span>
<a name="l01695"></a>01695 <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Solver.html#27c7e8546796616e50c2fca1f1acb65a" title="Backtrack to the last open right branch in the search tree.">Solver::BacktrackOneLevel</a>(Decision** fail_decision) {
<a name="l01696"></a>01696   <span class="keywordtype">bool</span> no_more_solutions = <span class="keyword">false</span>;
<a name="l01697"></a>01697   <span class="keywordtype">bool</span> end_loop = <span class="keyword">false</span>;
<a name="l01698"></a>01698   <span class="keywordflow">while</span> (!end_loop) {
<a name="l01699"></a>01699     StateInfo info;
<a name="l01700"></a>01700     <a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e" title="This enum is used internally to tag states in the search tree.">MarkerType</a> t = <a class="code" href="classoperations__research_1_1Solver.html#67a90d3f386c8530100f810ef54a240a">PopState</a>(&amp;info);
<a name="l01701"></a>01701     <span class="keywordflow">switch</span> (t) {
<a name="l01702"></a>01702       <span class="keywordflow">case</span> <a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e9a277c2d196896995aaffb41aec2faea">SENTINEL</a>:
<a name="l01703"></a>01703         CHECK_EQ(info.ptr_info, <span class="keyword">this</span>) &lt;&lt; <span class="stringliteral">"Wrong sentinel found"</span>;
<a name="l01704"></a><a class="code" href="classoperations__research_1_1Solver.html#27c7e8546796616e50c2fca1f1acb65a">01704</a>         CHECK((info.int_info == <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd1468ffb746584acd9976da043763d632">ROOT_NODE_SENTINEL</a> &amp;&amp; <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.size() == 1) ||
<a name="l01705"></a>01705               (info.int_info == <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd02b2511dee343d326f2a71b028b1b78e">INITIAL_SEARCH_SENTINEL</a> &amp;&amp;
<a name="l01706"></a>01706                <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.size() &gt; 1));
<a name="l01707"></a>01707         <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back()-&gt;sentinel_pushed_--;
<a name="l01708"></a>01708         no_more_solutions = <span class="keyword">true</span>;
<a name="l01709"></a>01709         end_loop = <span class="keyword">true</span>;
<a name="l01710"></a>01710         <span class="keywordflow">break</span>;
<a name="l01711"></a>01711       <span class="keywordflow">case</span> <a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e695cce0161b127055c52d41744e97395">SIMPLE_MARKER</a>:
<a name="l01712"></a>01712         LOG(ERROR)
<a name="l01713"></a>01713             &lt;&lt; <span class="stringliteral">"Simple markers should not be encountered during search"</span>;
<a name="l01714"></a>01714         <span class="keywordflow">break</span>;
<a name="l01715"></a>01715       <span class="keywordflow">case</span> <a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e1d3aaf5d04e4a502a2db3fa71a1061b7">CHOICE_POINT</a>:
<a name="l01716"></a>01716         <span class="keywordflow">if</span> (info.int_info == 0) {  <span class="comment">// was left branch</span>
<a name="l01717"></a>01717           (*fail_decision) = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="classoperations__research_1_1Decision.html" title="A Decision represents a choice point in the search tree.">Decision</a>*<span class="keyword">&gt;</span>(info.ptr_info);
<a name="l01718"></a>01718           end_loop = <span class="keyword">true</span>;
<a name="l01719"></a>01719           <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back()-&gt;set_search_depth(info.depth);
<a name="l01720"></a>01720           <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back()-&gt;set_search_left_depth(info.left_depth);
<a name="l01721"></a>01721         }
<a name="l01722"></a>01722         <span class="keywordflow">break</span>;
<a name="l01723"></a>01723       <span class="keywordflow">case</span> <a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e7d02bd6f10e34551ac9b74d12ee3d746">REVERSIBLE_ACTION</a>: {
<a name="l01724"></a>01724         <a class="code" href="classoperations__research_1_1Action.html" title="An action is the base callback method.">Action</a>* d = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="classoperations__research_1_1Action.html" title="An action is the base callback method.">Action</a>*<span class="keyword">&gt;</span>(info.ptr_info);
<a name="l01725"></a>01725         d-&gt;<a class="code" href="classoperations__research_1_1Action.html#d01804a870fc0d8634a13e9a305a5bf8" title="The main callback of the class.">Run</a>(<span class="keyword">this</span>);
<a name="l01726"></a>01726         <span class="keywordflow">break</span>;
<a name="l01727"></a>01727       }
<a name="l01728"></a>01728     }
<a name="l01729"></a>01729   }
<a name="l01730"></a>01730   Search* <span class="keyword">const</span> search = <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back();
<a name="l01731"></a>01731   search-&gt;EndFail();
<a name="l01732"></a>01732   <a class="code" href="classoperations__research_1_1Solver.html#88ea9f022b421c1eed2904b0d722adfb">CallFailHooks</a>();
<a name="l01733"></a>01733   <a class="code" href="classoperations__research_1_1Solver.html#ea8ba31be8fcb91d4d1e0c373e900b92">fail_stamp_</a>++;
<a name="l01734"></a>01734   <span class="keywordflow">if</span> (no_more_solutions) {
<a name="l01735"></a>01735     search-&gt;NoMoreSolutions();
<a name="l01736"></a>01736   }
<a name="l01737"></a>01737   <span class="keywordflow">return</span> no_more_solutions;
<a name="l01738"></a>01738 }
<a name="l01739"></a>01739 
<a name="l01740"></a>01740 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#2b9d38fb77e9ea75ff565b5a229e83ec">Solver::PushSentinel</a>(<span class="keywordtype">int</span> magic_code) {
<a name="l01741"></a>01741   StateInfo info(<span class="keyword">this</span>, magic_code);
<a name="l01742"></a>01742   <a class="code" href="classoperations__research_1_1Solver.html#6d2ae179cd6e66dc4cfd14307126b2cb" title="The PushState and PopState methods manipulates the states of the reversible objects...">PushState</a>(<a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e9a277c2d196896995aaffb41aec2faea">SENTINEL</a>, info);
<a name="l01743"></a>01743   <span class="comment">// We do not count the sentinel pushed in the ctor.</span>
<a name="l01744"></a>01744   <span class="keywordflow">if</span> (magic_code != <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd3965e949f83df6105ff96de4d7fad8f1">SOLVER_CTOR_SENTINEL</a>) {
<a name="l01745"></a>01745     <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back()-&gt;sentinel_pushed_++;
<a name="l01746"></a>01746   }
<a name="l01747"></a>01747   <span class="keyword">const</span> <span class="keywordtype">int</span> pushed = <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back()-&gt;sentinel_pushed_;
<a name="l01748"></a>01748   DCHECK((magic_code == <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd3965e949f83df6105ff96de4d7fad8f1">SOLVER_CTOR_SENTINEL</a>) ||
<a name="l01749"></a><a class="code" href="classoperations__research_1_1Solver.html#2b9d38fb77e9ea75ff565b5a229e83ec">01749</a>          (magic_code == <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd02b2511dee343d326f2a71b028b1b78e">INITIAL_SEARCH_SENTINEL</a> &amp;&amp; pushed == 1) ||
<a name="l01750"></a>01750          (magic_code == <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd1468ffb746584acd9976da043763d632">ROOT_NODE_SENTINEL</a> &amp;&amp; pushed == 2));
<a name="l01751"></a>01751 }
<a name="l01752"></a>01752 
<a name="l01753"></a>01753 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#13e7e93a66ce0f15343c48c66d615e47">Solver::RestartSearch</a>() {
<a name="l01754"></a>01754   <a class="code" href="classoperations__research_1_1Search.html" title="Search class.">Search</a>* <span class="keyword">const</span> search = <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back();
<a name="l01755"></a>01755   CHECK_NE(0, search-&gt;<a class="code" href="classoperations__research_1_1Search.html#e41455d55c90d9ce868968bd2a62f737">sentinel_pushed_</a>);
<a name="l01756"></a>01756   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.size() == 1) {  <span class="comment">// top level.</span>
<a name="l01757"></a>01757     <span class="keywordflow">if</span> (search-&gt;<a class="code" href="classoperations__research_1_1Search.html#e41455d55c90d9ce868968bd2a62f737">sentinel_pushed_</a> &gt; 1) {
<a name="l01758"></a>01758       <a class="code" href="classoperations__research_1_1Solver.html#82d54172f1ad5af7c3b8347654416c07" title="Backtrack to the initial search sentinel.">BacktrackToSentinel</a>(<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd1468ffb746584acd9976da043763d632">ROOT_NODE_SENTINEL</a>);
<a name="l01759"></a>01759     }
<a name="l01760"></a>01760     CHECK_EQ(1, search-&gt;<a class="code" href="classoperations__research_1_1Search.html#e41455d55c90d9ce868968bd2a62f737">sentinel_pushed_</a>);
<a name="l01761"></a>01761     <a class="code" href="classoperations__research_1_1Solver.html#2b9d38fb77e9ea75ff565b5a229e83ec">PushSentinel</a>(<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd1468ffb746584acd9976da043763d632">ROOT_NODE_SENTINEL</a>);
<a name="l01762"></a><a class="code" href="classoperations__research_1_1Solver.html#13e7e93a66ce0f15343c48c66d615e47">01762</a>     <a class="code" href="classoperations__research_1_1Solver.html#f7458c69402c50603880a24a069decc0">state_</a> = <a class="code" href="classoperations__research_1_1Solver.html#5b5712802e63dcd3ee5abfd37e0f2a95066908e143fd988a03767f05e682acaf" title="Executing the search code.">IN_SEARCH</a>;
<a name="l01763"></a>01763   } <span class="keywordflow">else</span> {
<a name="l01764"></a>01764     CHECK_EQ(<a class="code" href="classoperations__research_1_1Solver.html#5b5712802e63dcd3ee5abfd37e0f2a95066908e143fd988a03767f05e682acaf" title="Executing the search code.">IN_SEARCH</a>, <a class="code" href="classoperations__research_1_1Solver.html#f7458c69402c50603880a24a069decc0">state_</a>);
<a name="l01765"></a>01765     <span class="keywordflow">if</span> (search-&gt;<a class="code" href="classoperations__research_1_1Search.html#e41455d55c90d9ce868968bd2a62f737">sentinel_pushed_</a> &gt; 0) {
<a name="l01766"></a>01766       <a class="code" href="classoperations__research_1_1Solver.html#82d54172f1ad5af7c3b8347654416c07" title="Backtrack to the initial search sentinel.">BacktrackToSentinel</a>(<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd02b2511dee343d326f2a71b028b1b78e">INITIAL_SEARCH_SENTINEL</a>);
<a name="l01767"></a>01767     }
<a name="l01768"></a>01768     CHECK_EQ(0, search-&gt;<a class="code" href="classoperations__research_1_1Search.html#e41455d55c90d9ce868968bd2a62f737">sentinel_pushed_</a>);
<a name="l01769"></a>01769     <a class="code" href="classoperations__research_1_1Solver.html#2b9d38fb77e9ea75ff565b5a229e83ec">PushSentinel</a>(<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd02b2511dee343d326f2a71b028b1b78e">INITIAL_SEARCH_SENTINEL</a>);
<a name="l01770"></a>01770   }
<a name="l01771"></a>01771 
<a name="l01772"></a>01772   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1Solver.html#67b763490f2c626ab7993417a66f26bd">parameters_</a>.profile_level != <a class="code" href="structoperations__research_1_1SolverParameters.html#bb1b746ad99155bea2d44ba46db0718723a03d3fac4ba780d9caa8ae38f5dea9">SolverParameters::NO_PROFILING</a>) {
<a name="l01773"></a>01773     CHECK_NOTNULL(<a class="code" href="classoperations__research_1_1Solver.html#c70d81a14381b4e4d7478874ed8edc05" title="Demon monitor.">demon_monitor_</a>);
<a name="l01774"></a>01774     <a class="code" href="namespaceoperations__research.html#2d60edc96e40e663962f32ffa4685ec6">DemonMonitorRestartSearch</a>(<a class="code" href="classoperations__research_1_1Solver.html#c70d81a14381b4e4d7478874ed8edc05" title="Demon monitor.">demon_monitor_</a>);
<a name="l01775"></a>01775   }
<a name="l01776"></a>01776 
<a name="l01777"></a>01777   search-&gt;<a class="code" href="classoperations__research_1_1Search.html#c6366ad1cb26f567fe888ff8cc254a63">RestartSearch</a>();
<a name="l01778"></a>01778 }
<a name="l01779"></a>01779 
<a name="l01780"></a>01780 <span class="comment">// Backtrack to the initial search sentinel.</span>
<a name="l01781"></a>01781 <span class="comment">// Does not change the state, this should be done by the caller.</span>
<a name="l01782"></a>01782 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#82d54172f1ad5af7c3b8347654416c07" title="Backtrack to the initial search sentinel.">Solver::BacktrackToSentinel</a>(<span class="keywordtype">int</span> magic_code) {
<a name="l01783"></a>01783   Search* <span class="keyword">const</span> search = <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back();
<a name="l01784"></a>01784   <span class="keywordtype">bool</span> end_loop = search-&gt;sentinel_pushed_ == 0;
<a name="l01785"></a>01785   <span class="keywordflow">while</span> (!end_loop) {
<a name="l01786"></a>01786     StateInfo info;
<a name="l01787"></a>01787     <a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e" title="This enum is used internally to tag states in the search tree.">MarkerType</a> t = <a class="code" href="classoperations__research_1_1Solver.html#67a90d3f386c8530100f810ef54a240a">PopState</a>(&amp;info);
<a name="l01788"></a>01788     <span class="keywordflow">switch</span> (t) {
<a name="l01789"></a>01789       <span class="keywordflow">case</span> <a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e9a277c2d196896995aaffb41aec2faea">SENTINEL</a>: {
<a name="l01790"></a>01790         CHECK_EQ(info.ptr_info, <span class="keyword">this</span>) &lt;&lt; <span class="stringliteral">"Wrong sentinel found"</span>;
<a name="l01791"></a><a class="code" href="classoperations__research_1_1Solver.html#82d54172f1ad5af7c3b8347654416c07">01791</a>         CHECK_GE(--search-&gt;sentinel_pushed_, 0);
<a name="l01792"></a>01792         search-&gt;set_search_depth(0);
<a name="l01793"></a>01793         search-&gt;set_search_left_depth(0);
<a name="l01794"></a>01794 
<a name="l01795"></a>01795         <span class="keywordflow">if</span> (info.int_info == magic_code) {
<a name="l01796"></a>01796           end_loop = <span class="keyword">true</span>;
<a name="l01797"></a>01797         }
<a name="l01798"></a>01798         <span class="keywordflow">break</span>;
<a name="l01799"></a>01799       }
<a name="l01800"></a>01800       <span class="keywordflow">case</span> <a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e695cce0161b127055c52d41744e97395">SIMPLE_MARKER</a>:
<a name="l01801"></a>01801         <span class="keywordflow">break</span>;
<a name="l01802"></a>01802       <span class="keywordflow">case</span> <a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e1d3aaf5d04e4a502a2db3fa71a1061b7">CHOICE_POINT</a>:
<a name="l01803"></a>01803         <span class="keywordflow">break</span>;
<a name="l01804"></a>01804       <span class="keywordflow">case</span> <a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e7d02bd6f10e34551ac9b74d12ee3d746">REVERSIBLE_ACTION</a>: {
<a name="l01805"></a>01805         Demon* d = <span class="keyword">reinterpret_cast&lt;</span>Demon*<span class="keyword">&gt;</span>(info.ptr_info);
<a name="l01806"></a>01806         d-&gt;Run(<span class="keyword">this</span>);
<a name="l01807"></a>01807         <span class="keywordflow">break</span>;
<a name="l01808"></a>01808       }
<a name="l01809"></a>01809     }
<a name="l01810"></a>01810   }
<a name="l01811"></a>01811   <a class="code" href="classoperations__research_1_1Solver.html#ea8ba31be8fcb91d4d1e0c373e900b92">fail_stamp_</a>++;
<a name="l01812"></a>01812 }
<a name="l01813"></a>01813 
<a name="l01814"></a>01814 <span class="comment">// Closes the current search without backtrack.</span>
<a name="l01815"></a>01815 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#25a8fc8c1345274470a19db77055cd81" title="Closes the current search without backtrack.">Solver::JumpToSentinelWhenNested</a>() {
<a name="l01816"></a>01816   CHECK_GT(<a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.size(), 1) &lt;&lt; <span class="stringliteral">"calling JumpToSentinel from top level"</span>;
<a name="l01817"></a>01817   Search* c = <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back();
<a name="l01818"></a>01818   Search* p = <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>[<a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.size() - 2];
<a name="l01819"></a>01819   <span class="keywordtype">bool</span> found = <span class="keyword">false</span>;
<a name="l01820"></a>01820   <span class="keywordflow">while</span> (!c-&gt;marker_stack_.empty()) {
<a name="l01821"></a>01821     StateMarker* m = c-&gt;marker_stack_.back();
<a name="l01822"></a>01822     <span class="keywordflow">if</span> (m-&gt;type_ == <a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e7d02bd6f10e34551ac9b74d12ee3d746">REVERSIBLE_ACTION</a>) {
<a name="l01823"></a>01823       p-&gt;marker_stack_.push_back(m);
<a name="l01824"></a><a class="code" href="classoperations__research_1_1Solver.html#25a8fc8c1345274470a19db77055cd81">01824</a>     } <span class="keywordflow">else</span> {
<a name="l01825"></a>01825       <span class="keywordflow">if</span> (m-&gt;type_ == <a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e9a277c2d196896995aaffb41aec2faea">SENTINEL</a>) {
<a name="l01826"></a>01826         CHECK_EQ(c-&gt;marker_stack_.size(), 1) &lt;&lt; <span class="stringliteral">"Sentinel found too early"</span>;
<a name="l01827"></a>01827         found = <span class="keyword">true</span>;
<a name="l01828"></a>01828       }
<a name="l01829"></a>01829       <span class="keyword">delete</span> m;
<a name="l01830"></a>01830     }
<a name="l01831"></a>01831     c-&gt;marker_stack_.pop_back();
<a name="l01832"></a>01832   }
<a name="l01833"></a>01833   c-&gt;set_search_depth(0);
<a name="l01834"></a>01834   c-&gt;set_search_left_depth(0);
<a name="l01835"></a>01835   CHECK_EQ(found, <span class="keyword">true</span>) &lt;&lt; <span class="stringliteral">"Sentinel not found"</span>;
<a name="l01836"></a>01836 }
<a name="l01837"></a>01837 
<a name="l01838"></a>01838 <span class="keyword">class </span>ReverseDecision : <span class="keyword">public</span> Decision {
<a name="l01839"></a>01839  <span class="keyword">public</span>:
<a name="l01840"></a>01840   <span class="keyword">explicit</span> ReverseDecision(Decision* <span class="keyword">const</span> d) : decision_(d) {
<a name="l01841"></a>01841     CHECK(d != NULL);
<a name="l01842"></a>01842   }
<a name="l01843"></a>01843   <span class="keyword">virtual</span> ~ReverseDecision() {}
<a name="l01844"></a>01844 
<a name="l01845"></a>01845   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Apply(<a class="code" href="classoperations__research_1_1Solver.html#5b0165d313b9e2bfba93da6aff65052f">Solver</a>* <span class="keyword">const</span> s) {
<a name="l01846"></a>01846     decision_-&gt;Refute(s);
<a name="l01847"></a><a class="code" href="classoperations__research_1_1ReverseDecision.html">01847</a>   }
<a name="l01848"></a>01848 
<a name="l01849"></a><a class="code" href="classoperations__research_1_1ReverseDecision.html#971c82e2509f7b4fc659158fe5d9c217">01849</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Refute(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s) {
<a name="l01850"></a>01850     decision_-&gt;Apply(s);
<a name="l01851"></a>01851   }
<a name="l01852"></a><a class="code" href="classoperations__research_1_1ReverseDecision.html#f2d423ff55c4ff357e37733b832c3e13">01852</a> 
<a name="l01853"></a>01853   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Accept(<a class="code" href="classoperations__research_1_1DecisionVisitor.html" title="A DecisionVisitor is used to inspect a decision.">DecisionVisitor</a>* <span class="keyword">const</span> visitor)<span class="keyword"> const </span>{
<a name="l01854"></a><a class="code" href="classoperations__research_1_1ReverseDecision.html#7b043639899d3b9ad107147d22dd9aab">01854</a>     decision_-&gt;Accept(visitor);
<a name="l01855"></a>01855   }
<a name="l01856"></a>01856 
<a name="l01857"></a>01857   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Solver.html#a7a09bf2f27ccbdc1d1d386bd94e142a" title="misc debug string.">DebugString</a>()<span class="keyword"> const </span>{
<a name="l01858"></a><a class="code" href="classoperations__research_1_1ReverseDecision.html#a75cbd12515184ac2d87c9c34bbf8286">01858</a>     <span class="keywordtype">string</span> str = <span class="stringliteral">"Reverse("</span>;
<a name="l01859"></a>01859     str += decision_-&gt;DebugString();
<a name="l01860"></a>01860     str += <span class="stringliteral">")"</span>;
<a name="l01861"></a>01861     <span class="keywordflow">return</span> str;
<a name="l01862"></a><a class="code" href="classoperations__research_1_1ReverseDecision.html#bddb9713d9264d827e001c1a76f72d01">01862</a>   }
<a name="l01863"></a>01863  <span class="keyword">private</span>:
<a name="l01864"></a>01864   <a class="code" href="classoperations__research_1_1Decision.html" title="A Decision represents a choice point in the search tree.">Decision</a>* <span class="keyword">const</span> decision_;
<a name="l01865"></a>01865 };
<a name="l01866"></a><a class="code" href="classoperations__research_1_1ReverseDecision.html#c59a4f8781958a552f32605fdbdc4954">01866</a> 
<a name="l01867"></a>01867 
<a name="l01868"></a>01868 <span class="comment">// Search for the next solution in the search tree.</span>
<a name="l01869"></a>01869 <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Solver.html#11ed2a5d7bb8fb1a8967fee572ab9c47" title="Search for the next solution in the search tree.">Solver::NextSolution</a>() {
<a name="l01870"></a>01870   <a class="code" href="classoperations__research_1_1Search.html" title="Search class.">Search</a>* <span class="keyword">const</span> search = searches_.back();
<a name="l01871"></a>01871   <a class="code" href="classoperations__research_1_1Decision.html" title="A Decision represents a choice point in the search tree.">Decision</a>* fd = NULL;
<a name="l01872"></a>01872   <span class="keyword">const</span> <span class="keywordtype">bool</span> top_level = (searches_.size() == 1);
<a name="l01873"></a><a class="code" href="classoperations__research_1_1ReverseDecision.html#f6fc5da64757b900977bff9ffc5599a6">01873</a> 
<a name="l01874"></a>01874   <span class="keywordflow">if</span> (top_level &amp;&amp; state_ == OUTSIDE_SEARCH &amp;&amp; !search-&gt;<a class="code" href="classoperations__research_1_1Search.html#c63b1e9d7e458a8833d948e1f1a293d2">decision_builder</a>()) {
<a name="l01875"></a>01875     LOG(WARNING) &lt;&lt; <span class="stringliteral">"NextSolution() called without a NewSearch before"</span>;
<a name="l01876"></a>01876     <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l01877"></a>01877   }
<a name="l01878"></a><a class="code" href="classoperations__research_1_1Solver.html#11ed2a5d7bb8fb1a8967fee572ab9c47">01878</a> 
<a name="l01879"></a>01879   <span class="keywordflow">if</span> (top_level) {  <span class="comment">// Manage top level state.</span>
<a name="l01880"></a>01880     <span class="keywordflow">switch</span> (state_) {
<a name="l01881"></a>01881       <span class="keywordflow">case</span> PROBLEM_INFEASIBLE:
<a name="l01882"></a>01882         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l01883"></a>01883       <span class="keywordflow">case</span> NO_MORE_SOLUTIONS:
<a name="l01884"></a>01884         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l01885"></a>01885       <span class="keywordflow">case</span> AT_SOLUTION: {
<a name="l01886"></a>01886         <span class="keywordflow">if</span> (BacktrackOneLevel(&amp;fd)) {  <span class="comment">// No more solutions.</span>
<a name="l01887"></a>01887           state_ = NO_MORE_SOLUTIONS;
<a name="l01888"></a>01888           <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l01889"></a>01889         }
<a name="l01890"></a>01890         state_ = IN_SEARCH;
<a name="l01891"></a>01891         <span class="keywordflow">break</span>;
<a name="l01892"></a>01892       }
<a name="l01893"></a>01893       <span class="keywordflow">case</span> OUTSIDE_SEARCH: {
<a name="l01894"></a>01894         search-&gt;<a class="code" href="classoperations__research_1_1Search.html#a6ccaf4a499ea8a40495f2e608e9d553">BeginInitialPropagation</a>();
<a name="l01895"></a>01895         <a class="code" href="constraint__solver_8cc.html#458c844702d69839c667500d86ae49c8" title="We cannot use a method/function for this as we would lose the context in the setjmp...">CP_TRY</a>(search) {
<a name="l01896"></a>01896           ProcessConstraints();
<a name="l01897"></a>01897           search-&gt;<a class="code" href="classoperations__research_1_1Search.html#8080b25049761226f4d6c4f7e00e0709">EndInitialPropagation</a>();
<a name="l01898"></a>01898           PushSentinel(<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd1468ffb746584acd9976da043763d632">ROOT_NODE_SENTINEL</a>);
<a name="l01899"></a>01899           state_ = IN_SEARCH;
<a name="l01900"></a>01900           search-&gt;<a class="code" href="classoperations__research_1_1Search.html#6fc83457fbe28d44be2e0faf8a432a56">ClearBuffer</a>();
<a name="l01901"></a>01901         } <a class="code" href="constraint__solver_8cc.html#40910cf9a9eb89daac6c929006a03416">CP_ON_FAIL</a> {
<a name="l01902"></a>01902           queue_-&gt;AfterFailure();
<a name="l01903"></a>01903           BacktrackToSentinel(<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd02b2511dee343d326f2a71b028b1b78e">INITIAL_SEARCH_SENTINEL</a>);
<a name="l01904"></a>01904           state_ = PROBLEM_INFEASIBLE;
<a name="l01905"></a>01905           <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l01906"></a>01906         }
<a name="l01907"></a>01907         <span class="keywordflow">break</span>;
<a name="l01908"></a>01908       }
<a name="l01909"></a>01909       <span class="keywordflow">case</span> IN_SEARCH:  <span class="comment">// Usually after a RestartSearch</span>
<a name="l01910"></a>01910         <span class="keywordflow">break</span>;
<a name="l01911"></a>01911     }
<a name="l01912"></a>01912   }
<a name="l01913"></a>01913 
<a name="l01914"></a>01914   <span class="keyword">volatile</span> <span class="keywordtype">bool</span> finish = <span class="keyword">false</span>;
<a name="l01915"></a>01915   <span class="keyword">volatile</span> <span class="keywordtype">bool</span> result = <span class="keyword">false</span>;
<a name="l01916"></a>01916   <a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> db = search-&gt;<a class="code" href="classoperations__research_1_1Search.html#c63b1e9d7e458a8833d948e1f1a293d2">decision_builder</a>();
<a name="l01917"></a>01917 
<a name="l01918"></a>01918   <span class="keywordflow">while</span> (!finish) {
<a name="l01919"></a>01919     <a class="code" href="constraint__solver_8cc.html#458c844702d69839c667500d86ae49c8" title="We cannot use a method/function for this as we would lose the context in the setjmp...">CP_TRY</a>(search) {
<a name="l01920"></a>01920       <span class="keywordflow">if</span> (fd != NULL) {
<a name="l01921"></a>01921         <a class="code" href="structoperations__research_1_1StateInfo.html" title="StateMarker / StateInfo struct.">StateInfo</a> i1(fd,
<a name="l01922"></a>01922                      1,
<a name="l01923"></a>01923                      search-&gt;<a class="code" href="classoperations__research_1_1Search.html#26654e9a2a907f90fa37dd5585d509e5">search_depth</a>(),
<a name="l01924"></a>01924                      search-&gt;<a class="code" href="classoperations__research_1_1Search.html#af419d2ffa1078d7b8a0260103862525">left_search_depth</a>());  <span class="comment">// 1 for right branch</span>
<a name="l01925"></a>01925         PushState(<a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e1d3aaf5d04e4a502a2db3fa71a1061b7">CHOICE_POINT</a>, i1);
<a name="l01926"></a>01926         search-&gt;<a class="code" href="classoperations__research_1_1Search.html#fdaa6f24db0d9192cee6e02d14084262">RefuteDecision</a>(fd);
<a name="l01927"></a>01927         branches_++;
<a name="l01928"></a>01928         fd-&gt;<a class="code" href="classoperations__research_1_1Decision.html#04e7498b68e7bfc7caeacad7c4272c1f" title="Refute will be called after a backtrack.">Refute</a>(<span class="keyword">this</span>);
<a name="l01929"></a>01929         search-&gt;<a class="code" href="classoperations__research_1_1Search.html#86094dde74cc625735aa2f87daee7ed0">AfterDecision</a>(fd, <span class="keyword">false</span>);
<a name="l01930"></a>01930         search-&gt;<a class="code" href="classoperations__research_1_1Search.html#0da30980d5c9c977186c5efbe671b7f1">RightMove</a>();
<a name="l01931"></a>01931         fd = NULL;
<a name="l01932"></a>01932       }
<a name="l01933"></a>01933       <a class="code" href="classoperations__research_1_1Decision.html#20a827cbc3c6cf9ecbef85bc3ba85cdb">Decision</a>* d = NULL;
<a name="l01934"></a>01934       <span class="keywordflow">for</span> (;;) {
<a name="l01935"></a>01935         search-&gt;<a class="code" href="classoperations__research_1_1Search.html#ea34d6d09da7f3d264f84d5502414da0">BeginNextDecision</a>(db);
<a name="l01936"></a>01936         d = db-&gt;<a class="code" href="classoperations__research_1_1DecisionBuilder.html#3bcaa4dd991e8ddb4d0e48cfbca58592" title="This is the main method of the decision builder class.">Next</a>(<span class="keyword">this</span>);
<a name="l01937"></a>01937         search-&gt;<a class="code" href="classoperations__research_1_1Search.html#fb04411efa806e4d8da60b47750357a3">EndNextDecision</a>(db, d);
<a name="l01938"></a>01938         <span class="keywordflow">if</span> (d == fail_decision_) {
<a name="l01939"></a>01939           Fail();  <span class="comment">// fail now instead of after 2 branches.</span>
<a name="l01940"></a>01940         }
<a name="l01941"></a>01941         <span class="keywordflow">if</span> (d != NULL) {
<a name="l01942"></a>01942           DecisionModification modification = search-&gt;<a class="code" href="classoperations__research_1_1Search.html#afd69327361f5242cc981094f5064900">ModifyDecision</a>();
<a name="l01943"></a>01943           <span class="keywordflow">switch</span> (modification) {
<a name="l01944"></a>01944             <span class="keywordflow">case</span> SWITCH_BRANCHES: {
<a name="l01945"></a>01945               d = RevAlloc(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1ReverseDecision.html#971c82e2509f7b4fc659158fe5d9c217">ReverseDecision</a>(d));
<a name="l01946"></a>01946             }  <span class="comment">// We reverse the decision and fall through the normal code.</span>
<a name="l01947"></a>01947             <span class="keywordflow">case</span> NO_CHANGE: {
<a name="l01948"></a>01948               decisions_++;
<a name="l01949"></a>01949               StateInfo i2(d,
<a name="l01950"></a>01950                            0,
<a name="l01951"></a>01951                            search-&gt;<a class="code" href="classoperations__research_1_1Search.html#26654e9a2a907f90fa37dd5585d509e5">search_depth</a>(),
<a name="l01952"></a>01952                            search-&gt;<a class="code" href="classoperations__research_1_1Search.html#af419d2ffa1078d7b8a0260103862525">left_search_depth</a>());  <span class="comment">// 0 for left branch</span>
<a name="l01953"></a>01953               PushState(<a class="code" href="namespaceoperations__research.html#5881ca2f6350f69f63b48b872c1c7e5e1d3aaf5d04e4a502a2db3fa71a1061b7">CHOICE_POINT</a>, i2);
<a name="l01954"></a>01954               search-&gt;<a class="code" href="classoperations__research_1_1Search.html#fb4b1e39a8f2bfdabb87b445fef0a1ca">ApplyDecision</a>(d);
<a name="l01955"></a>01955               branches_++;
<a name="l01956"></a>01956               d-&gt;Apply(<span class="keyword">this</span>);
<a name="l01957"></a>01957               search-&gt;<a class="code" href="classoperations__research_1_1Search.html#86094dde74cc625735aa2f87daee7ed0">AfterDecision</a>(d, <span class="keyword">true</span>);
<a name="l01958"></a>01958               search-&gt;<a class="code" href="classoperations__research_1_1Search.html#b55c57687534c2850947b41dc3171f46">LeftMove</a>();
<a name="l01959"></a>01959               <span class="keywordflow">break</span>;
<a name="l01960"></a>01960             }
<a name="l01961"></a>01961             <span class="keywordflow">case</span> KEEP_LEFT: {
<a name="l01962"></a>01962               search-&gt;<a class="code" href="classoperations__research_1_1Search.html#fb4b1e39a8f2bfdabb87b445fef0a1ca">ApplyDecision</a>(d);
<a name="l01963"></a>01963               d-&gt;Apply(<span class="keyword">this</span>);
<a name="l01964"></a>01964               search-&gt;<a class="code" href="classoperations__research_1_1Search.html#86094dde74cc625735aa2f87daee7ed0">AfterDecision</a>(d, <span class="keyword">true</span>);
<a name="l01965"></a>01965               <span class="keywordflow">break</span>;
<a name="l01966"></a>01966             }
<a name="l01967"></a>01967             <span class="keywordflow">case</span> KEEP_RIGHT: {
<a name="l01968"></a>01968               search-&gt;<a class="code" href="classoperations__research_1_1Search.html#fdaa6f24db0d9192cee6e02d14084262">RefuteDecision</a>(d);
<a name="l01969"></a>01969               d-&gt;Refute(<span class="keyword">this</span>);
<a name="l01970"></a>01970               search-&gt;<a class="code" href="classoperations__research_1_1Search.html#86094dde74cc625735aa2f87daee7ed0">AfterDecision</a>(d, <span class="keyword">false</span>);
<a name="l01971"></a>01971               <span class="keywordflow">break</span>;
<a name="l01972"></a>01972             }
<a name="l01973"></a>01973             <span class="keywordflow">case</span> KILL_BOTH: {
<a name="l01974"></a>01974               Fail();
<a name="l01975"></a>01975             }
<a name="l01976"></a>01976           }
<a name="l01977"></a>01977         } <span class="keywordflow">else</span> {
<a name="l01978"></a>01978           <span class="keywordflow">break</span>;
<a name="l01979"></a>01979         }
<a name="l01980"></a>01980       }
<a name="l01981"></a>01981       <span class="keywordflow">if</span> (search-&gt;<a class="code" href="classoperations__research_1_1Search.html#bf4066e10d0f2e2bb8452e9c5ebedf8b">AcceptSolution</a>()) {
<a name="l01982"></a>01982         search-&gt;<a class="code" href="classoperations__research_1_1Search.html#2c42984a7ff88ebd0b51d37e43adc352">IncrementSolutionCounter</a>();
<a name="l01983"></a>01983         <span class="keywordflow">if</span> (!search-&gt;<a class="code" href="classoperations__research_1_1Search.html#1223d31a66d8516f2dbcc7088ab2dd0e">AtSolution</a>() || !CurrentlyInSolve()) {
<a name="l01984"></a>01984           result = <span class="keyword">true</span>;
<a name="l01985"></a>01985           finish = <span class="keyword">true</span>;
<a name="l01986"></a>01986         } <span class="keywordflow">else</span> {
<a name="l01987"></a>01987           Fail();
<a name="l01988"></a>01988         }
<a name="l01989"></a>01989       } <span class="keywordflow">else</span> {
<a name="l01990"></a>01990         Fail();
<a name="l01991"></a>01991       }
<a name="l01992"></a>01992     } <a class="code" href="constraint__solver_8cc.html#40910cf9a9eb89daac6c929006a03416">CP_ON_FAIL</a> {
<a name="l01993"></a>01993       queue_-&gt;AfterFailure();
<a name="l01994"></a>01994       <span class="keywordflow">if</span> (search-&gt;<a class="code" href="classoperations__research_1_1Search.html#cb882bb5a1c696e8f555e3be64d46c3f">should_finish</a>()) {
<a name="l01995"></a>01995         fd = NULL;
<a name="l01996"></a>01996         BacktrackToSentinel(top_level ?
<a name="l01997"></a>01997                             <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd1468ffb746584acd9976da043763d632">ROOT_NODE_SENTINEL</a> :
<a name="l01998"></a>01998                             <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd02b2511dee343d326f2a71b028b1b78e">INITIAL_SEARCH_SENTINEL</a>);
<a name="l01999"></a>01999         result = <span class="keyword">false</span>;
<a name="l02000"></a>02000         finish = <span class="keyword">true</span>;
<a name="l02001"></a>02001         search-&gt;<a class="code" href="classoperations__research_1_1Search.html#c8d6976508790637ceb0522654a8e126">set_should_finish</a>(<span class="keyword">false</span>);
<a name="l02002"></a>02002         search-&gt;<a class="code" href="classoperations__research_1_1Search.html#e6f39170dfd0cc811a75d43a449e1ba9">set_should_restart</a>(<span class="keyword">false</span>);
<a name="l02003"></a>02003         <span class="comment">// We do not need to push back the sentinel as we are exiting anyway.</span>
<a name="l02004"></a>02004       } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (search-&gt;<a class="code" href="classoperations__research_1_1Search.html#096a692a55fb43267be4e48b56b16a08">should_restart</a>()) {
<a name="l02005"></a>02005         fd = NULL;
<a name="l02006"></a>02006         BacktrackToSentinel(top_level ?
<a name="l02007"></a>02007                             <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd1468ffb746584acd9976da043763d632">ROOT_NODE_SENTINEL</a> :
<a name="l02008"></a>02008                             <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd02b2511dee343d326f2a71b028b1b78e">INITIAL_SEARCH_SENTINEL</a>);
<a name="l02009"></a>02009         search-&gt;<a class="code" href="classoperations__research_1_1Search.html#c8d6976508790637ceb0522654a8e126">set_should_finish</a>(<span class="keyword">false</span>);
<a name="l02010"></a>02010         search-&gt;<a class="code" href="classoperations__research_1_1Search.html#e6f39170dfd0cc811a75d43a449e1ba9">set_should_restart</a>(<span class="keyword">false</span>);
<a name="l02011"></a>02011         PushSentinel(top_level ? <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd1468ffb746584acd9976da043763d632">ROOT_NODE_SENTINEL</a> : <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd02b2511dee343d326f2a71b028b1b78e">INITIAL_SEARCH_SENTINEL</a>);
<a name="l02012"></a>02012         search-&gt;<a class="code" href="classoperations__research_1_1Search.html#c6366ad1cb26f567fe888ff8cc254a63">RestartSearch</a>();
<a name="l02013"></a>02013       } <span class="keywordflow">else</span> {
<a name="l02014"></a>02014         <span class="keywordflow">if</span> (BacktrackOneLevel(&amp;fd)) {  <span class="comment">// no more solutions.</span>
<a name="l02015"></a>02015           result = <span class="keyword">false</span>;
<a name="l02016"></a>02016           finish = <span class="keyword">true</span>;
<a name="l02017"></a>02017         }
<a name="l02018"></a>02018       }
<a name="l02019"></a>02019     }
<a name="l02020"></a>02020   }
<a name="l02021"></a>02021   <span class="keywordflow">if</span> (result) {
<a name="l02022"></a>02022     search-&gt;<a class="code" href="classoperations__research_1_1Search.html#6fc83457fbe28d44be2e0faf8a432a56">ClearBuffer</a>();
<a name="l02023"></a>02023   }
<a name="l02024"></a>02024   <span class="keywordflow">if</span> (top_level) {  <span class="comment">// Manage state after NextSolution().</span>
<a name="l02025"></a>02025     state_ = (result ? AT_SOLUTION : NO_MORE_SOLUTIONS);
<a name="l02026"></a>02026   }
<a name="l02027"></a>02027   <span class="keywordflow">return</span> result;
<a name="l02028"></a>02028 }
<a name="l02029"></a>02029 
<a name="l02030"></a>02030 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#b95c7f997dbe36deb51e7c0213bdf445">Solver::EndSearch</a>() {
<a name="l02031"></a>02031   CHECK_EQ(1, <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.size());
<a name="l02032"></a>02032   Search* <span class="keyword">const</span> search = <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back();
<a name="l02033"></a>02033   <a class="code" href="classoperations__research_1_1Solver.html#82d54172f1ad5af7c3b8347654416c07" title="Backtrack to the initial search sentinel.">BacktrackToSentinel</a>(<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd02b2511dee343d326f2a71b028b1b78e">INITIAL_SEARCH_SENTINEL</a>);
<a name="l02034"></a>02034   search-&gt;ExitSearch();
<a name="l02035"></a>02035   search-&gt;Clear();
<a name="l02036"></a>02036   <a class="code" href="classoperations__research_1_1Solver.html#f7458c69402c50603880a24a069decc0">state_</a> = <a class="code" href="classoperations__research_1_1Solver.html#5b5712802e63dcd3ee5abfd37e0f2a95c05654b6a7479316478744b3ce4a50df" title="Before search, after search.">OUTSIDE_SEARCH</a>;
<a name="l02037"></a>02037 }
<a name="l02038"></a>02038 
<a name="l02039"></a><a class="code" href="classoperations__research_1_1Solver.html#b95c7f997dbe36deb51e7c0213bdf445">02039</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Solver.html#09eee3e49a13e6bb086712d171b2aef8" title="This method returns the validity of the given assignment against the current model...">Solver::CheckAssignment</a>(<a class="code" href="classoperations__research_1_1Assignment.html" title="Assignment.">Assignment</a>* <span class="keyword">const</span> solution) {
<a name="l02040"></a>02040   CHECK(solution);
<a name="l02041"></a>02041   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1Solver.html#f7458c69402c50603880a24a069decc0">state_</a> == <a class="code" href="classoperations__research_1_1Solver.html#5b5712802e63dcd3ee5abfd37e0f2a95066908e143fd988a03767f05e682acaf" title="Executing the search code.">IN_SEARCH</a>) {
<a name="l02042"></a>02042     LOG(FATAL) &lt;&lt; <span class="stringliteral">"Use NestedSolve() inside search"</span>;
<a name="l02043"></a>02043   }
<a name="l02044"></a>02044   <span class="comment">// Check state and go to OUTSIDE_SEARCH.</span>
<a name="l02045"></a>02045   <a class="code" href="classoperations__research_1_1Search.html" title="Search class.">Search</a>* <span class="keyword">const</span> search = <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back();
<a name="l02046"></a>02046   search-&gt;<a class="code" href="classoperations__research_1_1Search.html#1fcd92000011aeb8f6dc5454bfba38a9">set_created_by_solve</a>(<span class="keyword">false</span>);  <span class="comment">// default behavior.</span>
<a name="l02047"></a>02047 
<a name="l02048"></a><a class="code" href="classoperations__research_1_1Solver.html#09eee3e49a13e6bb086712d171b2aef8">02048</a>   <a class="code" href="classoperations__research_1_1Solver.html#82d54172f1ad5af7c3b8347654416c07" title="Backtrack to the initial search sentinel.">BacktrackToSentinel</a>(<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd02b2511dee343d326f2a71b028b1b78e">INITIAL_SEARCH_SENTINEL</a>);
<a name="l02049"></a>02049   <a class="code" href="classoperations__research_1_1Solver.html#f7458c69402c50603880a24a069decc0">state_</a> = <a class="code" href="classoperations__research_1_1Solver.html#5b5712802e63dcd3ee5abfd37e0f2a95c05654b6a7479316478744b3ce4a50df" title="Before search, after search.">OUTSIDE_SEARCH</a>;
<a name="l02050"></a>02050 
<a name="l02051"></a>02051   <span class="comment">// Push monitors and enter search.</span>
<a name="l02052"></a>02052   search-&gt;<a class="code" href="classoperations__research_1_1Search.html#b3a81afa65291b9bdd3f3a168ce55aa4">EnterSearch</a>();
<a name="l02053"></a>02053 
<a name="l02054"></a>02054   <span class="comment">// Push sentinel and set decision builder.</span>
<a name="l02055"></a>02055   DCHECK_EQ(1, <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.size());
<a name="l02056"></a>02056   <a class="code" href="classoperations__research_1_1Solver.html#2b9d38fb77e9ea75ff565b5a229e83ec">PushSentinel</a>(<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd02b2511dee343d326f2a71b028b1b78e">INITIAL_SEARCH_SENTINEL</a>);
<a name="l02057"></a>02057   search-&gt;<a class="code" href="classoperations__research_1_1Search.html#a6ccaf4a499ea8a40495f2e608e9d553">BeginInitialPropagation</a>();
<a name="l02058"></a>02058   <a class="code" href="constraint__solver_8cc.html#458c844702d69839c667500d86ae49c8" title="We cannot use a method/function for this as we would lose the context in the setjmp...">CP_TRY</a>(search) {
<a name="l02059"></a>02059     <a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a> * <span class="keyword">const</span> restore = <a class="code" href="classoperations__research_1_1Solver.html#19dfeb751bdd2c5f2d1900c05a3c31a2" title="Returns a DecisionBuilder which restores an Assignment (calls void Assignment::Restore())...">MakeRestoreAssignment</a>(solution);
<a name="l02060"></a>02060     restore-&gt;<a class="code" href="classoperations__research_1_1DecisionBuilder.html#3bcaa4dd991e8ddb4d0e48cfbca58592" title="This is the main method of the decision builder class.">Next</a>(<span class="keyword">this</span>);
<a name="l02061"></a>02061     <a class="code" href="classoperations__research_1_1Solver.html#c79214f800c03686b5c03e4f713153a0">ProcessConstraints</a>();
<a name="l02062"></a>02062     search-&gt;<a class="code" href="classoperations__research_1_1Search.html#8080b25049761226f4d6c4f7e00e0709">EndInitialPropagation</a>();
<a name="l02063"></a>02063     <a class="code" href="classoperations__research_1_1Solver.html#82d54172f1ad5af7c3b8347654416c07" title="Backtrack to the initial search sentinel.">BacktrackToSentinel</a>(<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd02b2511dee343d326f2a71b028b1b78e">INITIAL_SEARCH_SENTINEL</a>);
<a name="l02064"></a>02064     search-&gt;<a class="code" href="classoperations__research_1_1Search.html#6fc83457fbe28d44be2e0faf8a432a56">ClearBuffer</a>();
<a name="l02065"></a>02065     <span class="comment">// TODO(user): Why INFEASIBLE?</span>
<a name="l02066"></a>02066     <a class="code" href="classoperations__research_1_1Solver.html#f7458c69402c50603880a24a069decc0">state_</a> = <a class="code" href="classoperations__research_1_1Solver.html#5b5712802e63dcd3ee5abfd37e0f2a9530b34e2664f9b1e2fb0d1347d7a87674" title="After search, the model is infeasible.">PROBLEM_INFEASIBLE</a>;
<a name="l02067"></a>02067     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l02068"></a>02068   } <a class="code" href="constraint__solver_8cc.html#40910cf9a9eb89daac6c929006a03416">CP_ON_FAIL</a> {
<a name="l02069"></a>02069     <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <span class="keyword">const</span> ct = <a class="code" href="classoperations__research_1_1Solver.html#7f5d018f370369ea5cb657e0543c19b7">constraints_list_</a>[<a class="code" href="classoperations__research_1_1Solver.html#43d4761fa6a133bfba495181e36ee1ca">constraints_</a>];
<a name="l02070"></a>02070     <span class="keywordflow">if</span> (ct-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#89b827a71613c6c120d5ac326202df7e" title="Naming.">name</a>().empty()) {
<a name="l02071"></a>02071       LOG(INFO) &lt;&lt; <span class="stringliteral">"Failing constraint = "</span> &lt;&lt; ct-&gt;<a class="code" href="classoperations__research_1_1Constraint.html#f870afb5d6c1fba1d70b38eb581f8cca" title="Constraint class.">DebugString</a>();
<a name="l02072"></a>02072     } <span class="keywordflow">else</span> {
<a name="l02073"></a>02073       LOG(INFO) &lt;&lt; <span class="stringliteral">"Failing constraint = "</span> &lt;&lt; ct-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#89b827a71613c6c120d5ac326202df7e" title="Naming.">name</a>() &lt;&lt; <span class="stringliteral">":"</span>
<a name="l02074"></a>02074                 &lt;&lt; ct-&gt;<a class="code" href="classoperations__research_1_1Constraint.html#f870afb5d6c1fba1d70b38eb581f8cca" title="Constraint class.">DebugString</a>();
<a name="l02075"></a>02075     }
<a name="l02076"></a>02076     <a class="code" href="classoperations__research_1_1Solver.html#45f11281cab2fc4efb997666805c36a0">queue_</a>-&gt;AfterFailure();
<a name="l02077"></a>02077     <a class="code" href="classoperations__research_1_1Solver.html#82d54172f1ad5af7c3b8347654416c07" title="Backtrack to the initial search sentinel.">BacktrackToSentinel</a>(<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd02b2511dee343d326f2a71b028b1b78e">INITIAL_SEARCH_SENTINEL</a>);
<a name="l02078"></a>02078     <a class="code" href="classoperations__research_1_1Solver.html#f7458c69402c50603880a24a069decc0">state_</a> = <a class="code" href="classoperations__research_1_1Solver.html#5b5712802e63dcd3ee5abfd37e0f2a9530b34e2664f9b1e2fb0d1347d7a87674" title="After search, the model is infeasible.">PROBLEM_INFEASIBLE</a>;
<a name="l02079"></a>02079     <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l02080"></a>02080   }
<a name="l02081"></a>02081 }
<a name="l02082"></a>02082 
<a name="l02083"></a>02083 <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Solver.html#6cde306a99c16e4524853ebf52e90ccd" title="Nested solve using a decision builder and up to three search monitors, usually one...">Solver::NestedSolve</a>(DecisionBuilder* <span class="keyword">const</span> db,
<a name="l02084"></a>02084                          <span class="keywordtype">bool</span> restore,
<a name="l02085"></a>02085                          <span class="keyword">const</span> vector&lt;SearchMonitor*&gt;&amp; monitors) {
<a name="l02086"></a>02086   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#6cde306a99c16e4524853ebf52e90ccd" title="Nested solve using a decision builder and up to three search monitors, usually one...">NestedSolve</a>(db, restore,  monitors.data(), monitors.size());
<a name="l02087"></a>02087 }
<a name="l02088"></a>02088 
<a name="l02089"></a>02089 <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Solver.html#6cde306a99c16e4524853ebf52e90ccd" title="Nested solve using a decision builder and up to three search monitors, usually one...">Solver::NestedSolve</a>(DecisionBuilder* <span class="keyword">const</span> db,
<a name="l02090"></a>02090                          <span class="keywordtype">bool</span> restore,
<a name="l02091"></a>02091                          <a class="code" href="classoperations__research_1_1Solver.html#ac32a6eabe1d316d7ff5f92fedd1ec5b">SearchMonitor</a>* <span class="keyword">const</span> m1) {
<a name="l02092"></a><a class="code" href="classoperations__research_1_1Solver.html#6cde306a99c16e4524853ebf52e90ccd">02092</a>   vector&lt;SearchMonitor*&gt; monitors;
<a name="l02093"></a>02093   monitors.push_back(m1);
<a name="l02094"></a>02094   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#6cde306a99c16e4524853ebf52e90ccd" title="Nested solve using a decision builder and up to three search monitors, usually one...">NestedSolve</a>(db, restore, monitors.data(), monitors.size());
<a name="l02095"></a>02095 }
<a name="l02096"></a>02096 
<a name="l02097"></a>02097 <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Solver.html#6cde306a99c16e4524853ebf52e90ccd" title="Nested solve using a decision builder and up to three search monitors, usually one...">Solver::NestedSolve</a>(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> db, <span class="keywordtype">bool</span> restore) {
<a name="l02098"></a><a class="code" href="classoperations__research_1_1Solver.html#ffaa97e6662b96e402537a7f760cc653">02098</a>   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#6cde306a99c16e4524853ebf52e90ccd" title="Nested solve using a decision builder and up to three search monitors, usually one...">NestedSolve</a>(db, restore, NULL, <a class="code" href="namespaceoperations__research.html#009f247167f32509baf749083e4bc984" title="Misc.">Zero</a>());
<a name="l02099"></a>02099 }
<a name="l02100"></a>02100 
<a name="l02101"></a>02101 <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Solver.html#6cde306a99c16e4524853ebf52e90ccd" title="Nested solve using a decision builder and up to three search monitors, usually one...">Solver::NestedSolve</a>(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> db,
<a name="l02102"></a>02102                          <span class="keywordtype">bool</span> restore,
<a name="l02103"></a>02103                          <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m1,
<a name="l02104"></a>02104                          <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m2) {
<a name="l02105"></a>02105   vector&lt;SearchMonitor*&gt; monitors;
<a name="l02106"></a><a class="code" href="classoperations__research_1_1Solver.html#8d60480cba95558bab8440c6fc2f145c">02106</a>   monitors.push_back(m1);
<a name="l02107"></a>02107   monitors.push_back(m2);
<a name="l02108"></a>02108   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#6cde306a99c16e4524853ebf52e90ccd" title="Nested solve using a decision builder and up to three search monitors, usually one...">NestedSolve</a>(db, restore, monitors.data(), monitors.size());
<a name="l02109"></a>02109 }
<a name="l02110"></a><a class="code" href="classoperations__research_1_1Solver.html#baadaabd895ab535528f7f66d3dd7a22">02110</a> 
<a name="l02111"></a>02111 <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Solver.html#6cde306a99c16e4524853ebf52e90ccd" title="Nested solve using a decision builder and up to three search monitors, usually one...">Solver::NestedSolve</a>(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> db,
<a name="l02112"></a>02112                          <span class="keywordtype">bool</span> restore,
<a name="l02113"></a>02113                          <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m1,
<a name="l02114"></a>02114                          <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m2,
<a name="l02115"></a>02115                          <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> m3) {
<a name="l02116"></a>02116   vector&lt;SearchMonitor*&gt; monitors;
<a name="l02117"></a>02117   monitors.push_back(m1);
<a name="l02118"></a>02118   monitors.push_back(m2);
<a name="l02119"></a>02119   monitors.push_back(m3);
<a name="l02120"></a><a class="code" href="classoperations__research_1_1Solver.html#7b887e3debc8aa94dd0a55572158d4f5">02120</a>   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#6cde306a99c16e4524853ebf52e90ccd" title="Nested solve using a decision builder and up to three search monitors, usually one...">NestedSolve</a>(db, restore, monitors.data(), monitors.size());
<a name="l02121"></a>02121 }
<a name="l02122"></a>02122 
<a name="l02123"></a>02123 <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Solver.html#6cde306a99c16e4524853ebf52e90ccd" title="Nested solve using a decision builder and up to three search monitors, usually one...">Solver::NestedSolve</a>(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> db,
<a name="l02124"></a>02124                          <span class="keywordtype">bool</span> restore,
<a name="l02125"></a>02125                          <a class="code" href="classoperations__research_1_1SearchMonitor.html" title="A search monitor is a simple set of callbacks to monitor all search events.">SearchMonitor</a>* <span class="keyword">const</span> * monitors,
<a name="l02126"></a>02126                          <span class="keywordtype">int</span> size) {
<a name="l02127"></a>02127   <a class="code" href="classoperations__research_1_1Search.html" title="Search class.">Search</a> new_search(<span class="keyword">this</span>);
<a name="l02128"></a>02128   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {
<a name="l02129"></a>02129     new_search.<a class="code" href="classoperations__research_1_1Search.html#b75f27d7740f8a0d5428878f589c0b49">push_monitor</a>(monitors[i]);
<a name="l02130"></a>02130   }
<a name="l02131"></a>02131   <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.push_back(&amp;new_search);
<a name="l02132"></a><a class="code" href="classoperations__research_1_1Solver.html#55255b046523d366cacfb877bb673625">02132</a>   <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back()-&gt;set_created_by_solve(<span class="keyword">true</span>);  <span class="comment">// Overwrites default.</span>
<a name="l02133"></a>02133   new_search.<a class="code" href="classoperations__research_1_1Search.html#b3a81afa65291b9bdd3f3a168ce55aa4">EnterSearch</a>();
<a name="l02134"></a>02134   <a class="code" href="classoperations__research_1_1Solver.html#2b9d38fb77e9ea75ff565b5a229e83ec">PushSentinel</a>(<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd02b2511dee343d326f2a71b028b1b78e">INITIAL_SEARCH_SENTINEL</a>);
<a name="l02135"></a>02135   new_search.<a class="code" href="classoperations__research_1_1Search.html#4b37a519f7faebaeb4b6be5c62757c2b">set_decision_builder</a>(db);
<a name="l02136"></a>02136   <span class="keywordtype">bool</span> res = <a class="code" href="classoperations__research_1_1Solver.html#11ed2a5d7bb8fb1a8967fee572ab9c47" title="Search for the next solution in the search tree.">NextSolution</a>();
<a name="l02137"></a>02137   <span class="keywordflow">if</span> (res) {
<a name="l02138"></a>02138     <span class="keywordflow">if</span> (restore) {
<a name="l02139"></a>02139       <a class="code" href="classoperations__research_1_1Solver.html#82d54172f1ad5af7c3b8347654416c07" title="Backtrack to the initial search sentinel.">BacktrackToSentinel</a>(<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02constraint__solver_8cc_03.html#ce47d8ff81e9a0c639cd6d4472b658dd02b2511dee343d326f2a71b028b1b78e">INITIAL_SEARCH_SENTINEL</a>);
<a name="l02140"></a>02140     } <span class="keywordflow">else</span> {
<a name="l02141"></a>02141       <a class="code" href="classoperations__research_1_1Solver.html#25a8fc8c1345274470a19db77055cd81" title="Closes the current search without backtrack.">JumpToSentinelWhenNested</a>();
<a name="l02142"></a>02142     }
<a name="l02143"></a>02143   }
<a name="l02144"></a>02144   new_search.<a class="code" href="classoperations__research_1_1Search.html#b6c851370a6efe0318b8d4b9c71a85ed">ExitSearch</a>();
<a name="l02145"></a>02145   new_search.<a class="code" href="classoperations__research_1_1Search.html#7768604c0fbc85bc05b12d8d0da745b0">Clear</a>();
<a name="l02146"></a>02146   <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.pop_back();
<a name="l02147"></a>02147   <span class="keywordflow">return</span> res;
<a name="l02148"></a>02148 }
<a name="l02149"></a>02149 
<a name="l02150"></a>02150 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Solver::Fail</a>() {
<a name="l02151"></a>02151   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1Solver.html#bfdfd05ef41b1033859d60d80ceed597" title="intercept failures">fail_intercept_</a>) {
<a name="l02152"></a>02152     <a class="code" href="classoperations__research_1_1Solver.html#bfdfd05ef41b1033859d60d80ceed597" title="intercept failures">fail_intercept_</a>-&gt;Run();
<a name="l02153"></a>02153     <span class="keywordflow">return</span>;
<a name="l02154"></a>02154   }
<a name="l02155"></a>02155   <a class="code" href="constraint__solver_8cc.html#8268f656ace2e508d905bcd6acff2679">ConstraintSolverFailHere</a>();
<a name="l02156"></a>02156   <a class="code" href="classoperations__research_1_1Solver.html#8b42035abd87c11791e2fe3418c7bd4b">fails_</a>++;
<a name="l02157"></a>02157   <a class="code" href="classoperations__research_1_1Solver.html#6cd9f41c26762f091c93c816f12dbee4">NotifyFailureToDemonMonitor</a>();
<a name="l02158"></a>02158   <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back()-&gt;BeginFail();
<a name="l02159"></a><a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648">02159</a>   <span class="keywordflow">if</span> (FLAGS_cp_trace_demons) {
<a name="l02160"></a>02160     LOG(INFO) &lt;&lt; <span class="stringliteral">"### Failure ###"</span>;
<a name="l02161"></a>02161   }
<a name="l02162"></a>02162   <a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back()-&gt;JumpBack();
<a name="l02163"></a>02163 }
<a name="l02164"></a>02164 
<a name="l02165"></a>02165 <span class="comment">// --- Propagation object names ---</span>
<a name="l02166"></a>02166 
<a name="l02167"></a>02167 <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Solver.html#afacbc4ce7d1cfc4883782b9fbcb9c3b" title="Naming.">Solver::GetName</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1Solver.html#cd6c49bd62ce1a1777a1c0e644f1186e">PropagationBaseObject</a>* <span class="keywordtype">object</span>)<span class="keyword"> const </span>{
<a name="l02168"></a>02168   <span class="keyword">const</span> <span class="keywordtype">string</span>* name = FindOrNull(<a class="code" href="classoperations__research_1_1Solver.html#b2e572851326cb2e5d67a1cd7218c213">propagation_object_names_</a>, <span class="keywordtype">object</span>);
<a name="l02169"></a>02169   <span class="keywordflow">if</span> (name != NULL) {
<a name="l02170"></a>02170     <span class="keywordflow">return</span> *name;
<a name="l02171"></a>02171   }
<a name="l02172"></a>02172   <span class="keyword">const</span> pair&lt;string, const PropagationBaseObject*&gt;* delegate_object =
<a name="l02173"></a>02173       FindOrNull(<a class="code" href="classoperations__research_1_1Solver.html#49813794975b2c7723ae05b4977e2b47">delegate_objects_</a>, <span class="keywordtype">object</span>);
<a name="l02174"></a>02174   <span class="keywordflow">if</span> (delegate_object != NULL) {
<a name="l02175"></a>02175     <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; prefix = delegate_object-&gt;first;
<a name="l02176"></a><a class="code" href="classoperations__research_1_1Solver.html#afacbc4ce7d1cfc4883782b9fbcb9c3b">02176</a>     <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1PropagationBaseObject.html" title="The PropagationBaseObject is a subclass of BaseObject that is also friend to the...">PropagationBaseObject</a>* delegate = delegate_object-&gt;second;
<a name="l02177"></a>02177     <span class="keywordflow">return</span> prefix + <span class="stringliteral">"&lt;"</span> + delegate-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#89b827a71613c6c120d5ac326202df7e" title="Naming.">name</a>() + <span class="stringliteral">"&gt;"</span>;
<a name="l02178"></a>02178   }
<a name="l02179"></a>02179   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#6f1403de025877a02eb64410d5bb5850">empty_name_</a>;
<a name="l02180"></a>02180 }
<a name="l02181"></a>02181 
<a name="l02182"></a>02182 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#5ae7fc1d889cf010c17b9a05ebff5004">Solver::SetName</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1Solver.html#cd6c49bd62ce1a1777a1c0e644f1186e">PropagationBaseObject</a>* <span class="keywordtype">object</span>, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; name) {
<a name="l02183"></a>02183   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1Solver.html#67b763490f2c626ab7993417a66f26bd">parameters_</a>.store_names
<a name="l02184"></a>02184       &amp;&amp; <a class="code" href="classoperations__research_1_1Solver.html#afacbc4ce7d1cfc4883782b9fbcb9c3b" title="Naming.">GetName</a>(<span class="keywordtype">object</span>).compare(name) != 0) {  <span class="comment">// in particular if name.empty()</span>
<a name="l02185"></a>02185     <a class="code" href="classoperations__research_1_1Solver.html#b2e572851326cb2e5d67a1cd7218c213">propagation_object_names_</a>[object] = name;
<a name="l02186"></a>02186   }
<a name="l02187"></a>02187 }
<a name="l02188"></a>02188 
<a name="l02189"></a>02189 <span class="comment">// ------------------ Useful Operators ------------------</span>
<a name="l02190"></a>02190 
<a name="l02191"></a><a class="code" href="classoperations__research_1_1Solver.html#5ae7fc1d889cf010c17b9a05ebff5004">02191</a> std::ostream&amp; <a class="code" href="namespaceoperations__research.html#87fdc0126f6fc98ffb86ba1aa618f322" title="Useful Operators.">operator &lt;&lt; </a>(std::ostream&amp; out, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s) {  <span class="comment">// NOLINT</span>
<a name="l02192"></a>02192   out &lt;&lt; s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#a7a09bf2f27ccbdc1d1d386bd94e142a" title="misc debug string.">DebugString</a>();
<a name="l02193"></a>02193   <span class="keywordflow">return</span> out;
<a name="l02194"></a>02194 }
<a name="l02195"></a>02195 
<a name="l02196"></a>02196 std::ostream&amp; <a class="code" href="namespaceoperations__research.html#87fdc0126f6fc98ffb86ba1aa618f322" title="Useful Operators.">operator &lt;&lt;</a>(std::ostream&amp; out, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1BaseObject.html" title="Useful Search and Modeling Objects.">BaseObject</a>* o) {  <span class="comment">// NOLINT</span>
<a name="l02197"></a>02197   out &lt;&lt; o-&gt;<a class="code" href="classoperations__research_1_1BaseObject.html#f3317b4111dc4a7b6939cb9c52592e93">DebugString</a>();
<a name="l02198"></a>02198   <span class="keywordflow">return</span> out;
<a name="l02199"></a>02199 }
<a name="l02200"></a><a class="code" href="namespaceoperations__research.html#87fdc0126f6fc98ffb86ba1aa618f322">02200</a> 
<a name="l02201"></a>02201 <span class="comment">// ---------- PropagationBaseObject ---------</span>
<a name="l02202"></a>02202 
<a name="l02203"></a>02203 <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#89b827a71613c6c120d5ac326202df7e" title="Naming.">PropagationBaseObject::name</a>()<span class="keyword"> const </span>{
<a name="l02204"></a>02204   <span class="comment">// TODO(user) : merge with GetName() code to remove a string copy.</span>
<a name="l02205"></a><a class="code" href="namespaceoperations__research.html#b563b868509e5ca6c0db57a038d863e4">02205</a>   <span class="keywordflow">return</span> solver_-&gt;GetName(<span class="keyword">this</span>);
<a name="l02206"></a>02206 }
<a name="l02207"></a>02207 
<a name="l02208"></a>02208 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#8b98dbf206a52e5f327b3640f71193da">PropagationBaseObject::set_name</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; name) {
<a name="l02209"></a>02209   solver_-&gt;SetName(<span class="keyword">this</span>, name);
<a name="l02210"></a>02210 }
<a name="l02211"></a>02211 
<a name="l02212"></a><a class="code" href="classoperations__research_1_1PropagationBaseObject.html#89b827a71613c6c120d5ac326202df7e">02212</a> <span class="comment">// ---------- Decision and DecisionVisitor ----------</span>
<a name="l02213"></a>02213 
<a name="l02214"></a>02214 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Decision.html#33b0dbb456da08b13b087b39bf689a0a" title="Visits the decision.">Decision::Accept</a>(<a class="code" href="classoperations__research_1_1DecisionVisitor.html" title="A DecisionVisitor is used to inspect a decision.">DecisionVisitor</a>* <span class="keyword">const</span> visitor)<span class="keyword"> const </span>{
<a name="l02215"></a>02215   visitor-&gt;<a class="code" href="classoperations__research_1_1DecisionVisitor.html#baff8996ecb74099352b015f418a2fbe">VisitUnknownDecision</a>();
<a name="l02216"></a>02216 }
<a name="l02217"></a><a class="code" href="classoperations__research_1_1PropagationBaseObject.html#8b98dbf206a52e5f327b3640f71193da">02217</a> 
<a name="l02218"></a>02218 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1DecisionVisitor.html#e221fd58e12c43591bc2fbb6316246af">DecisionVisitor::VisitSetVariableValue</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var, int64 value) {}
<a name="l02219"></a>02219 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1DecisionVisitor.html#b33faf731850ebfc3574b741e072dae0">DecisionVisitor::VisitSplitVariableDomain</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var,
<a name="l02220"></a>02220                                                int64 value,
<a name="l02221"></a>02221                                                <span class="keywordtype">bool</span> lower) {}
<a name="l02222"></a>02222 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1DecisionVisitor.html#baff8996ecb74099352b015f418a2fbe">DecisionVisitor::VisitUnknownDecision</a>() {}
<a name="l02223"></a><a class="code" href="classoperations__research_1_1Decision.html#33b0dbb456da08b13b087b39bf689a0a">02223</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1DecisionVisitor.html#852961fc968273745ab1cd207864089a">DecisionVisitor::VisitScheduleOrPostpone</a>(<a class="code" href="classoperations__research_1_1IntervalVar.html" title="Interval Var.">IntervalVar</a>* <span class="keyword">const</span> var,
<a name="l02224"></a>02224                                               int64 est) {}
<a name="l02225"></a>02225 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1DecisionVisitor.html#ec378ce25129deb9f7b33add32ec8cc6">DecisionVisitor::VisitTryRankFirst</a>(<a class="code" href="classoperations__research_1_1Sequence.html" title="Sequence.">Sequence</a>* <span class="keyword">const</span> sequence, <span class="keywordtype">int</span> index) {}
<a name="l02226"></a>02226 
<a name="l02227"></a><a class="code" href="classoperations__research_1_1DecisionVisitor.html#e221fd58e12c43591bc2fbb6316246af">02227</a> <span class="comment">// ---------- Search Monitor ----------</span>
<a name="l02228"></a><a class="code" href="classoperations__research_1_1DecisionVisitor.html#b33faf731850ebfc3574b741e072dae0">02228</a> 
<a name="l02229"></a>02229 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#eb9c7b1f2ebe7f24cf33cdf958bbdd14" title="Beginning of the search.">SearchMonitor::EnterSearch</a>() {}
<a name="l02230"></a>02230 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#1fed6f3ad3f1b44746297f19df0a85cf" title="Restart the search.">SearchMonitor::RestartSearch</a>() {}
<a name="l02231"></a><a class="code" href="classoperations__research_1_1DecisionVisitor.html#baff8996ecb74099352b015f418a2fbe">02231</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#9a0fa1566b29e82604731222ba27810e" title="End of the search.">SearchMonitor::ExitSearch</a>() {}
<a name="l02232"></a><a class="code" href="classoperations__research_1_1DecisionVisitor.html#852961fc968273745ab1cd207864089a">02232</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#a36576cd72df52185b939bee5ee52a72" title="Before calling DecisionBuilder::Next.">SearchMonitor::BeginNextDecision</a>(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> b) {}
<a name="l02233"></a>02233 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#5e4c3bd36278ce32d488227ec365ce6e" title="After calling DecisionBuilder::Next, along with the returned decision.">SearchMonitor::EndNextDecision</a>(<a class="code" href="classoperations__research_1_1DecisionBuilder.html" title="A DecisionBuilder is responsible for creating the search tree.">DecisionBuilder</a>* <span class="keyword">const</span> b,
<a name="l02234"></a><a class="code" href="classoperations__research_1_1DecisionVisitor.html#ec378ce25129deb9f7b33add32ec8cc6">02234</a>                                     <a class="code" href="classoperations__research_1_1Decision.html" title="A Decision represents a choice point in the search tree.">Decision</a>* <span class="keyword">const</span> d) {}
<a name="l02235"></a>02235 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#f2df1e3ba015e09eec6969862704ba6a" title="Before applying the decision.">SearchMonitor::ApplyDecision</a>(<a class="code" href="classoperations__research_1_1Decision.html" title="A Decision represents a choice point in the search tree.">Decision</a>* <span class="keyword">const</span> d) {}
<a name="l02236"></a>02236 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#d8ac928f96207b054a3fd82fba7cbf54" title="Before refuting the Decision.">SearchMonitor::RefuteDecision</a>(Decision* <span class="keyword">const</span> d) {}
<a name="l02237"></a>02237 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#ae0b2453238067c8f3ebe203a3f4940d" title="Just after refuting or applying the decision, apply is true after Apply.">SearchMonitor::AfterDecision</a>(Decision* <span class="keyword">const</span> d, <span class="keywordtype">bool</span> apply) {}
<a name="l02238"></a><a class="code" href="classoperations__research_1_1SearchMonitor.html#eb9c7b1f2ebe7f24cf33cdf958bbdd14">02238</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#cc4cc0b62205946e9c5606fac920198c" title="Just when the failure occurs.">SearchMonitor::BeginFail</a>() {}
<a name="l02239"></a><a class="code" href="classoperations__research_1_1SearchMonitor.html#1fed6f3ad3f1b44746297f19df0a85cf">02239</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#1ea992fcfd1bfa3dc3cb49e32af495fe" title="After completing the backtrack.">SearchMonitor::EndFail</a>() {}
<a name="l02240"></a><a class="code" href="classoperations__research_1_1SearchMonitor.html#9a0fa1566b29e82604731222ba27810e">02240</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#193e8f9e10fb216be18489b78fe880fe" title="Before the initial propagation.">SearchMonitor::BeginInitialPropagation</a>() {}
<a name="l02241"></a><a class="code" href="classoperations__research_1_1SearchMonitor.html#a36576cd72df52185b939bee5ee52a72">02241</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#2527278a6808ed107f11563ea53ca175" title="After the initial propagation.">SearchMonitor::EndInitialPropagation</a>() {}
<a name="l02242"></a><a class="code" href="classoperations__research_1_1SearchMonitor.html#5e4c3bd36278ce32d488227ec365ce6e">02242</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#e78fd7a60e09bb2c08fa04ba8b35f87c" title="This method is called when a solution is found.">SearchMonitor::AcceptSolution</a>() { <span class="keywordflow">return</span> <span class="keyword">true</span>; }
<a name="l02243"></a>02243 <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#146c9540ccd639a9bbc6cefbb6756978" title="This method is called when a valid solution is found.">SearchMonitor::AtSolution</a>() { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l02244"></a><a class="code" href="classoperations__research_1_1SearchMonitor.html#f2df1e3ba015e09eec6969862704ba6a">02244</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#a7bb4e8f2ebab4cc34d5e6d7812664c1" title="When the search tree is finished.">SearchMonitor::NoMoreSolutions</a>() {}
<a name="l02245"></a><a class="code" href="classoperations__research_1_1SearchMonitor.html#d8ac928f96207b054a3fd82fba7cbf54">02245</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#9bc1249bb77ce92f7f899a4adbc7a415" title="When a local optimum is reached.">SearchMonitor::LocalOptimum</a>() { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l02246"></a><a class="code" href="classoperations__research_1_1SearchMonitor.html#ae0b2453238067c8f3ebe203a3f4940d">02246</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#329bbd7c909dbbf7fcffc5bd6b86ab9d">SearchMonitor::AcceptDelta</a>(<a class="code" href="classoperations__research_1_1Assignment.html" title="Assignment.">Assignment</a>* delta,
<a name="l02247"></a><a class="code" href="classoperations__research_1_1SearchMonitor.html#cc4cc0b62205946e9c5606fac920198c">02247</a>                                 <a class="code" href="classoperations__research_1_1Assignment.html" title="Assignment.">Assignment</a>* deltadelta) { <span class="keywordflow">return</span> <span class="keyword">true</span>; }
<a name="l02248"></a><a class="code" href="classoperations__research_1_1SearchMonitor.html#1ea992fcfd1bfa3dc3cb49e32af495fe">02248</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#f3136c9db38e07f98e4180931a1e223f" title="After accepting a neighbor during local search.">SearchMonitor::AcceptNeighbor</a>() {}
<a name="l02249"></a><a class="code" href="classoperations__research_1_1SearchMonitor.html#193e8f9e10fb216be18489b78fe880fe">02249</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#46bba755961234b929a8dd2f440f1cfd" title="Tells the solver to kill the current search.">SearchMonitor::FinishCurrentSearch</a>() {
<a name="l02250"></a><a class="code" href="classoperations__research_1_1SearchMonitor.html#2527278a6808ed107f11563ea53ca175">02250</a>   <a class="code" href="classoperations__research_1_1SearchMonitor.html#b7032463a55bd7d196d1fefde47f0238">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back()-&gt;set_should_finish(<span class="keyword">true</span>);
<a name="l02251"></a><a class="code" href="classoperations__research_1_1SearchMonitor.html#e78fd7a60e09bb2c08fa04ba8b35f87c">02251</a> }
<a name="l02252"></a><a class="code" href="classoperations__research_1_1SearchMonitor.html#146c9540ccd639a9bbc6cefbb6756978">02252</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#9ca3cc572200fdc9b57d1638565cb7ac" title="Tells the solver to restart the current search.">SearchMonitor::RestartCurrentSearch</a>() {
<a name="l02253"></a><a class="code" href="classoperations__research_1_1SearchMonitor.html#a7bb4e8f2ebab4cc34d5e6d7812664c1">02253</a>   <a class="code" href="classoperations__research_1_1SearchMonitor.html#b7032463a55bd7d196d1fefde47f0238">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#b0db089965f7d20853bf1466df694b8c">searches_</a>.back()-&gt;set_should_restart(<span class="keyword">true</span>);
<a name="l02254"></a><a class="code" href="classoperations__research_1_1SearchMonitor.html#9bc1249bb77ce92f7f899a4adbc7a415">02254</a> }
<a name="l02255"></a><a class="code" href="classoperations__research_1_1SearchMonitor.html#329bbd7c909dbbf7fcffc5bd6b86ab9d">02255</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SearchMonitor.html#a54fd83d1bcceecccd7d0a3106b6fc74" title="Periodic call to check limits in long running methods.">SearchMonitor::PeriodicCheck</a>() {}
<a name="l02256"></a>02256 
<a name="l02257"></a><a class="code" href="classoperations__research_1_1SearchMonitor.html#f3136c9db38e07f98e4180931a1e223f">02257</a> <span class="comment">// ----------------- Constraint class -------------------</span>
<a name="l02258"></a><a class="code" href="classoperations__research_1_1SearchMonitor.html#46bba755961234b929a8dd2f440f1cfd">02258</a> 
<a name="l02259"></a>02259 <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Constraint.html#f870afb5d6c1fba1d70b38eb581f8cca" title="Constraint class.">Constraint::DebugString</a>()<span class="keyword"> const </span>{
<a name="l02260"></a>02260   <span class="keywordflow">return</span> <span class="stringliteral">"Constraint"</span>;
<a name="l02261"></a><a class="code" href="classoperations__research_1_1SearchMonitor.html#9ca3cc572200fdc9b57d1638565cb7ac">02261</a> }
<a name="l02262"></a>02262 
<a name="l02263"></a>02263 <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Constraint.html#92c3bfe86238b5c95448d4a0384a327f" title="We no longer need those.">Constraint::PostAndPropagate</a>() {
<a name="l02264"></a><a class="code" href="classoperations__research_1_1SearchMonitor.html#a54fd83d1bcceecccd7d0a3106b6fc74">02264</a>   FreezeQueue();
<a name="l02265"></a>02265   Post();
<a name="l02266"></a>02266   InitialPropagate();
<a name="l02267"></a>02267   UnfreezeQueue();
<a name="l02268"></a><a class="code" href="classoperations__research_1_1Constraint.html#f870afb5d6c1fba1d70b38eb581f8cca">02268</a> }
<a name="l02269"></a>02269 
<a name="l02270"></a>02270 <span class="preprocessor">#undef CP_TRY  // We no longer need those.</span>
<a name="l02271"></a>02271 <span class="preprocessor"></span><span class="preprocessor">#undef CP_ON_FAIL</span>
<a name="l02272"></a><a class="code" href="classoperations__research_1_1Constraint.html#92c3bfe86238b5c95448d4a0384a327f">02272</a> <span class="preprocessor"></span><span class="preprocessor">#undef CP_DO_FAIL</span>
<a name="l02273"></a>02273 <span class="preprocessor"></span>
<a name="l02274"></a>02274 }  <span class="comment">// namespace operations_research</span>
</pre></div></div>

  <!-- Start of footer. -->
  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <tr valign=top>
      <td colspan=2 height=10></td>
    </tr>
    <tr valign=top>
      <td colspan=2 bgcolor=#389613 height=3></td>
    </tr>
  </table>

  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br />

  
  </body>
</html>
