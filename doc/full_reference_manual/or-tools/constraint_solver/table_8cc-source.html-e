<!-- Good morning, Mr. Phelps. -->
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
    <title>google3/constraint_solver/table.cc Source File - Doxy</title>
    <link rel="shortcut icon" href="../../favicon.ico">
    <!-- Both stylesheets are supplied by Doxygen, with maybe minor tweaks from Google. -->
    <link href="../../doxygen.css" rel="stylesheet" type="text/css">
    <link href="../../tabs.css" rel="stylesheet" type="text/css">
  </head>

  <body topmargin=0 leftmargin=20 bottommargin=0 rightmargin=20 marginwidth=20 marginheight=0>
  <!-- Second part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
  <style>
    a.doxy_logo:hover {
      background-color: #389613
    }
  </style>

  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <!-- Top horizontal line with the color of the day. -->
    <tr valign=top>
      <td colspan=3 bgcolor=#389613 height=3></td>
    </tr>

    <!-- Header row with the links at the right. -->
    <tr valign=top>
      <td colspan=3 align=right>
        <font size=-1>
          Generated on: <font color=#389613><b>Fri Apr  1 14:13:18 PDT 2011</b></font>
            for <b>custom file set</b>
        </font>
      </td>
    </tr>

    <!-- Header row with the logo and the search form. -->
    <tr valign=top>
      <!-- Logo. -->
      <td align=left width=150>
        <table width=150 height=54 cellpadding=0 cellspacing=0 border=0>
          <tr valign=top>
            <!-- First part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
            <td bgcolor=#389613>
              <a class="doxy_logo" href="../../index.html"><img src="../../doxy_logo.png" alt="Doxy" border=0></a>
            </td>
          </tr>
        </table>
      </td>
    </tr>

    <!-- Tiny vertical space below the form. -->
    <tr valign=top>
      <td colspan=3 height=3></td>
    </tr>
  </table>

  <!-- Header navigation row. -->
  <div class="memproto">
    <table width=100% cellpadding=0 cellspacing=0 border=0>
      <tr>
        <td align=left style="padding-left: 20px"><font size=+1><b><tt><font color=#333333>//
            <a href="../../index.html"><font color=#389613>doxy</font></a>/</font>
            <a href="../../google3/index.html">google3</a>/
            <a href="../../google3/constraint_solver/index.html">constraint_solver</a>/
            </tt></b></font>
        </td>
      </tr>
    </table>
  </div>
  <br />
    <!-- No subdirs found. -->
  <!-- End of header. -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>google3/constraint_solver/table.cc</h1><a href="table_8cc.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright 2010 Google</span>
<a name="l00002"></a>00002 <span class="comment">// Licensed under the Apache License, Version 2.0 (the "License");</span>
<a name="l00003"></a>00003 <span class="comment">// you may not use this file except in compliance with the License.</span>
<a name="l00004"></a>00004 <span class="comment">// You may obtain a copy of the License at</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">//     http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Unless required by applicable law or agreed to in writing, software</span>
<a name="l00009"></a>00009 <span class="comment">// distributed under the License is distributed on an "AS IS" BASIS,</span>
<a name="l00010"></a>00010 <span class="comment">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00011"></a>00011 <span class="comment">// See the License for the specific language governing permissions and</span>
<a name="l00012"></a>00012 <span class="comment">// limitations under the License.</span>
<a name="l00013"></a>00013 <span class="comment">//</span>
<a name="l00014"></a>00014 <span class="comment">// This file implements the table constraints.</span>
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 <span class="preprocessor">#include "base/commandlineflags.h"</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include "base/integral_types.h"</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include "base/logging.h"</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include "base/scoped_ptr.h"</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include "base/concise_iterator.h"</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include "base/map-util.h"</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include "<a class="code" href="constraint__solveri_8h.html">constraint_solver/constraint_solveri.h</a>"</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include "util/bitset.h"</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <a class="code" href="constraint__solver_8cc.html#719402189437f220cea9507e5677fb6b" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_bool</a>(cp_use_compact_table, <span class="keyword">true</span>,
<a name="l00026"></a>00026             <span class="stringliteral">"Use compact table constraint when possible."</span>);
<a name="l00027"></a>00027 <a class="code" href="constraint__solver_8cc.html#719402189437f220cea9507e5677fb6b" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_bool</a>(cp_use_small_table, <span class="keyword">true</span>,
<a name="l00028"></a>00028             <span class="stringliteral">"Use small compact table constraint when possible."</span>);
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="keyword">namespace </span>operations_research {
<a name="l00031"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02table_8cc_03.html">00031</a> <span class="keyword">namespace </span>{
<a name="l00032"></a>00032 
<a name="l00033"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02table_8cc_03.html#d6b8e2ae6c4585530b7c6c51e686a16e">00033</a> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02table_8cc_03.html#d6b8e2ae6c4585530b7c6c51e686a16e">kBitsInUint64</a> = 64;
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="comment">// ----- Positive Table Constraint -----</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="comment">// Structure of the constraint:</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="comment">// Tuples are indexed, we maintain a bitset for active tuples.</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="comment">// For each var and each value, we maintain a bitset mask of tuples</span>
<a name="l00042"></a>00042 <span class="comment">// containing this value for this variable.</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="comment">// Propagation: When a value is removed, blank all active tuples using the</span>
<a name="l00045"></a>00045 <span class="comment">// var-value mask.</span>
<a name="l00046"></a>00046 <span class="comment">// Then we scan all other variable/values to see if there is an active</span>
<a name="l00047"></a>00047 <span class="comment">// tuple that supports it.</span>
<a name="l00048"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1BasePositiveTableConstraint.html">00048</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1BasePositiveTableConstraint.html" title="Positive Table Constraint.">BasePositiveTableConstraint</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a> {
<a name="l00049"></a>00049  <span class="keyword">public</span>:
<a name="l00050"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1BasePositiveTableConstraint.html#90deb20253819a4a386dd13c51cfb1ed">00050</a>   <a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1BasePositiveTableConstraint.html" title="Positive Table Constraint.">BasePositiveTableConstraint</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00051"></a>00051                               <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l00052"></a>00052                               <span class="keyword">const</span> int64* <span class="keyword">const</span> * allowed_tuples,
<a name="l00053"></a>00053                               <span class="keywordtype">int</span> tuple_count,
<a name="l00054"></a>00054                               <span class="keywordtype">int</span> arity)
<a name="l00055"></a>00055       : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s),
<a name="l00056"></a>00056         tuple_count_(tuple_count),
<a name="l00057"></a>00057         arity_(arity),
<a name="l00058"></a>00058         vars_(new <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>*[arity]),
<a name="l00059"></a>00059         holes_(new <a class="code" href="classoperations__research_1_1IntVarIterator.html" title="The class Iterator has two direct subclasses.">IntVarIterator</a>*[arity]),
<a name="l00060"></a>00060         iterators_(new <a class="code" href="classoperations__research_1_1IntVarIterator.html" title="The class Iterator has two direct subclasses.">IntVarIterator</a>*[arity]) {
<a name="l00061"></a>00061     <span class="comment">// Copy vars.</span>
<a name="l00062"></a>00062     memcpy(vars_.get(), vars, arity_ * <span class="keyword">sizeof</span>(*vars));
<a name="l00063"></a>00063     <span class="comment">// Create hole iterators</span>
<a name="l00064"></a>00064     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; arity_; ++i) {
<a name="l00065"></a>00065       holes_[i] = vars_[i]-&gt;MakeHoleIterator(<span class="keyword">true</span>);
<a name="l00066"></a>00066       iterators_[i] = vars_[i]-&gt;MakeDomainIterator(<span class="keyword">true</span>);
<a name="l00067"></a>00067     }
<a name="l00068"></a>00068   }
<a name="l00069"></a>00069 
<a name="l00070"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1BasePositiveTableConstraint.html#9675a4721fc6c055de381b74dd2355d5">00070</a>   <a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1BasePositiveTableConstraint.html" title="Positive Table Constraint.">BasePositiveTableConstraint</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00071"></a>00071                               <span class="keyword">const</span> vector&lt;IntVar*&gt; &amp; vars,
<a name="l00072"></a>00072                               <span class="keyword">const</span> vector&lt;vector&lt;int64&gt; &gt;&amp; allowed_tuples)
<a name="l00073"></a>00073       : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s),
<a name="l00074"></a>00074         tuple_count_(allowed_tuples.size()),
<a name="l00075"></a>00075         arity_(vars.size()),
<a name="l00076"></a>00076         vars_(new <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>*[arity_]),
<a name="l00077"></a>00077         holes_(new <a class="code" href="classoperations__research_1_1IntVarIterator.html" title="The class Iterator has two direct subclasses.">IntVarIterator</a>*[arity_]),
<a name="l00078"></a>00078         iterators_(new <a class="code" href="classoperations__research_1_1IntVarIterator.html" title="The class Iterator has two direct subclasses.">IntVarIterator</a>*[arity_]) {
<a name="l00079"></a>00079     <span class="comment">// Copy vars.</span>
<a name="l00080"></a>00080     memcpy(vars_.get(), vars.data(), arity_ * <span class="keyword">sizeof</span>(*vars.data()));
<a name="l00081"></a>00081     <span class="comment">// Create hole iterators</span>
<a name="l00082"></a>00082     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; arity_; ++i) {
<a name="l00083"></a>00083       holes_[i] = vars_[i]-&gt;MakeHoleIterator(<span class="keyword">true</span>);
<a name="l00084"></a>00084       iterators_[i] = vars_[i]-&gt;MakeDomainIterator(<span class="keyword">true</span>);
<a name="l00085"></a>00085     }
<a name="l00086"></a>00086   }
<a name="l00087"></a>00087 
<a name="l00088"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1BasePositiveTableConstraint.html#dc1ff5a0283fb444f874d47cb7fe281c">00088</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1BasePositiveTableConstraint.html" title="Positive Table Constraint.">BasePositiveTableConstraint</a>() {}
<a name="l00089"></a>00089  <span class="keyword">protected</span>:
<a name="l00090"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1BasePositiveTableConstraint.html#9de12186399d53fa4303369028fa4d23">00090</a>   <span class="keyword">const</span> <span class="keywordtype">int</span> tuple_count_;
<a name="l00091"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1BasePositiveTableConstraint.html#90004c09bf6405c333055c8256133cef">00091</a>   <span class="keyword">const</span> <span class="keywordtype">int</span> arity_;
<a name="l00092"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1BasePositiveTableConstraint.html#b8013e5bce8178865f6dce5b416aabe9">00092</a>   scoped_array&lt;IntVar*&gt; vars_;
<a name="l00093"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1BasePositiveTableConstraint.html#989518ca418bb619e7ababd3ca42facd">00093</a>   scoped_array&lt;IntVarIterator*&gt; holes_;
<a name="l00094"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1BasePositiveTableConstraint.html#079983e1a6ddfc8aceeef46bb82c66bb">00094</a>   scoped_array&lt;IntVarIterator*&gt; iterators_;
<a name="l00095"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1BasePositiveTableConstraint.html#f61ab2dbd6743a481937af81ecbbb77f">00095</a>   vector&lt;int64&gt; to_remove_;
<a name="l00096"></a>00096 };
<a name="l00097"></a>00097 
<a name="l00098"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1PositiveTableConstraint.html">00098</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1PositiveTableConstraint.html">PositiveTableConstraint</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1BasePositiveTableConstraint.html" title="Positive Table Constraint.">BasePositiveTableConstraint</a> {
<a name="l00099"></a>00099  <span class="keyword">public</span>:
<a name="l00100"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1PositiveTableConstraint.html#5c3d24949023c37f1a33c78484c23a59">00100</a>   <a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1PositiveTableConstraint.html">PositiveTableConstraint</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00101"></a>00101                           <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l00102"></a>00102                           <span class="keyword">const</span> int64* <span class="keyword">const</span> * tuples,
<a name="l00103"></a>00103                           <span class="keywordtype">int</span> tuple_count,
<a name="l00104"></a>00104                           <span class="keywordtype">int</span> arity)
<a name="l00105"></a>00105       : <a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1BasePositiveTableConstraint.html" title="Positive Table Constraint.">BasePositiveTableConstraint</a>(s, vars, tuples, tuple_count, arity),
<a name="l00106"></a>00106         length_(BitLength64(tuple_count)),
<a name="l00107"></a>00107         active_tuples_(new uint64[length_]),
<a name="l00108"></a>00108         stamps_(new uint64[length_]) {
<a name="l00109"></a>00109     masks_.clear();
<a name="l00110"></a>00110     masks_.resize(arity_);
<a name="l00111"></a>00111     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; tuple_count_; ++i) {
<a name="l00112"></a>00112       InitializeMask(i, tuples[i]);
<a name="l00113"></a>00113     }
<a name="l00114"></a>00114   }
<a name="l00115"></a>00115 
<a name="l00116"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1PositiveTableConstraint.html#8183b8ff513c475a7fb008b8e8db36c4">00116</a>   <a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1PositiveTableConstraint.html">PositiveTableConstraint</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00117"></a>00117                           <span class="keyword">const</span> vector&lt;IntVar*&gt; &amp; vars,
<a name="l00118"></a>00118                           <span class="keyword">const</span> vector&lt;vector&lt;int64&gt; &gt;&amp; tuples)
<a name="l00119"></a>00119       : <a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1BasePositiveTableConstraint.html" title="Positive Table Constraint.">BasePositiveTableConstraint</a>(s, vars, tuples),
<a name="l00120"></a>00120         length_(BitLength64(tuples.size())),
<a name="l00121"></a>00121         active_tuples_(new uint64[length_]),
<a name="l00122"></a>00122         stamps_(new uint64[length_]) {
<a name="l00123"></a>00123     masks_.clear();
<a name="l00124"></a>00124     masks_.resize(arity_);
<a name="l00125"></a>00125     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; tuple_count_; ++i) {
<a name="l00126"></a>00126       InitializeMask(i, tuples[i].data());
<a name="l00127"></a>00127     }
<a name="l00128"></a>00128   }
<a name="l00129"></a>00129 
<a name="l00130"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1PositiveTableConstraint.html#874250eb767f8eef9018ba532a868c9d">00130</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1PositiveTableConstraint.html">PositiveTableConstraint</a>() {
<a name="l00131"></a>00131     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> var_index = 0; var_index &lt; arity_; ++var_index) {
<a name="l00132"></a>00132       <span class="keywordflow">for</span> (ConstIter&lt;hash_map&lt;int64, uint64*&gt; &gt; it(masks_[var_index]);
<a name="l00133"></a>00133            !it.at_end();
<a name="l00134"></a>00134            ++it) {
<a name="l00135"></a>00135         <span class="keyword">delete</span> [] it-&gt;second;
<a name="l00136"></a>00136       }
<a name="l00137"></a>00137     }
<a name="l00138"></a>00138   }
<a name="l00139"></a>00139 
<a name="l00140"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1PositiveTableConstraint.html#1edd0925229c5d2262f07e7fe39df103">00140</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Post() {
<a name="l00141"></a>00141     <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d = <a class="code" href="namespaceoperations__research.html#16f35a1c0ce076f2587fffbab80200b6">MakeDelayedConstraintDemon0</a>(solver(),
<a name="l00142"></a>00142                                            <span class="keyword">this</span>,
<a name="l00143"></a>00143                                            &amp;PositiveTableConstraint::Propagate,
<a name="l00144"></a>00144                                            <span class="stringliteral">"Propagate"</span>);
<a name="l00145"></a>00145     uint64 stamp = solver()-&gt;stamp();
<a name="l00146"></a>00146     DCHECK_GE(stamp, 1);
<a name="l00147"></a>00147     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; arity_; ++i) {
<a name="l00148"></a>00148       vars_[i]-&gt;WhenDomain(d);
<a name="l00149"></a>00149       <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* u = <a class="code" href="namespaceoperations__research.html#bc7cb18be5d9d418d32782253cd4bf5a">MakeConstraintDemon1</a>(solver(),
<a name="l00150"></a>00150                                       <span class="keyword">this</span>,
<a name="l00151"></a>00151                                       &amp;PositiveTableConstraint::Update,
<a name="l00152"></a>00152                                       <span class="stringliteral">"Update"</span>,
<a name="l00153"></a>00153                                       i);
<a name="l00154"></a>00154       vars_[i]-&gt;WhenDomain(u);
<a name="l00155"></a>00155     }
<a name="l00156"></a>00156     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; length_; ++i) {
<a name="l00157"></a>00157       stamps_[i] = stamp - 1;
<a name="l00158"></a>00158       active_tuples_[i] = ~GG_ULONGLONG(0);
<a name="l00159"></a>00159     }
<a name="l00160"></a>00160   }
<a name="l00161"></a>00161 
<a name="l00162"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1PositiveTableConstraint.html#09c72514423e04d6d67e610e698a28f4">00162</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> InitialPropagate() {
<a name="l00163"></a>00163     <span class="comment">// Build active_ structure.</span>
<a name="l00164"></a>00164     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> var_index = 0; var_index &lt; arity_; ++var_index) {
<a name="l00165"></a>00165       <span class="keywordflow">for</span> (ConstIter&lt;hash_map&lt;int64, uint64*&gt; &gt; it(masks_[var_index]);
<a name="l00166"></a>00166            !it.at_end(); ++it) {
<a name="l00167"></a>00167         <span class="keywordflow">if</span> (!vars_[var_index]-&gt;Contains(it-&gt;first)) {
<a name="l00168"></a>00168           <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; length_; ++i) {
<a name="l00169"></a>00169             uint64 active = active_tuples_[i] &amp; it-&gt;second[i];
<a name="l00170"></a>00170             <span class="keywordflow">while</span> (active != 0) {
<a name="l00171"></a>00171               <span class="keywordtype">int</span> position = LeastSignificantBitPosition64(active);
<a name="l00172"></a>00172               active_tuples_[i] &amp;= ~OneBit64(position);
<a name="l00173"></a>00173               active &amp;= IntervalUp64(position + 1);
<a name="l00174"></a>00174             }
<a name="l00175"></a>00175           }
<a name="l00176"></a>00176         }
<a name="l00177"></a>00177       }
<a name="l00178"></a>00178     }
<a name="l00179"></a>00179     <span class="keywordtype">bool</span> found_one = <span class="keyword">false</span>;
<a name="l00180"></a>00180     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; length_; ++i) {
<a name="l00181"></a>00181       <span class="keywordflow">if</span> (active_tuples_[i] != 0) {
<a name="l00182"></a>00182         found_one = <span class="keyword">true</span>;
<a name="l00183"></a>00183         <span class="keywordflow">break</span>;
<a name="l00184"></a>00184       }
<a name="l00185"></a>00185     }
<a name="l00186"></a>00186     <span class="keywordflow">if</span> (!found_one) {
<a name="l00187"></a>00187       solver()-&gt;Fail();
<a name="l00188"></a>00188     }
<a name="l00189"></a>00189     <span class="comment">// Remove unreached values.</span>
<a name="l00190"></a>00190     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> var_index = 0; var_index &lt; arity_; ++var_index) {
<a name="l00191"></a>00191       <span class="keyword">const</span> hash_map&lt;int64, uint64*&gt;&amp; mask = masks_[var_index];
<a name="l00192"></a>00192       <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var = vars_[var_index];
<a name="l00193"></a>00193       to_remove_.clear();
<a name="l00194"></a>00194       <a class="code" href="classoperations__research_1_1IntVarIterator.html" title="The class Iterator has two direct subclasses.">IntVarIterator</a>* <span class="keyword">const</span> it = iterators_[var_index];
<a name="l00195"></a>00195       <span class="keywordflow">for</span> (it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#c5e717b4d80a83e797fd6f996f040f8c" title="This method must be called before each loop.">Init</a>(); it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#35ab3d4e05e41e87312043b3fbb803f4" title="This method indicates if we can call Value() or not.">Ok</a>(); it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#7d3ca63d1636290367162ad3fb4f5157" title="This method moves the iterator to the next value.">Next</a>()) {
<a name="l00196"></a>00196         <span class="keyword">const</span> int64 value = it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#8cd71554efc9460ca2319bbe79574ffa" title="This method returns the value of the hole.">Value</a>();
<a name="l00197"></a>00197         <span class="keywordflow">if</span> (!ContainsKey(mask, value)) {
<a name="l00198"></a>00198           to_remove_.push_back(value);
<a name="l00199"></a>00199         }
<a name="l00200"></a>00200       }
<a name="l00201"></a>00201       <span class="keywordflow">if</span> (to_remove_.size() &gt; 0) {
<a name="l00202"></a>00202         var-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#5df6b77fa28ec505e59311a3dc0bf895" title="This method remove the values from the domain of the variable.">RemoveValues</a>(to_remove_);
<a name="l00203"></a>00203       }
<a name="l00204"></a>00204     }
<a name="l00205"></a>00205   }
<a name="l00206"></a>00206 
<a name="l00207"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1PositiveTableConstraint.html#9e5176d69aec8fead20a9df783a5d415">00207</a>   <span class="keywordtype">void</span> Propagate() {
<a name="l00208"></a>00208     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> var_index = 0; var_index &lt; arity_; ++var_index) {
<a name="l00209"></a>00209       <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var = vars_[var_index];
<a name="l00210"></a>00210       to_remove_.clear();
<a name="l00211"></a>00211       <a class="code" href="classoperations__research_1_1IntVarIterator.html" title="The class Iterator has two direct subclasses.">IntVarIterator</a>* <span class="keyword">const</span> it = iterators_[var_index];
<a name="l00212"></a>00212       <span class="keywordflow">for</span> (it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#c5e717b4d80a83e797fd6f996f040f8c" title="This method must be called before each loop.">Init</a>(); it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#35ab3d4e05e41e87312043b3fbb803f4" title="This method indicates if we can call Value() or not.">Ok</a>(); it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#7d3ca63d1636290367162ad3fb4f5157" title="This method moves the iterator to the next value.">Next</a>()) {
<a name="l00213"></a>00213         <span class="keyword">const</span> int64 value = it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#8cd71554efc9460ca2319bbe79574ffa" title="This method returns the value of the hole.">Value</a>();
<a name="l00214"></a>00214         <span class="keywordflow">if</span> (!Supported(var_index, value)) {
<a name="l00215"></a>00215           to_remove_.push_back(value);
<a name="l00216"></a>00216         }
<a name="l00217"></a>00217       }
<a name="l00218"></a>00218       <span class="keywordflow">if</span> (to_remove_.size() &gt; 0) {
<a name="l00219"></a>00219         var-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#5df6b77fa28ec505e59311a3dc0bf895" title="This method remove the values from the domain of the variable.">RemoveValues</a>(to_remove_);
<a name="l00220"></a>00220       }
<a name="l00221"></a>00221     }
<a name="l00222"></a>00222   }
<a name="l00223"></a>00223 
<a name="l00224"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1PositiveTableConstraint.html#b26468af8c57bcf0a1399b614702dd06">00224</a>   <span class="keywordtype">void</span> Update(<span class="keywordtype">int</span> index) {
<a name="l00225"></a>00225     <span class="keyword">const</span> hash_map&lt;int64, uint64*&gt;&amp; mask = masks_[index];
<a name="l00226"></a>00226     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var = vars_[index];
<a name="l00227"></a>00227     <span class="keyword">const</span> int64 oldmax = var-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#619ac58213bbff56398934e76dd1079f" title="Returns the previous max.">OldMax</a>();
<a name="l00228"></a>00228     <span class="keyword">const</span> int64 vmin = var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>();
<a name="l00229"></a>00229     <span class="keyword">const</span> int64 vmax = var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>();
<a name="l00230"></a>00230     <span class="keywordflow">for</span> (int64 value = var-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#894ecb1c102fa7fca59661a215f14d50" title="Returns the previous min.">OldMin</a>(); value &lt; vmin; ++value) {
<a name="l00231"></a>00231       BlankActives(FindPtrOrNull(mask, value));
<a name="l00232"></a>00232     }
<a name="l00233"></a>00233     <span class="keywordflow">for</span> (holes_[index]-&gt;Init(); holes_[index]-&gt;Ok(); holes_[index]-&gt;Next()) {
<a name="l00234"></a>00234       BlankActives(FindPtrOrNull(mask, holes_[index]-&gt;Value()));
<a name="l00235"></a>00235     }
<a name="l00236"></a>00236     <span class="keywordflow">for</span> (int64 value = vmax + 1; value &lt;= oldmax; ++value) {
<a name="l00237"></a>00237       BlankActives(FindPtrOrNull(mask, value));
<a name="l00238"></a>00238     }
<a name="l00239"></a>00239   }
<a name="l00240"></a>00240 
<a name="l00241"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1PositiveTableConstraint.html#ffb97aa46f98dbbf7d11acbf18938372">00241</a>   <span class="keywordtype">void</span> BlankActives(uint64* <span class="keyword">const</span> mask) {
<a name="l00242"></a>00242     <span class="keywordflow">if</span> (mask != NULL) {
<a name="l00243"></a>00243       <span class="keywordtype">bool</span> empty = <span class="keyword">true</span>;
<a name="l00244"></a>00244       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> offset = 0; offset &lt; length_; ++offset) {
<a name="l00245"></a>00245         <span class="keywordflow">if</span> ((mask[offset] &amp; active_tuples_[offset]) != 0) {
<a name="l00246"></a>00246           <span class="keyword">const</span> uint64 current_stamp = solver()-&gt;stamp();
<a name="l00247"></a>00247           <span class="keywordflow">if</span> (stamps_[offset] &lt; current_stamp) {
<a name="l00248"></a>00248             stamps_[offset] = current_stamp;
<a name="l00249"></a>00249             solver()-&gt;SaveValue(&amp;active_tuples_[offset]);
<a name="l00250"></a>00250           }
<a name="l00251"></a>00251           active_tuples_[offset] &amp;= ~mask[offset];
<a name="l00252"></a>00252         }
<a name="l00253"></a>00253         <span class="keywordflow">if</span> (active_tuples_[offset] != 0) {
<a name="l00254"></a>00254           empty = <span class="keyword">false</span>;
<a name="l00255"></a>00255         }
<a name="l00256"></a>00256       }
<a name="l00257"></a>00257       <span class="keywordflow">if</span> (empty) {
<a name="l00258"></a>00258         solver()-&gt;Fail();
<a name="l00259"></a>00259       }
<a name="l00260"></a>00260     }
<a name="l00261"></a>00261   }
<a name="l00262"></a>00262 
<a name="l00263"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1PositiveTableConstraint.html#8673961f3b54984a5a7e1230b4d215d4">00263</a>   <span class="keywordtype">bool</span> Supported(<span class="keywordtype">int</span> var_index, int64 value) {
<a name="l00264"></a>00264     DCHECK_GE(var_index, 0);
<a name="l00265"></a>00265     DCHECK_LT(var_index, arity_);
<a name="l00266"></a>00266     DCHECK(ContainsKey(masks_[var_index], value));
<a name="l00267"></a>00267     uint64* <span class="keyword">const</span> mask = masks_[var_index][value];
<a name="l00268"></a>00268     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> offset = 0; offset &lt; length_; ++offset) {
<a name="l00269"></a>00269       <span class="keywordflow">if</span> ((mask[offset] &amp; active_tuples_[offset]) != 0LL) {
<a name="l00270"></a>00270         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00271"></a>00271       }
<a name="l00272"></a>00272     }
<a name="l00273"></a>00273     <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00274"></a>00274   }
<a name="l00275"></a>00275 
<a name="l00276"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1PositiveTableConstraint.html#0cd89c7011efafd9279dc6d01338c90e">00276</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> DebugString()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="stringliteral">"PositiveTableConstraint"</span>; }
<a name="l00277"></a>00277 
<a name="l00278"></a>00278  <span class="keyword">protected</span>:
<a name="l00279"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1PositiveTableConstraint.html#b43e1bbbd14884647cfd7a3e67aba876">00279</a>   <span class="keywordtype">void</span> InitializeMask(<span class="keywordtype">int</span> tuple_index, <span class="keyword">const</span> int64* <span class="keyword">const</span> tuple) {
<a name="l00280"></a>00280     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> var_index = 0; var_index &lt; arity_; ++var_index) {
<a name="l00281"></a>00281       <span class="keyword">const</span> int64 value = tuple[var_index];
<a name="l00282"></a>00282       uint64* mask = FindPtrOrNull(masks_[var_index], value);
<a name="l00283"></a>00283       <span class="keywordflow">if</span> (mask == NULL) {
<a name="l00284"></a>00284         mask = <span class="keyword">new</span> uint64[length_];
<a name="l00285"></a>00285         memset(mask, 0, length_ * <span class="keyword">sizeof</span>(*mask));
<a name="l00286"></a>00286         masks_[var_index][value] = mask;
<a name="l00287"></a>00287       }
<a name="l00288"></a>00288       SetBit64(mask, tuple_index);
<a name="l00289"></a>00289     }
<a name="l00290"></a>00290   }
<a name="l00291"></a>00291 
<a name="l00292"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1PositiveTableConstraint.html#5e561f1bf8210ce8ab4501aa7f3237b6">00292</a>   <span class="keyword">const</span> <span class="keywordtype">int</span> length_;
<a name="l00293"></a>00293   <span class="comment">// TODO(user): create bitset64 class and use it.</span>
<a name="l00294"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1PositiveTableConstraint.html#ea5316c6a4dca6cb2d15985125eaf7a0">00294</a>   scoped_array&lt;uint64&gt; active_tuples_;
<a name="l00295"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1PositiveTableConstraint.html#35a185dd216cfe8cfeb19f60ffbba040">00295</a>   scoped_array&lt;uint64&gt; stamps_;
<a name="l00296"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1PositiveTableConstraint.html#9936966d8853ebac432836523f2b7d4b">00296</a>   vector&lt;hash_map&lt;int64, uint64*&gt; &gt; masks_;
<a name="l00297"></a>00297 };
<a name="l00298"></a>00298 
<a name="l00299"></a>00299 <span class="comment">// ----- Compact Table. -----</span>
<a name="l00300"></a>00300 
<a name="l00301"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html">00301</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html" title="Compact Table.">CompactPositiveTableConstraint</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1BasePositiveTableConstraint.html" title="Positive Table Constraint.">BasePositiveTableConstraint</a> {
<a name="l00302"></a>00302  <span class="keyword">public</span>:
<a name="l00303"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#584c072eeace544cb4f2571551f59f1a">00303</a>   <a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html" title="Compact Table.">CompactPositiveTableConstraint</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00304"></a>00304                                  <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l00305"></a>00305                                  <span class="keyword">const</span> int64* <span class="keyword">const</span> * tuples,
<a name="l00306"></a>00306                                  <span class="keywordtype">int</span> tuple_count,
<a name="l00307"></a>00307                                  <span class="keywordtype">int</span> arity)
<a name="l00308"></a>00308       : <a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1BasePositiveTableConstraint.html" title="Positive Table Constraint.">BasePositiveTableConstraint</a>(s, vars, tuples, tuple_count, arity),
<a name="l00309"></a>00309         length_(BitLength64(tuple_count)),
<a name="l00310"></a>00310         active_tuples_(new uint64[length_]),
<a name="l00311"></a>00311         stamps_(new uint64[length_]),
<a name="l00312"></a>00312         tuples_(new int64*[tuple_count_]),
<a name="l00313"></a>00313         original_min_(new int64[arity_]),
<a name="l00314"></a>00314         temp_mask_(new uint64[length_]),
<a name="l00315"></a>00315         demon_(NULL) {
<a name="l00316"></a>00316     <span class="comment">// Copy tuples</span>
<a name="l00317"></a>00317     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; tuple_count_; ++i) {
<a name="l00318"></a>00318       tuples_[i] = <span class="keyword">new</span> int64[arity_];
<a name="l00319"></a>00319       memcpy(tuples_[i], tuples[i], arity_ * <span class="keyword">sizeof</span>(*tuples[i]));
<a name="l00320"></a>00320     }
<a name="l00321"></a>00321   }
<a name="l00322"></a>00322 
<a name="l00323"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#c8f1c892287bc0ddf636716bfbb2b6e1">00323</a>   <a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html" title="Compact Table.">CompactPositiveTableConstraint</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00324"></a>00324                                  <span class="keyword">const</span> vector&lt;IntVar*&gt; &amp; vars,
<a name="l00325"></a>00325                                  <span class="keyword">const</span> vector&lt;vector&lt;int64&gt; &gt;&amp; tuples)
<a name="l00326"></a>00326       : <a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1BasePositiveTableConstraint.html" title="Positive Table Constraint.">BasePositiveTableConstraint</a>(s, vars, tuples),
<a name="l00327"></a>00327         length_(BitLength64(tuples.size())),
<a name="l00328"></a>00328         active_tuples_(new uint64[length_]),
<a name="l00329"></a>00329         stamps_(new uint64[length_]),
<a name="l00330"></a>00330         tuples_(new int64*[tuple_count_]),
<a name="l00331"></a>00331         original_min_(new int64[arity_]),
<a name="l00332"></a>00332         temp_mask_(new uint64[length_]),
<a name="l00333"></a>00333         demon_(NULL) {
<a name="l00334"></a>00334     <span class="comment">// Copy tuples</span>
<a name="l00335"></a>00335     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; tuple_count_; ++i) {
<a name="l00336"></a>00336       CHECK_EQ(arity_, tuples[i].size());
<a name="l00337"></a>00337       tuples_[i] = <span class="keyword">new</span> int64[arity_];
<a name="l00338"></a>00338       memcpy(tuples_[i], tuples[i].data(), arity_ * <span class="keyword">sizeof</span>(tuples[i][0]));
<a name="l00339"></a>00339     }
<a name="l00340"></a>00340   }
<a name="l00341"></a>00341 
<a name="l00342"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#50e1f9129dd599d52043dc8f70080f9e">00342</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html" title="Compact Table.">CompactPositiveTableConstraint</a>() {
<a name="l00343"></a>00343     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; tuple_count_; ++i) {
<a name="l00344"></a>00344       <span class="keyword">delete</span>[] tuples_[i];
<a name="l00345"></a>00345       tuples_[i] = NULL;
<a name="l00346"></a>00346     }
<a name="l00347"></a>00347   }
<a name="l00348"></a>00348 
<a name="l00349"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#da5abfbb13fa54b2ba84808f8eb513ed">00349</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Post() {
<a name="l00350"></a>00350     demon_ = <a class="code" href="namespaceoperations__research.html#16f35a1c0ce076f2587fffbab80200b6">MakeDelayedConstraintDemon0</a>(
<a name="l00351"></a>00351         solver(),
<a name="l00352"></a>00352         <span class="keyword">this</span>,
<a name="l00353"></a>00353         &amp;CompactPositiveTableConstraint::Propagate,
<a name="l00354"></a>00354         <span class="stringliteral">"Propagate"</span>);
<a name="l00355"></a>00355     uint64 stamp = solver()-&gt;stamp();
<a name="l00356"></a>00356     DCHECK_GE(stamp, 1);
<a name="l00357"></a>00357     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; arity_; ++i) {
<a name="l00358"></a>00358       <span class="comment">//      vars_[i]-&gt;WhenDomain(d);</span>
<a name="l00359"></a>00359       <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* u = <a class="code" href="namespaceoperations__research.html#bc7cb18be5d9d418d32782253cd4bf5a">MakeConstraintDemon1</a>(solver(),
<a name="l00360"></a>00360                                       <span class="keyword">this</span>,
<a name="l00361"></a>00361                                       &amp;CompactPositiveTableConstraint::Update,
<a name="l00362"></a>00362                                       <span class="stringliteral">"Update"</span>,
<a name="l00363"></a>00363                                       i);
<a name="l00364"></a>00364       vars_[i]-&gt;WhenDomain(u);
<a name="l00365"></a>00365     }
<a name="l00366"></a>00366     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; length_; ++i) {
<a name="l00367"></a>00367       stamps_[i] = stamp - 1;
<a name="l00368"></a>00368       active_tuples_[i] = 0;
<a name="l00369"></a>00369     }
<a name="l00370"></a>00370   }
<a name="l00371"></a>00371 
<a name="l00372"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#d2f44486d6294263921ebf1f8c93e62b">00372</a>   <span class="keywordtype">bool</span> IsTupleSupported(<span class="keywordtype">int</span> tuple_index) {
<a name="l00373"></a>00373     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> var_index = 0; var_index &lt; arity_; ++var_index) {
<a name="l00374"></a>00374       <span class="keyword">const</span> int64 value = tuples_[tuple_index][var_index];
<a name="l00375"></a>00375       <span class="keywordflow">if</span> (!vars_[var_index]-&gt;Contains(value)) {
<a name="l00376"></a>00376         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00377"></a>00377       }
<a name="l00378"></a>00378     }
<a name="l00379"></a>00379     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00380"></a>00380   }
<a name="l00381"></a>00381 
<a name="l00382"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#1f13b672cace7bb0e99a5d0b666ca3e9">00382</a>   <span class="keywordtype">void</span> BuildStructures() {
<a name="l00383"></a>00383     <span class="comment">// Build active_ structure.</span>
<a name="l00384"></a>00384     <span class="keywordtype">bool</span> found_one = <span class="keyword">false</span>;
<a name="l00385"></a>00385     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> tuple_index = 0; tuple_index &lt; tuple_count_; ++tuple_index) {
<a name="l00386"></a>00386       <span class="keywordflow">if</span> (IsTupleSupported(tuple_index)) {
<a name="l00387"></a>00387         SetBit64(active_tuples_.get(), tuple_index);
<a name="l00388"></a>00388         found_one = <span class="keyword">true</span>;
<a name="l00389"></a>00389       }
<a name="l00390"></a>00390     }
<a name="l00391"></a>00391     <span class="keywordflow">if</span> (!found_one) {
<a name="l00392"></a>00392       solver()-&gt;Fail();
<a name="l00393"></a>00393     }
<a name="l00394"></a>00394   }
<a name="l00395"></a>00395 
<a name="l00396"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#77382194d0367f65e0d0f3434ec89aaa">00396</a>   <span class="keywordtype">void</span> BuildMasks() {
<a name="l00397"></a>00397     <span class="comment">// Build masks.</span>
<a name="l00398"></a>00398     masks_.clear();
<a name="l00399"></a>00399     masks_.resize(arity_);
<a name="l00400"></a>00400     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; arity_; ++i) {
<a name="l00401"></a>00401       original_min_[i] = vars_[i]-&gt;Min();
<a name="l00402"></a>00402       <span class="keyword">const</span> int64 span = vars_[i]-&gt;Max() - original_min_[i] + 1;
<a name="l00403"></a>00403       masks_[i].resize(span);
<a name="l00404"></a>00404       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; span; ++j) {
<a name="l00405"></a>00405         masks_[i][j] = NULL;
<a name="l00406"></a>00406       }
<a name="l00407"></a>00407     }
<a name="l00408"></a>00408   }
<a name="l00409"></a>00409 
<a name="l00410"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#91bff5a929080b1c6c3268db83726300">00410</a>   <span class="keywordtype">void</span> FillMasks() {
<a name="l00411"></a>00411     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> tuple_index = 0; tuple_index &lt; tuple_count_; ++tuple_index) {
<a name="l00412"></a>00412       <span class="keywordflow">if</span> (IsBitSet64(active_tuples_.get(), tuple_index)) {
<a name="l00413"></a>00413         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> var_index = 0; var_index &lt; arity_; ++var_index) {
<a name="l00414"></a>00414           <span class="keyword">const</span> int64 value_index =
<a name="l00415"></a>00415               tuples_[tuple_index][var_index] - original_min_[var_index];
<a name="l00416"></a>00416           DCHECK_GE(value_index, 0);
<a name="l00417"></a>00417           DCHECK_LT(value_index, masks_[var_index].size());
<a name="l00418"></a>00418           uint64* mask = masks_[var_index][value_index];
<a name="l00419"></a>00419           <span class="keywordflow">if</span> (!mask) {
<a name="l00420"></a>00420             mask = solver()-&gt;RevAlloc(<span class="keyword">new</span> uint64[length_]);
<a name="l00421"></a>00421             memset(mask, 0, length_ * <span class="keyword">sizeof</span>(*mask));
<a name="l00422"></a>00422             masks_[var_index][value_index] = mask;
<a name="l00423"></a>00423           }
<a name="l00424"></a>00424           SetBit64(mask, tuple_index);
<a name="l00425"></a>00425         }
<a name="l00426"></a>00426       }
<a name="l00427"></a>00427     }
<a name="l00428"></a>00428   }
<a name="l00429"></a>00429 
<a name="l00430"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#3a3d450de62e190daefcc0d0b7c59598">00430</a>   <span class="keywordtype">void</span> ComputeMasksBoundaries() {
<a name="l00431"></a>00431     <span class="comment">// Store boundaries of non zero parts of masks.</span>
<a name="l00432"></a>00432     starts_.clear();
<a name="l00433"></a>00433     starts_.resize(arity_);
<a name="l00434"></a>00434     ends_.clear();
<a name="l00435"></a>00435     ends_.resize(arity_);
<a name="l00436"></a>00436     supports_.clear();
<a name="l00437"></a>00437     supports_.resize(arity_);
<a name="l00438"></a>00438     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> var_index = 0; var_index &lt; arity_; ++var_index) {
<a name="l00439"></a>00439       <span class="keyword">const</span> int64 span = vars_[var_index]-&gt;Max() - original_min_[var_index] + 1;
<a name="l00440"></a>00440       starts_[var_index].resize(span);
<a name="l00441"></a>00441       ends_[var_index].resize(span);
<a name="l00442"></a>00442       supports_[var_index].resize(span);
<a name="l00443"></a>00443       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> value_index = 0; value_index &lt; span; ++value_index) {
<a name="l00444"></a>00444         <span class="keyword">const</span> uint64* <span class="keyword">const</span> mask = masks_[var_index][value_index];
<a name="l00445"></a>00445         <span class="keywordflow">if</span> (mask != NULL) {
<a name="l00446"></a>00446           starts_[var_index][value_index] = 0;
<a name="l00447"></a>00447           <span class="keywordflow">while</span> (!mask[starts_[var_index][value_index]]) {
<a name="l00448"></a>00448             starts_[var_index][value_index]++;
<a name="l00449"></a>00449           }
<a name="l00450"></a>00450           supports_[var_index][value_index] = starts_[var_index][value_index];
<a name="l00451"></a>00451           ends_[var_index][value_index] = length_ - 1;
<a name="l00452"></a>00452           <span class="keywordflow">while</span> (!mask[ends_[var_index][value_index]]) {
<a name="l00453"></a>00453             ends_[var_index][value_index]--;
<a name="l00454"></a>00454           }
<a name="l00455"></a>00455         }
<a name="l00456"></a>00456       }
<a name="l00457"></a>00457     }
<a name="l00458"></a>00458   }
<a name="l00459"></a>00459 
<a name="l00460"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#a79b3d682f832130eacc51e9f934bcfe">00460</a>   <span class="keywordtype">void</span> RemoveUnsupportedValues() {
<a name="l00461"></a>00461     <span class="comment">// remove unreached values.</span>
<a name="l00462"></a>00462     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> var_index = 0; var_index &lt; arity_; ++var_index) {
<a name="l00463"></a>00463       <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var = vars_[var_index];
<a name="l00464"></a>00464       to_remove_.clear();
<a name="l00465"></a>00465       <a class="code" href="classoperations__research_1_1IntVarIterator.html" title="The class Iterator has two direct subclasses.">IntVarIterator</a>* <span class="keyword">const</span> it = iterators_[var_index];
<a name="l00466"></a>00466       <span class="keywordflow">for</span> (it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#c5e717b4d80a83e797fd6f996f040f8c" title="This method must be called before each loop.">Init</a>(); it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#35ab3d4e05e41e87312043b3fbb803f4" title="This method indicates if we can call Value() or not.">Ok</a>(); it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#7d3ca63d1636290367162ad3fb4f5157" title="This method moves the iterator to the next value.">Next</a>()) {
<a name="l00467"></a>00467         <span class="keyword">const</span> int64 value = it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#8cd71554efc9460ca2319bbe79574ffa" title="This method returns the value of the hole.">Value</a>();
<a name="l00468"></a>00468         <span class="keywordflow">if</span> (!masks_[var_index][value - original_min_[var_index]]) {
<a name="l00469"></a>00469           to_remove_.push_back(value);
<a name="l00470"></a>00470         }
<a name="l00471"></a>00471       }
<a name="l00472"></a>00472       <span class="keywordflow">if</span> (to_remove_.size() &gt; 0) {
<a name="l00473"></a>00473         var-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#5df6b77fa28ec505e59311a3dc0bf895" title="This method remove the values from the domain of the variable.">RemoveValues</a>(to_remove_);
<a name="l00474"></a>00474       }
<a name="l00475"></a>00475     }
<a name="l00476"></a>00476   }
<a name="l00477"></a>00477 
<a name="l00478"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#2363222e075dbcec6c4ccc27464e5f16">00478</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> InitialPropagate() {
<a name="l00479"></a>00479     BuildStructures();
<a name="l00480"></a>00480     BuildMasks();
<a name="l00481"></a>00481     FillMasks();
<a name="l00482"></a>00482     ComputeMasksBoundaries();
<a name="l00483"></a>00483     RemoveUnsupportedValues();
<a name="l00484"></a>00484   }
<a name="l00485"></a>00485 
<a name="l00486"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#f38fd5b5c58bfb0de25efd650ffdccf8">00486</a>   <span class="keywordtype">bool</span> Supported(<span class="keywordtype">int</span> var_index, int64 value_index) {
<a name="l00487"></a>00487     DCHECK_GE(var_index, 0);
<a name="l00488"></a>00488     DCHECK_LT(var_index, arity_);
<a name="l00489"></a>00489     DCHECK_GE(value_index, 0);
<a name="l00490"></a>00490     DCHECK(masks_[var_index][value_index]);
<a name="l00491"></a>00491     <span class="keyword">const</span> uint64* <span class="keyword">const</span> mask = masks_[var_index][value_index];
<a name="l00492"></a>00492     <span class="keyword">const</span> <span class="keywordtype">int</span> support = supports_[var_index][value_index];
<a name="l00493"></a>00493     <span class="keywordflow">if</span> ((mask[support] &amp; active_tuples_[support]) != 0) {
<a name="l00494"></a>00494       <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00495"></a>00495     }
<a name="l00496"></a>00496     <span class="keyword">const</span> <span class="keywordtype">int</span> loop_end = ends_[var_index][value_index];
<a name="l00497"></a>00497     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> offset = starts_[var_index][value_index];
<a name="l00498"></a>00498          offset &lt;= loop_end;
<a name="l00499"></a>00499          ++offset) {
<a name="l00500"></a>00500       <span class="keywordflow">if</span> ((mask[offset] &amp; active_tuples_[offset]) != 0) {
<a name="l00501"></a>00501         supports_[var_index][value_index] = offset;
<a name="l00502"></a>00502         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00503"></a>00503       }
<a name="l00504"></a>00504     }
<a name="l00505"></a>00505     <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00506"></a>00506   }
<a name="l00507"></a>00507 
<a name="l00508"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#e0e36b71394050c60bd96fc01460c0b7">00508</a>   <span class="keywordtype">void</span> Propagate() {
<a name="l00509"></a>00509     <span class="comment">// This methods scans all values of all variables to see if they</span>
<a name="l00510"></a>00510     <span class="comment">// are still supported.</span>
<a name="l00511"></a>00511     <span class="comment">// This method is not attached to any particular variable, but is pushed</span>
<a name="l00512"></a>00512     <span class="comment">// at a delayed priority when Update(var_index) deems it necessary.</span>
<a name="l00513"></a>00513     <span class="keyword">const</span> uint64 current_stamp = solver()-&gt;stamp();
<a name="l00514"></a>00514     memset(temp_mask_.get(), 0, length_ * <span class="keyword">sizeof</span>(*temp_mask_.get()));
<a name="l00515"></a>00515     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> var_index = 0; var_index &lt; arity_; ++var_index) {
<a name="l00516"></a>00516       to_remove_.clear();
<a name="l00517"></a>00517       <a class="code" href="classoperations__research_1_1IntVarIterator.html" title="The class Iterator has two direct subclasses.">IntVarIterator</a>* <span class="keyword">const</span> it = iterators_[var_index];
<a name="l00518"></a>00518       <span class="keywordflow">for</span> (it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#c5e717b4d80a83e797fd6f996f040f8c" title="This method must be called before each loop.">Init</a>(); it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#35ab3d4e05e41e87312043b3fbb803f4" title="This method indicates if we can call Value() or not.">Ok</a>(); it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#7d3ca63d1636290367162ad3fb4f5157" title="This method moves the iterator to the next value.">Next</a>()) {
<a name="l00519"></a>00519         <span class="keyword">const</span> int64 value_index = it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#8cd71554efc9460ca2319bbe79574ffa" title="This method returns the value of the hole.">Value</a>() - original_min_[var_index];
<a name="l00520"></a>00520         <span class="keywordflow">if</span> (!Supported(var_index, value_index)) {
<a name="l00521"></a>00521           to_remove_.push_back(it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#8cd71554efc9460ca2319bbe79574ffa" title="This method returns the value of the hole.">Value</a>());
<a name="l00522"></a>00522         }
<a name="l00523"></a>00523       }
<a name="l00524"></a>00524       <span class="keywordflow">if</span> (to_remove_.size() &gt; 0) {
<a name="l00525"></a>00525         vars_[var_index]-&gt;RemoveValues(to_remove_);
<a name="l00526"></a>00526         <span class="comment">// Actively remove unsupported bitsets from active_tuples_.</span>
<a name="l00527"></a>00527         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> offset = 0; offset &lt; length_; ++offset) {
<a name="l00528"></a>00528           temp_mask_[offset] = 0;
<a name="l00529"></a>00529         }
<a name="l00530"></a>00530         <span class="keywordflow">for</span> (ConstIter&lt;vector&lt;int64&gt; &gt; it(to_remove_); !it.at_end(); ++it) {
<a name="l00531"></a>00531           <span class="keyword">const</span> int64 value_index = (*it) - original_min_[var_index];
<a name="l00532"></a>00532           <span class="keyword">const</span> uint64* <span class="keyword">const</span> mask = masks_[var_index][value_index];
<a name="l00533"></a>00533           DCHECK(mask);
<a name="l00534"></a>00534           UpdateTempMask(mask,
<a name="l00535"></a>00535                          starts_[var_index][value_index],
<a name="l00536"></a>00536                          ends_[var_index][value_index]);
<a name="l00537"></a>00537         }
<a name="l00538"></a>00538         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> offset = 0; offset &lt; length_; ++offset) {
<a name="l00539"></a>00539           <span class="keywordflow">if</span> ((temp_mask_[offset] &amp; active_tuples_[offset]) != 0) {
<a name="l00540"></a>00540             <span class="keywordflow">if</span> (stamps_[offset] &lt; current_stamp) {
<a name="l00541"></a>00541               stamps_[offset] = current_stamp;
<a name="l00542"></a>00542               solver()-&gt;SaveValue(&amp;active_tuples_[offset]);
<a name="l00543"></a>00543             }
<a name="l00544"></a>00544             active_tuples_[offset] &amp;= ~temp_mask_[offset];
<a name="l00545"></a>00545           }
<a name="l00546"></a>00546         }
<a name="l00547"></a>00547       }
<a name="l00548"></a>00548     }
<a name="l00549"></a>00549     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> offset = 0; offset &lt; length_; ++offset) {
<a name="l00550"></a>00550       <span class="keywordflow">if</span> (active_tuples_[offset]) {
<a name="l00551"></a>00551         <span class="keywordflow">return</span>;
<a name="l00552"></a>00552       }
<a name="l00553"></a>00553     }
<a name="l00554"></a>00554     solver()-&gt;Fail();
<a name="l00555"></a>00555   }
<a name="l00556"></a>00556 
<a name="l00557"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#fd2a84552df0f936f8416bc512b3b856">00557</a>   <span class="keywordtype">void</span> UpdateTempMask(<span class="keyword">const</span> uint64* <span class="keyword">const</span> mask, <span class="keywordtype">int</span> start, <span class="keywordtype">int</span> end) {
<a name="l00558"></a>00558     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> offset = start; offset &lt;= end; ++offset) {
<a name="l00559"></a>00559       temp_mask_[offset] |= mask[offset];
<a name="l00560"></a>00560     }
<a name="l00561"></a>00561   }
<a name="l00562"></a>00562 
<a name="l00563"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#3b2b353595412f3a2f78a6c06b6b294c">00563</a>   <span class="keywordtype">void</span> Update(<span class="keywordtype">int</span> var_index) {
<a name="l00564"></a>00564     <span class="comment">// This method will update the set of active tuples by masking out all</span>
<a name="l00565"></a>00565     <span class="comment">// tuples attached to values of the variables that have been removed.</span>
<a name="l00566"></a>00566 
<a name="l00567"></a>00567     <span class="comment">// We first collect the complete set of tuples to blank out in temp_mask_.</span>
<a name="l00568"></a>00568     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var = vars_[var_index];
<a name="l00569"></a>00569     <span class="keyword">const</span> int64 omin = original_min_[var_index];
<a name="l00570"></a>00570     <span class="keywordtype">bool</span> changed = <span class="keyword">false</span>;
<a name="l00571"></a>00571     memset(temp_mask_.get(), 0, length_ * <span class="keyword">sizeof</span>(*temp_mask_.get()));
<a name="l00572"></a>00572     <span class="keyword">const</span> int64 oldmax = var-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#619ac58213bbff56398934e76dd1079f" title="Returns the previous max.">OldMax</a>();
<a name="l00573"></a>00573     <span class="keyword">const</span> int64 vmin = var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>();
<a name="l00574"></a>00574     <span class="keyword">const</span> int64 vmax = var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>();
<a name="l00575"></a>00575     <span class="keywordflow">for</span> (int64 value = var-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#894ecb1c102fa7fca59661a215f14d50" title="Returns the previous min.">OldMin</a>(); value &lt; vmin; ++value) {
<a name="l00576"></a>00576       <span class="keyword">const</span> int64 value_index = value  - omin;
<a name="l00577"></a>00577       <span class="keyword">const</span> uint64* <span class="keyword">const</span> mask = masks_[var_index][value_index];
<a name="l00578"></a>00578       <span class="keywordflow">if</span> (mask) {
<a name="l00579"></a>00579         UpdateTempMask(mask,
<a name="l00580"></a>00580                        starts_[var_index][value_index],
<a name="l00581"></a>00581                        ends_[var_index][value_index]);
<a name="l00582"></a>00582       }
<a name="l00583"></a>00583     }
<a name="l00584"></a>00584     <a class="code" href="classoperations__research_1_1IntVarIterator.html" title="The class Iterator has two direct subclasses.">IntVarIterator</a>* <span class="keyword">const</span> hole = holes_[var_index];
<a name="l00585"></a>00585     <span class="keywordflow">for</span> (hole-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#c5e717b4d80a83e797fd6f996f040f8c" title="This method must be called before each loop.">Init</a>(); hole-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#35ab3d4e05e41e87312043b3fbb803f4" title="This method indicates if we can call Value() or not.">Ok</a>(); hole-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#7d3ca63d1636290367162ad3fb4f5157" title="This method moves the iterator to the next value.">Next</a>()) {
<a name="l00586"></a>00586       <span class="keyword">const</span> int64 value_index = hole-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#8cd71554efc9460ca2319bbe79574ffa" title="This method returns the value of the hole.">Value</a>() - omin;
<a name="l00587"></a>00587       <span class="keyword">const</span> uint64* <span class="keyword">const</span> mask = masks_[var_index][value_index];
<a name="l00588"></a>00588       <span class="keywordflow">if</span> (mask) {
<a name="l00589"></a>00589         UpdateTempMask(mask,
<a name="l00590"></a>00590                        starts_[var_index][value_index],
<a name="l00591"></a>00591                        ends_[var_index][value_index]);
<a name="l00592"></a>00592       }
<a name="l00593"></a>00593     }
<a name="l00594"></a>00594     <span class="keywordflow">for</span> (int64 value = vmax + 1; value &lt;= oldmax; ++value) {
<a name="l00595"></a>00595       <span class="keyword">const</span> int64 value_index = value  - omin;
<a name="l00596"></a>00596       <span class="keyword">const</span> uint64* <span class="keyword">const</span> mask = masks_[var_index][value_index];
<a name="l00597"></a>00597       <span class="keywordflow">if</span> (mask) {
<a name="l00598"></a>00598         UpdateTempMask(mask,
<a name="l00599"></a>00599                        starts_[var_index][value_index],
<a name="l00600"></a>00600                        ends_[var_index][value_index]);
<a name="l00601"></a>00601       }
<a name="l00602"></a>00602     }
<a name="l00603"></a>00603     <span class="comment">// Then we apply this mask to active_tuples_.</span>
<a name="l00604"></a>00604     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> offset = 0; offset &lt; length_; ++offset) {
<a name="l00605"></a>00605       <span class="keywordflow">if</span> ((temp_mask_[offset] &amp; active_tuples_[offset]) != 0) {
<a name="l00606"></a>00606         <span class="keyword">const</span> uint64 current_stamp = solver()-&gt;stamp();
<a name="l00607"></a>00607         <span class="keywordflow">if</span> (stamps_[offset] &lt; current_stamp) {
<a name="l00608"></a>00608           stamps_[offset] = current_stamp;
<a name="l00609"></a>00609           solver()-&gt;SaveValue(&amp;active_tuples_[offset]);
<a name="l00610"></a>00610         }
<a name="l00611"></a>00611         active_tuples_[offset] &amp;= ~temp_mask_[offset];
<a name="l00612"></a>00612         changed = <span class="keyword">true</span>;
<a name="l00613"></a>00613       }
<a name="l00614"></a>00614     }
<a name="l00615"></a>00615     <span class="comment">// And check active_tuples_ is still not empty, we fail otherwise.</span>
<a name="l00616"></a>00616     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> offset = 0; offset &lt; length_; ++offset) {
<a name="l00617"></a>00617       <span class="keywordflow">if</span> (active_tuples_[offset]) {
<a name="l00618"></a>00618         <span class="comment">// We push the propagate method only if something has changed.</span>
<a name="l00619"></a>00619         <span class="keywordflow">if</span> (changed) {
<a name="l00620"></a>00620           Enqueue(demon_);
<a name="l00621"></a>00621         }
<a name="l00622"></a>00622         <span class="keywordflow">return</span>;
<a name="l00623"></a>00623       }
<a name="l00624"></a>00624     }
<a name="l00625"></a>00625     solver()-&gt;Fail();
<a name="l00626"></a>00626   }
<a name="l00627"></a>00627 
<a name="l00628"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#c7c4addafb68bf85f420e102e510c654">00628</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> DebugString()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="stringliteral">"PositiveTableConstraint"</span>; }
<a name="l00629"></a>00629 
<a name="l00630"></a>00630  <span class="keyword">private</span>:
<a name="l00631"></a>00631   <span class="comment">// Length of bitsets in double words.</span>
<a name="l00632"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#1a958cfe051709f193d85a2834e68ae8">00632</a>   <span class="keyword">const</span> <span class="keywordtype">int</span> length_;
<a name="l00633"></a>00633   <span class="comment">// Bitset of active tuples.</span>
<a name="l00634"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#4a6b60382ce8036e06661b91759006bf">00634</a>   scoped_array&lt;uint64&gt; active_tuples_;
<a name="l00635"></a>00635   <span class="comment">// Array of stamps, one per 64 tuples.</span>
<a name="l00636"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#4fa2c1d05cbbca6e05251e6c7f8cd901">00636</a>   scoped_array&lt;uint64&gt; stamps_;
<a name="l00637"></a>00637   <span class="comment">// All allowed tuples.</span>
<a name="l00638"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#631c4bedb5fb25f0d8bb179f9c8267f9">00638</a>   scoped_array&lt;int64*&gt; tuples_;
<a name="l00639"></a>00639   <span class="comment">// The masks per value per variable.</span>
<a name="l00640"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#f440a49cd062d5e65cd619ebbd1d177c">00640</a>   vector&lt;vector&lt;uint64*&gt; &gt; masks_;
<a name="l00641"></a>00641   <span class="comment">// The min on the vars at creation time.</span>
<a name="l00642"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#877cad48a86788667488e6f0fbd2d068">00642</a>   scoped_array&lt;int64&gt; original_min_;
<a name="l00643"></a>00643   <span class="comment">// The starts of active bitsets.</span>
<a name="l00644"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#ed376dbbe590bc8b86d33f37b441ded8">00644</a>   vector&lt;vector&lt;int&gt; &gt; starts_;
<a name="l00645"></a>00645   <span class="comment">// The ends of the active bitsets.x</span>
<a name="l00646"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#559460a87058169b4428c5eff73270f8">00646</a>   vector&lt;vector&lt;int&gt; &gt; ends_;
<a name="l00647"></a>00647   <span class="comment">// A temporary mask use for computation.</span>
<a name="l00648"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#190bff101d49feab9cceb6f0298c0fe5">00648</a>   scoped_array&lt;uint64&gt; temp_mask_;
<a name="l00649"></a>00649   <span class="comment">// The portion of the active tuples supporting each value per variable.</span>
<a name="l00650"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#e31aa21ade9be939002015f8f2cfa7af">00650</a>   vector&lt;vector&lt;int&gt; &gt; supports_;
<a name="l00651"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1CompactPositiveTableConstraint.html#62f1891ee63a8d377b662cc2c31716f5">00651</a>   <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* demon_;
<a name="l00652"></a>00652 };
<a name="l00653"></a>00653 
<a name="l00654"></a>00654 <span class="comment">// ----- Small Compact Table. -----</span>
<a name="l00655"></a>00655 
<a name="l00656"></a>00656 <span class="comment">// TODO(user): regroup code with CompactPositiveTableConstraint.</span>
<a name="l00657"></a>00657 
<a name="l00658"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html">00658</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html" title="Small Compact Table.">SmallCompactPositiveTableConstraint</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1BasePositiveTableConstraint.html" title="Positive Table Constraint.">BasePositiveTableConstraint</a> {
<a name="l00659"></a>00659  <span class="keyword">public</span>:
<a name="l00660"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html#6f16bb589003ecc5930601288341e7f6">00660</a>   <a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html" title="Small Compact Table.">SmallCompactPositiveTableConstraint</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00661"></a>00661                                       <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l00662"></a>00662                                       <span class="keyword">const</span> int64* <span class="keyword">const</span> * tuples,
<a name="l00663"></a>00663                                       <span class="keywordtype">int</span> tuple_count,
<a name="l00664"></a>00664                                       <span class="keywordtype">int</span> arity)
<a name="l00665"></a>00665       : <a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1BasePositiveTableConstraint.html" title="Positive Table Constraint.">BasePositiveTableConstraint</a>(s, vars, tuples, tuple_count, arity),
<a name="l00666"></a>00666         active_tuples_(0),
<a name="l00667"></a>00667         stamp_(0),
<a name="l00668"></a>00668         tuples_(new int64*[tuple_count_]),
<a name="l00669"></a>00669         masks_(new uint64*[arity_]),
<a name="l00670"></a>00670         original_min_(new int64[arity_]),
<a name="l00671"></a>00671         demon_(NULL) {
<a name="l00672"></a>00672     CHECK_GE(tuple_count_, 0);
<a name="l00673"></a>00673     CHECK_LE(tuple_count_, kBitsInUint64);
<a name="l00674"></a>00674     CHECK_GE(arity_, 0);
<a name="l00675"></a>00675     <span class="comment">// Copy tuples</span>
<a name="l00676"></a>00676     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; tuple_count_; ++i) {
<a name="l00677"></a>00677       tuples_[i] = <span class="keyword">new</span> int64[arity_];
<a name="l00678"></a>00678       memcpy(tuples_[i], tuples[i], arity_ * <span class="keyword">sizeof</span>(*tuples[i]));
<a name="l00679"></a>00679     }
<a name="l00680"></a>00680     <span class="comment">// Zero masks</span>
<a name="l00681"></a>00681     memset(masks_.get(), 0, arity_ * <span class="keyword">sizeof</span>(*masks_.get()));
<a name="l00682"></a>00682   }
<a name="l00683"></a>00683 
<a name="l00684"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html#f9bdbe4f7bbf04ddc6c6edd3fcda9b67">00684</a>   <a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html" title="Small Compact Table.">SmallCompactPositiveTableConstraint</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00685"></a>00685                                       <span class="keyword">const</span> vector&lt;IntVar*&gt; &amp; vars,
<a name="l00686"></a>00686                                       <span class="keyword">const</span> vector&lt;vector&lt;int64&gt; &gt;&amp; tuples)
<a name="l00687"></a>00687       : <a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1BasePositiveTableConstraint.html" title="Positive Table Constraint.">BasePositiveTableConstraint</a>(s, vars, tuples),
<a name="l00688"></a>00688         active_tuples_(0),
<a name="l00689"></a>00689         stamp_(0),
<a name="l00690"></a>00690         tuples_(new int64*[tuple_count_]),
<a name="l00691"></a>00691         masks_(new uint64*[arity_]),
<a name="l00692"></a>00692         original_min_(new int64[arity_]),
<a name="l00693"></a>00693         demon_(NULL) {
<a name="l00694"></a>00694     CHECK_GE(tuple_count_, 0);
<a name="l00695"></a>00695     CHECK_GE(arity_, 0);
<a name="l00696"></a>00696     CHECK_LE(tuples.size(), kBitsInUint64);
<a name="l00697"></a>00697     <span class="comment">// Copy tuples</span>
<a name="l00698"></a>00698     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; tuple_count_; ++i) {
<a name="l00699"></a>00699       CHECK_EQ(arity_, tuples[i].size());
<a name="l00700"></a>00700       tuples_[i] = <span class="keyword">new</span> int64[arity_];
<a name="l00701"></a>00701       memcpy(tuples_[i], tuples[i].data(), arity_ * <span class="keyword">sizeof</span>(tuples[i][0]));
<a name="l00702"></a>00702     }
<a name="l00703"></a>00703     <span class="comment">// Zero masks</span>
<a name="l00704"></a>00704     memset(masks_.get(), 0, arity_ * <span class="keyword">sizeof</span>(*masks_.get()));
<a name="l00705"></a>00705   }
<a name="l00706"></a>00706 
<a name="l00707"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html#368dc86b8e74df6cffc1d1863f266058">00707</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html" title="Small Compact Table.">SmallCompactPositiveTableConstraint</a>() {
<a name="l00708"></a>00708     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; tuple_count_; ++i) {
<a name="l00709"></a>00709       <span class="keyword">delete</span>[] tuples_[i];
<a name="l00710"></a>00710       tuples_[i] = NULL;
<a name="l00711"></a>00711     }
<a name="l00712"></a>00712     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; arity_; ++i) {
<a name="l00713"></a>00713       <span class="keyword">delete</span> [] masks_[i];
<a name="l00714"></a>00714       masks_[i] = NULL;
<a name="l00715"></a>00715     }
<a name="l00716"></a>00716   }
<a name="l00717"></a>00717 
<a name="l00718"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html#22f2e4dc456ff5693328e78860e821f0">00718</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Post() {
<a name="l00719"></a>00719     demon_ = <a class="code" href="namespaceoperations__research.html#16f35a1c0ce076f2587fffbab80200b6">MakeDelayedConstraintDemon0</a>(
<a name="l00720"></a>00720         solver(),
<a name="l00721"></a>00721         <span class="keyword">this</span>,
<a name="l00722"></a>00722         &amp;SmallCompactPositiveTableConstraint::Propagate,
<a name="l00723"></a>00723         <span class="stringliteral">"Propagate"</span>);
<a name="l00724"></a>00724     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; arity_; ++i) {
<a name="l00725"></a>00725       <span class="keywordflow">if</span> (!vars_[i]-&gt;Bound()) {
<a name="l00726"></a>00726         <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* <span class="keyword">const</span> update_demon = <a class="code" href="namespaceoperations__research.html#bc7cb18be5d9d418d32782253cd4bf5a">MakeConstraintDemon1</a>(
<a name="l00727"></a>00727             solver(),
<a name="l00728"></a>00728             <span class="keyword">this</span>,
<a name="l00729"></a>00729             &amp;SmallCompactPositiveTableConstraint::Update,
<a name="l00730"></a>00730             <span class="stringliteral">"Update"</span>,
<a name="l00731"></a>00731             i);
<a name="l00732"></a>00732         vars_[i]-&gt;WhenDomain(update_demon);
<a name="l00733"></a>00733       }
<a name="l00734"></a>00734     }
<a name="l00735"></a>00735     stamp_ = solver()-&gt;stamp() - 1;
<a name="l00736"></a>00736   }
<a name="l00737"></a>00737 
<a name="l00738"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html#39ef6608ddf485140a26fbe736d9dc00">00738</a>   <span class="keywordtype">void</span> InitMasks() {
<a name="l00739"></a>00739     <span class="comment">// Build masks.</span>
<a name="l00740"></a>00740     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; arity_; ++i) {
<a name="l00741"></a>00741       original_min_[i] = vars_[i]-&gt;Min();
<a name="l00742"></a>00742       <span class="keyword">const</span> int64 span = vars_[i]-&gt;Max() - original_min_[i] + 1;
<a name="l00743"></a>00743       masks_[i] = <span class="keyword">new</span> uint64[span];
<a name="l00744"></a>00744       memset(masks_[i], 0, span * <span class="keyword">sizeof</span>(*masks_[i]));
<a name="l00745"></a>00745     }
<a name="l00746"></a>00746   }
<a name="l00747"></a>00747 
<a name="l00748"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html#7c22b390a20015c75c2d425bdd2c4430">00748</a>   <span class="keywordtype">bool</span> IsTupleSupported(<span class="keywordtype">int</span> tuple_index) {
<a name="l00749"></a>00749     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> var_index = 0; var_index &lt; arity_; ++var_index) {
<a name="l00750"></a>00750       <span class="keyword">const</span> int64 value = tuples_[tuple_index][var_index];
<a name="l00751"></a>00751       <span class="keywordflow">if</span> (!vars_[var_index]-&gt;Contains(value)) {
<a name="l00752"></a>00752         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00753"></a>00753       }
<a name="l00754"></a>00754     }
<a name="l00755"></a>00755     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00756"></a>00756   }
<a name="l00757"></a>00757 
<a name="l00758"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html#738a126a0a4f3a13048da65cf0480212">00758</a>   <span class="keywordtype">void</span> ComputeActiveTuples() {
<a name="l00759"></a>00759     active_tuples_ = 0;
<a name="l00760"></a>00760    <span class="comment">// Compute active_tuples_ and update masks.</span>
<a name="l00761"></a>00761     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> tuple_index = 0; tuple_index &lt; tuple_count_; ++tuple_index) {
<a name="l00762"></a>00762       <span class="keywordflow">if</span> (IsTupleSupported(tuple_index)) {
<a name="l00763"></a>00763         <span class="keyword">const</span> uint64 local_mask = OneBit64(tuple_index);
<a name="l00764"></a>00764         active_tuples_ |= local_mask;
<a name="l00765"></a>00765         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> var_index = 0; var_index &lt; arity_; ++var_index) {
<a name="l00766"></a>00766           <span class="keyword">const</span> int64 value_index =
<a name="l00767"></a>00767               tuples_[tuple_index][var_index] - original_min_[var_index];
<a name="l00768"></a>00768           masks_[var_index][value_index] |= local_mask;
<a name="l00769"></a>00769         }
<a name="l00770"></a>00770       }
<a name="l00771"></a>00771     }
<a name="l00772"></a>00772     <span class="keywordflow">if</span> (!active_tuples_) {
<a name="l00773"></a>00773       solver()-&gt;Fail();
<a name="l00774"></a>00774     }
<a name="l00775"></a>00775   }
<a name="l00776"></a>00776 
<a name="l00777"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html#68af2bb51e61fed88f23edcfc0c1bf1e">00777</a>   <span class="keywordtype">void</span> RemoveUnsupportedValues() {
<a name="l00778"></a>00778     <span class="comment">// remove unreached values.</span>
<a name="l00779"></a>00779     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> var_index = 0; var_index &lt; arity_; ++var_index) {
<a name="l00780"></a>00780       <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var = vars_[var_index];
<a name="l00781"></a>00781       <span class="keyword">const</span> int64 original_min = original_min_[var_index];
<a name="l00782"></a>00782       to_remove_.clear();
<a name="l00783"></a>00783       <a class="code" href="classoperations__research_1_1IntVarIterator.html" title="The class Iterator has two direct subclasses.">IntVarIterator</a>* <span class="keyword">const</span> it = iterators_[var_index];
<a name="l00784"></a>00784       <span class="keywordflow">for</span> (it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#c5e717b4d80a83e797fd6f996f040f8c" title="This method must be called before each loop.">Init</a>(); it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#35ab3d4e05e41e87312043b3fbb803f4" title="This method indicates if we can call Value() or not.">Ok</a>(); it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#7d3ca63d1636290367162ad3fb4f5157" title="This method moves the iterator to the next value.">Next</a>()) {
<a name="l00785"></a>00785         <span class="keyword">const</span> int64 value = it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#8cd71554efc9460ca2319bbe79574ffa" title="This method returns the value of the hole.">Value</a>();
<a name="l00786"></a>00786         <span class="keywordflow">if</span> (masks_[var_index][value - original_min] == 0) {
<a name="l00787"></a>00787           to_remove_.push_back(value);
<a name="l00788"></a>00788         }
<a name="l00789"></a>00789       }
<a name="l00790"></a>00790       <span class="keywordflow">if</span> (to_remove_.size() &gt; 0) {
<a name="l00791"></a>00791         var-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#5df6b77fa28ec505e59311a3dc0bf895" title="This method remove the values from the domain of the variable.">RemoveValues</a>(to_remove_);
<a name="l00792"></a>00792       }
<a name="l00793"></a>00793     }
<a name="l00794"></a>00794   }
<a name="l00795"></a>00795 
<a name="l00796"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html#a670afc6dd4e4bbb15850b5e4fa93cba">00796</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> InitialPropagate() {
<a name="l00797"></a>00797     InitMasks();
<a name="l00798"></a>00798     ComputeActiveTuples();
<a name="l00799"></a>00799     RemoveUnsupportedValues();
<a name="l00800"></a>00800   }
<a name="l00801"></a>00801 
<a name="l00802"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html#f6370cbb3685e2b6d9f2258ed9ad3320">00802</a>   <span class="keywordtype">void</span> SaveActives() {
<a name="l00803"></a>00803     <span class="keyword">const</span> uint64 current_stamp = solver()-&gt;stamp();
<a name="l00804"></a>00804     <span class="keywordflow">if</span> (stamp_ &lt; current_stamp) {
<a name="l00805"></a>00805       stamp_ = current_stamp;
<a name="l00806"></a>00806       solver()-&gt;SaveValue(&amp;active_tuples_);
<a name="l00807"></a>00807     }
<a name="l00808"></a>00808   }
<a name="l00809"></a>00809 
<a name="l00810"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html#ce6f860329273f7a631ce34f0b655ce8">00810</a>   <span class="keywordtype">void</span> Propagate() {
<a name="l00811"></a>00811     <span class="comment">// This methods scans all the values of all the variables to see if they</span>
<a name="l00812"></a>00812     <span class="comment">// are still supported.</span>
<a name="l00813"></a>00813     <span class="comment">// This method is not attached to any particular variable, but is pushed</span>
<a name="l00814"></a>00814     <span class="comment">// at a delayed priority and awakened by Update(var_index).</span>
<a name="l00815"></a>00815 
<a name="l00816"></a>00816     <span class="comment">// We cache active_tuples_.</span>
<a name="l00817"></a>00817     <span class="keyword">const</span> uint64 actives = active_tuples_;
<a name="l00818"></a>00818 
<a name="l00819"></a>00819     <span class="comment">// We scan all variables and check their domains.</span>
<a name="l00820"></a>00820     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> var_index = 0; var_index &lt; arity_; ++var_index) {
<a name="l00821"></a>00821       <span class="keyword">const</span> uint64* <span class="keyword">const</span> var_mask = masks_[var_index];
<a name="l00822"></a>00822       <span class="keyword">const</span> int64 original_min = original_min_[var_index];
<a name="l00823"></a>00823       <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var = vars_[var_index];
<a name="l00824"></a>00824       <span class="keywordflow">if</span> (var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#b2eb094c29f2bdbce94d82a84b16e888" title="Returns true if the min and the max of the expression are equal.">Bound</a>()) {
<a name="l00825"></a>00825         <span class="keywordflow">if</span> ((var_mask[var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>() - original_min] &amp; actives) == 0) {
<a name="l00826"></a>00826           solver()-&gt;Fail();
<a name="l00827"></a>00827         }
<a name="l00828"></a>00828       } <span class="keywordflow">else</span> {
<a name="l00829"></a>00829         to_remove_.clear();
<a name="l00830"></a>00830         <a class="code" href="classoperations__research_1_1IntVarIterator.html" title="The class Iterator has two direct subclasses.">IntVarIterator</a>* <span class="keyword">const</span> it = iterators_[var_index];
<a name="l00831"></a>00831         <span class="keywordflow">for</span> (it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#c5e717b4d80a83e797fd6f996f040f8c" title="This method must be called before each loop.">Init</a>(); it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#35ab3d4e05e41e87312043b3fbb803f4" title="This method indicates if we can call Value() or not.">Ok</a>(); it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#7d3ca63d1636290367162ad3fb4f5157" title="This method moves the iterator to the next value.">Next</a>()) {
<a name="l00832"></a>00832           <span class="keyword">const</span> int64 value = it-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#8cd71554efc9460ca2319bbe79574ffa" title="This method returns the value of the hole.">Value</a>();
<a name="l00833"></a>00833           <span class="keywordflow">if</span> ((var_mask[value - original_min] &amp; actives) == 0) {
<a name="l00834"></a>00834             to_remove_.push_back(value);
<a name="l00835"></a>00835           }
<a name="l00836"></a>00836         }
<a name="l00837"></a>00837         <span class="keywordflow">if</span> (to_remove_.size() == var-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#26efd8a51314b318dc14641e90af5c3a" title="This method returns the number of values in the domain of the variable.">Size</a>()) {
<a name="l00838"></a>00838           solver()-&gt;Fail();
<a name="l00839"></a>00839         } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (to_remove_.size() &gt; 0) {
<a name="l00840"></a>00840           vars_[var_index]-&gt;RemoveValues(to_remove_);
<a name="l00841"></a>00841         }
<a name="l00842"></a>00842       }
<a name="l00843"></a>00843     }
<a name="l00844"></a>00844   }
<a name="l00845"></a>00845 
<a name="l00846"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html#633badfde784a69e8225b19b664361c7">00846</a>   <span class="keywordtype">void</span> Update(<span class="keywordtype">int</span> var_index) {
<a name="l00847"></a>00847     <span class="comment">// This method updates the set of active tuples by masking out all</span>
<a name="l00848"></a>00848     <span class="comment">// tuples attached to values of the variables that have been removed.</span>
<a name="l00849"></a>00849 
<a name="l00850"></a>00850     <span class="comment">// We first collect the complete set of tuples to blank out in temp_mask.</span>
<a name="l00851"></a>00851     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var = vars_[var_index];
<a name="l00852"></a>00852     <span class="keyword">const</span> int64 original_min = original_min_[var_index];
<a name="l00853"></a>00853     uint64 temp_mask = 0;
<a name="l00854"></a>00854     <span class="keyword">const</span> uint64* <span class="keyword">const</span> var_mask = masks_[var_index];
<a name="l00855"></a>00855     <span class="keyword">const</span> int64 oldmax = var-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#619ac58213bbff56398934e76dd1079f" title="Returns the previous max.">OldMax</a>();
<a name="l00856"></a>00856     <span class="keyword">const</span> int64 vmin = var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>();
<a name="l00857"></a>00857     <span class="keyword">const</span> int64 vmax = var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>();
<a name="l00858"></a>00858 
<a name="l00859"></a>00859     <span class="keywordflow">for</span> (int64 value = var-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#894ecb1c102fa7fca59661a215f14d50" title="Returns the previous min.">OldMin</a>(); value &lt; vmin; ++value) {
<a name="l00860"></a>00860       temp_mask |= var_mask[value - original_min];
<a name="l00861"></a>00861     }
<a name="l00862"></a>00862     <a class="code" href="classoperations__research_1_1IntVarIterator.html" title="The class Iterator has two direct subclasses.">IntVarIterator</a>* <span class="keyword">const</span> hole = holes_[var_index];
<a name="l00863"></a>00863     <span class="keywordflow">for</span> (hole-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#c5e717b4d80a83e797fd6f996f040f8c" title="This method must be called before each loop.">Init</a>(); hole-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#35ab3d4e05e41e87312043b3fbb803f4" title="This method indicates if we can call Value() or not.">Ok</a>(); hole-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#7d3ca63d1636290367162ad3fb4f5157" title="This method moves the iterator to the next value.">Next</a>()) {
<a name="l00864"></a>00864       temp_mask |= var_mask[hole-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#8cd71554efc9460ca2319bbe79574ffa" title="This method returns the value of the hole.">Value</a>() - original_min];
<a name="l00865"></a>00865     }
<a name="l00866"></a>00866     <span class="keywordflow">for</span> (int64 value = vmax + 1; value &lt;= oldmax; ++value) {
<a name="l00867"></a>00867       temp_mask |= var_mask[value - original_min];
<a name="l00868"></a>00868     }
<a name="l00869"></a>00869     <span class="comment">// Then we apply this mask to active_tuples_.</span>
<a name="l00870"></a>00870     <span class="keywordflow">if</span> (temp_mask &amp; active_tuples_) {
<a name="l00871"></a>00871       SaveActives();
<a name="l00872"></a>00872       active_tuples_ &amp;= ~temp_mask;
<a name="l00873"></a>00873       <span class="keywordflow">if</span> (active_tuples_) {
<a name="l00874"></a>00874         Enqueue(demon_);
<a name="l00875"></a>00875       } <span class="keywordflow">else</span> {
<a name="l00876"></a>00876         solver()-&gt;Fail();
<a name="l00877"></a>00877       }
<a name="l00878"></a>00878     }
<a name="l00879"></a>00879   }
<a name="l00880"></a>00880 
<a name="l00881"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html#bd923113512e6d5ee3ccfb06976afdd4">00881</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> DebugString()<span class="keyword"> const </span>{
<a name="l00882"></a>00882     <span class="keywordflow">return</span> <span class="stringliteral">"SmallCompactPositiveTableConstraint"</span>;
<a name="l00883"></a>00883   }
<a name="l00884"></a>00884  <span class="keyword">private</span>:
<a name="l00885"></a>00885   <span class="comment">// Bitset of active tuples.</span>
<a name="l00886"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html#6797b6f8215ba628aaa85f47e514987b">00886</a>   uint64 active_tuples_;
<a name="l00887"></a>00887   <span class="comment">// Stamp of the active_tuple bitset.</span>
<a name="l00888"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html#3e07093ed0510aab1ed7f7f2f33a15e6">00888</a>   uint64 stamp_;
<a name="l00889"></a>00889   <span class="comment">// All allowed tuples.</span>
<a name="l00890"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html#4baef1984a3d02880d070350f17e0b38">00890</a>   scoped_array&lt;int64*&gt; tuples_;
<a name="l00891"></a>00891   <span class="comment">// The masks per value per variable.</span>
<a name="l00892"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html#4523fb98a5470bcec79bf36aaa5cfb01">00892</a>   scoped_array&lt;uint64*&gt; masks_;
<a name="l00893"></a>00893   <span class="comment">// The min on the vars at creation time.</span>
<a name="l00894"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html#bc33bad43c8563f4d513d5a29901f905">00894</a>   scoped_array&lt;int64&gt; original_min_;
<a name="l00895"></a><a class="code" href="classoperations__research_1_1anonymous__namespace_02table_8cc_03_1_1SmallCompactPositiveTableConstraint.html#d607fa57758679457b4ea9329c5ee7db">00895</a>   <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* demon_;
<a name="l00896"></a>00896 };
<a name="l00897"></a>00897 
<a name="l00898"></a>00898 
<a name="l00899"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02table_8cc_03.html#52373cb2d9fdda80b8ef6aae6c714b29">00899</a> <span class="keywordtype">bool</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02table_8cc_03.html#52373cb2d9fdda80b8ef6aae6c714b29">HasCompactDomains</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars, <span class="keywordtype">int</span> arity) {
<a name="l00900"></a>00900   int64 sum_of_spans = 0LL;
<a name="l00901"></a>00901   int64 sum_of_sizes = 0LL;
<a name="l00902"></a>00902   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; arity; ++i) {
<a name="l00903"></a>00903     <span class="keyword">const</span> int64 vmin = vars[i]-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>();
<a name="l00904"></a>00904     <span class="keyword">const</span> int64 vmax = vars[i]-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>();
<a name="l00905"></a>00905     sum_of_sizes += vars[i]-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#26efd8a51314b318dc14641e90af5c3a" title="This method returns the number of values in the domain of the variable.">Size</a>();
<a name="l00906"></a>00906     sum_of_spans += vmax - vmin + 1;
<a name="l00907"></a>00907   }
<a name="l00908"></a>00908   <span class="keywordflow">return</span> sum_of_spans &lt; 4 * sum_of_sizes;
<a name="l00909"></a>00909 }
<a name="l00910"></a>00910 }  <span class="comment">// namespace</span>
<a name="l00911"></a>00911 
<a name="l00912"></a><a class="code" href="classoperations__research_1_1Solver.html#0bef6d735a9070e00742a8255c4da5d3">00912</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#0bef6d735a9070e00742a8255c4da5d3" title="This method creates a constraint where the graph of the relation between the variables...">Solver::MakeAllowedAssignments</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l00913"></a>00913                                            <span class="keyword">const</span> int64* <span class="keyword">const</span> * tuples,
<a name="l00914"></a>00914                                            <span class="keywordtype">int</span> tuple_count,
<a name="l00915"></a>00915                                            <span class="keywordtype">int</span> arity) {
<a name="l00916"></a>00916   <span class="keywordflow">if</span> (FLAGS_cp_use_compact_table &amp;&amp; <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02table_8cc_03.html#52373cb2d9fdda80b8ef6aae6c714b29">HasCompactDomains</a>(vars, arity)) {
<a name="l00917"></a>00917     <span class="keywordflow">if</span> (tuple_count &lt; <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02table_8cc_03.html#d6b8e2ae6c4585530b7c6c51e686a16e">kBitsInUint64</a> &amp;&amp; FLAGS_cp_use_small_table) {
<a name="l00918"></a>00918       <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> SmallCompactPositiveTableConstraint(<span class="keyword">this</span>,
<a name="l00919"></a>00919                                                               vars,
<a name="l00920"></a>00920                                                               tuples,
<a name="l00921"></a>00921                                                               tuple_count,
<a name="l00922"></a>00922                                                               arity));
<a name="l00923"></a>00923     } <span class="keywordflow">else</span> {
<a name="l00924"></a>00924       <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> CompactPositiveTableConstraint(<span class="keyword">this</span>,
<a name="l00925"></a>00925                                                          vars,
<a name="l00926"></a>00926                                                          tuples,
<a name="l00927"></a>00927                                                          tuple_count,
<a name="l00928"></a>00928                                                          arity));
<a name="l00929"></a>00929     }
<a name="l00930"></a>00930   }
<a name="l00931"></a>00931   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> PositiveTableConstraint(<span class="keyword">this</span>,
<a name="l00932"></a>00932                                               vars,
<a name="l00933"></a>00933                                               tuples,
<a name="l00934"></a>00934                                               tuple_count,
<a name="l00935"></a>00935                                               arity));
<a name="l00936"></a>00936 }
<a name="l00937"></a>00937 
<a name="l00938"></a><a class="code" href="classoperations__research_1_1Solver.html#1dead5f286b4f08112b011bd63099104">00938</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* Solver::MakeAllowedAssignments(
<a name="l00939"></a>00939     <span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars, <span class="keyword">const</span> vector&lt;vector&lt;int64&gt; &gt;&amp; tuples) {
<a name="l00940"></a>00940   <span class="keywordflow">if</span> (FLAGS_cp_use_compact_table
<a name="l00941"></a>00941       &amp;&amp; <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02table_8cc_03.html#52373cb2d9fdda80b8ef6aae6c714b29">HasCompactDomains</a>(vars.data(), vars.size())) {
<a name="l00942"></a>00942     <span class="keywordflow">if</span> (tuples.size() &lt; <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02table_8cc_03.html#d6b8e2ae6c4585530b7c6c51e686a16e">kBitsInUint64</a> &amp;&amp; FLAGS_cp_use_small_table) {
<a name="l00943"></a>00943       <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(
<a name="l00944"></a>00944           <span class="keyword">new</span> SmallCompactPositiveTableConstraint(<span class="keyword">this</span>, vars, tuples));
<a name="l00945"></a>00945     } <span class="keywordflow">else</span> {
<a name="l00946"></a>00946       <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> CompactPositiveTableConstraint(<span class="keyword">this</span>, vars, tuples));
<a name="l00947"></a>00947     }
<a name="l00948"></a>00948   }
<a name="l00949"></a>00949   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> PositiveTableConstraint(<span class="keyword">this</span>, vars, tuples));
<a name="l00950"></a>00950 }
<a name="l00951"></a>00951 
<a name="l00952"></a>00952 <span class="comment">// ---------- Deterministic Finite Automaton ----------</span>
<a name="l00953"></a>00953 
<a name="l00954"></a>00954 <span class="comment">// This constraint implements a finite automaton when transitions are</span>
<a name="l00955"></a>00955 <span class="comment">// the values of the variables in the array.</span>
<a name="l00956"></a>00956 <span class="comment">// that is state[i+1] = transition[var[i]][state[i]] if</span>
<a name="l00957"></a>00957 <span class="comment">// (state[i], var[i],  state[i+1]) in the transition table.</span>
<a name="l00958"></a>00958 <span class="comment">// There is only one possible transition for a state/value pair.</span>
<a name="l00959"></a><a class="code" href="classoperations__research_1_1TransitionConstraint.html">00959</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1TransitionConstraint.html" title="Deterministic Finite Automaton.">TransitionConstraint</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a> {
<a name="l00960"></a>00960  <span class="keyword">public</span>:
<a name="l00961"></a><a class="code" href="classoperations__research_1_1TransitionConstraint.html#8525942b198ddc5473213b1bcd959b65">00961</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> kStatePosition;
<a name="l00962"></a><a class="code" href="classoperations__research_1_1TransitionConstraint.html#ce9d70512e1b4bb3d2bf759282527971">00962</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> kNextStatePosition;
<a name="l00963"></a><a class="code" href="classoperations__research_1_1TransitionConstraint.html#d2f7e1349e956cf59f12916a5f0898ca">00963</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> kTransitionTupleSize;
<a name="l00964"></a><a class="code" href="classoperations__research_1_1TransitionConstraint.html#aa52035418733cfdfe991fac9a04b6f8">00964</a>   <a class="code" href="classoperations__research_1_1TransitionConstraint.html" title="Deterministic Finite Automaton.">TransitionConstraint</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00965"></a>00965                        <span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars,
<a name="l00966"></a>00966                        <span class="keyword">const</span> vector&lt;vector&lt;int64&gt; &gt;&amp; transition_table,
<a name="l00967"></a>00967                        int64 initial_state,
<a name="l00968"></a>00968                        <span class="keyword">const</span> vector&lt;int64&gt;&amp; final_states)
<a name="l00969"></a>00969       : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s),
<a name="l00970"></a>00970         vars_(vars),
<a name="l00971"></a>00971         transition_table_(transition_table),
<a name="l00972"></a>00972         initial_state_(initial_state),
<a name="l00973"></a>00973         final_states_(final_states) {}
<a name="l00974"></a>00974 
<a name="l00975"></a><a class="code" href="classoperations__research_1_1TransitionConstraint.html#27d2babd57330aa2aeb96aa9e6546c81">00975</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1TransitionConstraint.html" title="Deterministic Finite Automaton.">TransitionConstraint</a>() {}
<a name="l00976"></a>00976 
<a name="l00977"></a><a class="code" href="classoperations__research_1_1TransitionConstraint.html#bb824a1913b58349c6ef06d435a00970">00977</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Post() {
<a name="l00978"></a>00978     <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s = solver();
<a name="l00979"></a>00979     int64 state_min = kint64max;
<a name="l00980"></a>00980     int64 state_max = kint64min;
<a name="l00981"></a>00981     <span class="keyword">const</span> <span class="keywordtype">int</span> nb_vars = vars_.size();
<a name="l00982"></a>00982     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; transition_table_.size(); ++i) {
<a name="l00983"></a>00983       CHECK_EQ(kTransitionTupleSize, transition_table_[i].size());
<a name="l00984"></a>00984       state_max = std::max(state_max, transition_table_[i][kStatePosition]);
<a name="l00985"></a>00985       state_max = std::max(state_max, transition_table_[i][kNextStatePosition]);
<a name="l00986"></a>00986       state_min = std::min(state_min, transition_table_[i][kStatePosition]);
<a name="l00987"></a>00987       state_min = std::min(state_min, transition_table_[i][kNextStatePosition]);
<a name="l00988"></a>00988     }
<a name="l00989"></a>00989 
<a name="l00990"></a>00990     vector&lt;IntVar*&gt; states;
<a name="l00991"></a>00991     states.push_back(s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#8f027a8b96688e6728e2e9ece1441a13" title="IntConst will create a constant expression.">MakeIntConst</a>(initial_state_));
<a name="l00992"></a>00992     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> var_index = 1; var_index &lt; nb_vars; ++var_index) {
<a name="l00993"></a>00993       states.push_back(s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#c313eaefa5980567fbf2b12608f8e854" title="Make Factory.">MakeIntVar</a>(state_min, state_max));
<a name="l00994"></a>00994     }
<a name="l00995"></a>00995     states.push_back(s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#c313eaefa5980567fbf2b12608f8e854" title="Make Factory.">MakeIntVar</a>(final_states_));
<a name="l00996"></a>00996     CHECK_EQ(nb_vars + 1, states.size());
<a name="l00997"></a>00997 
<a name="l00998"></a>00998     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> var_index = 0; var_index &lt; nb_vars; ++var_index) {
<a name="l00999"></a>00999       vector&lt;IntVar*&gt; tmp_vars;
<a name="l01000"></a>01000       tmp_vars.push_back(states[var_index]);
<a name="l01001"></a>01001       tmp_vars.push_back(vars_[var_index]);
<a name="l01002"></a>01002       tmp_vars.push_back(states[var_index + 1]);
<a name="l01003"></a>01003       s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#9c522a6cff91adae19af5cce7d8e411f" title="propagation">AddConstraint</a>(s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#0bef6d735a9070e00742a8255c4da5d3" title="This method creates a constraint where the graph of the relation between the variables...">MakeAllowedAssignments</a>(tmp_vars, transition_table_));
<a name="l01004"></a>01004     }
<a name="l01005"></a>01005   }
<a name="l01006"></a>01006 
<a name="l01007"></a><a class="code" href="classoperations__research_1_1TransitionConstraint.html#a77f46fe05fc5d471aa55f7541e3186d">01007</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> InitialPropagate() {}
<a name="l01008"></a>01008  <span class="keyword">private</span>:
<a name="l01009"></a>01009   <span class="comment">// Variable representing transitions between states. See header file.</span>
<a name="l01010"></a><a class="code" href="classoperations__research_1_1TransitionConstraint.html#005fd95472a17811c9936fee110e91ed">01010</a>   <span class="keyword">const</span> vector&lt;IntVar*&gt; vars_;
<a name="l01011"></a>01011   <span class="comment">// The transition as tuples (state, value, next_state).</span>
<a name="l01012"></a><a class="code" href="classoperations__research_1_1TransitionConstraint.html#06cd84e6b21b075af1be4b2a641f5802">01012</a>   <span class="keyword">const</span> vector&lt;vector&lt;int64&gt; &gt; transition_table_;
<a name="l01013"></a>01013   <span class="comment">// The initial state before the first transition.</span>
<a name="l01014"></a><a class="code" href="classoperations__research_1_1TransitionConstraint.html#18e9db168520694d656c96e158374df2">01014</a>   <span class="keyword">const</span> int64 initial_state_;
<a name="l01015"></a>01015   <span class="comment">// Vector of final state after the last transision.</span>
<a name="l01016"></a><a class="code" href="classoperations__research_1_1TransitionConstraint.html#4321d9c97aa0c64466b10eb47b21c04e">01016</a>   <span class="keyword">const</span> vector&lt;int64&gt; final_states_;
<a name="l01017"></a>01017 };
<a name="l01018"></a>01018 
<a name="l01019"></a>01019 <span class="comment">// TODO(user): create transition struct.</span>
<a name="l01020"></a>01020 
<a name="l01021"></a>01021 <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1TransitionConstraint.html#8525942b198ddc5473213b1bcd959b65">TransitionConstraint::kStatePosition</a> = 0;
<a name="l01022"></a>01022 <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1TransitionConstraint.html#ce9d70512e1b4bb3d2bf759282527971">TransitionConstraint::kNextStatePosition</a> = 2;
<a name="l01023"></a>01023 <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1TransitionConstraint.html#d2f7e1349e956cf59f12916a5f0898ca">TransitionConstraint::kTransitionTupleSize</a> = 3;
<a name="l01024"></a>01024 
<a name="l01025"></a><a class="code" href="classoperations__research_1_1Solver.html#a58b79ff180cf0e24eb6c65662d6b622">01025</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#a58b79ff180cf0e24eb6c65662d6b622" title="This constraint create a finite automaton that will check the sequence of variables...">Solver::MakeTransitionConstraint</a>(
<a name="l01026"></a>01026     <span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars,
<a name="l01027"></a>01027     <span class="keyword">const</span> vector&lt;vector&lt;int64&gt; &gt;&amp; transition_table,
<a name="l01028"></a>01028     int64 initial_state,
<a name="l01029"></a>01029     <span class="keyword">const</span> vector&lt;int64&gt;&amp; final_states) {
<a name="l01030"></a>01030   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1TransitionConstraint.html" title="Deterministic Finite Automaton.">TransitionConstraint</a>(<span class="keyword">this</span>, vars, transition_table,
<a name="l01031"></a>01031                                            initial_state, final_states));
<a name="l01032"></a>01032 }
<a name="l01033"></a>01033 
<a name="l01034"></a>01034 }  <span class="comment">// namespace operations_research</span>
</pre></div></div>

  <!-- Start of footer. -->
  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <tr valign=top>
      <td colspan=2 height=10></td>
    </tr>
    <tr valign=top>
      <td colspan=2 bgcolor=#389613 height=3></td>
    </tr>
  </table>

  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br />

  
  </body>
</html>
