<!-- Good morning, Mr. Phelps. -->
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
    <title>google3/constraint_solver/alldiff_cst.cc Source File - Doxy</title>
    <link rel="shortcut icon" href="../../favicon.ico">
    <!-- Both stylesheets are supplied by Doxygen, with maybe minor tweaks from Google. -->
    <link href="../../doxygen.css" rel="stylesheet" type="text/css">
    <link href="../../tabs.css" rel="stylesheet" type="text/css">
  </head>

  <body topmargin=0 leftmargin=20 bottommargin=0 rightmargin=20 marginwidth=20 marginheight=0>
  <!-- Second part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
  <style>
    a.doxy_logo:hover {
      background-color: #389613
    }
  </style>

  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <!-- Top horizontal line with the color of the day. -->
    <tr valign=top>
      <td colspan=3 bgcolor=#389613 height=3></td>
    </tr>

    <!-- Header row with the links at the right. -->
    <tr valign=top>
      <td colspan=3 align=right>
        <font size=-1>
          Generated on: <font color=#389613><b>Fri Apr  1 14:13:18 PDT 2011</b></font>
            for <b>custom file set</b>
        </font>
      </td>
    </tr>

    <!-- Header row with the logo and the search form. -->
    <tr valign=top>
      <!-- Logo. -->
      <td align=left width=150>
        <table width=150 height=54 cellpadding=0 cellspacing=0 border=0>
          <tr valign=top>
            <!-- First part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
            <td bgcolor=#389613>
              <a class="doxy_logo" href="../../index.html"><img src="../../doxy_logo.png" alt="Doxy" border=0></a>
            </td>
          </tr>
        </table>
      </td>
    </tr>

    <!-- Tiny vertical space below the form. -->
    <tr valign=top>
      <td colspan=3 height=3></td>
    </tr>
  </table>

  <!-- Header navigation row. -->
  <div class="memproto">
    <table width=100% cellpadding=0 cellspacing=0 border=0>
      <tr>
        <td align=left style="padding-left: 20px"><font size=+1><b><tt><font color=#333333>//
            <a href="../../index.html"><font color=#389613>doxy</font></a>/</font>
            <a href="../../google3/index.html">google3</a>/
            <a href="../../google3/constraint_solver/index.html">constraint_solver</a>/
            </tt></b></font>
        </td>
      </tr>
    </table>
  </div>
  <br />
    <!-- No subdirs found. -->
  <!-- End of header. -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>google3/constraint_solver/alldiff_cst.cc</h1><a href="alldiff__cst_8cc.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright 2010 Google</span>
<a name="l00002"></a>00002 <span class="comment">// Licensed under the Apache License, Version 2.0 (the "License");</span>
<a name="l00003"></a>00003 <span class="comment">// you may not use this file except in compliance with the License.</span>
<a name="l00004"></a>00004 <span class="comment">// You may obtain a copy of the License at</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">//     http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Unless required by applicable law or agreed to in writing, software</span>
<a name="l00009"></a>00009 <span class="comment">// distributed under the License is distributed on an "AS IS" BASIS,</span>
<a name="l00010"></a>00010 <span class="comment">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00011"></a>00011 <span class="comment">// See the License for the specific language governing permissions and</span>
<a name="l00012"></a>00012 <span class="comment">// limitations under the License.</span>
<a name="l00013"></a>00013 <span class="comment">//</span>
<a name="l00014"></a>00014 <span class="comment">//  AllDifferent constraints</span>
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include "base/integral_types.h"</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include "base/logging.h"</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include "base/scoped_ptr.h"</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include "<a class="code" href="constraint__solveri_8h.html">constraint_solver/constraint_solveri.h</a>"</span>
<a name="l00021"></a>00021 
<a name="l00022"></a><a class="code" href="namespaceoperations__research.html">00022</a> <span class="keyword">namespace </span>operations_research {
<a name="l00023"></a>00023 
<a name="l00024"></a><a class="code" href="classoperations__research_1_1BaseAllDifferent.html">00024</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1BaseAllDifferent.html">BaseAllDifferent</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a> {
<a name="l00025"></a>00025  <span class="keyword">public</span>:
<a name="l00026"></a>00026   <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#43ba94b7fce0920242463a0500c4f39c">BaseAllDifferent</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size);
<a name="l00027"></a><a class="code" href="classoperations__research_1_1BaseAllDifferent.html#a823d84c994f92a96b24775bd702c685">00027</a>   <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#a823d84c994f92a96b24775bd702c685">~BaseAllDifferent</a>() {}
<a name="l00028"></a>00028   <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#acfe843d9e4a3782667d1d4d2f10b02a">DebugStringInternal</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#89b827a71613c6c120d5ac326202df7e" title="Naming.">name</a>) <span class="keyword">const</span>;
<a name="l00029"></a>00029  <span class="keyword">protected</span>:
<a name="l00030"></a><a class="code" href="classoperations__research_1_1BaseAllDifferent.html#b534f326b65cf1ae2c9b969d345cc389">00030</a>   scoped_array&lt;IntVar*&gt; <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#b534f326b65cf1ae2c9b969d345cc389">vars_</a>;
<a name="l00031"></a><a class="code" href="classoperations__research_1_1BaseAllDifferent.html#dc6bc99c6b66cc45c43adc96e6cef34f">00031</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#dc6bc99c6b66cc45c43adc96e6cef34f">size_</a>;
<a name="l00032"></a>00032 };
<a name="l00033"></a>00033 
<a name="l00034"></a><a class="code" href="classoperations__research_1_1BaseAllDifferent.html#43ba94b7fce0920242463a0500c4f39c">00034</a> <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#43ba94b7fce0920242463a0500c4f39c">BaseAllDifferent::BaseAllDifferent</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00035"></a>00035                                    <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars,
<a name="l00036"></a>00036                                    <span class="keywordtype">int</span> size)
<a name="l00037"></a>00037     : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s), vars_(NULL), size_(size) {
<a name="l00038"></a>00038   CHECK_GE(<a class="code" href="classoperations__research_1_1BaseAllDifferent.html#dc6bc99c6b66cc45c43adc96e6cef34f">size_</a>, 0);
<a name="l00039"></a>00039   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BaseAllDifferent.html#dc6bc99c6b66cc45c43adc96e6cef34f">size_</a> &gt; 0) {
<a name="l00040"></a>00040     <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#b534f326b65cf1ae2c9b969d345cc389">vars_</a>.reset(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>*[<a class="code" href="classoperations__research_1_1BaseAllDifferent.html#dc6bc99c6b66cc45c43adc96e6cef34f">size_</a>]);
<a name="l00041"></a>00041     memcpy(<a class="code" href="classoperations__research_1_1BaseAllDifferent.html#b534f326b65cf1ae2c9b969d345cc389">vars_</a>.get(), vars, size_ * <span class="keyword">sizeof</span>(*vars));
<a name="l00042"></a>00042   }
<a name="l00043"></a>00043 }
<a name="l00044"></a>00044 
<a name="l00045"></a><a class="code" href="classoperations__research_1_1BaseAllDifferent.html#acfe843d9e4a3782667d1d4d2f10b02a">00045</a> <span class="keywordtype">string</span> BaseAllDifferent::DebugStringInternal(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; name)<span class="keyword"> const </span>{
<a name="l00046"></a>00046   <span class="keywordtype">string</span> out = name + <span class="stringliteral">"("</span>;
<a name="l00047"></a>00047   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#dc6bc99c6b66cc45c43adc96e6cef34f">size_</a>; ++i) {
<a name="l00048"></a>00048     out += <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#b534f326b65cf1ae2c9b969d345cc389">vars_</a>[i]-&gt;DebugString() + <span class="stringliteral">" "</span>;
<a name="l00049"></a>00049   }
<a name="l00050"></a>00050   out += <span class="stringliteral">")"</span>;
<a name="l00051"></a>00051   <span class="keywordflow">return</span> out;
<a name="l00052"></a>00052 }
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 <span class="comment">//-----------------------------------------------------------------------------</span>
<a name="l00056"></a>00056 <span class="comment">// ValueAllDifferent</span>
<a name="l00057"></a>00057 
<a name="l00058"></a><a class="code" href="classoperations__research_1_1ValueAllDifferent.html">00058</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1ValueAllDifferent.html" title="ValueAllDifferent.">ValueAllDifferent</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1BaseAllDifferent.html">BaseAllDifferent</a> {
<a name="l00059"></a>00059  <span class="keyword">public</span>:
<a name="l00060"></a>00060   <a class="code" href="classoperations__research_1_1ValueAllDifferent.html" title="ValueAllDifferent.">ValueAllDifferent</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size);
<a name="l00061"></a><a class="code" href="classoperations__research_1_1ValueAllDifferent.html#6b5d9ae94c179d771ba82844bce9f5c7">00061</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1ValueAllDifferent.html" title="ValueAllDifferent.">ValueAllDifferent</a>() {}
<a name="l00062"></a>00062 
<a name="l00063"></a>00063   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Constraint.html#aa882d58b5fc0f2e3df6eff957ad4a0d" title="This method is called when the constraint is processed by the solver.">Post</a>();
<a name="l00064"></a>00064   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Constraint.html#64ab23714e57db311ba5b9fe1e742979" title="This method performs the initial propagation of the constraint.">InitialPropagate</a>();
<a name="l00065"></a>00065   <span class="keywordtype">void</span> OneMove(<span class="keywordtype">int</span> index);
<a name="l00066"></a>00066   <span class="keywordtype">bool</span> AllMoves();
<a name="l00067"></a>00067 
<a name="l00068"></a>00068   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Constraint.html#f870afb5d6c1fba1d70b38eb581f8cca" title="Constraint class.">DebugString</a>() <span class="keyword">const</span>;
<a name="l00069"></a>00069  <span class="keyword">private</span>:
<a name="l00070"></a><a class="code" href="classoperations__research_1_1ValueAllDifferent.html#be99bc28378b4f169223b461665b8955">00070</a>   <span class="keywordtype">int</span> checked_;
<a name="l00071"></a>00071 };
<a name="l00072"></a>00072 
<a name="l00073"></a><a class="code" href="classoperations__research_1_1ValueAllDifferent.html#8dc551482e6a0a1dcc77ee051c8cbbc6">00073</a> <a class="code" href="classoperations__research_1_1ValueAllDifferent.html#8dc551482e6a0a1dcc77ee051c8cbbc6">ValueAllDifferent::ValueAllDifferent</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00074"></a>00074                                      <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars,
<a name="l00075"></a>00075                                      <span class="keywordtype">int</span> size)
<a name="l00076"></a>00076     : <a class="code" href="classoperations__research_1_1BaseAllDifferent.html">BaseAllDifferent</a>(s, vars, size), checked_(0) {}
<a name="l00077"></a>00077 
<a name="l00078"></a><a class="code" href="classoperations__research_1_1ValueAllDifferent.html#98a6000c452c633a08ba2481d7063af6">00078</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1ValueAllDifferent.html#98a6000c452c633a08ba2481d7063af6" title="Constraint class.">ValueAllDifferent::DebugString</a>()<span class="keyword"> const </span>{
<a name="l00079"></a>00079   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#acfe843d9e4a3782667d1d4d2f10b02a">DebugStringInternal</a>(<span class="stringliteral">"ValueAllDifferent"</span>);
<a name="l00080"></a>00080 }
<a name="l00081"></a>00081 
<a name="l00082"></a><a class="code" href="classoperations__research_1_1ValueAllDifferent.html#5be8eb6a7e87dc42fe68a29a0073a16c">00082</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1ValueAllDifferent.html#5be8eb6a7e87dc42fe68a29a0073a16c" title="This method is called when the constraint is processed by the solver.">ValueAllDifferent::Post</a>() {
<a name="l00083"></a>00083   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#dc6bc99c6b66cc45c43adc96e6cef34f">size_</a>; ++i) {
<a name="l00084"></a>00084     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* var = <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#b534f326b65cf1ae2c9b969d345cc389">vars_</a>[i];
<a name="l00085"></a>00085     <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d = <a class="code" href="namespaceoperations__research.html#bc7cb18be5d9d418d32782253cd4bf5a">MakeConstraintDemon1</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l00086"></a>00086                                     <span class="keyword">this</span>,
<a name="l00087"></a>00087                                     &amp;<a class="code" href="classoperations__research_1_1ValueAllDifferent.html#88cdf0102b7fe58b2e0b6beb21ee0ae3">ValueAllDifferent::OneMove</a>,
<a name="l00088"></a>00088                                     <span class="stringliteral">"OneMove"</span>,
<a name="l00089"></a>00089                                     i);
<a name="l00090"></a>00090     var-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#1501b060a0ae4f2ae77d8008479944ca" title="This method attaches a demon that will be awakened when the variable is bound.">WhenBound</a>(d);
<a name="l00091"></a>00091   }
<a name="l00092"></a>00092 }
<a name="l00093"></a>00093 
<a name="l00094"></a><a class="code" href="classoperations__research_1_1ValueAllDifferent.html#8530843fc6d01576f8ea20cb8daa2ac6">00094</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1ValueAllDifferent.html#8530843fc6d01576f8ea20cb8daa2ac6" title="This method performs the initial propagation of the constraint.">ValueAllDifferent::InitialPropagate</a>() {
<a name="l00095"></a>00095   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#dc6bc99c6b66cc45c43adc96e6cef34f">size_</a>; ++i) {
<a name="l00096"></a>00096     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BaseAllDifferent.html#b534f326b65cf1ae2c9b969d345cc389">vars_</a>[i]-&gt;Bound()) {
<a name="l00097"></a>00097       <a class="code" href="classoperations__research_1_1ValueAllDifferent.html#88cdf0102b7fe58b2e0b6beb21ee0ae3">OneMove</a>(i);
<a name="l00098"></a>00098     }
<a name="l00099"></a>00099   }
<a name="l00100"></a>00100 }
<a name="l00101"></a>00101 
<a name="l00102"></a><a class="code" href="classoperations__research_1_1ValueAllDifferent.html#88cdf0102b7fe58b2e0b6beb21ee0ae3">00102</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1ValueAllDifferent.html#88cdf0102b7fe58b2e0b6beb21ee0ae3">ValueAllDifferent::OneMove</a>(<span class="keywordtype">int</span> index) {
<a name="l00103"></a>00103   <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1ValueAllDifferent.html#343602c29c3a41d6d354648b31558a52">AllMoves</a>()) {
<a name="l00104"></a>00104     <span class="keyword">const</span> int64 val = <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#b534f326b65cf1ae2c9b969d345cc389">vars_</a>[index]-&gt;Value();
<a name="l00105"></a>00105     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#dc6bc99c6b66cc45c43adc96e6cef34f">size_</a>; ++j) {
<a name="l00106"></a>00106       <span class="keywordflow">if</span> (index != j) {
<a name="l00107"></a>00107         <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#b534f326b65cf1ae2c9b969d345cc389">vars_</a>[j]-&gt;RemoveValue(val);
<a name="l00108"></a>00108       }
<a name="l00109"></a>00109     }
<a name="l00110"></a>00110   }
<a name="l00111"></a>00111 }
<a name="l00112"></a>00112 
<a name="l00113"></a><a class="code" href="classoperations__research_1_1ValueAllDifferent.html#343602c29c3a41d6d354648b31558a52">00113</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1ValueAllDifferent.html#343602c29c3a41d6d354648b31558a52">ValueAllDifferent::AllMoves</a>() {
<a name="l00114"></a>00114   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1ValueAllDifferent.html#be99bc28378b4f169223b461665b8955">checked_</a> || <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#dc6bc99c6b66cc45c43adc96e6cef34f">size_</a> == 0) {
<a name="l00115"></a>00115     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00116"></a>00116   }
<a name="l00117"></a>00117   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#dc6bc99c6b66cc45c43adc96e6cef34f">size_</a>; ++i) {
<a name="l00118"></a>00118     <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1BaseAllDifferent.html#b534f326b65cf1ae2c9b969d345cc389">vars_</a>[i]-&gt;Bound()) {
<a name="l00119"></a>00119       <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00120"></a>00120     }
<a name="l00121"></a>00121   }
<a name="l00122"></a>00122   scoped_array&lt;int64&gt; values(<span class="keyword">new</span> int64[size_]);
<a name="l00123"></a>00123   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size_; ++i) {
<a name="l00124"></a>00124     values[i] = <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#b534f326b65cf1ae2c9b969d345cc389">vars_</a>[i]-&gt;Value();
<a name="l00125"></a>00125   }
<a name="l00126"></a>00126   sort(values.get(), values.get() + size_);
<a name="l00127"></a>00127   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size_ - 1; ++i) {
<a name="l00128"></a>00128     <span class="keywordflow">if</span> (values[i] == values[i + 1]) {
<a name="l00129"></a>00129       values.reset(NULL);   <span class="comment">// prevent leaks (solver()-&gt;Fail() won't return)</span>
<a name="l00130"></a>00130       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l00131"></a>00131     }
<a name="l00132"></a>00132   }
<a name="l00133"></a>00133   <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1ValueAllDifferent.html#be99bc28378b4f169223b461665b8955">checked_</a>, 1);
<a name="l00134"></a>00134   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00135"></a>00135 }
<a name="l00136"></a>00136 
<a name="l00137"></a><a class="code" href="classoperations__research_1_1Solver.html#cfe695748851f6c2f42883867f866658">00137</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#cfe695748851f6c2f42883867f866658" title="All variables are pairwise different.">Solver::MakeAllDifferent</a>(<span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars, <span class="keywordtype">bool</span> range) {
<a name="l00138"></a>00138   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#cfe695748851f6c2f42883867f866658" title="All variables are pairwise different.">MakeAllDifferent</a>(vars.data(), vars.size(), range);
<a name="l00139"></a>00139 }
<a name="l00140"></a>00140 
<a name="l00141"></a>00141 <span class="comment">// ---------- Bounds All Different ----------</span>
<a name="l00142"></a>00142 <span class="comment">// See http://www.cs.uwaterloo.ca/~cquimper/Papers/ijcai03_TR.pdf for details.</span>
<a name="l00143"></a>00143 
<a name="l00144"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03.html">00144</a> <span class="keyword">namespace </span>{
<a name="l00145"></a><a class="code" href="structoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03_1_1Interval.html">00145</a> <span class="keyword">struct </span><a class="code" href="structoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03_1_1Interval.html">Interval</a> {
<a name="l00146"></a><a class="code" href="structoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03_1_1Interval.html#f96a9305eaae589a4904780a62e324db">00146</a>   int64 min;
<a name="l00147"></a><a class="code" href="structoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03_1_1Interval.html#7cd5414206211b090aefed0c4feb8f7a">00147</a>   int64 max;
<a name="l00148"></a><a class="code" href="structoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03_1_1Interval.html#a342b0610473d8d4f343dde3738c5221">00148</a>   <span class="keywordtype">int</span> min_rank;
<a name="l00149"></a><a class="code" href="structoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03_1_1Interval.html#c816c4c8420aff5a240aed74ac5dc010">00149</a>   <span class="keywordtype">int</span> max_rank;
<a name="l00150"></a>00150 };
<a name="l00151"></a>00151 
<a name="l00152"></a>00152 <span class="comment">// TODO(user) : use better sort, use bounding boxes of modifications to</span>
<a name="l00153"></a>00153 <span class="comment">//                 improve the sorting (only modified vars).</span>
<a name="l00154"></a>00154 
<a name="l00155"></a>00155 <span class="comment">// This method is used by the STL sort.</span>
<a name="l00156"></a><a class="code" href="structoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03_1_1CompareIntervalMin.html">00156</a> <span class="keyword">struct </span><a class="code" href="structoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03_1_1CompareIntervalMin.html">CompareIntervalMin</a> {
<a name="l00157"></a><a class="code" href="structoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03_1_1CompareIntervalMin.html#d763d0aaf2e28c0c46d094cb0e636233">00157</a>   <span class="keywordtype">bool</span> operator()(<span class="keyword">const</span> <a class="code" href="structoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03_1_1Interval.html">Interval</a>* i1, <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03_1_1Interval.html">Interval</a>* i2) {
<a name="l00158"></a>00158     <span class="keywordflow">return</span> (i1-&gt;<a class="code" href="structoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03_1_1Interval.html#f96a9305eaae589a4904780a62e324db">min</a> &lt; i2-&gt;<a class="code" href="structoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03_1_1Interval.html#f96a9305eaae589a4904780a62e324db">min</a>);
<a name="l00159"></a>00159   }
<a name="l00160"></a>00160 };
<a name="l00161"></a>00161 
<a name="l00162"></a>00162 <span class="comment">// This method is used by the STL sort.</span>
<a name="l00163"></a><a class="code" href="structoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03_1_1CompareIntervalMax.html">00163</a> <span class="keyword">struct </span><a class="code" href="structoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03_1_1CompareIntervalMax.html" title="This method is used by the STL sort.">CompareIntervalMax</a> {
<a name="l00164"></a><a class="code" href="structoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03_1_1CompareIntervalMax.html#8aa05950d3a5f3020c1cf1b33bd3adcd">00164</a>   <span class="keywordtype">bool</span> operator()(<span class="keyword">const</span> <a class="code" href="structoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03_1_1Interval.html">Interval</a>* i1, <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03_1_1Interval.html">Interval</a>* i2) {
<a name="l00165"></a>00165     <span class="keywordflow">return</span> (i1-&gt;<a class="code" href="structoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03_1_1Interval.html#7cd5414206211b090aefed0c4feb8f7a">max</a> &lt; i2-&gt;<a class="code" href="structoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03_1_1Interval.html#7cd5414206211b090aefed0c4feb8f7a">max</a>);
<a name="l00166"></a>00166   }
<a name="l00167"></a>00167 };
<a name="l00168"></a>00168 
<a name="l00169"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03.html#4a3c0dff0da68e2f8d031184c569a4d4">00169</a>   <span class="keywordtype">void</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03.html#4a3c0dff0da68e2f8d031184c569a4d4">PathSet</a>(<span class="keywordtype">int</span> start, <span class="keywordtype">int</span> end, <span class="keywordtype">int</span> to, <span class="keywordtype">int</span>* <span class="keyword">const</span> tree) {
<a name="l00170"></a>00170   <span class="keywordtype">int</span> k = start;
<a name="l00171"></a>00171   <span class="keywordtype">int</span> l = start;
<a name="l00172"></a>00172   <span class="keywordflow">while</span> (l != end) {
<a name="l00173"></a>00173     k = l;
<a name="l00174"></a>00174     l = tree[k];
<a name="l00175"></a>00175     tree[k] = to;
<a name="l00176"></a>00176   }
<a name="l00177"></a>00177 }
<a name="l00178"></a>00178 
<a name="l00179"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03.html#6563846016f0d43ab0544e71dc502a82">00179</a> <span class="keywordtype">int</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03.html#6563846016f0d43ab0544e71dc502a82">PathMin</a>(<span class="keyword">const</span> <span class="keywordtype">int</span>* <span class="keyword">const</span> tree, <span class="keywordtype">int</span> index) {
<a name="l00180"></a>00180   <span class="keywordtype">int</span> i = index;
<a name="l00181"></a>00181   <span class="keywordflow">while</span> (tree[i] &lt; i) {
<a name="l00182"></a>00182     i = tree[i];
<a name="l00183"></a>00183   }
<a name="l00184"></a>00184   <span class="keywordflow">return</span> i;
<a name="l00185"></a>00185 }
<a name="l00186"></a>00186 
<a name="l00187"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03.html#c287a08d826231437bf4eb5fffb7de0f">00187</a> <span class="keywordtype">int</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03.html#c287a08d826231437bf4eb5fffb7de0f">PathMax</a>(<span class="keyword">const</span> <span class="keywordtype">int</span>* <span class="keyword">const</span> tree, <span class="keywordtype">int</span> index) {
<a name="l00188"></a>00188   <span class="keywordtype">int</span> i = index;
<a name="l00189"></a>00189   <span class="keywordflow">while</span> (tree[i] &gt; i) {
<a name="l00190"></a>00190     i = tree[i];
<a name="l00191"></a>00191   }
<a name="l00192"></a>00192   <span class="keywordflow">return</span> i;
<a name="l00193"></a>00193 }
<a name="l00194"></a>00194 }
<a name="l00195"></a>00195 
<a name="l00196"></a><a class="code" href="classoperations__research_1_1BoundsAllDifferent.html">00196</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1BoundsAllDifferent.html">BoundsAllDifferent</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1BaseAllDifferent.html">BaseAllDifferent</a> {
<a name="l00197"></a>00197  <span class="keyword">public</span>:
<a name="l00198"></a><a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#45620b1af3012ce1091eae906cc61130">00198</a>   <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html">BoundsAllDifferent</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars, <span class="keywordtype">int</span> size)
<a name="l00199"></a>00199       : <a class="code" href="classoperations__research_1_1BaseAllDifferent.html">BaseAllDifferent</a>(s, vars, size),
<a name="l00200"></a>00200         intervals_(new Interval[size + 1]),
<a name="l00201"></a>00201         min_sorted_(new Interval*[size]),
<a name="l00202"></a>00202         max_sorted_(new Interval*[size]),
<a name="l00203"></a>00203         bounds_(new int64[2 * size + 2]),
<a name="l00204"></a>00204         tree_(new int[2 * size + 2]),
<a name="l00205"></a>00205         diff_(new int64[2 * size + 2]),
<a name="l00206"></a>00206         hall_(new int[2 * size + 2]),
<a name="l00207"></a>00207         active_size_(0) {
<a name="l00208"></a>00208     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {
<a name="l00209"></a>00209       max_sorted_[i] = &amp;intervals_[i];
<a name="l00210"></a>00210       min_sorted_[i] = max_sorted_[i];
<a name="l00211"></a>00211     }
<a name="l00212"></a>00212   }
<a name="l00213"></a><a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#d1ae4ffc550f91da10a2f8f83147be93">00213</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1BoundsAllDifferent.html">BoundsAllDifferent</a>() {}
<a name="l00214"></a><a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#daebc32779291751d56a41146e73e154">00214</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Post() {
<a name="l00215"></a>00215     <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* range = <a class="code" href="namespaceoperations__research.html#16f35a1c0ce076f2587fffbab80200b6">MakeDelayedConstraintDemon0</a>(
<a name="l00216"></a>00216         solver(),
<a name="l00217"></a>00217         <span class="keyword">this</span>,
<a name="l00218"></a>00218         &amp;<a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#a722652e6e28c1e77f1133d699536fa5">BoundsAllDifferent::IncrementalPropagate</a>,
<a name="l00219"></a>00219         <span class="stringliteral">"IncrementalPropagate"</span>);
<a name="l00220"></a>00220 
<a name="l00221"></a>00221     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size_; ++i) {
<a name="l00222"></a>00222       vars_[i]-&gt;WhenRange(range);
<a name="l00223"></a>00223       <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* bound = <a class="code" href="namespaceoperations__research.html#bc7cb18be5d9d418d32782253cd4bf5a">MakeConstraintDemon1</a>(solver(),
<a name="l00224"></a>00224                                           <span class="keyword">this</span>,
<a name="l00225"></a>00225                                           &amp;<a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#a38871c6683cb10c36d3b11166888c70">BoundsAllDifferent::PropagateValue</a>,
<a name="l00226"></a>00226                                           <span class="stringliteral">"PropagateValue"</span>,
<a name="l00227"></a>00227                                           i);
<a name="l00228"></a>00228       vars_[i]-&gt;WhenBound(bound);
<a name="l00229"></a>00229     }
<a name="l00230"></a>00230   }
<a name="l00231"></a>00231 
<a name="l00232"></a><a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#a7ff41dac3b591316a44a1df35896f2d">00232</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> InitialPropagate() {
<a name="l00233"></a>00233     IncrementalPropagate();
<a name="l00234"></a>00234     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size_; ++i) {
<a name="l00235"></a>00235       <span class="keywordflow">if</span> (vars_[i]-&gt;Bound()) {
<a name="l00236"></a>00236         PropagateValue(i);
<a name="l00237"></a>00237       }
<a name="l00238"></a>00238     }
<a name="l00239"></a>00239   }
<a name="l00240"></a>00240 
<a name="l00241"></a><a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#a722652e6e28c1e77f1133d699536fa5">00241</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> IncrementalPropagate() {
<a name="l00242"></a>00242     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size_; ++i) {
<a name="l00243"></a>00243       intervals_[i].min = vars_[i]-&gt;Min();
<a name="l00244"></a>00244       intervals_[i].max = vars_[i]-&gt;Max();
<a name="l00245"></a>00245     }
<a name="l00246"></a>00246 
<a name="l00247"></a>00247     SortArray();
<a name="l00248"></a>00248 
<a name="l00249"></a>00249     <span class="keywordtype">bool</span> modified = PropagateMin();
<a name="l00250"></a>00250     modified |= PropagateMax();
<a name="l00251"></a>00251 
<a name="l00252"></a>00252     <span class="keywordflow">if</span> (modified) {
<a name="l00253"></a>00253       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size_; ++i) {
<a name="l00254"></a>00254         vars_[i]-&gt;SetRange(intervals_[i].min, intervals_[i].max);
<a name="l00255"></a>00255       }
<a name="l00256"></a>00256     }
<a name="l00257"></a>00257   }
<a name="l00258"></a>00258 
<a name="l00259"></a><a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#a38871c6683cb10c36d3b11166888c70">00259</a>   <span class="keywordtype">void</span> PropagateValue(<span class="keywordtype">int</span> index) {
<a name="l00260"></a>00260     <span class="keyword">const</span> int64 to_remove = vars_[index]-&gt;Value();
<a name="l00261"></a>00261     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; index; j++) {
<a name="l00262"></a>00262       vars_[j]-&gt;RemoveValue(to_remove);
<a name="l00263"></a>00263     }
<a name="l00264"></a>00264     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = index + 1; j &lt; size_; j++) {
<a name="l00265"></a>00265       vars_[j]-&gt;RemoveValue(to_remove);
<a name="l00266"></a>00266     }
<a name="l00267"></a>00267   }
<a name="l00268"></a>00268 
<a name="l00269"></a><a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#1243bfb59ec22fed2a7753aaa5df7792">00269</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Solver.html#a7a09bf2f27ccbdc1d1d386bd94e142a" title="misc debug string.">DebugString</a>()<span class="keyword"> const </span>{
<a name="l00270"></a>00270     <span class="keywordflow">return</span> DebugStringInternal(<span class="stringliteral">"BoundsAllDifferent"</span>);
<a name="l00271"></a>00271   }
<a name="l00272"></a>00272 
<a name="l00273"></a>00273  <span class="keyword">private</span>:
<a name="l00274"></a>00274   <span class="comment">// This method with sort the min_sorted_ and max_sorted_ arrays and fill</span>
<a name="l00275"></a>00275   <span class="comment">// the bounds_ array (and set the active_size_ counter).</span>
<a name="l00276"></a>00276   <span class="keywordtype">void</span> SortArray();
<a name="l00277"></a>00277 
<a name="l00278"></a>00278   <span class="comment">// These two methods will actually do the new bounds computation.</span>
<a name="l00279"></a>00279   <span class="keywordtype">bool</span> PropagateMin();
<a name="l00280"></a>00280   <span class="keywordtype">bool</span> PropagateMax();
<a name="l00281"></a>00281 
<a name="l00282"></a><a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#9c4c79bd37e104a9ae38b78ae8330bf8">00282</a>   int64 stamp_;
<a name="l00283"></a><a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#87a6cecd3a75d41be3897a938c4349aa">00283</a>   scoped_array&lt;Interval&gt; intervals_;
<a name="l00284"></a><a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#459cd9226130a4c11e45f13c13d37469">00284</a>   scoped_array&lt;Interval*&gt; min_sorted_;
<a name="l00285"></a><a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#d312196888cb0c6a229eee2fe734c2b4">00285</a>   scoped_array&lt;Interval*&gt; max_sorted_;
<a name="l00286"></a>00286   <span class="comment">// bounds_[1..active_size_] hold set of min &amp; max in the n intervals_</span>
<a name="l00287"></a>00287   <span class="comment">// while bounds_[0] and bounds_[active_size_ + 1] allow sentinels.</span>
<a name="l00288"></a><a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#560357300d6d9813dc28b6e732f19f7e">00288</a>   scoped_array&lt;int64&gt; bounds_;
<a name="l00289"></a><a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#f51c430be2e2fdf7b65ec98ef7d52585">00289</a>   scoped_array&lt;int&gt; tree_;              <span class="comment">// tree links.</span>
<a name="l00290"></a><a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#fa66af6fea7e68705c7b2b9683570cb1">00290</a>   scoped_array&lt;int64&gt; diff_;            <span class="comment">// diffs between critical capacities.</span>
<a name="l00291"></a><a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#bd732132397b8beeaccd99b5f39452ff">00291</a>   scoped_array&lt;int&gt; hall_;              <span class="comment">// hall interval links.</span>
<a name="l00292"></a><a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#dbbc7bc674757f2759f6608724a5ec82">00292</a>   <span class="keywordtype">int</span> active_size_;
<a name="l00293"></a>00293 };
<a name="l00294"></a>00294 
<a name="l00295"></a><a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#cb7be765e711833fadaf89197c52b8fd">00295</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#cb7be765e711833fadaf89197c52b8fd" title="This method with sort the min_sorted_ and max_sorted_ arrays and fill the bounds_...">BoundsAllDifferent::SortArray</a>() {
<a name="l00296"></a>00296   std::sort(<a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#459cd9226130a4c11e45f13c13d37469">min_sorted_</a>.get(), <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#459cd9226130a4c11e45f13c13d37469">min_sorted_</a>.get() + <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#dc6bc99c6b66cc45c43adc96e6cef34f">size_</a>, CompareIntervalMin());
<a name="l00297"></a>00297   std::sort(<a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#d312196888cb0c6a229eee2fe734c2b4">max_sorted_</a>.get(), <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#d312196888cb0c6a229eee2fe734c2b4">max_sorted_</a>.get() + <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#dc6bc99c6b66cc45c43adc96e6cef34f">size_</a>, CompareIntervalMax());
<a name="l00298"></a>00298 
<a name="l00299"></a>00299   int64 min = <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#459cd9226130a4c11e45f13c13d37469">min_sorted_</a>[0]-&gt;min;
<a name="l00300"></a>00300   int64 max = <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#d312196888cb0c6a229eee2fe734c2b4">max_sorted_</a>[0]-&gt;max + 1;
<a name="l00301"></a>00301   int64 last = min - 2;
<a name="l00302"></a>00302   <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#560357300d6d9813dc28b6e732f19f7e" title="bounds_[1.">bounds_</a>[0] = last;
<a name="l00303"></a>00303 
<a name="l00304"></a>00304   <span class="keywordtype">int</span> i = 0;
<a name="l00305"></a>00305   <span class="keywordtype">int</span> j = 0;
<a name="l00306"></a>00306   <span class="keywordtype">int</span> nb = 0;
<a name="l00307"></a>00307   <span class="keywordflow">for</span> (;;) {  <span class="comment">// merge min_sorted_[] and max_sorted_[] into bounds_[].</span>
<a name="l00308"></a>00308     <span class="keywordflow">if</span> (i &lt; <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#dc6bc99c6b66cc45c43adc96e6cef34f">size_</a> &amp;&amp; min &lt;= max) {  <span class="comment">// make sure min_sorted_ exhausted first.</span>
<a name="l00309"></a>00309       <span class="keywordflow">if</span> (min != last) {
<a name="l00310"></a>00310         last = min;
<a name="l00311"></a>00311         <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#560357300d6d9813dc28b6e732f19f7e" title="bounds_[1.">bounds_</a>[++nb] = last;
<a name="l00312"></a>00312       }
<a name="l00313"></a>00313       <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#459cd9226130a4c11e45f13c13d37469">min_sorted_</a>[i]-&gt;min_rank = nb;
<a name="l00314"></a>00314       <span class="keywordflow">if</span> (++i &lt; <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#dc6bc99c6b66cc45c43adc96e6cef34f">size_</a>) {
<a name="l00315"></a>00315         min = <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#459cd9226130a4c11e45f13c13d37469">min_sorted_</a>[i]-&gt;min;
<a name="l00316"></a>00316       }
<a name="l00317"></a>00317     } <span class="keywordflow">else</span> {
<a name="l00318"></a>00318       <span class="keywordflow">if</span> (max != last) {
<a name="l00319"></a>00319         last = max;
<a name="l00320"></a>00320         <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#560357300d6d9813dc28b6e732f19f7e" title="bounds_[1.">bounds_</a>[++nb] = last;
<a name="l00321"></a>00321       }
<a name="l00322"></a>00322       <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#d312196888cb0c6a229eee2fe734c2b4">max_sorted_</a>[j]-&gt;max_rank = nb;
<a name="l00323"></a>00323       <span class="keywordflow">if</span> (++j == <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#dc6bc99c6b66cc45c43adc96e6cef34f">size_</a>) {
<a name="l00324"></a>00324         <span class="keywordflow">break</span>;
<a name="l00325"></a>00325       }
<a name="l00326"></a>00326       max = <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#d312196888cb0c6a229eee2fe734c2b4">max_sorted_</a>[j]-&gt;max + 1;
<a name="l00327"></a>00327     }
<a name="l00328"></a>00328   }
<a name="l00329"></a>00329   <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#dbbc7bc674757f2759f6608724a5ec82">active_size_</a> = nb;
<a name="l00330"></a>00330   <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#560357300d6d9813dc28b6e732f19f7e" title="bounds_[1.">bounds_</a>[nb + 1] = <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#560357300d6d9813dc28b6e732f19f7e" title="bounds_[1.">bounds_</a>[nb] + 2;
<a name="l00331"></a>00331 }
<a name="l00332"></a>00332 
<a name="l00333"></a><a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#96a40c6619c8dddc1cf9fb8efb3920a1">00333</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#96a40c6619c8dddc1cf9fb8efb3920a1" title="These two methods will actually do the new bounds computation.">BoundsAllDifferent::PropagateMin</a>() {
<a name="l00334"></a>00334   <span class="keywordtype">bool</span> modified = <span class="keyword">false</span>;
<a name="l00335"></a>00335 
<a name="l00336"></a>00336   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#dbbc7bc674757f2759f6608724a5ec82">active_size_</a> + 1; ++i) {
<a name="l00337"></a>00337     <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#bd732132397b8beeaccd99b5f39452ff" title="hall interval links.">hall_</a>[i] = i - 1;
<a name="l00338"></a>00338     <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#f51c430be2e2fdf7b65ec98ef7d52585" title="tree links.">tree_</a>[i] = i - 1;
<a name="l00339"></a>00339     <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#fa66af6fea7e68705c7b2b9683570cb1" title="diffs between critical capacities.">diff_</a>[i] = <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#560357300d6d9813dc28b6e732f19f7e" title="bounds_[1.">bounds_</a>[i] - <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#560357300d6d9813dc28b6e732f19f7e" title="bounds_[1.">bounds_</a>[i - 1];
<a name="l00340"></a>00340   }
<a name="l00341"></a>00341   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#dc6bc99c6b66cc45c43adc96e6cef34f">size_</a>; ++i) {  <span class="comment">// visit intervals in increasing max order</span>
<a name="l00342"></a>00342     <span class="keyword">const</span> <span class="keywordtype">int</span> x = <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#d312196888cb0c6a229eee2fe734c2b4">max_sorted_</a>[i]-&gt;min_rank;
<a name="l00343"></a>00343     <span class="keyword">const</span> <span class="keywordtype">int</span> y = <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#d312196888cb0c6a229eee2fe734c2b4">max_sorted_</a>[i]-&gt;max_rank;
<a name="l00344"></a>00344     <span class="keywordtype">int</span> z = <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03.html#c287a08d826231437bf4eb5fffb7de0f">PathMax</a>(<a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#f51c430be2e2fdf7b65ec98ef7d52585" title="tree links.">tree_</a>.get(), x + 1);
<a name="l00345"></a>00345     <span class="keywordtype">int</span> j = <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#f51c430be2e2fdf7b65ec98ef7d52585" title="tree links.">tree_</a>[z];
<a name="l00346"></a>00346     <span class="keywordflow">if</span> (--<a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#fa66af6fea7e68705c7b2b9683570cb1" title="diffs between critical capacities.">diff_</a>[z] == 0) {
<a name="l00347"></a>00347       <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#f51c430be2e2fdf7b65ec98ef7d52585" title="tree links.">tree_</a>[z] = z + 1;
<a name="l00348"></a>00348       z = <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03.html#c287a08d826231437bf4eb5fffb7de0f">PathMax</a>(<a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#f51c430be2e2fdf7b65ec98ef7d52585" title="tree links.">tree_</a>.get(), z + 1);
<a name="l00349"></a>00349       <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#f51c430be2e2fdf7b65ec98ef7d52585" title="tree links.">tree_</a>[z] = j;
<a name="l00350"></a>00350     }
<a name="l00351"></a>00351     <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03.html#4a3c0dff0da68e2f8d031184c569a4d4">PathSet</a>(x + 1, z, z, <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#f51c430be2e2fdf7b65ec98ef7d52585" title="tree links.">tree_</a>.get());  <span class="comment">// path compression</span>
<a name="l00352"></a>00352     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#fa66af6fea7e68705c7b2b9683570cb1" title="diffs between critical capacities.">diff_</a>[z] &lt; <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#560357300d6d9813dc28b6e732f19f7e" title="bounds_[1.">bounds_</a>[z] - <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#560357300d6d9813dc28b6e732f19f7e" title="bounds_[1.">bounds_</a>[y]) {
<a name="l00353"></a>00353       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l00354"></a>00354     }
<a name="l00355"></a>00355     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#bd732132397b8beeaccd99b5f39452ff" title="hall interval links.">hall_</a>[x] &gt; x) {
<a name="l00356"></a>00356       <span class="keywordtype">int</span> w = <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03.html#c287a08d826231437bf4eb5fffb7de0f">PathMax</a>(<a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#bd732132397b8beeaccd99b5f39452ff" title="hall interval links.">hall_</a>.get(), <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#bd732132397b8beeaccd99b5f39452ff" title="hall interval links.">hall_</a>[x]);
<a name="l00357"></a>00357       <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#d312196888cb0c6a229eee2fe734c2b4">max_sorted_</a>[i]-&gt;min = <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#560357300d6d9813dc28b6e732f19f7e" title="bounds_[1.">bounds_</a>[w];
<a name="l00358"></a>00358       <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03.html#4a3c0dff0da68e2f8d031184c569a4d4">PathSet</a>(x, w, w, <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#bd732132397b8beeaccd99b5f39452ff" title="hall interval links.">hall_</a>.get());  <span class="comment">// path compression</span>
<a name="l00359"></a>00359       modified = <span class="keyword">true</span>;
<a name="l00360"></a>00360     }
<a name="l00361"></a>00361     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#fa66af6fea7e68705c7b2b9683570cb1" title="diffs between critical capacities.">diff_</a>[z] == <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#560357300d6d9813dc28b6e732f19f7e" title="bounds_[1.">bounds_</a>[z] - <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#560357300d6d9813dc28b6e732f19f7e" title="bounds_[1.">bounds_</a>[y]) {
<a name="l00362"></a>00362       <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03.html#4a3c0dff0da68e2f8d031184c569a4d4">PathSet</a>(<a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#bd732132397b8beeaccd99b5f39452ff" title="hall interval links.">hall_</a>[y], j - 1, y, <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#bd732132397b8beeaccd99b5f39452ff" title="hall interval links.">hall_</a>.get());  <span class="comment">// mark hall interval</span>
<a name="l00363"></a>00363       <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#bd732132397b8beeaccd99b5f39452ff" title="hall interval links.">hall_</a>[y] = j - 1;
<a name="l00364"></a>00364     }
<a name="l00365"></a>00365   }
<a name="l00366"></a>00366   <span class="keywordflow">return</span> modified;
<a name="l00367"></a>00367 }
<a name="l00368"></a>00368 
<a name="l00369"></a>00369 
<a name="l00370"></a><a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#c4acc7fd66c55af7cb1d4650131cd1ff">00370</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#c4acc7fd66c55af7cb1d4650131cd1ff">BoundsAllDifferent::PropagateMax</a>() {
<a name="l00371"></a>00371   <span class="keywordtype">bool</span> modified = <span class="keyword">false</span>;
<a name="l00372"></a>00372 
<a name="l00373"></a>00373   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i&lt;= <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#dbbc7bc674757f2759f6608724a5ec82">active_size_</a>; i++) {
<a name="l00374"></a>00374     <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#f51c430be2e2fdf7b65ec98ef7d52585" title="tree links.">tree_</a>[i] = i + 1;
<a name="l00375"></a>00375     <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#bd732132397b8beeaccd99b5f39452ff" title="hall interval links.">hall_</a>[i] = i + 1;
<a name="l00376"></a>00376     <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#fa66af6fea7e68705c7b2b9683570cb1" title="diffs between critical capacities.">diff_</a>[i] = <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#560357300d6d9813dc28b6e732f19f7e" title="bounds_[1.">bounds_</a>[i + 1] - <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#560357300d6d9813dc28b6e732f19f7e" title="bounds_[1.">bounds_</a>[i];
<a name="l00377"></a>00377   }
<a name="l00378"></a>00378   <span class="comment">// visit intervals in decreasing min order</span>
<a name="l00379"></a>00379   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = <a class="code" href="classoperations__research_1_1BaseAllDifferent.html#dc6bc99c6b66cc45c43adc96e6cef34f">size_</a> - 1; i &gt;= 0; --i) {
<a name="l00380"></a>00380     <span class="keyword">const</span> <span class="keywordtype">int</span> x = <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#459cd9226130a4c11e45f13c13d37469">min_sorted_</a>[i]-&gt;max_rank;
<a name="l00381"></a>00381     <span class="keyword">const</span> <span class="keywordtype">int</span> y = <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#459cd9226130a4c11e45f13c13d37469">min_sorted_</a>[i]-&gt;min_rank;
<a name="l00382"></a>00382     <span class="keywordtype">int</span> z = <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03.html#6563846016f0d43ab0544e71dc502a82">PathMin</a>(<a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#f51c430be2e2fdf7b65ec98ef7d52585" title="tree links.">tree_</a>.get(), x - 1);
<a name="l00383"></a>00383     <span class="keywordtype">int</span> j = <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#f51c430be2e2fdf7b65ec98ef7d52585" title="tree links.">tree_</a>[z];
<a name="l00384"></a>00384     <span class="keywordflow">if</span> (--<a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#fa66af6fea7e68705c7b2b9683570cb1" title="diffs between critical capacities.">diff_</a>[z] == 0) {
<a name="l00385"></a>00385       <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#f51c430be2e2fdf7b65ec98ef7d52585" title="tree links.">tree_</a>[z] = z - 1;
<a name="l00386"></a>00386       z = <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03.html#6563846016f0d43ab0544e71dc502a82">PathMin</a>(<a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#f51c430be2e2fdf7b65ec98ef7d52585" title="tree links.">tree_</a>.get(), z - 1);
<a name="l00387"></a>00387       <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#f51c430be2e2fdf7b65ec98ef7d52585" title="tree links.">tree_</a>[z] = j;
<a name="l00388"></a>00388     }
<a name="l00389"></a>00389     <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03.html#4a3c0dff0da68e2f8d031184c569a4d4">PathSet</a>(x - 1, z, z, <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#f51c430be2e2fdf7b65ec98ef7d52585" title="tree links.">tree_</a>.get());
<a name="l00390"></a>00390     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#fa66af6fea7e68705c7b2b9683570cb1" title="diffs between critical capacities.">diff_</a>[z] &lt; <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#560357300d6d9813dc28b6e732f19f7e" title="bounds_[1.">bounds_</a>[y] - <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#560357300d6d9813dc28b6e732f19f7e" title="bounds_[1.">bounds_</a>[z]) {
<a name="l00391"></a>00391       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l00392"></a>00392       <span class="comment">// useless. Should have been caught by the PropagateMin() method.</span>
<a name="l00393"></a>00393     }
<a name="l00394"></a>00394     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#bd732132397b8beeaccd99b5f39452ff" title="hall interval links.">hall_</a>[x] &lt; x) {
<a name="l00395"></a>00395       <span class="keywordtype">int</span> w = <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03.html#6563846016f0d43ab0544e71dc502a82">PathMin</a>(<a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#bd732132397b8beeaccd99b5f39452ff" title="hall interval links.">hall_</a>.get(), <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#bd732132397b8beeaccd99b5f39452ff" title="hall interval links.">hall_</a>[x]);
<a name="l00396"></a>00396       <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#459cd9226130a4c11e45f13c13d37469">min_sorted_</a>[i]-&gt;max = <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#560357300d6d9813dc28b6e732f19f7e" title="bounds_[1.">bounds_</a>[w] - 1;
<a name="l00397"></a>00397       <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03.html#4a3c0dff0da68e2f8d031184c569a4d4">PathSet</a>(x, w, w, <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#bd732132397b8beeaccd99b5f39452ff" title="hall interval links.">hall_</a>.get());
<a name="l00398"></a>00398       modified = <span class="keyword">true</span>;
<a name="l00399"></a>00399     }
<a name="l00400"></a>00400     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#fa66af6fea7e68705c7b2b9683570cb1" title="diffs between critical capacities.">diff_</a>[z] == <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#560357300d6d9813dc28b6e732f19f7e" title="bounds_[1.">bounds_</a>[y] - <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#560357300d6d9813dc28b6e732f19f7e" title="bounds_[1.">bounds_</a>[z]) {
<a name="l00401"></a>00401       <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02alldiff__cst_8cc_03.html#4a3c0dff0da68e2f8d031184c569a4d4">PathSet</a>(<a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#bd732132397b8beeaccd99b5f39452ff" title="hall interval links.">hall_</a>[y], j + 1, y, <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#bd732132397b8beeaccd99b5f39452ff" title="hall interval links.">hall_</a>.get());
<a name="l00402"></a>00402       <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html#bd732132397b8beeaccd99b5f39452ff" title="hall interval links.">hall_</a>[y] = j + 1;
<a name="l00403"></a>00403     }
<a name="l00404"></a>00404   }
<a name="l00405"></a>00405   <span class="keywordflow">return</span> modified;
<a name="l00406"></a>00406 }
<a name="l00407"></a>00407 
<a name="l00408"></a><a class="code" href="classoperations__research_1_1Solver.html#d52f086b606caacf1d95e6990c742f9f">00408</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#cfe695748851f6c2f42883867f866658" title="All variables are pairwise different.">Solver::MakeAllDifferent</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars,
<a name="l00409"></a>00409                                      <span class="keywordtype">int</span> size,
<a name="l00410"></a>00410                                      <span class="keywordtype">bool</span> range) {
<a name="l00411"></a>00411   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {
<a name="l00412"></a>00412     CHECK_EQ(<span class="keyword">this</span>, vars[i]-&gt;solver());
<a name="l00413"></a>00413   }
<a name="l00414"></a>00414   <span class="keywordflow">if</span> (size &lt; 2) {
<a name="l00415"></a>00415     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#c49a29be9a66cd9e65f2c4faa45c2a77" title="Constraints This constraint always succeeds.">MakeTrueConstraint</a>();
<a name="l00416"></a>00416   } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (size == 2) {
<a name="l00417"></a>00417     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#18dc6e06c144669b9675d8d612e4e90c" title="left != right">MakeNonEquality</a>(const_cast&lt;IntVar* const&gt;(vars[0]),
<a name="l00418"></a>00418                            const_cast&lt;IntVar* const&gt;(vars[1]));
<a name="l00419"></a>00419   } <span class="keywordflow">else</span> {
<a name="l00420"></a>00420     <span class="keywordflow">if</span> (range) {
<a name="l00421"></a>00421       <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1BoundsAllDifferent.html">BoundsAllDifferent</a>(<span class="keyword">this</span>, vars, size));
<a name="l00422"></a>00422     } <span class="keywordflow">else</span> {
<a name="l00423"></a>00423       <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1ValueAllDifferent.html" title="ValueAllDifferent.">ValueAllDifferent</a>(<span class="keyword">this</span>, vars, size));
<a name="l00424"></a>00424     }
<a name="l00425"></a>00425   }
<a name="l00426"></a>00426 }
<a name="l00427"></a>00427 
<a name="l00428"></a>00428 }     <span class="comment">// namespace operations_research</span>
</pre></div></div>

  <!-- Start of footer. -->
  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <tr valign=top>
      <td colspan=2 height=10></td>
    </tr>
    <tr valign=top>
      <td colspan=2 bgcolor=#389613 height=3></td>
    </tr>
  </table>

  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br />

  
  </body>
</html>
