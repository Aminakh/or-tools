<!-- Good morning, Mr. Phelps. -->
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
    <title>google3/constraint_solver/expr_cst.cc Source File - Doxy</title>
    <link rel="shortcut icon" href="../../favicon.ico">
    <!-- Both stylesheets are supplied by Doxygen, with maybe minor tweaks from Google. -->
    <link href="../../doxygen.css" rel="stylesheet" type="text/css">
    <link href="../../tabs.css" rel="stylesheet" type="text/css">
  </head>

  <body topmargin=0 leftmargin=20 bottommargin=0 rightmargin=20 marginwidth=20 marginheight=0>
  <!-- Second part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
  <style>
    a.doxy_logo:hover {
      background-color: #389613
    }
  </style>

  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <!-- Top horizontal line with the color of the day. -->
    <tr valign=top>
      <td colspan=3 bgcolor=#389613 height=3></td>
    </tr>

    <!-- Header row with the links at the right. -->
    <tr valign=top>
      <td colspan=3 align=right>
        <font size=-1>
          Generated on: <font color=#389613><b>Fri Apr  1 14:13:18 PDT 2011</b></font>
            for <b>custom file set</b>
        </font>
      </td>
    </tr>

    <!-- Header row with the logo and the search form. -->
    <tr valign=top>
      <!-- Logo. -->
      <td align=left width=150>
        <table width=150 height=54 cellpadding=0 cellspacing=0 border=0>
          <tr valign=top>
            <!-- First part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
            <td bgcolor=#389613>
              <a class="doxy_logo" href="../../index.html"><img src="../../doxy_logo.png" alt="Doxy" border=0></a>
            </td>
          </tr>
        </table>
      </td>
    </tr>

    <!-- Tiny vertical space below the form. -->
    <tr valign=top>
      <td colspan=3 height=3></td>
    </tr>
  </table>

  <!-- Header navigation row. -->
  <div class="memproto">
    <table width=100% cellpadding=0 cellspacing=0 border=0>
      <tr>
        <td align=left style="padding-left: 20px"><font size=+1><b><tt><font color=#333333>//
            <a href="../../index.html"><font color=#389613>doxy</font></a>/</font>
            <a href="../../google3/index.html">google3</a>/
            <a href="../../google3/constraint_solver/index.html">constraint_solver</a>/
            </tt></b></font>
        </td>
      </tr>
    </table>
  </div>
  <br />
    <!-- No subdirs found. -->
  <!-- End of header. -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>google3/constraint_solver/expr_cst.cc</h1><a href="expr__cst_8cc.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright 2010 Google</span>
<a name="l00002"></a>00002 <span class="comment">// Licensed under the Apache License, Version 2.0 (the "License");</span>
<a name="l00003"></a>00003 <span class="comment">// you may not use this file except in compliance with the License.</span>
<a name="l00004"></a>00004 <span class="comment">// You may obtain a copy of the License at</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">//     http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Unless required by applicable law or agreed to in writing, software</span>
<a name="l00009"></a>00009 <span class="comment">// distributed under the License is distributed on an "AS IS" BASIS,</span>
<a name="l00010"></a>00010 <span class="comment">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00011"></a>00011 <span class="comment">// See the License for the specific language governing permissions and</span>
<a name="l00012"></a>00012 <span class="comment">// limitations under the License.</span>
<a name="l00013"></a>00013 <span class="comment">//</span>
<a name="l00014"></a>00014 <span class="comment">//  Expression constraints</span>
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 <span class="preprocessor">#include "base/commandlineflags.h"</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include "base/integral_types.h"</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include "base/logging.h"</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include "base/scoped_ptr.h"</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include "base/stringprintf.h"</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include "<a class="code" href="constraint__solveri_8h.html">constraint_solver/constraint_solveri.h</a>"</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <a class="code" href="default__search_8cc.html#096c1c951b391cf2f9a54d3c74f0e211" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_int32</a>(cache_initial_size, 1024, <span class="stringliteral">"Initial size of the array of the hash "</span>
<a name="l00024"></a>00024              <span class="stringliteral">"table of caches for objects of type StatusVar(x == 3)"</span>);
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="keyword">namespace </span>operations_research {
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="comment">//-----------------------------------------------------------------------------</span>
<a name="l00029"></a>00029 <span class="comment">// Equality</span>
<a name="l00030"></a>00030 
<a name="l00031"></a><a class="code" href="classoperations__research_1_1EqualityExprCst.html">00031</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1EqualityExprCst.html" title="Equality.">EqualityExprCst</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a> {
<a name="l00032"></a>00032  <span class="keyword">public</span>:
<a name="l00033"></a>00033   <a class="code" href="classoperations__research_1_1EqualityExprCst.html#cec4c1447d77e75b7aa46684fe8d5c41">EqualityExprCst</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <span class="keyword">const</span> e, int64 v);
<a name="l00034"></a><a class="code" href="classoperations__research_1_1EqualityExprCst.html#3bcfef9c6767255a14bf60dca3530175">00034</a>   <span class="keyword">virtual</span> <a class="code" href="classoperations__research_1_1EqualityExprCst.html#3bcfef9c6767255a14bf60dca3530175">~EqualityExprCst</a>() {}
<a name="l00035"></a>00035   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1EqualityExprCst.html#8146a185f80060653d3511707079563d" title="This method is called when the constraint is processed by the solver.">Post</a>();
<a name="l00036"></a>00036   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1EqualityExprCst.html#209227ac8c2bc90d50d80b1edd7d67fe" title="This method performs the initial propagation of the constraint.">InitialPropagate</a>();
<a name="l00037"></a>00037   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1EqualityExprCst.html#f76e70cf572e9dc90b5950a91cc6356d" title="Constraint class.">DebugString</a>() <span class="keyword">const</span>;
<a name="l00038"></a>00038  <span class="keyword">private</span>:
<a name="l00039"></a><a class="code" href="classoperations__research_1_1EqualityExprCst.html#93a15caee5a32bd25ccfb2fc6e738a22">00039</a>   <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1EqualityExprCst.html#93a15caee5a32bd25ccfb2fc6e738a22">expr_</a>;
<a name="l00040"></a><a class="code" href="classoperations__research_1_1EqualityExprCst.html#8e21e855152040e44a780e4ad9822715">00040</a>   int64 <a class="code" href="classoperations__research_1_1EqualityExprCst.html#8e21e855152040e44a780e4ad9822715">value_</a>;
<a name="l00041"></a>00041 };
<a name="l00042"></a>00042 
<a name="l00043"></a><a class="code" href="classoperations__research_1_1EqualityExprCst.html#cec4c1447d77e75b7aa46684fe8d5c41">00043</a> <a class="code" href="classoperations__research_1_1EqualityExprCst.html#cec4c1447d77e75b7aa46684fe8d5c41">EqualityExprCst::EqualityExprCst</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <span class="keyword">const</span> e, int64 v)
<a name="l00044"></a>00044   : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s), expr_(e), value_(v) {}
<a name="l00045"></a>00045 
<a name="l00046"></a><a class="code" href="classoperations__research_1_1EqualityExprCst.html#8146a185f80060653d3511707079563d">00046</a> <span class="keywordtype">void</span> EqualityExprCst::Post() {
<a name="l00047"></a>00047   <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1EqualityExprCst.html#93a15caee5a32bd25ccfb2fc6e738a22">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#779dea5a722df700411e947f7739dc56" title="Returns true if the expression is indeed a variable.">IsVar</a>()) {
<a name="l00048"></a>00048     <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#4055be37b2a2507e29133673804c10d9" title="This method is a specialized case of the MakeConstraintDemon method to call the InitiatePropagate...">MakeConstraintInitialPropagateCallback</a>(<span class="keyword">this</span>);
<a name="l00049"></a>00049     <a class="code" href="classoperations__research_1_1EqualityExprCst.html#93a15caee5a32bd25ccfb2fc6e738a22">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#845a3c3c71323504f6b59f9c0ea46b08" title="Attach a demon that will watch the min or the max of the expression.">WhenRange</a>(d);
<a name="l00050"></a>00050   }
<a name="l00051"></a>00051 }
<a name="l00052"></a>00052 
<a name="l00053"></a><a class="code" href="classoperations__research_1_1EqualityExprCst.html#209227ac8c2bc90d50d80b1edd7d67fe">00053</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1EqualityExprCst.html#209227ac8c2bc90d50d80b1edd7d67fe" title="This method performs the initial propagation of the constraint.">EqualityExprCst::InitialPropagate</a>() {
<a name="l00054"></a>00054   <a class="code" href="classoperations__research_1_1EqualityExprCst.html#93a15caee5a32bd25ccfb2fc6e738a22">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#8889930ed76665b0f24f12df2ed4e05c" title="This method sets the value of the expression.">SetValue</a>(<a class="code" href="classoperations__research_1_1EqualityExprCst.html#8e21e855152040e44a780e4ad9822715">value_</a>);
<a name="l00055"></a>00055 }
<a name="l00056"></a>00056 
<a name="l00057"></a><a class="code" href="classoperations__research_1_1EqualityExprCst.html#f76e70cf572e9dc90b5950a91cc6356d">00057</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1EqualityExprCst.html#f76e70cf572e9dc90b5950a91cc6356d" title="Constraint class.">EqualityExprCst::DebugString</a>()<span class="keyword"> const </span>{
<a name="l00058"></a>00058   <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"(%s == %"</span> GG_LL_FORMAT <span class="stringliteral">"d)"</span>,
<a name="l00059"></a>00059                       <a class="code" href="classoperations__research_1_1EqualityExprCst.html#93a15caee5a32bd25ccfb2fc6e738a22">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#fc971d7ca0617641f29e7e510e98a767">DebugString</a>().c_str(), <a class="code" href="classoperations__research_1_1EqualityExprCst.html#8e21e855152040e44a780e4ad9822715">value_</a>);
<a name="l00060"></a>00060 }
<a name="l00061"></a>00061 
<a name="l00062"></a><a class="code" href="classoperations__research_1_1Solver.html#aba6524c3e456226fb4052198e6dc75f">00062</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#9b994752fb26294ea587bdba75038811" title="left == right">Solver::MakeEquality</a>(<a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <span class="keyword">const</span> e, int64 v) {
<a name="l00063"></a>00063   CHECK_EQ(<span class="keyword">this</span>, e-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00064"></a>00064   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1EqualityExprCst.html" title="Equality.">EqualityExprCst</a>(<span class="keyword">this</span>, e, v));
<a name="l00065"></a>00065 }
<a name="l00066"></a>00066 
<a name="l00067"></a><a class="code" href="classoperations__research_1_1Solver.html#3da80151cde4b8e9e235d5d8c1445f2c">00067</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#9b994752fb26294ea587bdba75038811" title="left == right">Solver::MakeEquality</a>(<a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <span class="keyword">const</span> e, <span class="keywordtype">int</span> v) {
<a name="l00068"></a>00068   CHECK_EQ(<span class="keyword">this</span>, e-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00069"></a>00069   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1EqualityExprCst.html" title="Equality.">EqualityExprCst</a>(<span class="keyword">this</span>, e, v));
<a name="l00070"></a>00070 }
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 <span class="comment">//-----------------------------------------------------------------------------</span>
<a name="l00073"></a>00073 <span class="comment">// Greater or equal constraint</span>
<a name="l00074"></a>00074 
<a name="l00075"></a><a class="code" href="classoperations__research_1_1GreaterEqExprCst.html">00075</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1GreaterEqExprCst.html" title="Greater or equal constraint.">GreaterEqExprCst</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a> {
<a name="l00076"></a>00076  <span class="keyword">public</span>:
<a name="l00077"></a>00077   <a class="code" href="classoperations__research_1_1GreaterEqExprCst.html" title="Greater or equal constraint.">GreaterEqExprCst</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <span class="keyword">const</span> e, int64 v);
<a name="l00078"></a><a class="code" href="classoperations__research_1_1GreaterEqExprCst.html#8c4a28e01950e327ba1fb39c6c432756">00078</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1GreaterEqExprCst.html" title="Greater or equal constraint.">GreaterEqExprCst</a>() {}
<a name="l00079"></a>00079   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Post();
<a name="l00080"></a>00080   <span class="keyword">virtual</span> <span class="keywordtype">void</span> InitialPropagate();
<a name="l00081"></a>00081   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Solver.html#a7a09bf2f27ccbdc1d1d386bd94e142a" title="misc debug string.">DebugString</a>() <span class="keyword">const</span>;
<a name="l00082"></a>00082  <span class="keyword">private</span>:
<a name="l00083"></a><a class="code" href="classoperations__research_1_1GreaterEqExprCst.html#246f07d8deaf493aac5f8f376cb5f7f1">00083</a>   <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <span class="keyword">const</span> expr_;
<a name="l00084"></a><a class="code" href="classoperations__research_1_1GreaterEqExprCst.html#fc01982b8c51245d767d9b361973cdde">00084</a>   int64 value_;
<a name="l00085"></a>00085 };
<a name="l00086"></a>00086 
<a name="l00087"></a><a class="code" href="classoperations__research_1_1GreaterEqExprCst.html#7525238f22254f4f1831f1a9c94cba91">00087</a> <a class="code" href="classoperations__research_1_1GreaterEqExprCst.html#7525238f22254f4f1831f1a9c94cba91">GreaterEqExprCst::GreaterEqExprCst</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <span class="keyword">const</span> e, int64 v)
<a name="l00088"></a>00088   : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s), expr_(e), value_(v) {}
<a name="l00089"></a>00089 
<a name="l00090"></a><a class="code" href="classoperations__research_1_1GreaterEqExprCst.html#e563b47f2956276aa8850bc36a91d4a0">00090</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1GreaterEqExprCst.html#e563b47f2956276aa8850bc36a91d4a0" title="This method is called when the constraint is processed by the solver.">GreaterEqExprCst::Post</a>() {
<a name="l00091"></a>00091   <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1GreaterEqExprCst.html#246f07d8deaf493aac5f8f376cb5f7f1">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#779dea5a722df700411e947f7739dc56" title="Returns true if the expression is indeed a variable.">IsVar</a>()) {
<a name="l00092"></a>00092     <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#4055be37b2a2507e29133673804c10d9" title="This method is a specialized case of the MakeConstraintDemon method to call the InitiatePropagate...">MakeConstraintInitialPropagateCallback</a>(<span class="keyword">this</span>);
<a name="l00093"></a>00093     <a class="code" href="classoperations__research_1_1GreaterEqExprCst.html#246f07d8deaf493aac5f8f376cb5f7f1">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#845a3c3c71323504f6b59f9c0ea46b08" title="Attach a demon that will watch the min or the max of the expression.">WhenRange</a>(d);
<a name="l00094"></a>00094   }
<a name="l00095"></a>00095 }
<a name="l00096"></a>00096 
<a name="l00097"></a><a class="code" href="classoperations__research_1_1GreaterEqExprCst.html#8cc59ca3ac583558b6f4b95aacb83b21">00097</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1GreaterEqExprCst.html#8cc59ca3ac583558b6f4b95aacb83b21" title="This method performs the initial propagation of the constraint.">GreaterEqExprCst::InitialPropagate</a>() {
<a name="l00098"></a>00098   <a class="code" href="classoperations__research_1_1GreaterEqExprCst.html#246f07d8deaf493aac5f8f376cb5f7f1">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#fec5a6eea8ee64fbc7fa34d7d28f8d8f">SetMin</a>(<a class="code" href="classoperations__research_1_1GreaterEqExprCst.html#fc01982b8c51245d767d9b361973cdde">value_</a>);
<a name="l00099"></a>00099 }
<a name="l00100"></a>00100 
<a name="l00101"></a><a class="code" href="classoperations__research_1_1GreaterEqExprCst.html#cfff4a22b9ebbb89dd42d66c54af3806">00101</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1GreaterEqExprCst.html#cfff4a22b9ebbb89dd42d66c54af3806" title="Constraint class.">GreaterEqExprCst::DebugString</a>()<span class="keyword"> const </span>{
<a name="l00102"></a>00102   <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"(%s &gt;= %"</span> GG_LL_FORMAT <span class="stringliteral">"d)"</span>,
<a name="l00103"></a>00103                       <a class="code" href="classoperations__research_1_1GreaterEqExprCst.html#246f07d8deaf493aac5f8f376cb5f7f1">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#fc971d7ca0617641f29e7e510e98a767">DebugString</a>().c_str(), <a class="code" href="classoperations__research_1_1GreaterEqExprCst.html#fc01982b8c51245d767d9b361973cdde">value_</a>);
<a name="l00104"></a>00104 }
<a name="l00105"></a>00105 
<a name="l00106"></a><a class="code" href="classoperations__research_1_1Solver.html#76abd8fc3c4a8b980d1831c2c56e56ee">00106</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#1fb3cbd575b75e83bdce037f3dbaca18" title="left &amp;gt;= right">Solver::MakeGreaterOrEqual</a>(<a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <span class="keyword">const</span> e, int64 v) {
<a name="l00107"></a>00107   CHECK_EQ(<span class="keyword">this</span>, e-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00108"></a>00108   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1GreaterEqExprCst.html" title="Greater or equal constraint.">GreaterEqExprCst</a>(<span class="keyword">this</span>, e, v));
<a name="l00109"></a>00109 }
<a name="l00110"></a>00110 
<a name="l00111"></a><a class="code" href="classoperations__research_1_1Solver.html#1afc6bc60361ab5e83a210544e985b2f">00111</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#1fb3cbd575b75e83bdce037f3dbaca18" title="left &amp;gt;= right">Solver::MakeGreaterOrEqual</a>(<a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <span class="keyword">const</span> e, <span class="keywordtype">int</span> v) {
<a name="l00112"></a>00112   CHECK_EQ(<span class="keyword">this</span>, e-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00113"></a>00113   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1GreaterEqExprCst.html" title="Greater or equal constraint.">GreaterEqExprCst</a>(<span class="keyword">this</span>, e, v));
<a name="l00114"></a>00114 }
<a name="l00115"></a>00115 
<a name="l00116"></a><a class="code" href="classoperations__research_1_1Solver.html#517d2b80e08ef73d1eab0c16753c40db">00116</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#15b4a771aa81be820cfda1752e5b8d25" title="left &amp;gt; right">Solver::MakeGreater</a>(<a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <span class="keyword">const</span> e, int64 v) {
<a name="l00117"></a>00117   CHECK_EQ(<span class="keyword">this</span>, e-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00118"></a>00118   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1GreaterEqExprCst.html" title="Greater or equal constraint.">GreaterEqExprCst</a>(<span class="keyword">this</span>, e, v + 1));
<a name="l00119"></a>00119 }
<a name="l00120"></a>00120 
<a name="l00121"></a><a class="code" href="classoperations__research_1_1Solver.html#85977268afef09d633c5b0715f7a2a55">00121</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#15b4a771aa81be820cfda1752e5b8d25" title="left &amp;gt; right">Solver::MakeGreater</a>(<a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <span class="keyword">const</span> e, <span class="keywordtype">int</span> v) {
<a name="l00122"></a>00122   CHECK_EQ(<span class="keyword">this</span>, e-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00123"></a>00123   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1GreaterEqExprCst.html" title="Greater or equal constraint.">GreaterEqExprCst</a>(<span class="keyword">this</span>, e, v + 1));
<a name="l00124"></a>00124 }
<a name="l00125"></a>00125 
<a name="l00126"></a>00126 <span class="comment">//-----------------------------------------------------------------------------</span>
<a name="l00127"></a>00127 <span class="comment">// Less or equal constraint</span>
<a name="l00128"></a>00128 
<a name="l00129"></a><a class="code" href="classoperations__research_1_1LessEqExprCst.html">00129</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1LessEqExprCst.html" title="Less or equal constraint.">LessEqExprCst</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a> {
<a name="l00130"></a>00130  <span class="keyword">public</span>:
<a name="l00131"></a>00131   <a class="code" href="classoperations__research_1_1LessEqExprCst.html" title="Less or equal constraint.">LessEqExprCst</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <span class="keyword">const</span> e, int64 v);
<a name="l00132"></a><a class="code" href="classoperations__research_1_1LessEqExprCst.html#3034bf8d419c2f3091aeb4f256e75018">00132</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1LessEqExprCst.html" title="Less or equal constraint.">LessEqExprCst</a>() {}
<a name="l00133"></a>00133   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Post();
<a name="l00134"></a>00134   <span class="keyword">virtual</span> <span class="keywordtype">void</span> InitialPropagate();
<a name="l00135"></a>00135   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Solver.html#a7a09bf2f27ccbdc1d1d386bd94e142a" title="misc debug string.">DebugString</a>() <span class="keyword">const</span>;
<a name="l00136"></a>00136  <span class="keyword">private</span>:
<a name="l00137"></a><a class="code" href="classoperations__research_1_1LessEqExprCst.html#ffaf1628bb01fa44ad7203ff44eb0f3b">00137</a>   <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <span class="keyword">const</span> expr_;
<a name="l00138"></a><a class="code" href="classoperations__research_1_1LessEqExprCst.html#cb10fa8e0bf5546ef85a123bf8c02a61">00138</a>   int64 value_;
<a name="l00139"></a>00139 };
<a name="l00140"></a>00140 
<a name="l00141"></a><a class="code" href="classoperations__research_1_1LessEqExprCst.html#3bf93e770ee342cd869dffdf8a78059d">00141</a> <a class="code" href="classoperations__research_1_1LessEqExprCst.html#3bf93e770ee342cd869dffdf8a78059d">LessEqExprCst::LessEqExprCst</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <span class="keyword">const</span> e, int64 v)
<a name="l00142"></a>00142   : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s), expr_(e), value_(v) {}
<a name="l00143"></a>00143 
<a name="l00144"></a><a class="code" href="classoperations__research_1_1LessEqExprCst.html#17f549bdfeca6e1cb202eb3ea8b2054f">00144</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1LessEqExprCst.html#17f549bdfeca6e1cb202eb3ea8b2054f" title="This method is called when the constraint is processed by the solver.">LessEqExprCst::Post</a>() {
<a name="l00145"></a>00145   <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1LessEqExprCst.html#ffaf1628bb01fa44ad7203ff44eb0f3b">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#779dea5a722df700411e947f7739dc56" title="Returns true if the expression is indeed a variable.">IsVar</a>()) {
<a name="l00146"></a>00146     <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#4055be37b2a2507e29133673804c10d9" title="This method is a specialized case of the MakeConstraintDemon method to call the InitiatePropagate...">MakeConstraintInitialPropagateCallback</a>(<span class="keyword">this</span>);
<a name="l00147"></a>00147     <a class="code" href="classoperations__research_1_1LessEqExprCst.html#ffaf1628bb01fa44ad7203ff44eb0f3b">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#845a3c3c71323504f6b59f9c0ea46b08" title="Attach a demon that will watch the min or the max of the expression.">WhenRange</a>(d);
<a name="l00148"></a>00148   }
<a name="l00149"></a>00149 }
<a name="l00150"></a>00150 
<a name="l00151"></a><a class="code" href="classoperations__research_1_1LessEqExprCst.html#298feeb18fcdd204e2c61d66ab171385">00151</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1LessEqExprCst.html#298feeb18fcdd204e2c61d66ab171385" title="This method performs the initial propagation of the constraint.">LessEqExprCst::InitialPropagate</a>() {
<a name="l00152"></a>00152   <a class="code" href="classoperations__research_1_1LessEqExprCst.html#ffaf1628bb01fa44ad7203ff44eb0f3b">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#dee9a082160df545671781df47f2b985">SetMax</a>(<a class="code" href="classoperations__research_1_1LessEqExprCst.html#cb10fa8e0bf5546ef85a123bf8c02a61">value_</a>);
<a name="l00153"></a>00153 }
<a name="l00154"></a>00154 
<a name="l00155"></a><a class="code" href="classoperations__research_1_1LessEqExprCst.html#002278a699f572dbb01dd087eebb9b35">00155</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1LessEqExprCst.html#002278a699f572dbb01dd087eebb9b35" title="Constraint class.">LessEqExprCst::DebugString</a>()<span class="keyword"> const </span>{
<a name="l00156"></a>00156   <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"(%s &lt;= %"</span> GG_LL_FORMAT <span class="stringliteral">"d)"</span>,
<a name="l00157"></a>00157                       <a class="code" href="classoperations__research_1_1LessEqExprCst.html#ffaf1628bb01fa44ad7203ff44eb0f3b">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#fc971d7ca0617641f29e7e510e98a767">DebugString</a>().c_str(), <a class="code" href="classoperations__research_1_1LessEqExprCst.html#cb10fa8e0bf5546ef85a123bf8c02a61">value_</a>);
<a name="l00158"></a>00158 }
<a name="l00159"></a>00159 
<a name="l00160"></a><a class="code" href="classoperations__research_1_1Solver.html#18c926d2983598ae9aa892a9ca08b8bd">00160</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#c62c9da88f979e5838d10f9d0ef7e371" title="left &amp;lt;= right">Solver::MakeLessOrEqual</a>(<a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <span class="keyword">const</span> e, int64 v) {
<a name="l00161"></a>00161   CHECK_EQ(<span class="keyword">this</span>, e-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00162"></a>00162   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1LessEqExprCst.html" title="Less or equal constraint.">LessEqExprCst</a>(<span class="keyword">this</span>, e, v));
<a name="l00163"></a>00163 }
<a name="l00164"></a>00164 
<a name="l00165"></a><a class="code" href="classoperations__research_1_1Solver.html#5bbc102511d7268de93845b40eff19cd">00165</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#c62c9da88f979e5838d10f9d0ef7e371" title="left &amp;lt;= right">Solver::MakeLessOrEqual</a>(<a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <span class="keyword">const</span> e, <span class="keywordtype">int</span> v) {
<a name="l00166"></a>00166   CHECK_EQ(<span class="keyword">this</span>, e-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00167"></a>00167   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1LessEqExprCst.html" title="Less or equal constraint.">LessEqExprCst</a>(<span class="keyword">this</span>, e, v));
<a name="l00168"></a>00168 }
<a name="l00169"></a>00169 
<a name="l00170"></a><a class="code" href="classoperations__research_1_1Solver.html#661569fd728c0024850e3528e71d471f">00170</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#ea99d06d86b1ebf9736ba4b7528fdcc2" title="left &amp;lt; right">Solver::MakeLess</a>(<a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <span class="keyword">const</span> e, int64 v) {
<a name="l00171"></a>00171   CHECK_EQ(<span class="keyword">this</span>, e-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00172"></a>00172   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1LessEqExprCst.html" title="Less or equal constraint.">LessEqExprCst</a>(<span class="keyword">this</span>, e, v - 1));
<a name="l00173"></a>00173 }
<a name="l00174"></a>00174 
<a name="l00175"></a><a class="code" href="classoperations__research_1_1Solver.html#80fb9257a712a0cdda0451b2ec6b7e5a">00175</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#ea99d06d86b1ebf9736ba4b7528fdcc2" title="left &amp;lt; right">Solver::MakeLess</a>(<a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <span class="keyword">const</span> e, <span class="keywordtype">int</span> v) {
<a name="l00176"></a>00176   CHECK_EQ(<span class="keyword">this</span>, e-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00177"></a>00177   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1LessEqExprCst.html" title="Less or equal constraint.">LessEqExprCst</a>(<span class="keyword">this</span>, e, v - 1));
<a name="l00178"></a>00178 }
<a name="l00179"></a>00179 
<a name="l00180"></a>00180 <span class="comment">//-----------------------------------------------------------------------------</span>
<a name="l00181"></a>00181 <span class="comment">// Different constraints</span>
<a name="l00182"></a>00182 
<a name="l00183"></a><a class="code" href="classoperations__research_1_1DiffCst.html">00183</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1DiffCst.html" title="Different constraints.">DiffCst</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a> {
<a name="l00184"></a>00184  <span class="keyword">public</span>:
<a name="l00185"></a>00185   <a class="code" href="classoperations__research_1_1DiffCst.html" title="Different constraints.">DiffCst</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var, int64 value);
<a name="l00186"></a><a class="code" href="classoperations__research_1_1DiffCst.html#b005dbe84e4236da482a256c2b42a168">00186</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1DiffCst.html" title="Different constraints.">DiffCst</a>() {}
<a name="l00187"></a><a class="code" href="classoperations__research_1_1DiffCst.html#59506400fa7c4ffac7da436cb00f5164">00187</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Post() {}
<a name="l00188"></a>00188   <span class="keyword">virtual</span> <span class="keywordtype">void</span> InitialPropagate();
<a name="l00189"></a>00189   <span class="keywordtype">void</span> BoundPropagate();
<a name="l00190"></a>00190   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Solver.html#a7a09bf2f27ccbdc1d1d386bd94e142a" title="misc debug string.">DebugString</a>() <span class="keyword">const</span>;
<a name="l00191"></a>00191  <span class="keyword">private</span>:
<a name="l00192"></a><a class="code" href="classoperations__research_1_1DiffCst.html#e4ca7d7579de6be9d9b905e974b775a8">00192</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var_;
<a name="l00193"></a><a class="code" href="classoperations__research_1_1DiffCst.html#c1114f53d85dcd3e3d7018534a4c899a">00193</a>   int64 value_;
<a name="l00194"></a><a class="code" href="classoperations__research_1_1DiffCst.html#cee3bd47795f1b1c0926b51f15b3a60a">00194</a>   <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* demon_;
<a name="l00195"></a>00195 };
<a name="l00196"></a>00196 
<a name="l00197"></a><a class="code" href="classoperations__research_1_1DiffCst.html#5ebea7d6d429e4d58fc8708bcd2d680d">00197</a> <a class="code" href="classoperations__research_1_1DiffCst.html#5ebea7d6d429e4d58fc8708bcd2d680d">DiffCst::DiffCst</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var, int64 value)
<a name="l00198"></a>00198     : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s), var_(var), value_(value), demon_(NULL) {}
<a name="l00199"></a>00199 
<a name="l00200"></a><a class="code" href="classoperations__research_1_1DiffCst.html#bd1b8a1e1c165d825c6a43f143a17a7f">00200</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1DiffCst.html#bd1b8a1e1c165d825c6a43f143a17a7f" title="This method performs the initial propagation of the constraint.">DiffCst::InitialPropagate</a>() {
<a name="l00201"></a>00201   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1DiffCst.html#e4ca7d7579de6be9d9b905e974b775a8">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#26efd8a51314b318dc14641e90af5c3a" title="This method returns the number of values in the domain of the variable.">Size</a>() &gt;= 0xFFFFFFFF) {
<a name="l00202"></a>00202     <a class="code" href="classoperations__research_1_1DiffCst.html#cee3bd47795f1b1c0926b51f15b3a60a">demon_</a> = <a class="code" href="namespaceoperations__research.html#50b3d41d8dbf72bb2ad22235a9e1f53e">MakeConstraintDemon0</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l00203"></a>00203                                   <span class="keyword">this</span>,
<a name="l00204"></a>00204                                   &amp;<a class="code" href="classoperations__research_1_1DiffCst.html#50ade558d1dd3e258c9d403d9a05028b">DiffCst::BoundPropagate</a>,
<a name="l00205"></a>00205                                   <span class="stringliteral">"BoundPropagate"</span>);
<a name="l00206"></a>00206     <a class="code" href="classoperations__research_1_1DiffCst.html#e4ca7d7579de6be9d9b905e974b775a8">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#845a3c3c71323504f6b59f9c0ea46b08" title="Attach a demon that will watch the min or the max of the expression.">WhenRange</a>(<a class="code" href="classoperations__research_1_1DiffCst.html#cee3bd47795f1b1c0926b51f15b3a60a">demon_</a>);
<a name="l00207"></a>00207   } <span class="keywordflow">else</span> {
<a name="l00208"></a>00208     <a class="code" href="classoperations__research_1_1DiffCst.html#e4ca7d7579de6be9d9b905e974b775a8">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#fa4460e0dd9745ad24b99d08d853f3a4" title="This method removes the value &amp;#39;v&amp;#39; from the domain of the variable.">RemoveValue</a>(<a class="code" href="classoperations__research_1_1DiffCst.html#c1114f53d85dcd3e3d7018534a4c899a">value_</a>);
<a name="l00209"></a>00209   }
<a name="l00210"></a>00210 }
<a name="l00211"></a>00211 
<a name="l00212"></a><a class="code" href="classoperations__research_1_1DiffCst.html#50ade558d1dd3e258c9d403d9a05028b">00212</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1DiffCst.html#50ade558d1dd3e258c9d403d9a05028b">DiffCst::BoundPropagate</a>() {
<a name="l00213"></a>00213   <span class="keyword">const</span> int64 var_min = <a class="code" href="classoperations__research_1_1DiffCst.html#e4ca7d7579de6be9d9b905e974b775a8">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>();
<a name="l00214"></a>00214   <span class="keyword">const</span> int64 var_max = <a class="code" href="classoperations__research_1_1DiffCst.html#e4ca7d7579de6be9d9b905e974b775a8">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>();
<a name="l00215"></a>00215   <span class="keywordflow">if</span> (var_min &gt; <a class="code" href="classoperations__research_1_1DiffCst.html#c1114f53d85dcd3e3d7018534a4c899a">value_</a> || var_max &lt; <a class="code" href="classoperations__research_1_1DiffCst.html#c1114f53d85dcd3e3d7018534a4c899a">value_</a>) {
<a name="l00216"></a>00216     <a class="code" href="classoperations__research_1_1DiffCst.html#cee3bd47795f1b1c0926b51f15b3a60a">demon_</a>-&gt;<a class="code" href="classoperations__research_1_1Demon.html#4e51b1b49f9a937b335cd9381f95614d" title="This method inhibits the demon in the search tree below the current position.">inhibit</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00217"></a>00217   } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (var_min == <a class="code" href="classoperations__research_1_1DiffCst.html#c1114f53d85dcd3e3d7018534a4c899a">value_</a>) {
<a name="l00218"></a>00218     <a class="code" href="classoperations__research_1_1DiffCst.html#e4ca7d7579de6be9d9b905e974b775a8">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#fec5a6eea8ee64fbc7fa34d7d28f8d8f">SetMin</a>(<a class="code" href="classoperations__research_1_1DiffCst.html#c1114f53d85dcd3e3d7018534a4c899a">value_</a> + 1);
<a name="l00219"></a>00219   } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (var_max == <a class="code" href="classoperations__research_1_1DiffCst.html#c1114f53d85dcd3e3d7018534a4c899a">value_</a>) {
<a name="l00220"></a>00220     <a class="code" href="classoperations__research_1_1DiffCst.html#e4ca7d7579de6be9d9b905e974b775a8">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#dee9a082160df545671781df47f2b985">SetMax</a>(<a class="code" href="classoperations__research_1_1DiffCst.html#c1114f53d85dcd3e3d7018534a4c899a">value_</a> - 1);
<a name="l00221"></a>00221   } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1DiffCst.html#e4ca7d7579de6be9d9b905e974b775a8">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#26efd8a51314b318dc14641e90af5c3a" title="This method returns the number of values in the domain of the variable.">Size</a>() &lt;= 0xFFFFFF) {
<a name="l00222"></a>00222     <a class="code" href="classoperations__research_1_1DiffCst.html#cee3bd47795f1b1c0926b51f15b3a60a">demon_</a>-&gt;<a class="code" href="classoperations__research_1_1Demon.html#4e51b1b49f9a937b335cd9381f95614d" title="This method inhibits the demon in the search tree below the current position.">inhibit</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00223"></a>00223     <a class="code" href="classoperations__research_1_1DiffCst.html#e4ca7d7579de6be9d9b905e974b775a8">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#fa4460e0dd9745ad24b99d08d853f3a4" title="This method removes the value &amp;#39;v&amp;#39; from the domain of the variable.">RemoveValue</a>(<a class="code" href="classoperations__research_1_1DiffCst.html#c1114f53d85dcd3e3d7018534a4c899a">value_</a>);
<a name="l00224"></a>00224   }
<a name="l00225"></a>00225 }
<a name="l00226"></a>00226 
<a name="l00227"></a><a class="code" href="classoperations__research_1_1DiffCst.html#cb7fdb02947701e91e0f6392d00772b6">00227</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1DiffCst.html#cb7fdb02947701e91e0f6392d00772b6" title="Constraint class.">DiffCst::DebugString</a>()<span class="keyword"> const </span>{
<a name="l00228"></a>00228   <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"(%s != %"</span> GG_LL_FORMAT <span class="stringliteral">"d)"</span>,
<a name="l00229"></a>00229                       <a class="code" href="classoperations__research_1_1DiffCst.html#e4ca7d7579de6be9d9b905e974b775a8">var_</a>-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#fc971d7ca0617641f29e7e510e98a767">DebugString</a>().c_str(), <a class="code" href="classoperations__research_1_1DiffCst.html#c1114f53d85dcd3e3d7018534a4c899a">value_</a>);
<a name="l00230"></a>00230 }
<a name="l00231"></a>00231 
<a name="l00232"></a><a class="code" href="classoperations__research_1_1Solver.html#588bb48cac699de4c39ad716ea469132">00232</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#18dc6e06c144669b9675d8d612e4e90c" title="left != right">Solver::MakeNonEquality</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> e, int64 v) {
<a name="l00233"></a>00233   CHECK_EQ(<span class="keyword">this</span>, e-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00234"></a>00234   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1DiffCst.html" title="Different constraints.">DiffCst</a>(<span class="keyword">this</span>, e, v));
<a name="l00235"></a>00235 }
<a name="l00236"></a>00236 
<a name="l00237"></a><a class="code" href="classoperations__research_1_1Solver.html#8a3fe0d94c046ec49f2ff6a348323b98">00237</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#18dc6e06c144669b9675d8d612e4e90c" title="left != right">Solver::MakeNonEquality</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> e, <span class="keywordtype">int</span> v) {
<a name="l00238"></a>00238   CHECK_EQ(<span class="keyword">this</span>, e-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00239"></a>00239   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1DiffCst.html" title="Different constraints.">DiffCst</a>(<span class="keyword">this</span>, e, v));
<a name="l00240"></a>00240 }
<a name="l00241"></a>00241 <span class="comment">// ----- is_equal_cst Constraint -----</span>
<a name="l00242"></a>00242 
<a name="l00243"></a><a class="code" href="classoperations__research_1_1IsEqualCstCt.html">00243</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1IsEqualCstCt.html" title="is_equal_cst Constraint">IsEqualCstCt</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a> {
<a name="l00244"></a>00244  <span class="keyword">public</span>:
<a name="l00245"></a><a class="code" href="classoperations__research_1_1IsEqualCstCt.html#0f72d646144009871f00de7e6915b93d">00245</a>   <a class="code" href="classoperations__research_1_1IsEqualCstCt.html" title="is_equal_cst Constraint">IsEqualCstCt</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> v, int64 c, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> b)
<a name="l00246"></a>00246       : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s), var_(v), cst_(c), boolvar_(b), demon_(NULL) {}
<a name="l00247"></a><a class="code" href="classoperations__research_1_1IsEqualCstCt.html#4a8b627daa2c97c1c9b61962aacb2916">00247</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Post() {
<a name="l00248"></a>00248     demon_ = solver()-&gt;MakeConstraintInitialPropagateCallback(<span class="keyword">this</span>);
<a name="l00249"></a>00249     var_-&gt;WhenDomain(demon_);
<a name="l00250"></a>00250     boolvar_-&gt;WhenBound(demon_);
<a name="l00251"></a>00251   }
<a name="l00252"></a><a class="code" href="classoperations__research_1_1IsEqualCstCt.html#5342b70efcb5e08f910e4279e0aaa408">00252</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> InitialPropagate() {
<a name="l00253"></a>00253     <span class="keywordtype">bool</span> inhibit = var_-&gt;Bound();
<a name="l00254"></a>00254     int64 u = var_-&gt;Contains(cst_);
<a name="l00255"></a>00255     int64 l = inhibit ? u : 0;
<a name="l00256"></a>00256     boolvar_-&gt;SetRange(l, u);
<a name="l00257"></a>00257     <span class="keywordflow">if</span> (boolvar_-&gt;Bound()) {
<a name="l00258"></a>00258       inhibit = <span class="keyword">true</span>;
<a name="l00259"></a>00259       <span class="keywordflow">if</span> (boolvar_-&gt;Min() == 0) {
<a name="l00260"></a>00260         var_-&gt;RemoveValue(cst_);
<a name="l00261"></a>00261       } <span class="keywordflow">else</span> {
<a name="l00262"></a>00262         var_-&gt;SetValue(cst_);
<a name="l00263"></a>00263       }
<a name="l00264"></a>00264     }
<a name="l00265"></a>00265     <span class="keywordflow">if</span> (inhibit) {
<a name="l00266"></a>00266       demon_-&gt;inhibit(solver());
<a name="l00267"></a>00267     }
<a name="l00268"></a>00268   }
<a name="l00269"></a><a class="code" href="classoperations__research_1_1IsEqualCstCt.html#207bec0436dac83de5ff2785933a5ac4">00269</a>   <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Solver.html#a7a09bf2f27ccbdc1d1d386bd94e142a" title="misc debug string.">DebugString</a>()<span class="keyword"> const </span>{
<a name="l00270"></a>00270     <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"IsEqualCstCt(%s, %"</span> GG_LL_FORMAT <span class="stringliteral">"d, %s)"</span>,
<a name="l00271"></a>00271                         var_-&gt;DebugString().c_str(),
<a name="l00272"></a>00272                         cst_,
<a name="l00273"></a>00273                         boolvar_-&gt;DebugString().c_str());
<a name="l00274"></a>00274   }
<a name="l00275"></a>00275  <span class="keyword">private</span>:
<a name="l00276"></a><a class="code" href="classoperations__research_1_1IsEqualCstCt.html#c5d557578247365e764366d2554426f8">00276</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var_;
<a name="l00277"></a><a class="code" href="classoperations__research_1_1IsEqualCstCt.html#d1fff325d9b3a533e9c238cd8594b892">00277</a>   int64 cst_;
<a name="l00278"></a><a class="code" href="classoperations__research_1_1IsEqualCstCt.html#af3c15dbbe719dec01daea436afbf9a6">00278</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> boolvar_;
<a name="l00279"></a><a class="code" href="classoperations__research_1_1IsEqualCstCt.html#a0513c0e4dfece41dce767efb702e407">00279</a>   <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* demon_;
<a name="l00280"></a>00280 };
<a name="l00281"></a>00281 
<a name="l00282"></a>00282 <span class="comment">// ---------- VarCstCache ----------</span>
<a name="l00283"></a>00283 
<a name="l00284"></a><a class="code" href="classoperations__research_1_1VarCstCache.html">00284</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1VarCstCache.html" title="VarCstCache.">VarCstCache</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1BaseObject.html" title="Useful Search and Modeling Objects.">BaseObject</a> {
<a name="l00285"></a>00285  <span class="keyword">public</span>:
<a name="l00286"></a><a class="code" href="classoperations__research_1_1VarCstCache.html#79f273c4284489bd39170d5f87adac07">00286</a>   <span class="keyword">explicit</span> <a class="code" href="classoperations__research_1_1Solver.html#d0cd5a48c9628da7f168f08195472f39">VarCstCache</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s)
<a name="l00287"></a>00287       : solver_(s), size_(FLAGS_cache_initial_size), counter_(0) {
<a name="l00288"></a>00288     array_ = s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#6f115c1a6fd0c2b4b47106eae7fde9c0">UnsafeRevAllocArray</a>(<span class="keyword">new</span> <a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html">Cell</a>*[size_]);
<a name="l00289"></a>00289     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size_; ++i) {
<a name="l00290"></a>00290       array_[i] = NULL;
<a name="l00291"></a>00291     }
<a name="l00292"></a>00292   }
<a name="l00293"></a><a class="code" href="classoperations__research_1_1VarCstCache.html#f98f0a289421d1e3492135788b389958">00293</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1VarCstCache.html" title="VarCstCache.">VarCstCache</a>() {}
<a name="l00294"></a>00294 
<a name="l00295"></a><a class="code" href="classoperations__research_1_1VarCstCache.html#c5e4f85b6beca6ea62e587d7d0161d96">00295</a>   <span class="keywordtype">void</span> Insert(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var,
<a name="l00296"></a>00296               int64 value,
<a name="l00297"></a>00297               <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> boolvar) {
<a name="l00298"></a>00298     <span class="keywordtype">int</span> code = HashCode(var, value) % size_;
<a name="l00299"></a>00299     <a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html">Cell</a>* tmp = array_[code];
<a name="l00300"></a>00300     <span class="keywordflow">while</span> (tmp != NULL) {
<a name="l00301"></a>00301       <span class="keywordflow">if</span> (tmp-&gt;<a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html#3dc6d8827b53358826557db93af90836">value</a> == value &amp;&amp; tmp-&gt;<a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html#b05638b8294a7a1db5076816eb73440e">var</a> == var) {
<a name="l00302"></a>00302         <span class="keywordflow">return</span>;
<a name="l00303"></a>00303       }
<a name="l00304"></a>00304       tmp = tmp-&gt;<a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html#93198a79de6cbf740a04335ce9f726a3">next</a>;
<a name="l00305"></a>00305     }
<a name="l00306"></a>00306     UnsafeInsert(var, value, boolvar);
<a name="l00307"></a>00307   }
<a name="l00308"></a>00308 
<a name="l00309"></a><a class="code" href="classoperations__research_1_1VarCstCache.html#93ef17cd9f35d41b052f8478912646ff">00309</a>   <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> solver()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> solver_; }
<a name="l00310"></a>00310 
<a name="l00311"></a>00311  <span class="keyword">protected</span>:
<a name="l00312"></a><a class="code" href="classoperations__research_1_1VarCstCache.html#1fcefa735743b3687348a4aa8b52e357">00312</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* Find(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var, int64 value)<span class="keyword"> const </span>{
<a name="l00313"></a>00313     <span class="keywordtype">int</span> code = HashCode(var, value) % size_;
<a name="l00314"></a>00314     <a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html">Cell</a>* tmp = array_[code];
<a name="l00315"></a>00315     <span class="keywordflow">while</span> (tmp) {
<a name="l00316"></a>00316       <span class="keywordflow">if</span> (tmp-&gt;<a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html#3dc6d8827b53358826557db93af90836">value</a> == value &amp;&amp; tmp-&gt;<a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html#b05638b8294a7a1db5076816eb73440e">var</a> == var) {
<a name="l00317"></a>00317         <span class="keywordflow">return</span> tmp-&gt;<a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html#ac332d73965ad4d216cd9a368ea87d83">boolvar</a>;
<a name="l00318"></a>00318       }
<a name="l00319"></a>00319       tmp = tmp-&gt;<a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html#93198a79de6cbf740a04335ce9f726a3">next</a>;
<a name="l00320"></a>00320     }
<a name="l00321"></a>00321     <span class="keywordflow">return</span> NULL;
<a name="l00322"></a>00322     <span class="comment">// TODO(user): bench optim that moves the found cell first in the list.</span>
<a name="l00323"></a>00323   }
<a name="l00324"></a>00324 
<a name="l00325"></a><a class="code" href="classoperations__research_1_1VarCstCache.html#13c027b923a54accfe1eabf48fd44024">00325</a>   <span class="keywordtype">void</span> UnsafeInsert(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var, int64 value, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> boolvar) {
<a name="l00326"></a>00326     <span class="keywordtype">int</span> code = HashCode(var, value) % size_;
<a name="l00327"></a>00327     <a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html">Cell</a>* tmp = array_[code];
<a name="l00328"></a>00328     <a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html">Cell</a>* cell = solver_-&gt;UnsafeRevAlloc(<span class="keyword">new</span> <a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html">Cell</a>(var, value, boolvar, tmp));
<a name="l00329"></a>00329     solver_-&gt;SaveValue(reinterpret_cast&lt;void**&gt;(&amp;array_[code]));
<a name="l00330"></a>00330     array_[code] = cell;
<a name="l00331"></a>00331     solver_-&gt;SaveAndAdd(&amp;counter_, 1);
<a name="l00332"></a>00332     <span class="keywordflow">if</span> (counter_ &gt; 2 * size_) {
<a name="l00333"></a>00333       Double();
<a name="l00334"></a>00334     }
<a name="l00335"></a>00335   }
<a name="l00336"></a>00336  <span class="keyword">private</span>:
<a name="l00337"></a><a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html">00337</a>   <span class="keyword">struct </span><a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html">Cell</a> {
<a name="l00338"></a>00338    <span class="keyword">public</span>:
<a name="l00339"></a><a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html#aa2e4b726fc9c212380b16579cd41235">00339</a>     <a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html">Cell</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> v, int64 c, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* b, <a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html">Cell</a>* n)
<a name="l00340"></a>00340         : var(v), value(c), boolvar(b), next(n) {}
<a name="l00341"></a><a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html#b05638b8294a7a1db5076816eb73440e">00341</a>     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var;
<a name="l00342"></a><a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html#3dc6d8827b53358826557db93af90836">00342</a>     <span class="keyword">const</span> int64 value;
<a name="l00343"></a><a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html#ac332d73965ad4d216cd9a368ea87d83">00343</a>     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> boolvar;
<a name="l00344"></a><a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html#93198a79de6cbf740a04335ce9f726a3">00344</a>     <a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html">Cell</a>* next;
<a name="l00345"></a>00345   };
<a name="l00346"></a>00346 
<a name="l00347"></a><a class="code" href="classoperations__research_1_1VarCstCache.html#ca9ec02996c2cf533d2d84420bf2f4ed">00347</a>   <span class="keyword">static</span> uint64 HashCode(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var, int64 value) {
<a name="l00348"></a>00348     <span class="keywordflow">return</span> ((reinterpret_cast&lt;uint64&gt;(var) &gt;&gt; 4) * 3 + value * 5);
<a name="l00349"></a>00349   }
<a name="l00350"></a>00350 
<a name="l00351"></a><a class="code" href="classoperations__research_1_1VarCstCache.html#473fe139b2fda317979801b10d04977f">00351</a>   <span class="keywordtype">void</span> Double() {
<a name="l00352"></a>00352     <a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html">Cell</a>** old_cell_array = array_;
<a name="l00353"></a>00353     <span class="keyword">const</span> <span class="keywordtype">int</span> old_size = size_;
<a name="l00354"></a>00354     solver_-&gt;SaveValue(&amp;size_);
<a name="l00355"></a>00355     size_ *= 2;
<a name="l00356"></a>00356     solver_-&gt;SaveValue(reinterpret_cast&lt;void**&gt;(&amp;array_));
<a name="l00357"></a>00357     array_ = solver_-&gt;UnsafeRevAllocArray(<span class="keyword">new</span> <a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html">Cell</a>*[size_]);
<a name="l00358"></a>00358     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size_; ++i) {
<a name="l00359"></a>00359       array_[i] = NULL;
<a name="l00360"></a>00360     }
<a name="l00361"></a>00361     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; old_size; ++i) {
<a name="l00362"></a>00362       <a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html">Cell</a>* tmp = old_cell_array[i];
<a name="l00363"></a>00363       <span class="keywordflow">while</span> (tmp != NULL) {
<a name="l00364"></a>00364         <a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html">Cell</a>* to_reinsert = tmp;
<a name="l00365"></a>00365         tmp = tmp-&gt;<a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html#93198a79de6cbf740a04335ce9f726a3">next</a>;
<a name="l00366"></a>00366         <span class="keywordtype">int</span> code = HashCode(to_reinsert-&gt;<a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html#b05638b8294a7a1db5076816eb73440e">var</a>, to_reinsert-&gt;<a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html#3dc6d8827b53358826557db93af90836">value</a>) % size_;
<a name="l00367"></a>00367         <a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html">Cell</a>* new_next = array_[code];
<a name="l00368"></a>00368         solver_-&gt;SaveValue(reinterpret_cast&lt;void**&gt;(&amp;to_reinsert-&gt;<a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html#93198a79de6cbf740a04335ce9f726a3">next</a>));
<a name="l00369"></a>00369         to_reinsert-&gt;<a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html#93198a79de6cbf740a04335ce9f726a3">next</a> = new_next;
<a name="l00370"></a>00370         array_[code] = to_reinsert;
<a name="l00371"></a>00371       }
<a name="l00372"></a>00372     }
<a name="l00373"></a>00373   }
<a name="l00374"></a>00374 
<a name="l00375"></a><a class="code" href="classoperations__research_1_1VarCstCache.html#1306a751ebc14b50fd73d4e18a07f571">00375</a>   <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> solver_;
<a name="l00376"></a><a class="code" href="classoperations__research_1_1VarCstCache.html#61105325e13b763061c38172b3f03175">00376</a>   <a class="code" href="structoperations__research_1_1VarCstCache_1_1Cell.html">Cell</a>** array_;
<a name="l00377"></a><a class="code" href="classoperations__research_1_1VarCstCache.html#1849004da96ab484fb007b9f7ce43370">00377</a>   <span class="keywordtype">int</span> size_;
<a name="l00378"></a><a class="code" href="classoperations__research_1_1VarCstCache.html#fc6c8c4c31a4ce89cba997bfb9d33cfd">00378</a>   <span class="keywordtype">int</span> counter_;
<a name="l00379"></a>00379 };
<a name="l00380"></a>00380 
<a name="l00381"></a>00381 <span class="comment">// ---------- EqualityVarCstCache ----------</span>
<a name="l00382"></a>00382 
<a name="l00383"></a><a class="code" href="classoperations__research_1_1EqualityVarCstCache.html">00383</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1EqualityVarCstCache.html" title="EqualityVarCstCache.">EqualityVarCstCache</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1VarCstCache.html" title="VarCstCache.">VarCstCache</a> {
<a name="l00384"></a>00384  <span class="keyword">public</span>:
<a name="l00385"></a><a class="code" href="classoperations__research_1_1EqualityVarCstCache.html#910f8a69224c82ba83a3ce571dcc944e">00385</a>   <span class="keyword">explicit</span> <a class="code" href="classoperations__research_1_1EqualityVarCstCache.html" title="EqualityVarCstCache.">EqualityVarCstCache</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s) : <a class="code" href="classoperations__research_1_1VarCstCache.html" title="VarCstCache.">VarCstCache</a>(s) {}
<a name="l00386"></a><a class="code" href="classoperations__research_1_1EqualityVarCstCache.html#bc3bd9b070c96930f31629212bfdcd4d">00386</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1EqualityVarCstCache.html" title="EqualityVarCstCache.">EqualityVarCstCache</a>() {}
<a name="l00387"></a>00387 
<a name="l00388"></a><a class="code" href="classoperations__research_1_1EqualityVarCstCache.html#7d0d15b76501325707ce954fdd2d4d42">00388</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* VarEqCstStatus(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var, int64 value) {
<a name="l00389"></a>00389     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* boolvar = Find(var, value);
<a name="l00390"></a>00390     <span class="keywordflow">if</span> (!boolvar) {
<a name="l00391"></a>00391       boolvar = solver()-&gt;MakeBoolVar(
<a name="l00392"></a>00392           StringPrintf(<span class="stringliteral">"StatusVar&lt;%s == %"</span> GG_LL_FORMAT <span class="stringliteral">"d&gt;"</span>,
<a name="l00393"></a>00393                        var-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#89b827a71613c6c120d5ac326202df7e" title="Naming.">name</a>().c_str(), value));
<a name="l00394"></a>00394       <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <span class="keyword">const</span> maintain =
<a name="l00395"></a>00395           solver()-&gt;RevAlloc(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1IsEqualCstCt.html" title="is_equal_cst Constraint">IsEqualCstCt</a>(solver(), var, value, boolvar));
<a name="l00396"></a>00396       solver()-&gt;AddConstraint(maintain);
<a name="l00397"></a>00397       UnsafeInsert(var, value, boolvar);
<a name="l00398"></a>00398     }
<a name="l00399"></a>00399     <span class="keywordflow">return</span> boolvar;
<a name="l00400"></a>00400   }
<a name="l00401"></a>00401 };
<a name="l00402"></a>00402 
<a name="l00403"></a><a class="code" href="classoperations__research_1_1Solver.html#840c0de8978cabdfac9a0e3a9841d438">00403</a> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <a class="code" href="classoperations__research_1_1Solver.html#840c0de8978cabdfac9a0e3a9841d438" title="status var of (v == c)">Solver::MakeIsEqualCstVar</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var, int64 value) {
<a name="l00404"></a>00404   <span class="keywordflow">if</span> (value == var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>()) {
<a name="l00405"></a>00405     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#3714b115968705cdf789d984c9fb1bea" title="status var of (v &amp;lt;= c)">MakeIsLessOrEqualCstVar</a>(var, value);
<a name="l00406"></a>00406   }
<a name="l00407"></a>00407   <span class="keywordflow">if</span> (value == var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>()) {
<a name="l00408"></a>00408     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#cad86ce595131bc05185fcce0f5d7ec7" title="status var of (v &amp;gt;= c)">MakeIsGreaterOrEqualCstVar</a>(var, value);
<a name="l00409"></a>00409   }
<a name="l00410"></a>00410   <span class="keywordflow">if</span> (!var-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#6e297b67956343bed8a4aece6a2c88a3" title="This method returns wether the value &amp;#39;v&amp;#39; is in the domain of the variable...">Contains</a>(value)) {
<a name="l00411"></a>00411     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#8f027a8b96688e6728e2e9ece1441a13" title="IntConst will create a constant expression.">MakeIntConst</a>(0LL);
<a name="l00412"></a>00412   }
<a name="l00413"></a>00413   <span class="keywordflow">if</span> (var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#b2eb094c29f2bdbce94d82a84b16e888" title="Returns true if the min and the max of the expression are equal.">Bound</a>() &amp;&amp; var-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#b84b786a2128f72fc720ae611e880499" title="This method returns the value of the variable.">Value</a>() == value) {
<a name="l00414"></a>00414     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#8f027a8b96688e6728e2e9ece1441a13" title="IntConst will create a constant expression.">MakeIntConst</a>(1LL);
<a name="l00415"></a>00415   }
<a name="l00416"></a>00416   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#6e563552c76ee13fc0695f32de57925f" title="status var caches:">equality_var_cst_cache_</a>-&gt;<a class="code" href="classoperations__research_1_1EqualityVarCstCache.html#7d0d15b76501325707ce954fdd2d4d42">VarEqCstStatus</a>(var, value);
<a name="l00417"></a>00417 }
<a name="l00418"></a>00418 
<a name="l00419"></a><a class="code" href="classoperations__research_1_1Solver.html#e8507eeae9b4e31c9ea10682047dc632">00419</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#e8507eeae9b4e31c9ea10682047dc632" title="b == (v == c)">Solver::MakeIsEqualCstCt</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> v, int64 c,
<a name="l00420"></a>00420                                      <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> b) {
<a name="l00421"></a>00421   CHECK_EQ(<span class="keyword">this</span>, v-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00422"></a>00422   CHECK_EQ(<span class="keyword">this</span>, b-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00423"></a>00423   <span class="keywordflow">if</span> (c == v-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>()) {
<a name="l00424"></a>00424     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#4d7f54846684a9e3418e3777909d8985" title="b == (v &amp;lt;= c)">MakeIsLessOrEqualCstCt</a>(v, c, b);
<a name="l00425"></a>00425   }
<a name="l00426"></a>00426   <span class="keywordflow">if</span> (c == v-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>()) {
<a name="l00427"></a>00427     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#7872982730b414c58c6ff1d8fdba5b6a" title="b == (v &amp;gt;= c)">MakeIsGreaterOrEqualCstCt</a>(v, c, b);
<a name="l00428"></a>00428   }
<a name="l00429"></a>00429   <span class="comment">// TODO(user) : what happens if the constraint is not posted?</span>
<a name="l00430"></a>00430   <span class="comment">// The cache becomes tainted.</span>
<a name="l00431"></a>00431   <a class="code" href="classoperations__research_1_1Solver.html#6e563552c76ee13fc0695f32de57925f" title="status var caches:">equality_var_cst_cache_</a>-&gt;<a class="code" href="classoperations__research_1_1VarCstCache.html#c5e4f85b6beca6ea62e587d7d0161d96">Insert</a>(v, c, b);
<a name="l00432"></a>00432   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1IsEqualCstCt.html" title="is_equal_cst Constraint">IsEqualCstCt</a>(<span class="keyword">this</span>, v, c, b));
<a name="l00433"></a>00433 }
<a name="l00434"></a>00434 
<a name="l00435"></a>00435 <span class="comment">// ----- is_diff_cst Constraint -----</span>
<a name="l00436"></a>00436 
<a name="l00437"></a><a class="code" href="classoperations__research_1_1IsDiffCstCt.html">00437</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1IsDiffCstCt.html" title="is_diff_cst Constraint">IsDiffCstCt</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a> {
<a name="l00438"></a>00438  <span class="keyword">public</span>:
<a name="l00439"></a><a class="code" href="classoperations__research_1_1IsDiffCstCt.html#b72fa1bfc6783565565b497c7baf32ce">00439</a>   <a class="code" href="classoperations__research_1_1IsDiffCstCt.html" title="is_diff_cst Constraint">IsDiffCstCt</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> v, int64 c, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> b)
<a name="l00440"></a>00440       : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s), var_(v), cst_(c), boolvar_(b), demon_(NULL) {}
<a name="l00441"></a><a class="code" href="classoperations__research_1_1IsDiffCstCt.html#367014f55cdf73f543251a6b889395bf">00441</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Post() {
<a name="l00442"></a>00442     demon_ = solver()-&gt;MakeConstraintInitialPropagateCallback(<span class="keyword">this</span>);
<a name="l00443"></a>00443     var_-&gt;WhenDomain(demon_);
<a name="l00444"></a>00444     boolvar_-&gt;WhenBound(demon_);
<a name="l00445"></a>00445   }
<a name="l00446"></a><a class="code" href="classoperations__research_1_1IsDiffCstCt.html#2f5b180b4c5645f4f4c84fec19a66a03">00446</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> InitialPropagate() {
<a name="l00447"></a>00447     <span class="keywordtype">bool</span> inhibit = var_-&gt;Bound();
<a name="l00448"></a>00448     int64 l = 1 - var_-&gt;Contains(cst_);
<a name="l00449"></a>00449     int64 u = inhibit ? l : 1;
<a name="l00450"></a>00450     boolvar_-&gt;SetRange(l, u);
<a name="l00451"></a>00451     <span class="keywordflow">if</span> (boolvar_-&gt;Bound()) {
<a name="l00452"></a>00452       inhibit = <span class="keyword">true</span>;
<a name="l00453"></a>00453       <span class="keywordflow">if</span> (boolvar_-&gt;Min() == 1) {
<a name="l00454"></a>00454         var_-&gt;RemoveValue(cst_);
<a name="l00455"></a>00455       } <span class="keywordflow">else</span> {
<a name="l00456"></a>00456         var_-&gt;SetValue(cst_);
<a name="l00457"></a>00457       }
<a name="l00458"></a>00458     }
<a name="l00459"></a>00459     <span class="keywordflow">if</span> (inhibit) {
<a name="l00460"></a>00460       demon_-&gt;inhibit(solver());
<a name="l00461"></a>00461     }
<a name="l00462"></a>00462   }
<a name="l00463"></a><a class="code" href="classoperations__research_1_1IsDiffCstCt.html#e05f5c6a054bec51bdef8c3c255970f4">00463</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Solver.html#a7a09bf2f27ccbdc1d1d386bd94e142a" title="misc debug string.">DebugString</a>()<span class="keyword"> const </span>{
<a name="l00464"></a>00464     <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"IsDiffCstCt(%s, %"</span> GG_LL_FORMAT <span class="stringliteral">"d, %s)"</span>,
<a name="l00465"></a>00465                         var_-&gt;DebugString().c_str(),
<a name="l00466"></a>00466                         cst_,
<a name="l00467"></a>00467                         boolvar_-&gt;DebugString().c_str());
<a name="l00468"></a>00468   }
<a name="l00469"></a>00469  <span class="keyword">private</span>:
<a name="l00470"></a><a class="code" href="classoperations__research_1_1IsDiffCstCt.html#28b1f995e7d9fe61b64857f7d5f3b390">00470</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var_;
<a name="l00471"></a><a class="code" href="classoperations__research_1_1IsDiffCstCt.html#0423d3903eaeef0188eb9c4bf4bd82ba">00471</a>   int64 cst_;
<a name="l00472"></a><a class="code" href="classoperations__research_1_1IsDiffCstCt.html#edb365624340049ffa62a377078145b5">00472</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> boolvar_;
<a name="l00473"></a><a class="code" href="classoperations__research_1_1IsDiffCstCt.html#d69b9191ef69ab22f74bb545f1a97684">00473</a>   <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* demon_;
<a name="l00474"></a>00474 };
<a name="l00475"></a>00475 
<a name="l00476"></a>00476 <span class="comment">// ---------- UnequalityVarCstCache ----------</span>
<a name="l00477"></a>00477 
<a name="l00478"></a><a class="code" href="classoperations__research_1_1UnequalityVarCstCache.html">00478</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1UnequalityVarCstCache.html" title="UnequalityVarCstCache.">UnequalityVarCstCache</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1VarCstCache.html" title="VarCstCache.">VarCstCache</a> {
<a name="l00479"></a>00479  <span class="keyword">public</span>:
<a name="l00480"></a><a class="code" href="classoperations__research_1_1UnequalityVarCstCache.html#d9408ffcc8aef239a58f2bd3e0a24c58">00480</a>   <span class="keyword">explicit</span> <a class="code" href="classoperations__research_1_1UnequalityVarCstCache.html" title="UnequalityVarCstCache.">UnequalityVarCstCache</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s) : <a class="code" href="classoperations__research_1_1VarCstCache.html" title="VarCstCache.">VarCstCache</a>(s) {}
<a name="l00481"></a><a class="code" href="classoperations__research_1_1UnequalityVarCstCache.html#c284e193f975be13b15ff7b8817963a8">00481</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1UnequalityVarCstCache.html" title="UnequalityVarCstCache.">UnequalityVarCstCache</a>() {}
<a name="l00482"></a>00482 
<a name="l00483"></a><a class="code" href="classoperations__research_1_1UnequalityVarCstCache.html#96aab872bf9e0ac0c2072e9c486c8ac0">00483</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* VarNonEqCstStatus(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var, int64 value) {
<a name="l00484"></a>00484     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* boolvar = Find(var, value);
<a name="l00485"></a>00485     <span class="keywordflow">if</span> (!boolvar) {
<a name="l00486"></a>00486       boolvar = solver()-&gt;MakeBoolVar(StringPrintf(<span class="stringliteral">"StatusVar&lt;%s == %"</span>
<a name="l00487"></a>00487                                                    GG_LL_FORMAT <span class="stringliteral">"d&gt;"</span>,
<a name="l00488"></a>00488                                                    var-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#89b827a71613c6c120d5ac326202df7e" title="Naming.">name</a>().c_str(),
<a name="l00489"></a>00489                                                    value));
<a name="l00490"></a>00490       <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <span class="keyword">const</span> maintain =
<a name="l00491"></a>00491           solver()-&gt;RevAlloc(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1IsDiffCstCt.html" title="is_diff_cst Constraint">IsDiffCstCt</a>(solver(), var, value, boolvar));
<a name="l00492"></a>00492       solver()-&gt;AddConstraint(maintain);
<a name="l00493"></a>00493       UnsafeInsert(var, value, boolvar);
<a name="l00494"></a>00494     }
<a name="l00495"></a>00495     <span class="keywordflow">return</span> boolvar;
<a name="l00496"></a>00496   }
<a name="l00497"></a>00497 };
<a name="l00498"></a>00498 
<a name="l00499"></a><a class="code" href="classoperations__research_1_1Solver.html#693c653ae6859f8c4b4a0914653f0f94">00499</a> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <a class="code" href="classoperations__research_1_1Solver.html#693c653ae6859f8c4b4a0914653f0f94" title="status var of (v != c)">Solver::MakeIsDifferentCstVar</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var, int64 value) {
<a name="l00500"></a>00500   <span class="keywordflow">if</span> (value == var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>()) {
<a name="l00501"></a>00501     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#cad86ce595131bc05185fcce0f5d7ec7" title="status var of (v &amp;gt;= c)">MakeIsGreaterOrEqualCstVar</a>(var, value + 1);
<a name="l00502"></a>00502   }
<a name="l00503"></a>00503   <span class="keywordflow">if</span> (value == var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>()) {
<a name="l00504"></a>00504     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#3714b115968705cdf789d984c9fb1bea" title="status var of (v &amp;lt;= c)">MakeIsLessOrEqualCstVar</a>(var, value - 1);
<a name="l00505"></a>00505   }
<a name="l00506"></a>00506   <span class="keywordflow">if</span> (!var-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#6e297b67956343bed8a4aece6a2c88a3" title="This method returns wether the value &amp;#39;v&amp;#39; is in the domain of the variable...">Contains</a>(value)) {
<a name="l00507"></a>00507     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#8f027a8b96688e6728e2e9ece1441a13" title="IntConst will create a constant expression.">MakeIntConst</a>(1LL);
<a name="l00508"></a>00508   }
<a name="l00509"></a>00509   <span class="keywordflow">if</span> (var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#b2eb094c29f2bdbce94d82a84b16e888" title="Returns true if the min and the max of the expression are equal.">Bound</a>() &amp;&amp; var-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#b84b786a2128f72fc720ae611e880499" title="This method returns the value of the variable.">Value</a>() == value) {
<a name="l00510"></a>00510     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#8f027a8b96688e6728e2e9ece1441a13" title="IntConst will create a constant expression.">MakeIntConst</a>(0LL);
<a name="l00511"></a>00511   }
<a name="l00512"></a>00512   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#9119fb5df045f9cbdee9ab4fae21b8d5">unequality_var_cst_cache_</a>-&gt;<a class="code" href="classoperations__research_1_1UnequalityVarCstCache.html#96aab872bf9e0ac0c2072e9c486c8ac0">VarNonEqCstStatus</a>(var, value);
<a name="l00513"></a>00513 }
<a name="l00514"></a>00514 
<a name="l00515"></a><a class="code" href="classoperations__research_1_1Solver.html#d50430a16c38314389dcac73fdbc0331">00515</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#d50430a16c38314389dcac73fdbc0331" title="b == (v != c)">Solver::MakeIsDifferentCstCt</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> v, int64 c,
<a name="l00516"></a>00516                                          <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> b) {
<a name="l00517"></a>00517   CHECK_EQ(<span class="keyword">this</span>, v-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00518"></a>00518   CHECK_EQ(<span class="keyword">this</span>, b-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00519"></a>00519   <span class="keywordflow">if</span> (c == v-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>()) {
<a name="l00520"></a>00520     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#7872982730b414c58c6ff1d8fdba5b6a" title="b == (v &amp;gt;= c)">MakeIsGreaterOrEqualCstCt</a>(v, c + 1, b);
<a name="l00521"></a>00521   }
<a name="l00522"></a>00522   <span class="keywordflow">if</span> (c == v-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>()) {
<a name="l00523"></a>00523     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#4d7f54846684a9e3418e3777909d8985" title="b == (v &amp;lt;= c)">MakeIsLessOrEqualCstCt</a>(v, c - 1, b);
<a name="l00524"></a>00524   }
<a name="l00525"></a>00525   <a class="code" href="classoperations__research_1_1Solver.html#9119fb5df045f9cbdee9ab4fae21b8d5">unequality_var_cst_cache_</a>-&gt;<a class="code" href="classoperations__research_1_1VarCstCache.html#c5e4f85b6beca6ea62e587d7d0161d96">Insert</a>(v, c, b);
<a name="l00526"></a>00526   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1IsDiffCstCt.html" title="is_diff_cst Constraint">IsDiffCstCt</a>(<span class="keyword">this</span>, v, c, b));
<a name="l00527"></a>00527 }
<a name="l00528"></a>00528 
<a name="l00529"></a>00529 <span class="comment">// ----- is_greater_equal_cst Constraint -----</span>
<a name="l00530"></a>00530 
<a name="l00531"></a><a class="code" href="classoperations__research_1_1IsGreaterEqualCstCt.html">00531</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1IsGreaterEqualCstCt.html" title="is_greater_equal_cst Constraint">IsGreaterEqualCstCt</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a> {
<a name="l00532"></a>00532  <span class="keyword">public</span>:
<a name="l00533"></a><a class="code" href="classoperations__research_1_1IsGreaterEqualCstCt.html#797b37b7fb155702bc49bfb8dbc90bd4">00533</a>   <a class="code" href="classoperations__research_1_1IsGreaterEqualCstCt.html" title="is_greater_equal_cst Constraint">IsGreaterEqualCstCt</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> v, int64 c,
<a name="l00534"></a>00534                       <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> b)
<a name="l00535"></a>00535       : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s), var_(v), cst_(c), boolvar_(b), demon_(NULL) {}
<a name="l00536"></a><a class="code" href="classoperations__research_1_1IsGreaterEqualCstCt.html#adda9b5bcb82c58f526ef39403f447a3">00536</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Post() {
<a name="l00537"></a>00537     demon_ = solver()-&gt;MakeConstraintInitialPropagateCallback(<span class="keyword">this</span>);
<a name="l00538"></a>00538     var_-&gt;WhenRange(demon_);
<a name="l00539"></a>00539     boolvar_-&gt;WhenBound(demon_);
<a name="l00540"></a>00540   }
<a name="l00541"></a><a class="code" href="classoperations__research_1_1IsGreaterEqualCstCt.html#96a8cc713a93b1825c162640b6a4c298">00541</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> InitialPropagate() {
<a name="l00542"></a>00542     <span class="keywordtype">bool</span> inhibit = <span class="keyword">false</span>;
<a name="l00543"></a>00543     int64 u = var_-&gt;Max() &gt;= cst_;
<a name="l00544"></a>00544     int64 l = var_-&gt;Min() &gt;= cst_;
<a name="l00545"></a>00545     boolvar_-&gt;SetRange(l, u);
<a name="l00546"></a>00546     <span class="keywordflow">if</span> (boolvar_-&gt;Bound()) {
<a name="l00547"></a>00547       inhibit = <span class="keyword">true</span>;
<a name="l00548"></a>00548       <span class="keywordflow">if</span> (boolvar_-&gt;Min() == 0) {
<a name="l00549"></a>00549         var_-&gt;SetMax(cst_ - 1);
<a name="l00550"></a>00550       } <span class="keywordflow">else</span> {
<a name="l00551"></a>00551         var_-&gt;SetMin(cst_);
<a name="l00552"></a>00552       }
<a name="l00553"></a>00553     }
<a name="l00554"></a>00554     <span class="keywordflow">if</span> (inhibit) {
<a name="l00555"></a>00555       demon_-&gt;inhibit(solver());
<a name="l00556"></a>00556     }
<a name="l00557"></a>00557   }
<a name="l00558"></a><a class="code" href="classoperations__research_1_1IsGreaterEqualCstCt.html#29f0887707a9bbe548d0948290e55f21">00558</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Solver.html#a7a09bf2f27ccbdc1d1d386bd94e142a" title="misc debug string.">DebugString</a>()<span class="keyword"> const </span>{
<a name="l00559"></a>00559     <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"IsGreaterEqualCstCt(%s, %"</span> GG_LL_FORMAT <span class="stringliteral">"d, %s)"</span>,
<a name="l00560"></a>00560                         var_-&gt;DebugString().c_str(),
<a name="l00561"></a>00561                         cst_,
<a name="l00562"></a>00562                         boolvar_-&gt;DebugString().c_str());
<a name="l00563"></a>00563   }
<a name="l00564"></a>00564  <span class="keyword">private</span>:
<a name="l00565"></a><a class="code" href="classoperations__research_1_1IsGreaterEqualCstCt.html#808ff75ea2919c95fd8660d19ffcef97">00565</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var_;
<a name="l00566"></a><a class="code" href="classoperations__research_1_1IsGreaterEqualCstCt.html#a226f809f02dc517069a066a4e8637fd">00566</a>   int64 cst_;
<a name="l00567"></a><a class="code" href="classoperations__research_1_1IsGreaterEqualCstCt.html#8058d86107c07791751fa30b55d06353">00567</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> boolvar_;
<a name="l00568"></a><a class="code" href="classoperations__research_1_1IsGreaterEqualCstCt.html#c0438bdf836e1e66524a638e324862de">00568</a>   <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* demon_;
<a name="l00569"></a>00569 };
<a name="l00570"></a>00570 
<a name="l00571"></a>00571 <span class="comment">// ---------- GreaterEqualCstCache ----------</span>
<a name="l00572"></a>00572 
<a name="l00573"></a><a class="code" href="classoperations__research_1_1GreaterEqualCstCache.html">00573</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1GreaterEqualCstCache.html" title="GreaterEqualCstCache.">GreaterEqualCstCache</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1VarCstCache.html" title="VarCstCache.">VarCstCache</a> {
<a name="l00574"></a>00574  <span class="keyword">public</span>:
<a name="l00575"></a><a class="code" href="classoperations__research_1_1GreaterEqualCstCache.html#3e1424a7c4aa3486cbcd9f8cb7e34b2e">00575</a>   <span class="keyword">explicit</span> <a class="code" href="classoperations__research_1_1GreaterEqualCstCache.html" title="GreaterEqualCstCache.">GreaterEqualCstCache</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s) : <a class="code" href="classoperations__research_1_1VarCstCache.html" title="VarCstCache.">VarCstCache</a>(s) {}
<a name="l00576"></a><a class="code" href="classoperations__research_1_1GreaterEqualCstCache.html#710039258f5e7112b4df7487e62b402b">00576</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1GreaterEqualCstCache.html" title="GreaterEqualCstCache.">GreaterEqualCstCache</a>() {}
<a name="l00577"></a>00577 
<a name="l00578"></a><a class="code" href="classoperations__research_1_1GreaterEqualCstCache.html#cf19b66c7e41919a2cf95b105b240d02">00578</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* VarGreaterEqCstStatus(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var, int64 value) {
<a name="l00579"></a>00579     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* boolvar = Find(var, value);
<a name="l00580"></a>00580     <span class="keywordflow">if</span> (!boolvar) {
<a name="l00581"></a>00581       boolvar = solver()-&gt;MakeBoolVar(
<a name="l00582"></a>00582           StringPrintf(<span class="stringliteral">"StatusVar&lt;%s &gt;= %"</span> GG_LL_FORMAT <span class="stringliteral">"d&gt;"</span>,
<a name="l00583"></a>00583                        var-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#89b827a71613c6c120d5ac326202df7e" title="Naming.">name</a>().c_str(), value));
<a name="l00584"></a>00584       <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <span class="keyword">const</span> maintain =
<a name="l00585"></a>00585           solver()-&gt;RevAlloc(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1IsGreaterEqualCstCt.html" title="is_greater_equal_cst Constraint">IsGreaterEqualCstCt</a>(solver(),
<a name="l00586"></a>00586                                                      var,
<a name="l00587"></a>00587                                                      value,
<a name="l00588"></a>00588                                                      boolvar));
<a name="l00589"></a>00589       solver()-&gt;AddConstraint(maintain);
<a name="l00590"></a>00590       UnsafeInsert(var, value, boolvar);
<a name="l00591"></a>00591     }
<a name="l00592"></a>00592     <span class="keywordflow">return</span> boolvar;
<a name="l00593"></a>00593   }
<a name="l00594"></a>00594 };
<a name="l00595"></a>00595 
<a name="l00596"></a><a class="code" href="classoperations__research_1_1Solver.html#cad86ce595131bc05185fcce0f5d7ec7">00596</a> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <a class="code" href="classoperations__research_1_1Solver.html#cad86ce595131bc05185fcce0f5d7ec7" title="status var of (v &amp;gt;= c)">Solver::MakeIsGreaterOrEqualCstVar</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var, int64 value) {
<a name="l00597"></a>00597   <span class="keywordflow">if</span> (var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>() &gt;= value) {
<a name="l00598"></a>00598     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#8f027a8b96688e6728e2e9ece1441a13" title="IntConst will create a constant expression.">MakeIntConst</a>(1LL);
<a name="l00599"></a>00599   }
<a name="l00600"></a>00600   <span class="keywordflow">if</span> (var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>() &lt; value) {
<a name="l00601"></a>00601     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#8f027a8b96688e6728e2e9ece1441a13" title="IntConst will create a constant expression.">MakeIntConst</a>(0LL);
<a name="l00602"></a>00602   }
<a name="l00603"></a>00603   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#5752df950900942bee5a303d21a2ce5d">greater_equal_var_cst_cache_</a>-&gt;<a class="code" href="classoperations__research_1_1GreaterEqualCstCache.html#cf19b66c7e41919a2cf95b105b240d02">VarGreaterEqCstStatus</a>(var, value);
<a name="l00604"></a>00604 }
<a name="l00605"></a>00605 
<a name="l00606"></a><a class="code" href="classoperations__research_1_1Solver.html#5d3098fa3acd1a3b24a7a083447ad61f">00606</a> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <a class="code" href="classoperations__research_1_1Solver.html#5d3098fa3acd1a3b24a7a083447ad61f" title="status var of (v &amp;gt; c)">Solver::MakeIsGreaterCstVar</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var, int64 value) {
<a name="l00607"></a>00607   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#5752df950900942bee5a303d21a2ce5d">greater_equal_var_cst_cache_</a>-&gt;<a class="code" href="classoperations__research_1_1GreaterEqualCstCache.html#cf19b66c7e41919a2cf95b105b240d02">VarGreaterEqCstStatus</a>(var, value + 1);
<a name="l00608"></a>00608 }
<a name="l00609"></a>00609 
<a name="l00610"></a><a class="code" href="classoperations__research_1_1Solver.html#7872982730b414c58c6ff1d8fdba5b6a">00610</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#7872982730b414c58c6ff1d8fdba5b6a" title="b == (v &amp;gt;= c)">Solver::MakeIsGreaterOrEqualCstCt</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> v, int64 c,
<a name="l00611"></a>00611                                               <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> b) {
<a name="l00612"></a>00612   CHECK_EQ(<span class="keyword">this</span>, v-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00613"></a>00613   CHECK_EQ(<span class="keyword">this</span>, b-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00614"></a>00614   <a class="code" href="classoperations__research_1_1Solver.html#5752df950900942bee5a303d21a2ce5d">greater_equal_var_cst_cache_</a>-&gt;<a class="code" href="classoperations__research_1_1VarCstCache.html#c5e4f85b6beca6ea62e587d7d0161d96">Insert</a>(v, c, b);
<a name="l00615"></a>00615   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1IsGreaterEqualCstCt.html" title="is_greater_equal_cst Constraint">IsGreaterEqualCstCt</a>(<span class="keyword">this</span>, v, c, b));
<a name="l00616"></a>00616 }
<a name="l00617"></a>00617 
<a name="l00618"></a><a class="code" href="classoperations__research_1_1Solver.html#63f09d2ea9f5654db4d032704c9b99c2">00618</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#63f09d2ea9f5654db4d032704c9b99c2" title="b == (v &amp;gt; c)">Solver::MakeIsGreaterCstCt</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> v, int64 c,
<a name="l00619"></a>00619                                        <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> b) {
<a name="l00620"></a>00620   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#7872982730b414c58c6ff1d8fdba5b6a" title="b == (v &amp;gt;= c)">MakeIsGreaterOrEqualCstCt</a>(v, c + 1, b);
<a name="l00621"></a>00621 }
<a name="l00622"></a>00622 
<a name="l00623"></a>00623 <span class="comment">// ----- is_lesser_equal_cst Constraint -----</span>
<a name="l00624"></a>00624 
<a name="l00625"></a><a class="code" href="classoperations__research_1_1IsLessEqualCstCt.html">00625</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1IsLessEqualCstCt.html" title="is_lesser_equal_cst Constraint">IsLessEqualCstCt</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a> {
<a name="l00626"></a>00626  <span class="keyword">public</span>:
<a name="l00627"></a><a class="code" href="classoperations__research_1_1IsLessEqualCstCt.html#63aaeea9e05064b2727e9d2fa3cdf597">00627</a>   <a class="code" href="classoperations__research_1_1IsLessEqualCstCt.html" title="is_lesser_equal_cst Constraint">IsLessEqualCstCt</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> v, int64 c, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> b)
<a name="l00628"></a>00628       : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s), var_(v), cst_(c), boolvar_(b), demon_(NULL) {}
<a name="l00629"></a><a class="code" href="classoperations__research_1_1IsLessEqualCstCt.html#de483ee3f58e1e4aa50577105ed539ea">00629</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Post() {
<a name="l00630"></a>00630     demon_ = solver()-&gt;MakeConstraintInitialPropagateCallback(<span class="keyword">this</span>);
<a name="l00631"></a>00631     var_-&gt;WhenRange(demon_);
<a name="l00632"></a>00632     boolvar_-&gt;WhenBound(demon_);
<a name="l00633"></a>00633   }
<a name="l00634"></a><a class="code" href="classoperations__research_1_1IsLessEqualCstCt.html#80ede4cb576cc0fa564a10a05e759c85">00634</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> InitialPropagate() {
<a name="l00635"></a>00635     <span class="keywordtype">bool</span> inhibit = <span class="keyword">false</span>;
<a name="l00636"></a>00636     int64 u = var_-&gt;Min() &lt;= cst_;
<a name="l00637"></a>00637     int64 l = var_-&gt;Max() &lt;= cst_;
<a name="l00638"></a>00638     boolvar_-&gt;SetRange(l, u);
<a name="l00639"></a>00639     <span class="keywordflow">if</span> (boolvar_-&gt;Bound()) {
<a name="l00640"></a>00640       inhibit = <span class="keyword">true</span>;
<a name="l00641"></a>00641       <span class="keywordflow">if</span> (boolvar_-&gt;Min() == 0) {
<a name="l00642"></a>00642         var_-&gt;SetMin(cst_ + 1);
<a name="l00643"></a>00643       } <span class="keywordflow">else</span> {
<a name="l00644"></a>00644         var_-&gt;SetMax(cst_);
<a name="l00645"></a>00645       }
<a name="l00646"></a>00646     }
<a name="l00647"></a>00647     <span class="keywordflow">if</span> (inhibit) {
<a name="l00648"></a>00648       demon_-&gt;inhibit(solver());
<a name="l00649"></a>00649     }
<a name="l00650"></a>00650   }
<a name="l00651"></a><a class="code" href="classoperations__research_1_1IsLessEqualCstCt.html#e3f1d5e64463f7a4b0d39a42b0828e9c">00651</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Solver.html#a7a09bf2f27ccbdc1d1d386bd94e142a" title="misc debug string.">DebugString</a>()<span class="keyword"> const </span>{
<a name="l00652"></a>00652     <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"IsLessEqualCstCt(%s, %"</span> GG_LL_FORMAT <span class="stringliteral">"d, %s)"</span>,
<a name="l00653"></a>00653                         var_-&gt;DebugString().c_str(),
<a name="l00654"></a>00654                         cst_,
<a name="l00655"></a>00655                         boolvar_-&gt;DebugString().c_str());
<a name="l00656"></a>00656   }
<a name="l00657"></a>00657  <span class="keyword">private</span>:
<a name="l00658"></a><a class="code" href="classoperations__research_1_1IsLessEqualCstCt.html#bff05f84aa26fb3136f12a2e47136c60">00658</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var_;
<a name="l00659"></a><a class="code" href="classoperations__research_1_1IsLessEqualCstCt.html#814b1f7cb03ff9b428934d30ae8251f4">00659</a>   int64 cst_;
<a name="l00660"></a><a class="code" href="classoperations__research_1_1IsLessEqualCstCt.html#2a200e2848ad261a304052e17e7d5f8c">00660</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> boolvar_;
<a name="l00661"></a><a class="code" href="classoperations__research_1_1IsLessEqualCstCt.html#f4dbfe5232b07a2cab33d66ed3933d54">00661</a>   <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* demon_;
<a name="l00662"></a>00662 };
<a name="l00663"></a>00663 
<a name="l00664"></a>00664 <span class="comment">// ---------- LessEqualCstCache ----------</span>
<a name="l00665"></a>00665 
<a name="l00666"></a><a class="code" href="classoperations__research_1_1LessEqualCstCache.html">00666</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1LessEqualCstCache.html" title="LessEqualCstCache.">LessEqualCstCache</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1VarCstCache.html" title="VarCstCache.">VarCstCache</a> {
<a name="l00667"></a>00667  <span class="keyword">public</span>:
<a name="l00668"></a><a class="code" href="classoperations__research_1_1LessEqualCstCache.html#e8c690f8464bcb1aef1a8d1e8b3a12fa">00668</a>   <span class="keyword">explicit</span> <a class="code" href="classoperations__research_1_1LessEqualCstCache.html" title="LessEqualCstCache.">LessEqualCstCache</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s) : <a class="code" href="classoperations__research_1_1VarCstCache.html" title="VarCstCache.">VarCstCache</a>(s) {}
<a name="l00669"></a><a class="code" href="classoperations__research_1_1LessEqualCstCache.html#dab8600aa4ccfbcf61401a42b0ca8d2f">00669</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1LessEqualCstCache.html" title="LessEqualCstCache.">LessEqualCstCache</a>() {}
<a name="l00670"></a>00670 
<a name="l00671"></a><a class="code" href="classoperations__research_1_1LessEqualCstCache.html#2a8d1fce223154d30eb24809d65ae286">00671</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* VarLessEqCstStatus(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var, int64 value) {
<a name="l00672"></a>00672     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* boolvar = Find(var, value);
<a name="l00673"></a>00673     <span class="keywordflow">if</span> (!boolvar) {
<a name="l00674"></a>00674       boolvar = solver()-&gt;MakeBoolVar(
<a name="l00675"></a>00675           StringPrintf(<span class="stringliteral">"StatusVar&lt;%s &lt;= %"</span> GG_LL_FORMAT <span class="stringliteral">"d&gt;"</span>,
<a name="l00676"></a>00676                        var-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#89b827a71613c6c120d5ac326202df7e" title="Naming.">name</a>().c_str(), value));
<a name="l00677"></a>00677       <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <span class="keyword">const</span> maintain =
<a name="l00678"></a>00678           solver()-&gt;RevAlloc(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1IsLessEqualCstCt.html" title="is_lesser_equal_cst Constraint">IsLessEqualCstCt</a>(solver(),
<a name="l00679"></a>00679                                                   var,
<a name="l00680"></a>00680                                                   value,
<a name="l00681"></a>00681                                                   boolvar));
<a name="l00682"></a>00682       solver()-&gt;AddConstraint(maintain);
<a name="l00683"></a>00683       UnsafeInsert(var, value, boolvar);
<a name="l00684"></a>00684     }
<a name="l00685"></a>00685     <span class="keywordflow">return</span> boolvar;
<a name="l00686"></a>00686   }
<a name="l00687"></a>00687 };
<a name="l00688"></a>00688 
<a name="l00689"></a><a class="code" href="classoperations__research_1_1Solver.html#3714b115968705cdf789d984c9fb1bea">00689</a> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <a class="code" href="classoperations__research_1_1Solver.html#3714b115968705cdf789d984c9fb1bea" title="status var of (v &amp;lt;= c)">Solver::MakeIsLessOrEqualCstVar</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var, int64 value) {
<a name="l00690"></a>00690   <span class="keywordflow">if</span> (var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>() &lt;= value) {
<a name="l00691"></a>00691     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#8f027a8b96688e6728e2e9ece1441a13" title="IntConst will create a constant expression.">MakeIntConst</a>(1LL);
<a name="l00692"></a>00692   }
<a name="l00693"></a>00693   <span class="keywordflow">if</span> (var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>() &gt; value) {
<a name="l00694"></a>00694     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#8f027a8b96688e6728e2e9ece1441a13" title="IntConst will create a constant expression.">MakeIntConst</a>(0LL);
<a name="l00695"></a>00695   }
<a name="l00696"></a>00696   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#2e5169290e7812df5c7a0642564549ef">less_equal_var_cst_cache_</a>-&gt;<a class="code" href="classoperations__research_1_1LessEqualCstCache.html#2a8d1fce223154d30eb24809d65ae286">VarLessEqCstStatus</a>(var, value);
<a name="l00697"></a>00697 }
<a name="l00698"></a>00698 
<a name="l00699"></a><a class="code" href="classoperations__research_1_1Solver.html#627ce05f902b9c738974740714eab017">00699</a> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <a class="code" href="classoperations__research_1_1Solver.html#627ce05f902b9c738974740714eab017" title="status var of (v &amp;lt; c)">Solver::MakeIsLessCstVar</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var, int64 value) {
<a name="l00700"></a>00700   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#3714b115968705cdf789d984c9fb1bea" title="status var of (v &amp;lt;= c)">MakeIsLessOrEqualCstVar</a>(var, value - 1);
<a name="l00701"></a>00701 }
<a name="l00702"></a>00702 
<a name="l00703"></a><a class="code" href="classoperations__research_1_1Solver.html#4d7f54846684a9e3418e3777909d8985">00703</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#4d7f54846684a9e3418e3777909d8985" title="b == (v &amp;lt;= c)">Solver::MakeIsLessOrEqualCstCt</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> v, int64 c,
<a name="l00704"></a>00704                                            <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> b) {
<a name="l00705"></a>00705   CHECK_EQ(<span class="keyword">this</span>, v-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00706"></a>00706   CHECK_EQ(<span class="keyword">this</span>, b-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00707"></a>00707   <a class="code" href="classoperations__research_1_1Solver.html#2e5169290e7812df5c7a0642564549ef">less_equal_var_cst_cache_</a>-&gt;<a class="code" href="classoperations__research_1_1VarCstCache.html#c5e4f85b6beca6ea62e587d7d0161d96">Insert</a>(v, c, b);
<a name="l00708"></a>00708   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1IsLessEqualCstCt.html" title="is_lesser_equal_cst Constraint">IsLessEqualCstCt</a>(<span class="keyword">this</span>, v, c, b));
<a name="l00709"></a>00709 }
<a name="l00710"></a>00710 
<a name="l00711"></a><a class="code" href="classoperations__research_1_1Solver.html#9d57f5aeb73f0923d5f27bb6648b424d">00711</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#9d57f5aeb73f0923d5f27bb6648b424d" title="b == (v &amp;lt; c)">Solver::MakeIsLessCstCt</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> v, int64 c,
<a name="l00712"></a>00712                                     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> b) {
<a name="l00713"></a>00713   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#4d7f54846684a9e3418e3777909d8985" title="b == (v &amp;lt;= c)">MakeIsLessOrEqualCstCt</a>(v, c - 1, b);
<a name="l00714"></a>00714 }
<a name="l00715"></a>00715 
<a name="l00716"></a>00716 <span class="comment">// ----- BetweenCt -----</span>
<a name="l00717"></a>00717 
<a name="l00718"></a><a class="code" href="classoperations__research_1_1BetweenCt.html">00718</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1BetweenCt.html" title="BetweenCt.">BetweenCt</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a> {
<a name="l00719"></a>00719  <span class="keyword">public</span>:
<a name="l00720"></a><a class="code" href="classoperations__research_1_1BetweenCt.html#583530e9bde99a02bc2d00040ff9b494">00720</a>   <a class="code" href="classoperations__research_1_1BetweenCt.html" title="BetweenCt.">BetweenCt</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> v, int64 l, int64 u)
<a name="l00721"></a>00721       : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s), var_(v), min_(l), max_(u) {}
<a name="l00722"></a>00722 
<a name="l00723"></a><a class="code" href="classoperations__research_1_1BetweenCt.html#9cb0fbd8c1180e33d756f67f9ffcd0dd">00723</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Post() {}
<a name="l00724"></a>00724 
<a name="l00725"></a><a class="code" href="classoperations__research_1_1BetweenCt.html#92867c58b36a1a9ff1ca52a2778552c1">00725</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> InitialPropagate() {
<a name="l00726"></a>00726     var_-&gt;SetRange(min_, max_);
<a name="l00727"></a>00727   }
<a name="l00728"></a>00728 
<a name="l00729"></a><a class="code" href="classoperations__research_1_1BetweenCt.html#571a35968a464f845b8afc2082954353">00729</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Solver.html#a7a09bf2f27ccbdc1d1d386bd94e142a" title="misc debug string.">DebugString</a>()<span class="keyword"> const </span>{
<a name="l00730"></a>00730     <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"BetweenCt(%s, %"</span> GG_LL_FORMAT <span class="stringliteral">"d, %"</span> GG_LL_FORMAT <span class="stringliteral">"d)"</span>,
<a name="l00731"></a>00731                         var_-&gt;DebugString().c_str(), min_, max_);
<a name="l00732"></a>00732   }
<a name="l00733"></a>00733  <span class="keyword">private</span>:
<a name="l00734"></a><a class="code" href="classoperations__research_1_1BetweenCt.html#18f552c65122932676d5a5b2bfccf1a9">00734</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var_;
<a name="l00735"></a><a class="code" href="classoperations__research_1_1BetweenCt.html#50bac067bb7159d92acf470f65ac607d">00735</a>   int64 min_;
<a name="l00736"></a><a class="code" href="classoperations__research_1_1BetweenCt.html#c680a9de81959539e71cff51c954b76c">00736</a>   int64 max_;
<a name="l00737"></a>00737 };
<a name="l00738"></a>00738 
<a name="l00739"></a><a class="code" href="classoperations__research_1_1Solver.html#a0ad8b1ab316563e36ac8c8fa6b46d65">00739</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#a0ad8b1ab316563e36ac8c8fa6b46d65" title="(l &amp;lt;= b &amp;lt;= u)">Solver::MakeBetweenCt</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> v, int64 l, int64 u) {
<a name="l00740"></a>00740   CHECK_EQ(<span class="keyword">this</span>, v-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00741"></a>00741   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1BetweenCt.html" title="BetweenCt.">BetweenCt</a>(<span class="keyword">this</span>, v, l, u));
<a name="l00742"></a>00742 }
<a name="l00743"></a>00743 
<a name="l00744"></a>00744 <span class="comment">// ----- is_between_cst Constraint -----</span>
<a name="l00745"></a>00745 
<a name="l00746"></a><a class="code" href="classoperations__research_1_1IsBetweenCt.html">00746</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1IsBetweenCt.html" title="is_between_cst Constraint">IsBetweenCt</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a> {
<a name="l00747"></a>00747  <span class="keyword">public</span>:
<a name="l00748"></a><a class="code" href="classoperations__research_1_1IsBetweenCt.html#719de35abccb6c14339dab434ab82641">00748</a>   <a class="code" href="classoperations__research_1_1IsBetweenCt.html" title="is_between_cst Constraint">IsBetweenCt</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> v, int64 l, int64 u,
<a name="l00749"></a>00749               <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> b)
<a name="l00750"></a>00750       : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s), var_(v), min_(l), max_(u), boolvar_(b), demon_(NULL) {}
<a name="l00751"></a><a class="code" href="classoperations__research_1_1IsBetweenCt.html#455a5c1782e36c563e2226ca10582e79">00751</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Post() {
<a name="l00752"></a>00752     demon_ = solver()-&gt;MakeConstraintInitialPropagateCallback(<span class="keyword">this</span>);
<a name="l00753"></a>00753     var_-&gt;WhenRange(demon_);
<a name="l00754"></a>00754     boolvar_-&gt;WhenBound(demon_);
<a name="l00755"></a>00755   }
<a name="l00756"></a><a class="code" href="classoperations__research_1_1IsBetweenCt.html#d51b38a2849cc66d46386325448e397a">00756</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> InitialPropagate() {
<a name="l00757"></a>00757     <span class="keywordtype">bool</span> inhibit = <span class="keyword">false</span>;
<a name="l00758"></a>00758     int64 u = 1 - (var_-&gt;Min() &gt; max_ || var_-&gt;Max() &lt; min_);
<a name="l00759"></a>00759     int64 l = var_-&gt;Max() &lt;= max_ &amp;&amp; var_-&gt;Min() &gt;= min_;
<a name="l00760"></a>00760     boolvar_-&gt;SetRange(l, u);
<a name="l00761"></a>00761     <span class="keywordflow">if</span> (boolvar_-&gt;Bound()) {
<a name="l00762"></a>00762       inhibit = <span class="keyword">true</span>;
<a name="l00763"></a>00763       <span class="keywordflow">if</span> (boolvar_-&gt;Min() == 0) {
<a name="l00764"></a>00764         var_-&gt;RemoveInterval(min_, max_);
<a name="l00765"></a>00765       } <span class="keywordflow">else</span> {
<a name="l00766"></a>00766         var_-&gt;SetRange(min_, max_);
<a name="l00767"></a>00767       }
<a name="l00768"></a>00768     }
<a name="l00769"></a>00769     <span class="keywordflow">if</span> (inhibit) {
<a name="l00770"></a>00770       demon_-&gt;inhibit(solver());
<a name="l00771"></a>00771     }
<a name="l00772"></a>00772   }
<a name="l00773"></a><a class="code" href="classoperations__research_1_1IsBetweenCt.html#a5ff7bbbe287f1d941547f8f1a4a428b">00773</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Solver.html#a7a09bf2f27ccbdc1d1d386bd94e142a" title="misc debug string.">DebugString</a>()<span class="keyword"> const </span>{
<a name="l00774"></a>00774     <span class="keywordflow">return</span> StringPrintf(
<a name="l00775"></a>00775         <span class="stringliteral">"IsBetweenCt(%s, %"</span> GG_LL_FORMAT <span class="stringliteral">"d, %"</span> GG_LL_FORMAT <span class="stringliteral">"d, %s)"</span>,
<a name="l00776"></a>00776         var_-&gt;DebugString().c_str(), min_, max_,
<a name="l00777"></a>00777         boolvar_-&gt;DebugString().c_str());
<a name="l00778"></a>00778   }
<a name="l00779"></a>00779  <span class="keyword">private</span>:
<a name="l00780"></a><a class="code" href="classoperations__research_1_1IsBetweenCt.html#6c1fe776891200fe0ad939b9e92f2990">00780</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var_;
<a name="l00781"></a><a class="code" href="classoperations__research_1_1IsBetweenCt.html#e49f9cbf59314395100d119780c1d1fd">00781</a>   int64 min_;
<a name="l00782"></a><a class="code" href="classoperations__research_1_1IsBetweenCt.html#887065ebc63ddf52c1f0ef162104403a">00782</a>   int64 max_;
<a name="l00783"></a><a class="code" href="classoperations__research_1_1IsBetweenCt.html#d67c3e36a57fd2fe01e44ab06dfe5ff8">00783</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> boolvar_;
<a name="l00784"></a><a class="code" href="classoperations__research_1_1IsBetweenCt.html#ddcd5ee7010006dd20815a333965761b">00784</a>   <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* demon_;
<a name="l00785"></a>00785 };
<a name="l00786"></a>00786 
<a name="l00787"></a><a class="code" href="classoperations__research_1_1Solver.html#941a2119fa78dcf2a33ce541fd6e966b">00787</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#941a2119fa78dcf2a33ce541fd6e966b" title="b == (l &amp;lt;= v &amp;lt;= u)">Solver::MakeIsBetweenCt</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> v,
<a name="l00788"></a>00788                                     int64 l,
<a name="l00789"></a>00789                                     int64 u,
<a name="l00790"></a>00790                                     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> b) {
<a name="l00791"></a>00791   CHECK_EQ(<span class="keyword">this</span>, v-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00792"></a>00792   CHECK_EQ(<span class="keyword">this</span>, b-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00793"></a>00793   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1IsBetweenCt.html" title="is_between_cst Constraint">IsBetweenCt</a>(<span class="keyword">this</span>, v, l, u, b));
<a name="l00794"></a>00794 }
<a name="l00795"></a>00795 
<a name="l00796"></a>00796 <span class="comment">// ---------- NewUniqueSortedArray ----------</span>
<a name="l00797"></a>00797 
<a name="l00798"></a><a class="code" href="namespaceoperations__research.html#a5a3cbf4e815403325eb2e3a92c321f6">00798</a> int64* <a class="code" href="namespaceoperations__research.html#a5a3cbf4e815403325eb2e3a92c321f6" title="NewUniqueSortedArray.">NewUniqueSortedArray</a>(<span class="keyword">const</span> int64* <span class="keyword">const</span> values, <span class="keywordtype">int</span>* size) {
<a name="l00799"></a>00799   int64* new_array = <span class="keyword">new</span> int64[*size];
<a name="l00800"></a>00800   memcpy(new_array, values, (*size) * <span class="keyword">sizeof</span>(*values));
<a name="l00801"></a>00801   std::sort(new_array, new_array + (*size));
<a name="l00802"></a>00802   <span class="keywordtype">bool</span> non_unique = 0;
<a name="l00803"></a>00803   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; (*size) - 1; ++i) {
<a name="l00804"></a>00804     <span class="keywordflow">if</span> (new_array[i] == new_array[i + 1]) {
<a name="l00805"></a>00805       non_unique++;
<a name="l00806"></a>00806     }
<a name="l00807"></a>00807   }
<a name="l00808"></a>00808   <span class="keywordflow">if</span> (non_unique) {
<a name="l00809"></a>00809     scoped_array&lt;int64&gt; sorted(new_array);
<a name="l00810"></a>00810     new_array = <span class="keyword">new</span> int64[(*size) - non_unique];
<a name="l00811"></a>00811     new_array[0] = sorted[0];
<a name="l00812"></a>00812     <span class="keywordtype">int</span> pos = 1;
<a name="l00813"></a>00813     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt; (*size); ++i) {
<a name="l00814"></a>00814       <span class="keywordflow">if</span> (sorted[i] != sorted[i - 1]) {
<a name="l00815"></a>00815         new_array[pos++] = sorted[i];
<a name="l00816"></a>00816       }
<a name="l00817"></a>00817     }
<a name="l00818"></a>00818     DCHECK_EQ((*size) - non_unique, pos);
<a name="l00819"></a>00819     *size = pos;
<a name="l00820"></a>00820   }
<a name="l00821"></a>00821   <span class="keywordflow">return</span> new_array;
<a name="l00822"></a>00822 }
<a name="l00823"></a>00823 
<a name="l00824"></a>00824 <span class="comment">// ---------- Member ----------</span>
<a name="l00825"></a>00825 
<a name="l00826"></a>00826 <span class="comment">// ----- Member(IntVar, IntSet) -----</span>
<a name="l00827"></a>00827 
<a name="l00828"></a><a class="code" href="classoperations__research_1_1MemberCt.html">00828</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1MemberCt.html" title="Member.">MemberCt</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a> {
<a name="l00829"></a>00829  <span class="keyword">public</span>:
<a name="l00830"></a><a class="code" href="classoperations__research_1_1MemberCt.html#0e0e0f40c552cdd90845082cbd7937ac">00830</a>   <a class="code" href="classoperations__research_1_1MemberCt.html" title="Member.">MemberCt</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> v, <span class="keyword">const</span> int64* <span class="keyword">const</span> values,
<a name="l00831"></a>00831              <span class="keywordtype">int</span> size)
<a name="l00832"></a>00832       : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s), var_(v), values_(NULL), size_(size) {
<a name="l00833"></a>00833     DCHECK(v != NULL);
<a name="l00834"></a>00834     DCHECK(s != NULL);
<a name="l00835"></a>00835     DCHECK_GT(size, 0);
<a name="l00836"></a>00836     values_.reset(<a class="code" href="namespaceoperations__research.html#a5a3cbf4e815403325eb2e3a92c321f6" title="NewUniqueSortedArray.">NewUniqueSortedArray</a>(values, &amp;size_));
<a name="l00837"></a>00837   }
<a name="l00838"></a>00838 
<a name="l00839"></a><a class="code" href="classoperations__research_1_1MemberCt.html#896cdc15d341fb426b6bbc1ddbf60737">00839</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Post() {}
<a name="l00840"></a>00840 
<a name="l00841"></a><a class="code" href="classoperations__research_1_1MemberCt.html#db5f0f950bdaad9f8c5dd5f349268493">00841</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> InitialPropagate() {
<a name="l00842"></a>00842     var_-&gt;SetValues(values_.get(), size_);
<a name="l00843"></a>00843   }
<a name="l00844"></a>00844 
<a name="l00845"></a><a class="code" href="classoperations__research_1_1MemberCt.html#deab0e88644b0e1c240f43bbb9f83732">00845</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Solver.html#a7a09bf2f27ccbdc1d1d386bd94e142a" title="misc debug string.">DebugString</a>()<span class="keyword"> const </span>{
<a name="l00846"></a>00846     <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"Member(%s, int values)"</span>, var_-&gt;DebugString().c_str());
<a name="l00847"></a>00847   }
<a name="l00848"></a>00848  <span class="keyword">private</span>:
<a name="l00849"></a><a class="code" href="classoperations__research_1_1MemberCt.html#56d3b2ebeb3f6368ba3a5fabbfab3b26">00849</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var_;
<a name="l00850"></a><a class="code" href="classoperations__research_1_1MemberCt.html#1977ce06aaeae47ab16ce23c74f3b67c">00850</a>   scoped_array&lt;int64&gt; values_;
<a name="l00851"></a><a class="code" href="classoperations__research_1_1MemberCt.html#897489aecac2de7dd1a803e3bd72a88f">00851</a>   <span class="keywordtype">int</span> size_;
<a name="l00852"></a>00852 };
<a name="l00853"></a>00853 
<a name="l00854"></a><a class="code" href="classoperations__research_1_1Solver.html#82eb8979e3a137a28e49d309d23aec5c">00854</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#82eb8979e3a137a28e49d309d23aec5c" title="v in set.">Solver::MakeMemberCt</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var,
<a name="l00855"></a>00855                                  <span class="keyword">const</span> int64* <span class="keyword">const</span> values,
<a name="l00856"></a>00856                                  <span class="keywordtype">int</span> size) {
<a name="l00857"></a>00857   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1MemberCt.html" title="Member.">MemberCt</a>(<span class="keyword">this</span>, var, values, size));
<a name="l00858"></a>00858 }
<a name="l00859"></a>00859 
<a name="l00860"></a><a class="code" href="classoperations__research_1_1Solver.html#5d5fdb96deda94d014d3f2c7283c751b">00860</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#82eb8979e3a137a28e49d309d23aec5c" title="v in set.">Solver::MakeMemberCt</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var,
<a name="l00861"></a>00861                                  <span class="keyword">const</span> vector&lt;int64&gt;&amp; values) {
<a name="l00862"></a>00862   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#82eb8979e3a137a28e49d309d23aec5c" title="v in set.">MakeMemberCt</a>(var, values.data(), values.size());
<a name="l00863"></a>00863 }
<a name="l00864"></a>00864 
<a name="l00865"></a>00865 <span class="comment">// ----- IsMemberCt -----</span>
<a name="l00866"></a>00866 
<a name="l00867"></a><a class="code" href="classoperations__research_1_1IsMemberCt.html">00867</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1IsMemberCt.html" title="IsMemberCt.">IsMemberCt</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a> {
<a name="l00868"></a>00868  <span class="keyword">public</span>:
<a name="l00869"></a><a class="code" href="classoperations__research_1_1IsMemberCt.html#4440dafceb5bdd170405e1ed9b8fc0a0">00869</a>   <a class="code" href="classoperations__research_1_1IsMemberCt.html" title="IsMemberCt.">IsMemberCt</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> v, <span class="keyword">const</span> int64* <span class="keyword">const</span> values,
<a name="l00870"></a>00870              <span class="keywordtype">int</span> size, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> b)
<a name="l00871"></a>00871       : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s), var_(v), values_(NULL), size_(size), boolvar_(b),
<a name="l00872"></a>00872         support_pos_(0), demon_(NULL) {
<a name="l00873"></a>00873     DCHECK(v != NULL);
<a name="l00874"></a>00874     DCHECK(s != NULL);
<a name="l00875"></a>00875     DCHECK(b != NULL);
<a name="l00876"></a>00876     DCHECK_GT(size, 0);
<a name="l00877"></a>00877     values_.reset(<a class="code" href="namespaceoperations__research.html#a5a3cbf4e815403325eb2e3a92c321f6" title="NewUniqueSortedArray.">NewUniqueSortedArray</a>(values, &amp;size_));
<a name="l00878"></a>00878   }
<a name="l00879"></a>00879 
<a name="l00880"></a><a class="code" href="classoperations__research_1_1IsMemberCt.html#a1ebd1838e07410566c3d0e73edb53ea">00880</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Post() {
<a name="l00881"></a>00881     demon_ = solver()-&gt;MakeConstraintInitialPropagateCallback(<span class="keyword">this</span>);
<a name="l00882"></a>00882     <span class="keywordflow">if</span> (!var_-&gt;Bound()) {
<a name="l00883"></a>00883       var_-&gt;WhenDomain(demon_);
<a name="l00884"></a>00884     }
<a name="l00885"></a>00885     <span class="keywordflow">if</span> (!boolvar_-&gt;Bound()) {
<a name="l00886"></a>00886       boolvar_-&gt;WhenBound(demon_);
<a name="l00887"></a>00887     }
<a name="l00888"></a>00888   }
<a name="l00889"></a>00889 
<a name="l00890"></a><a class="code" href="classoperations__research_1_1IsMemberCt.html#63d38f682a7d509c999d5c562219fa46">00890</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> InitialPropagate() {
<a name="l00891"></a>00891     <span class="keywordflow">if</span> (boolvar_-&gt;Min() == 1LL) {
<a name="l00892"></a>00892       demon_-&gt;inhibit(solver());
<a name="l00893"></a>00893       var_-&gt;SetValues(values_.get(), size_);
<a name="l00894"></a>00894     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (boolvar_-&gt;Max() == 1LL) {
<a name="l00895"></a>00895       <span class="keywordtype">int</span> support = support_pos_.Value();
<a name="l00896"></a>00896       <span class="keyword">const</span> int64 vmin = var_-&gt;Min();
<a name="l00897"></a>00897       <span class="keyword">const</span> int64 vmax = var_-&gt;Max();
<a name="l00898"></a>00898       <span class="keywordflow">while</span> (support &lt; size_ &amp;&amp;
<a name="l00899"></a>00899              (values_[support] &lt; vmin ||
<a name="l00900"></a>00900               !var_-&gt;Contains(values_[support]))) {
<a name="l00901"></a>00901         <span class="keywordflow">if</span> (values_[support] &lt;= vmax) {
<a name="l00902"></a>00902           support++;
<a name="l00903"></a>00903         } <span class="keywordflow">else</span> {
<a name="l00904"></a>00904           support = size_;
<a name="l00905"></a>00905         }
<a name="l00906"></a>00906       }
<a name="l00907"></a>00907       support_pos_.SetValue(solver(), support);
<a name="l00908"></a>00908       <span class="keywordflow">if</span> (support &gt;= size_) {
<a name="l00909"></a>00909         demon_-&gt;inhibit(solver());
<a name="l00910"></a>00910         boolvar_-&gt;SetValue(0LL);
<a name="l00911"></a>00911       } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (var_-&gt;Bound()) {
<a name="l00912"></a>00912         demon_-&gt;inhibit(solver());
<a name="l00913"></a>00913         boolvar_-&gt;SetValue(1LL);
<a name="l00914"></a>00914       }
<a name="l00915"></a>00915     } <span class="keywordflow">else</span> {  <span class="comment">// boolvar_ set to 0.</span>
<a name="l00916"></a>00916       demon_-&gt;inhibit(solver());
<a name="l00917"></a>00917       var_-&gt;RemoveValues(values_.get(), size_);
<a name="l00918"></a>00918     }
<a name="l00919"></a>00919   }
<a name="l00920"></a>00920 
<a name="l00921"></a><a class="code" href="classoperations__research_1_1IsMemberCt.html#7576fb444dae224afce61e404d002c83">00921</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Solver.html#a7a09bf2f27ccbdc1d1d386bd94e142a" title="misc debug string.">DebugString</a>()<span class="keyword"> const </span>{
<a name="l00922"></a>00922     <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"IsMemberCt(%s, int values, %s)"</span>,
<a name="l00923"></a>00923                         var_-&gt;DebugString().c_str(),
<a name="l00924"></a>00924                         boolvar_-&gt;DebugString().c_str());
<a name="l00925"></a>00925   }
<a name="l00926"></a>00926  <span class="keyword">private</span>:
<a name="l00927"></a><a class="code" href="classoperations__research_1_1IsMemberCt.html#df045e4e9a8aeaa265d3b85ebb0ffd6f">00927</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var_;
<a name="l00928"></a><a class="code" href="classoperations__research_1_1IsMemberCt.html#453a222292c405edf08e773f321b5677">00928</a>   scoped_array&lt;int64&gt; values_;
<a name="l00929"></a><a class="code" href="classoperations__research_1_1IsMemberCt.html#4db61c02ebba07d1baedc9d1f6a4d544">00929</a>   <span class="keywordtype">int</span> size_;
<a name="l00930"></a><a class="code" href="classoperations__research_1_1IsMemberCt.html#998d1d21f9c184f9bfb0b692218475e2">00930</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> boolvar_;
<a name="l00931"></a><a class="code" href="classoperations__research_1_1IsMemberCt.html#7b32bc5db995b626a14a4f7312492d71">00931</a>   <a class="code" href="classoperations__research_1_1Rev.html" title="These class represent reversible POD types.">Rev&lt;int&gt;</a> support_pos_;
<a name="l00932"></a><a class="code" href="classoperations__research_1_1IsMemberCt.html#15b7a3e093aa83c39c9f65a43e02eb8d">00932</a>   <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* demon_;
<a name="l00933"></a>00933 };
<a name="l00934"></a>00934 
<a name="l00935"></a><a class="code" href="classoperations__research_1_1Solver.html#cda6704ae832a0187fa46d9c5813fe00">00935</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#cda6704ae832a0187fa46d9c5813fe00" title="b == (v in set)">Solver::MakeIsMemberCt</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var,
<a name="l00936"></a>00936                                    <span class="keyword">const</span> int64* <span class="keyword">const</span> values,
<a name="l00937"></a>00937                                    <span class="keywordtype">int</span> size,
<a name="l00938"></a>00938                                    <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> boolvar) {
<a name="l00939"></a>00939   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1IsMemberCt.html" title="IsMemberCt.">IsMemberCt</a>(<span class="keyword">this</span>, var, values, size, boolvar));
<a name="l00940"></a>00940 }
<a name="l00941"></a>00941 
<a name="l00942"></a><a class="code" href="classoperations__research_1_1Solver.html#93df26a165d8f9d91e29ff5a7e3ff4a0">00942</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#cda6704ae832a0187fa46d9c5813fe00" title="b == (v in set)">Solver::MakeIsMemberCt</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var,
<a name="l00943"></a>00943                                    <span class="keyword">const</span> vector&lt;int64&gt;&amp; values,
<a name="l00944"></a>00944                                    <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> boolvar) {
<a name="l00945"></a>00945   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#cda6704ae832a0187fa46d9c5813fe00" title="b == (v in set)">MakeIsMemberCt</a>(var, values.data(), values.size(), boolvar);
<a name="l00946"></a>00946 }
<a name="l00947"></a>00947 
<a name="l00948"></a><a class="code" href="classoperations__research_1_1Solver.html#f35044268732c40bdc0f0da8c9417063">00948</a> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <a class="code" href="classoperations__research_1_1Solver.html#f35044268732c40bdc0f0da8c9417063">Solver::MakeIsMemberVar</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var,
<a name="l00949"></a>00949                                 <span class="keyword">const</span> int64* <span class="keyword">const</span> values,
<a name="l00950"></a>00950                                 <span class="keywordtype">int</span> size) {
<a name="l00951"></a>00951   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> b = <a class="code" href="classoperations__research_1_1Solver.html#3ae2ecd6cd2eabd555cf2b3ec8a7d57d" title="MakeBoolVar will create a variable with a {0, 1} domain.">MakeBoolVar</a>();
<a name="l00952"></a>00952   <a class="code" href="classoperations__research_1_1Solver.html#9c522a6cff91adae19af5cce7d8e411f" title="propagation">AddConstraint</a>(<a class="code" href="classoperations__research_1_1Solver.html#cda6704ae832a0187fa46d9c5813fe00" title="b == (v in set)">MakeIsMemberCt</a>(var, values, size, b));
<a name="l00953"></a>00953   <span class="keywordflow">return</span> b;
<a name="l00954"></a>00954 }
<a name="l00955"></a>00955 
<a name="l00956"></a><a class="code" href="classoperations__research_1_1Solver.html#7ca59075ef73bdd4be7d0131fd2d8f9b">00956</a> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <a class="code" href="classoperations__research_1_1Solver.html#f35044268732c40bdc0f0da8c9417063">Solver::MakeIsMemberVar</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var,
<a name="l00957"></a>00957                                 <span class="keyword">const</span> vector&lt;int64&gt;&amp; values) {
<a name="l00958"></a>00958   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#f35044268732c40bdc0f0da8c9417063">MakeIsMemberVar</a>(var, values.data(), values.size());
<a name="l00959"></a>00959 }
<a name="l00960"></a>00960 
<a name="l00961"></a>00961 <span class="comment">// ---------- Init Caches ----------</span>
<a name="l00962"></a>00962 
<a name="l00963"></a><a class="code" href="classoperations__research_1_1Solver.html#6dd50e9b75464e41a5b146181e39b17e">00963</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Solver.html#6dd50e9b75464e41a5b146181e39b17e" title="Init Caches.">Solver::InitBoolVarCaches</a>() {
<a name="l00964"></a>00964   <a class="code" href="classoperations__research_1_1Solver.html#6e563552c76ee13fc0695f32de57925f" title="status var caches:">equality_var_cst_cache_</a> = <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1EqualityVarCstCache.html" title="EqualityVarCstCache.">EqualityVarCstCache</a>(<span class="keyword">this</span>));
<a name="l00965"></a>00965   <a class="code" href="classoperations__research_1_1Solver.html#9119fb5df045f9cbdee9ab4fae21b8d5">unequality_var_cst_cache_</a> = <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1UnequalityVarCstCache.html" title="UnequalityVarCstCache.">UnequalityVarCstCache</a>(<span class="keyword">this</span>));
<a name="l00966"></a>00966   <a class="code" href="classoperations__research_1_1Solver.html#5752df950900942bee5a303d21a2ce5d">greater_equal_var_cst_cache_</a> = <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1GreaterEqualCstCache.html" title="GreaterEqualCstCache.">GreaterEqualCstCache</a>(<span class="keyword">this</span>));
<a name="l00967"></a>00967   <a class="code" href="classoperations__research_1_1Solver.html#2e5169290e7812df5c7a0642564549ef">less_equal_var_cst_cache_</a> = <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1LessEqualCstCache.html" title="LessEqualCstCache.">LessEqualCstCache</a>(<span class="keyword">this</span>));
<a name="l00968"></a>00968 }
<a name="l00969"></a>00969 
<a name="l00970"></a>00970 }  <span class="comment">// namespace operations_research</span>
</pre></div></div>

  <!-- Start of footer. -->
  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <tr valign=top>
      <td colspan=2 height=10></td>
    </tr>
    <tr valign=top>
      <td colspan=2 bgcolor=#389613 height=3></td>
    </tr>
  </table>

  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br />

  
  </body>
</html>
