<!-- Good morning, Mr. Phelps. -->
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
    <title>google3/constraint_solver/expr_array.cc Source File - Doxy</title>
    <link rel="shortcut icon" href="../../favicon.ico">
    <!-- Both stylesheets are supplied by Doxygen, with maybe minor tweaks from Google. -->
    <link href="../../doxygen.css" rel="stylesheet" type="text/css">
    <link href="../../tabs.css" rel="stylesheet" type="text/css">
  </head>

  <body topmargin=0 leftmargin=20 bottommargin=0 rightmargin=20 marginwidth=20 marginheight=0>
  <!-- Second part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
  <style>
    a.doxy_logo:hover {
      background-color: #389613
    }
  </style>

  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <!-- Top horizontal line with the color of the day. -->
    <tr valign=top>
      <td colspan=3 bgcolor=#389613 height=3></td>
    </tr>

    <!-- Header row with the links at the right. -->
    <tr valign=top>
      <td colspan=3 align=right>
        <font size=-1>
          Generated on: <font color=#389613><b>Fri Apr  1 14:13:18 PDT 2011</b></font>
            for <b>custom file set</b>
        </font>
      </td>
    </tr>

    <!-- Header row with the logo and the search form. -->
    <tr valign=top>
      <!-- Logo. -->
      <td align=left width=150>
        <table width=150 height=54 cellpadding=0 cellspacing=0 border=0>
          <tr valign=top>
            <!-- First part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
            <td bgcolor=#389613>
              <a class="doxy_logo" href="../../index.html"><img src="../../doxy_logo.png" alt="Doxy" border=0></a>
            </td>
          </tr>
        </table>
      </td>
    </tr>

    <!-- Tiny vertical space below the form. -->
    <tr valign=top>
      <td colspan=3 height=3></td>
    </tr>
  </table>

  <!-- Header navigation row. -->
  <div class="memproto">
    <table width=100% cellpadding=0 cellspacing=0 border=0>
      <tr>
        <td align=left style="padding-left: 20px"><font size=+1><b><tt><font color=#333333>//
            <a href="../../index.html"><font color=#389613>doxy</font></a>/</font>
            <a href="../../google3/index.html">google3</a>/
            <a href="../../google3/constraint_solver/index.html">constraint_solver</a>/
            </tt></b></font>
        </td>
      </tr>
    </table>
  </div>
  <br />
    <!-- No subdirs found. -->
  <!-- End of header. -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>google3/constraint_solver/expr_array.cc</h1><a href="expr__array_8cc.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright 2010 Google</span>
<a name="l00002"></a>00002 <span class="comment">// Licensed under the Apache License, Version 2.0 (the "License");</span>
<a name="l00003"></a>00003 <span class="comment">// you may not use this file except in compliance with the License.</span>
<a name="l00004"></a>00004 <span class="comment">// You may obtain a copy of the License at</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">//     http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Unless required by applicable law or agreed to in writing, software</span>
<a name="l00009"></a>00009 <span class="comment">// distributed under the License is distributed on an "AS IS" BASIS,</span>
<a name="l00010"></a>00010 <span class="comment">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00011"></a>00011 <span class="comment">// See the License for the specific language governing permissions and</span>
<a name="l00012"></a>00012 <span class="comment">// limitations under the License.</span>
<a name="l00013"></a>00013 <span class="comment">//</span>
<a name="l00014"></a>00014 <span class="comment">//  Array Expression constraints</span>
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 <span class="preprocessor">#include "base/commandlineflags.h"</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include "base/integral_types.h"</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include "base/logging.h"</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include "base/scoped_ptr.h"</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include "base/stringprintf.h"</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include "<a class="code" href="constraint__solveri_8h.html">constraint_solver/constraint_solveri.h</a>"</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="keyword">namespace </span>operations_research {
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="comment">// ----- Base array classes -----</span>
<a name="l00026"></a>00026 <span class="comment">// Used for code factorization</span>
<a name="l00027"></a>00027 
<a name="l00028"></a><a class="code" href="classoperations__research_1_1ArrayConstraint.html">00028</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1ArrayConstraint.html" title="Base array classes Used for code factorization.">ArrayConstraint</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a> {
<a name="l00029"></a>00029  <span class="keyword">public</span>:
<a name="l00030"></a>00030   <a class="code" href="classoperations__research_1_1ArrayConstraint.html#8f7189f54024a9f1a9c0748dcdb69c50">ArrayConstraint</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00031"></a>00031                   <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l00032"></a>00032                   <span class="keywordtype">int</span> size,
<a name="l00033"></a>00033                   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* var);
<a name="l00034"></a><a class="code" href="classoperations__research_1_1ArrayConstraint.html#cb7e1b7f909a3975acaff1145d245bf5">00034</a>   <span class="keyword">virtual</span> <a class="code" href="classoperations__research_1_1ArrayConstraint.html#cb7e1b7f909a3975acaff1145d245bf5">~ArrayConstraint</a>() {}
<a name="l00035"></a>00035  <span class="keyword">protected</span>:
<a name="l00036"></a>00036   <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1ArrayConstraint.html#8f07990e5926230780cb62e8e7fd53fc">DebugStringInternal</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#89b827a71613c6c120d5ac326202df7e" title="Naming.">name</a>) <span class="keyword">const</span>;
<a name="l00037"></a>00037 
<a name="l00038"></a><a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">00038</a>   scoped_array&lt;IntVar*&gt; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>;
<a name="l00039"></a><a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">00039</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>;
<a name="l00040"></a><a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">00040</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>;
<a name="l00041"></a>00041 };
<a name="l00042"></a>00042 
<a name="l00043"></a><a class="code" href="classoperations__research_1_1ArrayConstraint.html#8f7189f54024a9f1a9c0748dcdb69c50">00043</a> <a class="code" href="classoperations__research_1_1ArrayConstraint.html#8f7189f54024a9f1a9c0748dcdb69c50">ArrayConstraint::ArrayConstraint</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00044"></a>00044                                  <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l00045"></a>00045                                  <span class="keywordtype">int</span> size,
<a name="l00046"></a>00046                                  <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* var)
<a name="l00047"></a>00047     : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s), vars_(new <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>*[size]), size_(size), var_(var) {
<a name="l00048"></a>00048   CHECK_GT(size, 0) &lt;&lt; <a class="code" href="classoperations__research_1_1Constraint.html#f870afb5d6c1fba1d70b38eb581f8cca" title="Constraint class.">DebugString</a>();
<a name="l00049"></a>00049   CHECK(vars != NULL);
<a name="l00050"></a>00050   memcpy(<a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>.get(), vars, <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a> * <span class="keyword">sizeof</span>(*vars));
<a name="l00051"></a>00051 }
<a name="l00052"></a>00052 
<a name="l00053"></a><a class="code" href="classoperations__research_1_1ArrayConstraint.html#8f07990e5926230780cb62e8e7fd53fc">00053</a> <span class="keywordtype">string</span> ArrayConstraint::DebugStringInternal(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; name)<span class="keyword"> const </span>{
<a name="l00054"></a>00054   <span class="keywordtype">string</span> out = name + <span class="stringliteral">"("</span>;
<a name="l00055"></a>00055   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>; ++i) {
<a name="l00056"></a>00056     <span class="keywordflow">if</span> (i &gt; 0) {
<a name="l00057"></a>00057       out += <span class="stringliteral">", "</span>;
<a name="l00058"></a>00058     }
<a name="l00059"></a>00059     out += <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i]-&gt;DebugString();
<a name="l00060"></a>00060   }
<a name="l00061"></a>00061   out += <span class="stringliteral">", "</span> + <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#fc971d7ca0617641f29e7e510e98a767">DebugString</a>() + <span class="stringliteral">")"</span>;
<a name="l00062"></a>00062   <span class="keywordflow">return</span> out;
<a name="l00063"></a>00063 }
<a name="l00064"></a>00064 
<a name="l00065"></a><a class="code" href="classoperations__research_1_1ArrayExpr.html">00065</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1ArrayExpr.html">ArrayExpr</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1BaseIntExpr.html" title="This is the base class for all non-variable expressions.">BaseIntExpr</a> {
<a name="l00066"></a>00066  <span class="keyword">public</span>:
<a name="l00067"></a>00067   <a class="code" href="classoperations__research_1_1ArrayExpr.html">ArrayExpr</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* exprs, <span class="keywordtype">int</span> size);
<a name="l00068"></a><a class="code" href="classoperations__research_1_1ArrayExpr.html#6460b5eb15a8563e73e86f487729b6bb">00068</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1ArrayExpr.html">ArrayExpr</a>() {}
<a name="l00069"></a>00069  <span class="keyword">protected</span>:
<a name="l00070"></a>00070   <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1ArrayConstraint.html#8f07990e5926230780cb62e8e7fd53fc">DebugStringInternal</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#89b827a71613c6c120d5ac326202df7e" title="Naming.">name</a>) <span class="keyword">const</span>;
<a name="l00071"></a>00071 
<a name="l00072"></a><a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">00072</a>   scoped_array&lt;IntVar*&gt; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>;
<a name="l00073"></a><a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">00073</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>;
<a name="l00074"></a>00074 };
<a name="l00075"></a>00075 
<a name="l00076"></a><a class="code" href="classoperations__research_1_1ArrayExpr.html#037e24bf059fe4d40be9d3dbe23af188">00076</a> <a class="code" href="classoperations__research_1_1ArrayExpr.html#037e24bf059fe4d40be9d3dbe23af188">ArrayExpr::ArrayExpr</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size)
<a name="l00077"></a>00077     : <a class="code" href="classoperations__research_1_1BaseIntExpr.html" title="This is the base class for all non-variable expressions.">BaseIntExpr</a>(s), <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>(new <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>*[size]), <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>(size) {
<a name="l00078"></a>00078   CHECK(vars) &lt;&lt; <span class="stringliteral">"null pointer"</span>;
<a name="l00079"></a>00079   memcpy(<a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>.get(), vars, <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a> * <span class="keyword">sizeof</span>(*vars));
<a name="l00080"></a>00080 }
<a name="l00081"></a>00081 
<a name="l00082"></a><a class="code" href="classoperations__research_1_1ArrayExpr.html#e7ddc309e78f402b0e87c970e3af7edf">00082</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1ArrayExpr.html#e7ddc309e78f402b0e87c970e3af7edf">ArrayExpr::DebugStringInternal</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#89b827a71613c6c120d5ac326202df7e" title="Naming.">name</a>)<span class="keyword"> const </span>{
<a name="l00083"></a>00083   <span class="keywordtype">string</span> out = name + <span class="stringliteral">"("</span>;
<a name="l00084"></a>00084   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l00085"></a>00085     <span class="keywordflow">if</span> (i &gt; 0) {
<a name="l00086"></a>00086       out += <span class="stringliteral">", "</span>;
<a name="l00087"></a>00087     }
<a name="l00088"></a>00088     out += <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;DebugString();
<a name="l00089"></a>00089   }
<a name="l00090"></a>00090   out += <span class="stringliteral">")"</span>;
<a name="l00091"></a>00091   <span class="keywordflow">return</span> out;
<a name="l00092"></a>00092 }
<a name="l00093"></a>00093 
<a name="l00094"></a>00094 <span class="comment">// ---------- Sum Array ----------</span>
<a name="l00095"></a>00095 
<a name="l00096"></a>00096 <span class="comment">// Some of these optimizations here are described in:</span>
<a name="l00097"></a>00097 <span class="comment">// "Bounds consistency techniques for long linear constraints".  In</span>
<a name="l00098"></a>00098 <span class="comment">// Workshop on Techniques for Implementing Constraint Programming</span>
<a name="l00099"></a>00099 <span class="comment">// Systems (TRICS), a workshop of CP 2002, N. Beldiceanu, W. Harvey,</span>
<a name="l00100"></a>00100 <span class="comment">// Martin Henz, Francois Laburthe, Eric Monfroy, Tobias Müller,</span>
<a name="l00101"></a>00101 <span class="comment">// Laurent Perron and Christian Schulte editors, pages 39–46, 2002.</span>
<a name="l00102"></a>00102 
<a name="l00103"></a>00103 <span class="comment">// ----- Sum Array Ct -----</span>
<a name="l00104"></a>00104 
<a name="l00105"></a>00105 <span class="comment">// This constraint implements sum(vars) == var.  It is delayed such</span>
<a name="l00106"></a>00106 <span class="comment">// that propagation only occurs when all variables have been touched.</span>
<a name="l00107"></a><a class="code" href="classoperations__research_1_1SumArrayCt.html">00107</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1SumArrayCt.html" title="Sum Array.">SumArrayCt</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1ArrayConstraint.html" title="Base array classes Used for code factorization.">ArrayConstraint</a> {
<a name="l00108"></a>00108  <span class="keyword">public</span>:
<a name="l00109"></a>00109   <a class="code" href="classoperations__research_1_1SumArrayCt.html" title="Sum Array.">SumArrayCt</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars, <span class="keywordtype">int</span> size,
<a name="l00110"></a>00110              <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* var);
<a name="l00111"></a><a class="code" href="classoperations__research_1_1SumArrayCt.html#921de2d7ac048257c1891692a05d2897">00111</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1SumArrayCt.html" title="Sum Array.">SumArrayCt</a>() {}
<a name="l00112"></a>00112 
<a name="l00113"></a>00113   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Post();
<a name="l00114"></a>00114   <span class="keyword">virtual</span> <span class="keywordtype">void</span> InitialPropagate();
<a name="l00115"></a>00115 
<a name="l00116"></a>00116   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#fc971d7ca0617641f29e7e510e98a767">DebugString</a>() <span class="keyword">const</span>;
<a name="l00117"></a>00117  <span class="keyword">private</span>:
<a name="l00118"></a><a class="code" href="classoperations__research_1_1SumArrayCt.html#c9e34277ce6a82704ec40077dabe02f2">00118</a>   <a class="code" href="classoperations__research_1_1Rev.html" title="These class represent reversible POD types.">Rev&lt;int&gt;</a> first_unbound_forward_;
<a name="l00119"></a><a class="code" href="classoperations__research_1_1SumArrayCt.html#75806228143e80676f6f32fe7532dd9e">00119</a>   <a class="code" href="classoperations__research_1_1Rev.html" title="These class represent reversible POD types.">Rev&lt;int&gt;</a> first_unbound_backward_;
<a name="l00120"></a><a class="code" href="classoperations__research_1_1SumArrayCt.html#eb326fd450887b664594339092079f94">00120</a>   <a class="code" href="classoperations__research_1_1Rev.html" title="These class represent reversible POD types.">Rev&lt;int64&gt;</a> sum_of_bound_variables_;
<a name="l00121"></a>00121 };
<a name="l00122"></a>00122 
<a name="l00123"></a><a class="code" href="classoperations__research_1_1SumArrayCt.html#870927f68fbeb6d5bc7a3ede3b32c974">00123</a> <a class="code" href="classoperations__research_1_1SumArrayCt.html#870927f68fbeb6d5bc7a3ede3b32c974">SumArrayCt::SumArrayCt</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00124"></a>00124                        <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l00125"></a>00125                        <span class="keywordtype">int</span> size,
<a name="l00126"></a>00126                        <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* var)
<a name="l00127"></a>00127     : <a class="code" href="classoperations__research_1_1ArrayConstraint.html" title="Base array classes Used for code factorization.">ArrayConstraint</a>(s, vars, size, var),
<a name="l00128"></a>00128       first_unbound_forward_(0), first_unbound_backward_(size - 1),
<a name="l00129"></a>00129       sum_of_bound_variables_(0LL) {}
<a name="l00130"></a>00130 
<a name="l00131"></a><a class="code" href="classoperations__research_1_1SumArrayCt.html#249036127c1635d81052a6e047924664">00131</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumArrayCt.html#249036127c1635d81052a6e047924664" title="This method is called when the constraint is processed by the solver.">SumArrayCt::Post</a>() {
<a name="l00132"></a>00132   <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d = <a class="code" href="namespaceoperations__research.html#16f35a1c0ce076f2587fffbab80200b6">MakeDelayedConstraintDemon0</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l00133"></a>00133                                          <span class="keyword">this</span>,
<a name="l00134"></a>00134                                          &amp;<a class="code" href="classoperations__research_1_1SumArrayCt.html#4b8e30f8e594ef09c8e6586cd4cd761f" title="This method performs the initial propagation of the constraint.">SumArrayCt::InitialPropagate</a>,
<a name="l00135"></a>00135                                          <span class="stringliteral">"InitialPropagate"</span>);
<a name="l00136"></a>00136   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>; ++i) {
<a name="l00137"></a>00137     <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i]-&gt;WhenRange(d);
<a name="l00138"></a>00138   }
<a name="l00139"></a>00139   <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* uv = <a class="code" href="namespaceoperations__research.html#50b3d41d8dbf72bb2ad22235a9e1f53e">MakeConstraintDemon0</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l00140"></a>00140                                    <span class="keyword">this</span>,
<a name="l00141"></a>00141                                    &amp;<a class="code" href="classoperations__research_1_1SumArrayCt.html#4b8e30f8e594ef09c8e6586cd4cd761f" title="This method performs the initial propagation of the constraint.">SumArrayCt::InitialPropagate</a>,
<a name="l00142"></a>00142                                    <span class="stringliteral">"Initialpropagate"</span>);
<a name="l00143"></a>00143   <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#845a3c3c71323504f6b59f9c0ea46b08" title="Attach a demon that will watch the min or the max of the expression.">WhenRange</a>(uv);
<a name="l00144"></a>00144 }
<a name="l00145"></a>00145 
<a name="l00146"></a><a class="code" href="classoperations__research_1_1SumArrayCt.html#4b8e30f8e594ef09c8e6586cd4cd761f">00146</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumArrayCt.html#4b8e30f8e594ef09c8e6586cd4cd761f" title="This method performs the initial propagation of the constraint.">SumArrayCt::InitialPropagate</a>() {
<a name="l00147"></a>00147   <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>();
<a name="l00148"></a>00148   <span class="keywordtype">int</span> start = <a class="code" href="classoperations__research_1_1SumArrayCt.html#c9e34277ce6a82704ec40077dabe02f2">first_unbound_forward_</a>.<a class="code" href="classoperations__research_1_1Rev.html#c7f33945b63174a54775a3e342c08c28">Value</a>();
<a name="l00149"></a>00149   <span class="keywordtype">int</span> end = <a class="code" href="classoperations__research_1_1SumArrayCt.html#75806228143e80676f6f32fe7532dd9e">first_unbound_backward_</a>.<a class="code" href="classoperations__research_1_1Rev.html#c7f33945b63174a54775a3e342c08c28">Value</a>();
<a name="l00150"></a>00150   int64 sum = <a class="code" href="classoperations__research_1_1SumArrayCt.html#eb326fd450887b664594339092079f94">sum_of_bound_variables_</a>.<a class="code" href="classoperations__research_1_1Rev.html#c7f33945b63174a54775a3e342c08c28">Value</a>();
<a name="l00151"></a>00151 
<a name="l00152"></a>00152   <span class="keywordflow">while</span> (start &lt;= end &amp;&amp; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[start]-&gt;Bound()) {
<a name="l00153"></a>00153     sum += <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[start]-&gt;Min();
<a name="l00154"></a>00154     start++;
<a name="l00155"></a>00155   }
<a name="l00156"></a>00156   <span class="keywordflow">while</span> (end &gt;= start &amp;&amp; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[end]-&gt;Bound()) {
<a name="l00157"></a>00157     sum += <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[end]-&gt;Min();
<a name="l00158"></a>00158     end--;
<a name="l00159"></a>00159   }
<a name="l00160"></a>00160   <a class="code" href="classoperations__research_1_1SumArrayCt.html#c9e34277ce6a82704ec40077dabe02f2">first_unbound_forward_</a>.<a class="code" href="classoperations__research_1_1Rev.html#614fdcd3e96dc71b0c580f29026380ec">SetValue</a>(s, start);
<a name="l00161"></a>00161   <a class="code" href="classoperations__research_1_1SumArrayCt.html#75806228143e80676f6f32fe7532dd9e">first_unbound_backward_</a>.<a class="code" href="classoperations__research_1_1Rev.html#614fdcd3e96dc71b0c580f29026380ec">SetValue</a>(s, end);
<a name="l00162"></a>00162   <a class="code" href="classoperations__research_1_1SumArrayCt.html#eb326fd450887b664594339092079f94">sum_of_bound_variables_</a>.<a class="code" href="classoperations__research_1_1Rev.html#614fdcd3e96dc71b0c580f29026380ec">SetValue</a>(s, sum);
<a name="l00163"></a>00163 
<a name="l00164"></a>00164   int64 cmin = sum;
<a name="l00165"></a>00165   int64 cmax = sum;
<a name="l00166"></a>00166   int64 diameter = 0;
<a name="l00167"></a>00167   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = start; i &lt;= end; ++i) {
<a name="l00168"></a>00168     <span class="keyword">const</span> int64 local_min = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i]-&gt;Min();
<a name="l00169"></a>00169     <span class="keyword">const</span> int64 local_max = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i]-&gt;Max();
<a name="l00170"></a>00170     cmin += local_min;
<a name="l00171"></a>00171     cmax += local_max;
<a name="l00172"></a>00172     diameter = std::max(diameter, local_max - local_min);
<a name="l00173"></a>00173   }
<a name="l00174"></a>00174   <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#153843dc05670b540a8e83dba2043eb0" title="This method sets both the min and the max of the expression.">SetRange</a>(cmin, cmax);
<a name="l00175"></a>00175 
<a name="l00176"></a>00176   <span class="keyword">const</span> int64 vmin = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>();
<a name="l00177"></a>00177   <span class="keyword">const</span> int64 vmax = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>();
<a name="l00178"></a>00178   <span class="comment">// The second condition is rule 5 in the above paper.</span>
<a name="l00179"></a>00179   <span class="keywordflow">if</span> ((vmax &gt;= cmax &amp;&amp; vmin &lt;= cmin) || vmax - vmin &gt; diameter) {
<a name="l00180"></a>00180     <span class="keywordflow">return</span>;
<a name="l00181"></a>00181   }
<a name="l00182"></a>00182 
<a name="l00183"></a>00183   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = start; i &lt;= end; ++i) {
<a name="l00184"></a>00184     <span class="keyword">const</span> int64 other_min = cmin - <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i]-&gt;Min();
<a name="l00185"></a>00185     <span class="keyword">const</span> int64 other_max = cmax - <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i]-&gt;Max();
<a name="l00186"></a>00186     <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i]-&gt;SetRange(vmin - other_max, vmax - other_min);
<a name="l00187"></a>00187   }
<a name="l00188"></a>00188 }
<a name="l00189"></a>00189 
<a name="l00190"></a><a class="code" href="classoperations__research_1_1SumArrayCt.html#6f93919185580638dc138c8e61dd98ae">00190</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1SumArrayCt.html#6f93919185580638dc138c8e61dd98ae" title="Constraint class.">SumArrayCt::DebugString</a>()<span class="keyword"> const </span>{
<a name="l00191"></a>00191   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1ArrayConstraint.html#8f07990e5926230780cb62e8e7fd53fc">DebugStringInternal</a>(<span class="stringliteral">"SumArrayCt"</span>);
<a name="l00192"></a>00192 }
<a name="l00193"></a>00193 
<a name="l00194"></a>00194 <span class="comment">// ----- Sum Array Expr -----</span>
<a name="l00195"></a>00195 
<a name="l00196"></a>00196 <span class="comment">// Array Sum: the sum of all the elements. More efficient that using just</span>
<a name="l00197"></a>00197 <span class="comment">// binary IntPlusExpr operators when the array grows</span>
<a name="l00198"></a><a class="code" href="classoperations__research_1_1SumArray.html">00198</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1SumArray.html" title="Sum Array Expr.">SumArray</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1ArrayExpr.html">ArrayExpr</a> {
<a name="l00199"></a>00199  <span class="keyword">public</span>:
<a name="l00200"></a>00200   <span class="comment">// this constructor will copy the array. The caller can safely delete the</span>
<a name="l00201"></a>00201   <span class="comment">// exprs array himself</span>
<a name="l00202"></a>00202   <a class="code" href="classoperations__research_1_1SumArray.html" title="Sum Array Expr.">SumArray</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* exprs, <span class="keywordtype">int</span> size);
<a name="l00203"></a>00203   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1SumArray.html" title="Sum Array Expr.">SumArray</a>();
<a name="l00204"></a>00204 
<a name="l00205"></a>00205   <span class="keyword">virtual</span> int64 Min() <span class="keyword">const</span>;
<a name="l00206"></a>00206   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetMin(int64 m);
<a name="l00207"></a>00207   <span class="keyword">virtual</span> int64 Max() <span class="keyword">const</span>;
<a name="l00208"></a>00208   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetMax(int64 m);
<a name="l00209"></a>00209   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetRange(int64 l, int64 u);
<a name="l00210"></a>00210   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1SumArrayCt.html#6f93919185580638dc138c8e61dd98ae" title="Constraint class.">DebugString</a>() <span class="keyword">const</span>;
<a name="l00211"></a>00211   <span class="keyword">virtual</span> <span class="keywordtype">void</span> WhenRange(<a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d);
<a name="l00212"></a><a class="code" href="classoperations__research_1_1SumArray.html#ca9e7e9178827abb9e8a6621ef2a6dba">00212</a>   <span class="keyword">virtual</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* CastToVar() {
<a name="l00213"></a>00213     <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>();
<a name="l00214"></a>00214     int64 vmin = Min();
<a name="l00215"></a>00215     int64 vmax = Max();
<a name="l00216"></a>00216     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#c313eaefa5980567fbf2b12608f8e854" title="Make Factory.">MakeIntVar</a>(vmin, vmax);
<a name="l00217"></a>00217     AddDelegateName(<span class="stringliteral">"Var"</span>, var);
<a name="l00218"></a>00218     <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <span class="keyword">const</span> ct = s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1SumArrayCt.html#870927f68fbeb6d5bc7a3ede3b32c974">SumArrayCt</a>(s, <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>.get(),
<a name="l00219"></a>00219                                                       <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>, var));
<a name="l00220"></a>00220     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#9c522a6cff91adae19af5cce7d8e411f" title="propagation">AddConstraint</a>(ct);
<a name="l00221"></a>00221     <span class="keywordflow">return</span> var;
<a name="l00222"></a>00222   }
<a name="l00223"></a>00223 };
<a name="l00224"></a>00224 
<a name="l00225"></a><a class="code" href="classoperations__research_1_1SumArray.html#8190714d186f77d4434edd373ccb655d">00225</a> <a class="code" href="classoperations__research_1_1SumArray.html#8190714d186f77d4434edd373ccb655d">SumArray::~SumArray</a>() {}
<a name="l00226"></a>00226 
<a name="l00227"></a><a class="code" href="classoperations__research_1_1SumArray.html#4cb25511f977057ed908757f5be12880">00227</a> <a class="code" href="classoperations__research_1_1SumArray.html#4cb25511f977057ed908757f5be12880" title="this constructor will copy the array.">SumArray::SumArray</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size)
<a name="l00228"></a>00228     : <a class="code" href="classoperations__research_1_1ArrayExpr.html">ArrayExpr</a>(solver, vars, size) {}
<a name="l00229"></a>00229 
<a name="l00230"></a><a class="code" href="classoperations__research_1_1SumArray.html#91fda3f224656b328b28dc0c2bd0d1eb">00230</a> int64 <a class="code" href="classoperations__research_1_1SumArray.html#91fda3f224656b328b28dc0c2bd0d1eb">SumArray::Min</a>()<span class="keyword"> const </span>{
<a name="l00231"></a>00231   int64 computed_min = 0;
<a name="l00232"></a>00232   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l00233"></a>00233     computed_min += <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;Min();
<a name="l00234"></a>00234   }
<a name="l00235"></a>00235   <span class="keywordflow">return</span> computed_min;
<a name="l00236"></a>00236 }
<a name="l00237"></a>00237 
<a name="l00238"></a><a class="code" href="classoperations__research_1_1SumArray.html#d1f7e03f34ec8ea6002200bd808a8731">00238</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumArray.html#d1f7e03f34ec8ea6002200bd808a8731">SumArray::SetMin</a>(int64 new_min) {
<a name="l00239"></a>00239   <a class="code" href="classoperations__research_1_1SumArray.html#8df3e268c38357abcf6df3a497d1b892" title="This method sets both the min and the max of the expression.">SetRange</a>(new_min, kint64max);
<a name="l00240"></a>00240 }
<a name="l00241"></a>00241 
<a name="l00242"></a><a class="code" href="classoperations__research_1_1SumArray.html#b8a24c95f16536204c7434f97a75e3f1">00242</a> int64 <a class="code" href="classoperations__research_1_1SumArray.html#b8a24c95f16536204c7434f97a75e3f1">SumArray::Max</a>()<span class="keyword"> const </span>{
<a name="l00243"></a>00243   int64 computed_max = 0;
<a name="l00244"></a>00244   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l00245"></a>00245     computed_max += <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;Max();
<a name="l00246"></a>00246   }
<a name="l00247"></a>00247   <span class="keywordflow">return</span> computed_max;
<a name="l00248"></a>00248 }
<a name="l00249"></a>00249 
<a name="l00250"></a><a class="code" href="classoperations__research_1_1SumArray.html#d093b2495d4774c90270393383bb1b31">00250</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumArray.html#d093b2495d4774c90270393383bb1b31">SumArray::SetMax</a>(int64 new_max) {
<a name="l00251"></a>00251   <a class="code" href="classoperations__research_1_1SumArray.html#8df3e268c38357abcf6df3a497d1b892" title="This method sets both the min and the max of the expression.">SetRange</a>(kint64min, new_max);
<a name="l00252"></a>00252 }
<a name="l00253"></a>00253 
<a name="l00254"></a><a class="code" href="classoperations__research_1_1SumArray.html#8df3e268c38357abcf6df3a497d1b892">00254</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumArray.html#8df3e268c38357abcf6df3a497d1b892" title="This method sets both the min and the max of the expression.">SumArray::SetRange</a>(int64 new_min, int64 new_max) {
<a name="l00255"></a>00255   int64 current_min = 0;
<a name="l00256"></a>00256   int64 current_max = 0;
<a name="l00257"></a>00257   int64 diameter = 0;
<a name="l00258"></a>00258   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l00259"></a>00259     <span class="keyword">const</span> int64 vmin = <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;Min();
<a name="l00260"></a>00260     <span class="keyword">const</span> int64 vmax = <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;Max();
<a name="l00261"></a>00261     current_min += vmin;
<a name="l00262"></a>00262     current_max += vmax;
<a name="l00263"></a>00263     diameter = std::max(diameter, vmax - vmin);
<a name="l00264"></a>00264   }
<a name="l00265"></a>00265   new_max = std::min(current_max, new_max);
<a name="l00266"></a>00266   new_min = std::max(new_min, current_min);
<a name="l00267"></a>00267   <span class="keywordflow">if</span> ((new_max &gt;= current_max &amp;&amp; new_min &lt;= current_min) ||
<a name="l00268"></a>00268       new_max - new_min &gt; diameter) {
<a name="l00269"></a>00269     <span class="keywordflow">return</span>;
<a name="l00270"></a>00270   }
<a name="l00271"></a>00271   <span class="keywordflow">if</span> (new_max &lt; current_min || new_min &gt; current_max) {
<a name="l00272"></a>00272     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l00273"></a>00273   }
<a name="l00274"></a>00274   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size_; ++i) {
<a name="l00275"></a>00275     <span class="keyword">const</span> int64 other_min = current_min - <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;Min();
<a name="l00276"></a>00276     <span class="keyword">const</span> int64 other_max = current_max - <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;Max();
<a name="l00277"></a>00277     <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;SetRange(new_min - other_max, new_max - other_min);
<a name="l00278"></a>00278   }
<a name="l00279"></a>00279 }
<a name="l00280"></a>00280 
<a name="l00281"></a><a class="code" href="classoperations__research_1_1SumArray.html#50efc54cc7906408734c3d1214634c91">00281</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1SumArray.html#50efc54cc7906408734c3d1214634c91">SumArray::DebugString</a>()<span class="keyword"> const </span>{
<a name="l00282"></a>00282   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1ArrayExpr.html#e7ddc309e78f402b0e87c970e3af7edf">DebugStringInternal</a>(<span class="stringliteral">"SumArray"</span>);
<a name="l00283"></a>00283 }
<a name="l00284"></a>00284 
<a name="l00285"></a><a class="code" href="classoperations__research_1_1SumArray.html#5a7e445d2c3f901109179b6c55d6ddfd">00285</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumArray.html#5a7e445d2c3f901109179b6c55d6ddfd" title="Attach a demon that will watch the min or the max of the expression.">SumArray::WhenRange</a>(<a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* demon) {
<a name="l00286"></a>00286   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l00287"></a>00287     <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;WhenRange(demon);
<a name="l00288"></a>00288   }
<a name="l00289"></a>00289 }
<a name="l00290"></a>00290 
<a name="l00291"></a>00291 <span class="comment">// ---------- Min Array ----------</span>
<a name="l00292"></a>00292 
<a name="l00293"></a>00293 <span class="comment">// ----- Min Bool Array Ct -----</span>
<a name="l00294"></a>00294 
<a name="l00295"></a>00295 <span class="comment">// This constraint implements min(vars) == var.  It is delayed such</span>
<a name="l00296"></a>00296 <span class="comment">// that propagation only occurs when all variables have been touched.</span>
<a name="l00297"></a><a class="code" href="classoperations__research_1_1MinBoolArrayCt.html">00297</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1MinBoolArrayCt.html" title="Min Array.">MinBoolArrayCt</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1ArrayConstraint.html" title="Base array classes Used for code factorization.">ArrayConstraint</a> {
<a name="l00298"></a>00298  <span class="keyword">public</span>:
<a name="l00299"></a>00299   <a class="code" href="classoperations__research_1_1MinBoolArrayCt.html" title="Min Array.">MinBoolArrayCt</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars, <span class="keywordtype">int</span> size,
<a name="l00300"></a>00300                  <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* var);
<a name="l00301"></a><a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#e50844a62899352a8978fb72ea1636ab">00301</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1MinBoolArrayCt.html" title="Min Array.">MinBoolArrayCt</a>() {}
<a name="l00302"></a>00302 
<a name="l00303"></a>00303   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Post();
<a name="l00304"></a>00304   <span class="keyword">virtual</span> <span class="keywordtype">void</span> InitialPropagate();
<a name="l00305"></a>00305 
<a name="l00306"></a>00306   <span class="keywordtype">void</span> Update(<span class="keywordtype">int</span> index);
<a name="l00307"></a>00307   <span class="keywordtype">void</span> UpdateVar();
<a name="l00308"></a>00308 
<a name="l00309"></a>00309   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1SumArray.html#50efc54cc7906408734c3d1214634c91">DebugString</a>() <span class="keyword">const</span>;
<a name="l00310"></a>00310 
<a name="l00311"></a>00311  <span class="keyword">private</span>:
<a name="l00312"></a><a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#5124ab33debe5d56d58b81b21ec7879c">00312</a>   <a class="code" href="classoperations__research_1_1SmallRevBitSet.html" title="This class represents a small reversible bitset (size &amp;lt;= 64).">SmallRevBitSet</a> bits_;
<a name="l00313"></a><a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#d4783d33fe9c67f1d5a4ff26831d07cf">00313</a>   <span class="keywordtype">bool</span> inhibited_;
<a name="l00314"></a>00314 };
<a name="l00315"></a>00315 
<a name="l00316"></a><a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#c374ef1252a105d90006cbeb9559f64a">00316</a> <a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#c374ef1252a105d90006cbeb9559f64a">MinBoolArrayCt::MinBoolArrayCt</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00317"></a>00317                                <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l00318"></a>00318                                <span class="keywordtype">int</span> size,
<a name="l00319"></a>00319                                <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* var)
<a name="l00320"></a>00320     : <a class="code" href="classoperations__research_1_1ArrayConstraint.html" title="Base array classes Used for code factorization.">ArrayConstraint</a>(s, vars, size, var), bits_(size), inhibited_(false) {}
<a name="l00321"></a>00321 
<a name="l00322"></a><a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#10b2fd8574063adf0672bebd412d9792">00322</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#10b2fd8574063adf0672bebd412d9792" title="This method is called when the constraint is processed by the solver.">MinBoolArrayCt::Post</a>() {
<a name="l00323"></a>00323   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>; ++i) {
<a name="l00324"></a>00324     <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d = <a class="code" href="namespaceoperations__research.html#bc7cb18be5d9d418d32782253cd4bf5a">MakeConstraintDemon1</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l00325"></a>00325                                     <span class="keyword">this</span>,
<a name="l00326"></a>00326                                     &amp;<a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#f2d15bd19df634fefb20b7aac182d00a">MinBoolArrayCt::Update</a>,
<a name="l00327"></a>00327                                     <span class="stringliteral">"Update"</span>,
<a name="l00328"></a>00328                                     i);
<a name="l00329"></a>00329     <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i]-&gt;WhenRange(d);
<a name="l00330"></a>00330   }
<a name="l00331"></a>00331 
<a name="l00332"></a>00332   <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* uv = <a class="code" href="namespaceoperations__research.html#50b3d41d8dbf72bb2ad22235a9e1f53e">MakeConstraintDemon0</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l00333"></a>00333                                    <span class="keyword">this</span>,
<a name="l00334"></a>00334                                    &amp;<a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#475762c0526f9f45c5fde2ddf446c1a7">MinBoolArrayCt::UpdateVar</a>,
<a name="l00335"></a>00335                                    <span class="stringliteral">"UpdateVar"</span>);
<a name="l00336"></a>00336   <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#845a3c3c71323504f6b59f9c0ea46b08" title="Attach a demon that will watch the min or the max of the expression.">WhenRange</a>(uv);
<a name="l00337"></a>00337 }
<a name="l00338"></a>00338 
<a name="l00339"></a><a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#9cb1494d8983172fff18e1e69c986d04">00339</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#9cb1494d8983172fff18e1e69c986d04" title="This method performs the initial propagation of the constraint.">MinBoolArrayCt::InitialPropagate</a>() {
<a name="l00340"></a>00340   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>() == 1LL) {
<a name="l00341"></a>00341     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>; ++i) {
<a name="l00342"></a>00342       <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i]-&gt;SetMin(1LL);
<a name="l00343"></a>00343     }
<a name="l00344"></a>00344     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#d4783d33fe9c67f1d5a4ff26831d07cf">inhibited_</a>, <span class="keyword">true</span>);
<a name="l00345"></a>00345   } <span class="keywordflow">else</span> {
<a name="l00346"></a>00346     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>; ++i) {
<a name="l00347"></a>00347       <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i];
<a name="l00348"></a>00348       <span class="keywordflow">if</span> (var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>() == 0LL) {
<a name="l00349"></a>00349         <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#dee9a082160df545671781df47f2b985">SetMax</a>(0LL);
<a name="l00350"></a>00350         <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#d4783d33fe9c67f1d5a4ff26831d07cf">inhibited_</a>, <span class="keyword">true</span>);
<a name="l00351"></a>00351         <span class="keywordflow">return</span>;
<a name="l00352"></a>00352       }
<a name="l00353"></a>00353       <span class="keywordflow">if</span> (var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>() == 0LL) {
<a name="l00354"></a>00354         <a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#5124ab33debe5d56d58b81b21ec7879c">bits_</a>.<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#427373fdc21062991efa27f991862ff6">SetToOne</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(), i);
<a name="l00355"></a>00355       }
<a name="l00356"></a>00356     }
<a name="l00357"></a>00357     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#5124ab33debe5d56d58b81b21ec7879c">bits_</a>.<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#c48a71fee237bc7b7c30da70964feac4">IsCardinalityZero</a>()) {
<a name="l00358"></a>00358       <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#8889930ed76665b0f24f12df2ed4e05c" title="This method sets the value of the expression.">SetValue</a>(1LL);
<a name="l00359"></a>00359       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#d4783d33fe9c67f1d5a4ff26831d07cf">inhibited_</a>, <span class="keyword">true</span>);
<a name="l00360"></a>00360     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>() == 0LL &amp;&amp; <a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#5124ab33debe5d56d58b81b21ec7879c">bits_</a>.<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#658d742e0b7ad7f6970fc767b6a109b6">IsCardinalityOne</a>()) {
<a name="l00361"></a>00361       <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[<a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#5124ab33debe5d56d58b81b21ec7879c">bits_</a>.<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#8f2b8156245201ddfdb9df3d98f5ceb4">GetFirstOne</a>()]-&gt;SetValue(0LL);
<a name="l00362"></a>00362       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#d4783d33fe9c67f1d5a4ff26831d07cf">inhibited_</a>, <span class="keyword">true</span>);
<a name="l00363"></a>00363     }
<a name="l00364"></a>00364   }
<a name="l00365"></a>00365 }
<a name="l00366"></a>00366 
<a name="l00367"></a><a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#f2d15bd19df634fefb20b7aac182d00a">00367</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#f2d15bd19df634fefb20b7aac182d00a">MinBoolArrayCt::Update</a>(<span class="keywordtype">int</span> index) {
<a name="l00368"></a>00368   <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#d4783d33fe9c67f1d5a4ff26831d07cf">inhibited_</a>) {
<a name="l00369"></a>00369     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[index]-&gt;Max() == 0LL) {  <span class="comment">// Bound to 0.</span>
<a name="l00370"></a>00370       <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#8889930ed76665b0f24f12df2ed4e05c" title="This method sets the value of the expression.">SetValue</a>(0LL);
<a name="l00371"></a>00371       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#d4783d33fe9c67f1d5a4ff26831d07cf">inhibited_</a>, <span class="keyword">true</span>);
<a name="l00372"></a>00372     } <span class="keywordflow">else</span> {
<a name="l00373"></a>00373       <a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#5124ab33debe5d56d58b81b21ec7879c">bits_</a>.<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#22f35c8d356a6bc1dfb95bb36da6d37a">SetToZero</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(), index);
<a name="l00374"></a>00374       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#5124ab33debe5d56d58b81b21ec7879c">bits_</a>.<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#c48a71fee237bc7b7c30da70964feac4">IsCardinalityZero</a>()) {
<a name="l00375"></a>00375         <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#8889930ed76665b0f24f12df2ed4e05c" title="This method sets the value of the expression.">SetValue</a>(1LL);
<a name="l00376"></a>00376         <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#d4783d33fe9c67f1d5a4ff26831d07cf">inhibited_</a>, <span class="keyword">true</span>);
<a name="l00377"></a>00377       } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>() == 0LL &amp;&amp; <a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#5124ab33debe5d56d58b81b21ec7879c">bits_</a>.<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#658d742e0b7ad7f6970fc767b6a109b6">IsCardinalityOne</a>()) {
<a name="l00378"></a>00378         <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[<a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#5124ab33debe5d56d58b81b21ec7879c">bits_</a>.<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#8f2b8156245201ddfdb9df3d98f5ceb4">GetFirstOne</a>()]-&gt;SetValue(0LL);
<a name="l00379"></a>00379         <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#d4783d33fe9c67f1d5a4ff26831d07cf">inhibited_</a>, <span class="keyword">true</span>);
<a name="l00380"></a>00380       }
<a name="l00381"></a>00381     }
<a name="l00382"></a>00382   }
<a name="l00383"></a>00383 }
<a name="l00384"></a>00384 
<a name="l00385"></a><a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#475762c0526f9f45c5fde2ddf446c1a7">00385</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#475762c0526f9f45c5fde2ddf446c1a7">MinBoolArrayCt::UpdateVar</a>() {
<a name="l00386"></a>00386   <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#d4783d33fe9c67f1d5a4ff26831d07cf">inhibited_</a>) {
<a name="l00387"></a>00387     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>() == 1LL) {
<a name="l00388"></a>00388       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>; ++i) {
<a name="l00389"></a>00389         <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i]-&gt;SetMin(1LL);
<a name="l00390"></a>00390       }
<a name="l00391"></a>00391       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#d4783d33fe9c67f1d5a4ff26831d07cf">inhibited_</a>, <span class="keyword">true</span>);
<a name="l00392"></a>00392     } <span class="keywordflow">else</span> {
<a name="l00393"></a>00393       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#5124ab33debe5d56d58b81b21ec7879c">bits_</a>.<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#658d742e0b7ad7f6970fc767b6a109b6">IsCardinalityOne</a>()) {
<a name="l00394"></a>00394         <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[<a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#5124ab33debe5d56d58b81b21ec7879c">bits_</a>.<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#8f2b8156245201ddfdb9df3d98f5ceb4">GetFirstOne</a>()]-&gt;SetValue(0LL);
<a name="l00395"></a>00395         <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#d4783d33fe9c67f1d5a4ff26831d07cf">inhibited_</a>, <span class="keyword">true</span>);
<a name="l00396"></a>00396       }
<a name="l00397"></a>00397     }
<a name="l00398"></a>00398   }
<a name="l00399"></a>00399 }
<a name="l00400"></a>00400 
<a name="l00401"></a><a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#bfec1d1352e8b7ac3a39087c9fac1ddf">00401</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#bfec1d1352e8b7ac3a39087c9fac1ddf" title="Constraint class.">MinBoolArrayCt::DebugString</a>()<span class="keyword"> const </span>{
<a name="l00402"></a>00402   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1ArrayConstraint.html#8f07990e5926230780cb62e8e7fd53fc">DebugStringInternal</a>(<span class="stringliteral">"MinBoolArrayCt"</span>);
<a name="l00403"></a>00403 }
<a name="l00404"></a>00404 
<a name="l00405"></a>00405 <span class="comment">// ----- MinBoolArray -----</span>
<a name="l00406"></a>00406 
<a name="l00407"></a><a class="code" href="classoperations__research_1_1MinBoolArray.html">00407</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1MinBoolArray.html" title="MinBoolArray.">MinBoolArray</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1ArrayExpr.html">ArrayExpr</a> {
<a name="l00408"></a>00408  <span class="keyword">public</span>:
<a name="l00409"></a>00409   <span class="comment">// This constructor will copy the array. The caller can safely delete the</span>
<a name="l00410"></a>00410   <span class="comment">// exprs array himself</span>
<a name="l00411"></a>00411   <a class="code" href="classoperations__research_1_1MinBoolArray.html" title="MinBoolArray.">MinBoolArray</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* exprs, <span class="keywordtype">int</span> size);
<a name="l00412"></a>00412   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1MinBoolArray.html" title="MinBoolArray.">MinBoolArray</a>();
<a name="l00413"></a>00413 
<a name="l00414"></a>00414   <span class="keyword">virtual</span> int64 Min() <span class="keyword">const</span>;
<a name="l00415"></a>00415   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetMin(int64 m);
<a name="l00416"></a>00416   <span class="keyword">virtual</span> int64 Max() <span class="keyword">const</span>;
<a name="l00417"></a>00417   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetMax(int64 m);
<a name="l00418"></a>00418   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#bfec1d1352e8b7ac3a39087c9fac1ddf" title="Constraint class.">DebugString</a>() <span class="keyword">const</span>;
<a name="l00419"></a>00419   <span class="keyword">virtual</span> <span class="keywordtype">void</span> WhenRange(<a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d);
<a name="l00420"></a><a class="code" href="classoperations__research_1_1MinBoolArray.html#2215364728cc3c307c3f9fdab23976ea">00420</a>   <span class="keyword">virtual</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* CastToVar() {
<a name="l00421"></a>00421     <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>();
<a name="l00422"></a>00422     int64 vmin = 0LL;
<a name="l00423"></a>00423     int64 vmax = 0LL;
<a name="l00424"></a>00424     Range(&amp;vmin, &amp;vmax);
<a name="l00425"></a>00425     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* var = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#c313eaefa5980567fbf2b12608f8e854" title="Make Factory.">MakeIntVar</a>(vmin, vmax);
<a name="l00426"></a>00426     AddDelegateName(<span class="stringliteral">"Var"</span>, var);
<a name="l00427"></a>00427     <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <span class="keyword">const</span> ct =
<a name="l00428"></a>00428         s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1MinBoolArrayCt.html#c374ef1252a105d90006cbeb9559f64a">MinBoolArrayCt</a>(s, <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>.get(), <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>, var));
<a name="l00429"></a>00429     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#9c522a6cff91adae19af5cce7d8e411f" title="propagation">AddConstraint</a>(ct);
<a name="l00430"></a>00430     <span class="keywordflow">return</span> var;
<a name="l00431"></a>00431   }
<a name="l00432"></a>00432 };
<a name="l00433"></a>00433 
<a name="l00434"></a><a class="code" href="classoperations__research_1_1MinBoolArray.html#9b597f687ac58a0ee10310348ee2ec08">00434</a> <a class="code" href="classoperations__research_1_1MinBoolArray.html#9b597f687ac58a0ee10310348ee2ec08">MinBoolArray::~MinBoolArray</a>() {}
<a name="l00435"></a>00435 
<a name="l00436"></a><a class="code" href="classoperations__research_1_1MinBoolArray.html#bbca26dee5c128d2dbbbe4e64f15f98e">00436</a> <a class="code" href="classoperations__research_1_1MinBoolArray.html#bbca26dee5c128d2dbbbe4e64f15f98e" title="This constructor will copy the array.">MinBoolArray::MinBoolArray</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size)
<a name="l00437"></a>00437     : <a class="code" href="classoperations__research_1_1ArrayExpr.html">ArrayExpr</a>(s, vars, size) {}
<a name="l00438"></a>00438 
<a name="l00439"></a><a class="code" href="classoperations__research_1_1MinBoolArray.html#3020f3fc3c7c7754c9489a712d55d2b7">00439</a> int64 <a class="code" href="classoperations__research_1_1MinBoolArray.html#3020f3fc3c7c7754c9489a712d55d2b7">MinBoolArray::Min</a>()<span class="keyword"> const </span>{
<a name="l00440"></a>00440   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l00441"></a>00441     <span class="keyword">const</span> int64 vmin = <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;Min();
<a name="l00442"></a>00442     <span class="keywordflow">if</span> (vmin == 0LL) {
<a name="l00443"></a>00443       <span class="keywordflow">return</span> 0LL;
<a name="l00444"></a>00444     }
<a name="l00445"></a>00445   }
<a name="l00446"></a>00446   <span class="keywordflow">return</span> 1LL;
<a name="l00447"></a>00447 }
<a name="l00448"></a>00448 
<a name="l00449"></a><a class="code" href="classoperations__research_1_1MinBoolArray.html#b910712da09afb4387e93f1bd336bcc5">00449</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinBoolArray.html#b910712da09afb4387e93f1bd336bcc5">MinBoolArray::SetMin</a>(int64 m) {
<a name="l00450"></a>00450   <span class="keywordflow">if</span> (m &lt;= 0) {
<a name="l00451"></a>00451     <span class="keywordflow">return</span>;
<a name="l00452"></a>00452   }
<a name="l00453"></a>00453   <span class="keywordflow">if</span> (m &gt; 1) {
<a name="l00454"></a>00454     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l00455"></a>00455   }
<a name="l00456"></a>00456   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l00457"></a>00457     <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;SetMin(1LL);
<a name="l00458"></a>00458   }
<a name="l00459"></a>00459 }
<a name="l00460"></a>00460 
<a name="l00461"></a><a class="code" href="classoperations__research_1_1MinBoolArray.html#f9698bcc364084e2c103f5a1a7d5fd5a">00461</a> int64 <a class="code" href="classoperations__research_1_1MinBoolArray.html#f9698bcc364084e2c103f5a1a7d5fd5a">MinBoolArray::Max</a>()<span class="keyword"> const </span>{
<a name="l00462"></a>00462   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l00463"></a>00463     <span class="keyword">const</span> int64 vmax = <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;Max();
<a name="l00464"></a>00464     <span class="keywordflow">if</span> (vmax == 0LL) {
<a name="l00465"></a>00465       <span class="keywordflow">return</span> 0LL;
<a name="l00466"></a>00466     }
<a name="l00467"></a>00467   }
<a name="l00468"></a>00468   <span class="keywordflow">return</span> 1LL;
<a name="l00469"></a>00469 }
<a name="l00470"></a>00470 
<a name="l00471"></a><a class="code" href="classoperations__research_1_1MinBoolArray.html#ec1acd223a1f59318d208098d25e64fb">00471</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinBoolArray.html#ec1acd223a1f59318d208098d25e64fb">MinBoolArray::SetMax</a>(int64 m) {
<a name="l00472"></a>00472   <span class="keywordflow">if</span> (m &lt; 0) {
<a name="l00473"></a>00473     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l00474"></a>00474   } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (m &gt;= 1) {
<a name="l00475"></a>00475     <span class="keywordflow">return</span>;
<a name="l00476"></a>00476   }
<a name="l00477"></a>00477   DCHECK_EQ(m, 0LL);
<a name="l00478"></a>00478   <span class="keywordtype">int</span> active = 0;
<a name="l00479"></a>00479   <span class="keywordtype">int</span> curr = -1;
<a name="l00480"></a>00480   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l00481"></a>00481     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;<a class="code" href="classoperations__research_1_1MinBoolArray.html#3020f3fc3c7c7754c9489a712d55d2b7">Min</a>() == 0LL) {
<a name="l00482"></a>00482       active++;
<a name="l00483"></a>00483       curr = i;
<a name="l00484"></a>00484     }
<a name="l00485"></a>00485   }
<a name="l00486"></a>00486   <span class="keywordflow">if</span> (active == 0) {
<a name="l00487"></a>00487     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l00488"></a>00488   }
<a name="l00489"></a>00489   <span class="keywordflow">if</span> (active == 1) {
<a name="l00490"></a>00490     <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[curr]-&gt;SetMax(0LL);
<a name="l00491"></a>00491   }
<a name="l00492"></a>00492 }
<a name="l00493"></a>00493 
<a name="l00494"></a><a class="code" href="classoperations__research_1_1MinBoolArray.html#e65fd16a0fbda5d84cecfe6e9e8f557f">00494</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1MinBoolArray.html#e65fd16a0fbda5d84cecfe6e9e8f557f">MinBoolArray::DebugString</a>()<span class="keyword"> const </span>{
<a name="l00495"></a>00495   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1ArrayExpr.html#e7ddc309e78f402b0e87c970e3af7edf">DebugStringInternal</a>(<span class="stringliteral">"MinBoolArray"</span>);
<a name="l00496"></a>00496 }
<a name="l00497"></a>00497 
<a name="l00498"></a><a class="code" href="classoperations__research_1_1MinBoolArray.html#f06d087b0d13aa531cdbfe827821af74">00498</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinBoolArray.html#f06d087b0d13aa531cdbfe827821af74" title="Attach a demon that will watch the min or the max of the expression.">MinBoolArray::WhenRange</a>(<a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d) {
<a name="l00499"></a>00499   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l00500"></a>00500     <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;WhenRange(d);
<a name="l00501"></a>00501   }
<a name="l00502"></a>00502 }
<a name="l00503"></a>00503 
<a name="l00504"></a>00504 <span class="comment">// ----- Min Array Ct -----</span>
<a name="l00505"></a>00505 
<a name="l00506"></a>00506 <span class="comment">// This constraint implements min(vars) == var.  It is delayed such</span>
<a name="l00507"></a>00507 <span class="comment">// that propagation only occurs when all variables have been touched.</span>
<a name="l00508"></a><a class="code" href="classoperations__research_1_1MinArrayCt.html">00508</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1MinArrayCt.html" title="Min Array Ct.">MinArrayCt</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1ArrayConstraint.html" title="Base array classes Used for code factorization.">ArrayConstraint</a> {
<a name="l00509"></a>00509  <span class="keyword">public</span>:
<a name="l00510"></a>00510   <a class="code" href="classoperations__research_1_1MinArrayCt.html" title="Min Array Ct.">MinArrayCt</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars, <span class="keywordtype">int</span> size,
<a name="l00511"></a>00511              <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* var);
<a name="l00512"></a><a class="code" href="classoperations__research_1_1MinArrayCt.html#0b49db50fc00fd2e2335eaf5185a2dc1">00512</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1MinArrayCt.html" title="Min Array Ct.">MinArrayCt</a>() {}
<a name="l00513"></a>00513 
<a name="l00514"></a>00514   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Post();
<a name="l00515"></a>00515   <span class="keyword">virtual</span> <span class="keywordtype">void</span> InitialPropagate();
<a name="l00516"></a>00516 
<a name="l00517"></a>00517   <span class="keywordtype">void</span> Update(<span class="keywordtype">int</span> index);
<a name="l00518"></a>00518   <span class="keywordtype">void</span> UpdateVar();
<a name="l00519"></a>00519 
<a name="l00520"></a>00520   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1MinBoolArray.html#e65fd16a0fbda5d84cecfe6e9e8f557f">DebugString</a>() <span class="keyword">const</span>;
<a name="l00521"></a>00521 
<a name="l00522"></a>00522  <span class="keyword">private</span>:
<a name="l00523"></a><a class="code" href="classoperations__research_1_1MinArrayCt.html#f23f38323271254f4d82c6c700a07192">00523</a>   <a class="code" href="classoperations__research_1_1Rev.html" title="These class represent reversible POD types.">Rev&lt;int&gt;</a> min_support_;
<a name="l00524"></a>00524 };
<a name="l00525"></a>00525 
<a name="l00526"></a><a class="code" href="classoperations__research_1_1MinArrayCt.html#597a78c8dae5aca8edc259f35e7b9520">00526</a> <a class="code" href="classoperations__research_1_1MinArrayCt.html#597a78c8dae5aca8edc259f35e7b9520">MinArrayCt::MinArrayCt</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00527"></a>00527                        <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l00528"></a>00528                        <span class="keywordtype">int</span> size,
<a name="l00529"></a>00529                        <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* var)
<a name="l00530"></a>00530     : <a class="code" href="classoperations__research_1_1ArrayConstraint.html" title="Base array classes Used for code factorization.">ArrayConstraint</a>(s, vars, size, var), min_support_(0) {}
<a name="l00531"></a>00531 
<a name="l00532"></a><a class="code" href="classoperations__research_1_1MinArrayCt.html#3d70146bb6cf7786504233a23eb89815">00532</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinArrayCt.html#3d70146bb6cf7786504233a23eb89815" title="This method is called when the constraint is processed by the solver.">MinArrayCt::Post</a>() {
<a name="l00533"></a>00533   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>; ++i) {
<a name="l00534"></a>00534     <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d = <a class="code" href="namespaceoperations__research.html#bc7cb18be5d9d418d32782253cd4bf5a">MakeConstraintDemon1</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l00535"></a>00535                                     <span class="keyword">this</span>,
<a name="l00536"></a>00536                                     &amp;<a class="code" href="classoperations__research_1_1MinArrayCt.html#224a6917bb21e36991435c058ff58204">MinArrayCt::Update</a>,
<a name="l00537"></a>00537                                     <span class="stringliteral">"Update"</span>,
<a name="l00538"></a>00538                                     i);
<a name="l00539"></a>00539     <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i]-&gt;WhenRange(d);
<a name="l00540"></a>00540   }
<a name="l00541"></a>00541   <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* uv = <a class="code" href="namespaceoperations__research.html#50b3d41d8dbf72bb2ad22235a9e1f53e">MakeConstraintDemon0</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l00542"></a>00542                                    <span class="keyword">this</span>,
<a name="l00543"></a>00543                                    &amp;<a class="code" href="classoperations__research_1_1MinArrayCt.html#7153740c628001da2127d7defcfa756f">MinArrayCt::UpdateVar</a>,
<a name="l00544"></a>00544                                    <span class="stringliteral">"UpdateVar"</span>);
<a name="l00545"></a>00545   <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#845a3c3c71323504f6b59f9c0ea46b08" title="Attach a demon that will watch the min or the max of the expression.">WhenRange</a>(uv);
<a name="l00546"></a>00546 }
<a name="l00547"></a>00547 
<a name="l00548"></a><a class="code" href="classoperations__research_1_1MinArrayCt.html#3f8e51a4205154d82aa0909eb1936aa8">00548</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinArrayCt.html#3f8e51a4205154d82aa0909eb1936aa8" title="This method performs the initial propagation of the constraint.">MinArrayCt::InitialPropagate</a>() {
<a name="l00549"></a>00549   int64 vmin = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>();
<a name="l00550"></a>00550   int64 vmax = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>();
<a name="l00551"></a>00551   int64 cmin = kint64max;
<a name="l00552"></a>00552   int64 cmax = kint64max;
<a name="l00553"></a>00553   <span class="keywordtype">int</span> min_support = -1;
<a name="l00554"></a>00554   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>; ++i) {
<a name="l00555"></a>00555     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i];
<a name="l00556"></a>00556     var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#fec5a6eea8ee64fbc7fa34d7d28f8d8f">SetMin</a>(vmin);
<a name="l00557"></a>00557     <span class="keyword">const</span> int64 tmin = var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>();
<a name="l00558"></a>00558     <span class="keyword">const</span> int64 tmax = var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>();
<a name="l00559"></a>00559     <span class="keywordflow">if</span> (tmin &lt; cmin) {
<a name="l00560"></a>00560       cmin = tmin;
<a name="l00561"></a>00561       min_support = i;
<a name="l00562"></a>00562     }
<a name="l00563"></a>00563     <span class="keywordflow">if</span> (tmax &lt; cmax) {
<a name="l00564"></a>00564       cmax = tmax;
<a name="l00565"></a>00565     }
<a name="l00566"></a>00566   }
<a name="l00567"></a>00567   <a class="code" href="classoperations__research_1_1MinArrayCt.html#f23f38323271254f4d82c6c700a07192">min_support_</a>.<a class="code" href="classoperations__research_1_1Rev.html#614fdcd3e96dc71b0c580f29026380ec">SetValue</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(), min_support);
<a name="l00568"></a>00568   <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#153843dc05670b540a8e83dba2043eb0" title="This method sets both the min and the max of the expression.">SetRange</a>(cmin, cmax);
<a name="l00569"></a>00569   vmin = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>();
<a name="l00570"></a>00570   vmax = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>();
<a name="l00571"></a>00571   <span class="keywordtype">int</span> active = 0;
<a name="l00572"></a>00572   <span class="keywordtype">int</span> curr = -1;
<a name="l00573"></a>00573   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size_; ++i) {
<a name="l00574"></a>00574     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i]-&gt;Min() &lt;= vmax) {
<a name="l00575"></a>00575       <span class="keywordflow">if</span> (active++ &gt;= 1) {
<a name="l00576"></a>00576         <span class="keywordflow">return</span>;
<a name="l00577"></a>00577       }
<a name="l00578"></a>00578       curr = i;
<a name="l00579"></a>00579     }
<a name="l00580"></a>00580   }
<a name="l00581"></a>00581   <span class="keywordflow">if</span> (active == 0) {
<a name="l00582"></a>00582     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l00583"></a>00583   }
<a name="l00584"></a>00584   <span class="keywordflow">if</span> (active == 1) {
<a name="l00585"></a>00585     <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[curr]-&gt;SetMax(vmax);
<a name="l00586"></a>00586   }
<a name="l00587"></a>00587 }
<a name="l00588"></a>00588 
<a name="l00589"></a><a class="code" href="classoperations__research_1_1MinArrayCt.html#224a6917bb21e36991435c058ff58204">00589</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinArrayCt.html#224a6917bb21e36991435c058ff58204">MinArrayCt::Update</a>(<span class="keywordtype">int</span> index) {
<a name="l00590"></a>00590   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> modified = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[index];
<a name="l00591"></a>00591   <span class="keywordflow">if</span> (modified-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#619ac58213bbff56398934e76dd1079f" title="Returns the previous max.">OldMax</a>() != modified-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>()) {
<a name="l00592"></a>00592     <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#dee9a082160df545671781df47f2b985">SetMax</a>(modified-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>());
<a name="l00593"></a>00593   }
<a name="l00594"></a>00594   <span class="keywordflow">if</span> (index == <a class="code" href="classoperations__research_1_1MinArrayCt.html#f23f38323271254f4d82c6c700a07192">min_support_</a>.<a class="code" href="classoperations__research_1_1Rev.html#c7f33945b63174a54775a3e342c08c28">Value</a>() &amp;&amp; modified-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#894ecb1c102fa7fca59661a215f14d50" title="Returns the previous min.">OldMin</a>() != modified-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>()) {
<a name="l00595"></a>00595     <span class="comment">// TODO(user) : can we merge this code with above into</span>
<a name="l00596"></a>00596     <span class="comment">// ComputeMinSupport?</span>
<a name="l00597"></a>00597     int64 cmin = kint64max;
<a name="l00598"></a>00598     <span class="keywordtype">int</span> min_support = -1;
<a name="l00599"></a>00599     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>; ++i) {
<a name="l00600"></a>00600       <span class="keyword">const</span> int64 tmin = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i]-&gt;Min();
<a name="l00601"></a>00601       <span class="keywordflow">if</span> (tmin &lt; cmin) {
<a name="l00602"></a>00602         cmin = tmin;
<a name="l00603"></a>00603         min_support = i;
<a name="l00604"></a>00604       }
<a name="l00605"></a>00605     }
<a name="l00606"></a>00606     <a class="code" href="classoperations__research_1_1MinArrayCt.html#f23f38323271254f4d82c6c700a07192">min_support_</a>.<a class="code" href="classoperations__research_1_1Rev.html#614fdcd3e96dc71b0c580f29026380ec">SetValue</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(), min_support);
<a name="l00607"></a>00607     <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#fec5a6eea8ee64fbc7fa34d7d28f8d8f">SetMin</a>(cmin);
<a name="l00608"></a>00608   }
<a name="l00609"></a>00609 }
<a name="l00610"></a>00610 
<a name="l00611"></a><a class="code" href="classoperations__research_1_1MinArrayCt.html#7153740c628001da2127d7defcfa756f">00611</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinArrayCt.html#7153740c628001da2127d7defcfa756f">MinArrayCt::UpdateVar</a>() {
<a name="l00612"></a>00612   <span class="keyword">const</span> int64 vmin = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>();
<a name="l00613"></a>00613   <span class="keywordflow">if</span> (vmin != <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#894ecb1c102fa7fca59661a215f14d50" title="Returns the previous min.">OldMin</a>()) {
<a name="l00614"></a>00614     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>; ++i) {
<a name="l00615"></a>00615       <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i]-&gt;SetMin(vmin);
<a name="l00616"></a>00616     }
<a name="l00617"></a>00617   }
<a name="l00618"></a>00618   <span class="keyword">const</span> int64 vmax = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>();
<a name="l00619"></a>00619   <span class="keywordflow">if</span> (vmax != <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#619ac58213bbff56398934e76dd1079f" title="Returns the previous max.">OldMax</a>()) {
<a name="l00620"></a>00620     <span class="keywordtype">int</span> active = 0;
<a name="l00621"></a>00621     <span class="keywordtype">int</span> curr = -1;
<a name="l00622"></a>00622     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>; ++i) {
<a name="l00623"></a>00623       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i]-&gt;Min() &lt;= vmax) {
<a name="l00624"></a>00624         <span class="keywordflow">if</span> (active++ &gt;= 1) {
<a name="l00625"></a>00625           <span class="keywordflow">return</span>;
<a name="l00626"></a>00626         }
<a name="l00627"></a>00627         curr = i;
<a name="l00628"></a>00628       }
<a name="l00629"></a>00629     }
<a name="l00630"></a>00630     <span class="keywordflow">if</span> (active == 0) {
<a name="l00631"></a>00631       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l00632"></a>00632     }
<a name="l00633"></a>00633     <span class="keywordflow">if</span> (active == 1) {
<a name="l00634"></a>00634       <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[curr]-&gt;SetMax(vmax);
<a name="l00635"></a>00635     }
<a name="l00636"></a>00636   }
<a name="l00637"></a>00637 }
<a name="l00638"></a>00638 
<a name="l00639"></a><a class="code" href="classoperations__research_1_1MinArrayCt.html#ba181d27ca0a6a3c729590efbd76c004">00639</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1MinArrayCt.html#ba181d27ca0a6a3c729590efbd76c004" title="Constraint class.">MinArrayCt::DebugString</a>()<span class="keyword"> const </span>{
<a name="l00640"></a>00640   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1ArrayConstraint.html#8f07990e5926230780cb62e8e7fd53fc">DebugStringInternal</a>(<span class="stringliteral">"MinArrayCt"</span>);
<a name="l00641"></a>00641 }
<a name="l00642"></a>00642 
<a name="l00643"></a>00643 <span class="comment">// Array Min: the min of all the elements. More efficient that using just</span>
<a name="l00644"></a>00644 <span class="comment">// binary MinIntExpr operators when the array grows</span>
<a name="l00645"></a><a class="code" href="classoperations__research_1_1MinArray.html">00645</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1MinArray.html" title="Array Min: the min of all the elements.">MinArray</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1ArrayExpr.html">ArrayExpr</a> {
<a name="l00646"></a>00646  <span class="keyword">public</span>:
<a name="l00647"></a>00647   <span class="comment">// this constructor will copy the array. The caller can safely delete the</span>
<a name="l00648"></a>00648   <span class="comment">// exprs array himself</span>
<a name="l00649"></a>00649   <a class="code" href="classoperations__research_1_1MinArray.html" title="Array Min: the min of all the elements.">MinArray</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* exprs, <span class="keywordtype">int</span> size);
<a name="l00650"></a>00650   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1MinArray.html" title="Array Min: the min of all the elements.">MinArray</a>();
<a name="l00651"></a>00651 
<a name="l00652"></a>00652   <span class="keyword">virtual</span> int64 Min() <span class="keyword">const</span>;
<a name="l00653"></a>00653   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetMin(int64 m);
<a name="l00654"></a>00654   <span class="keyword">virtual</span> int64 Max() <span class="keyword">const</span>;
<a name="l00655"></a>00655   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetMax(int64 m);
<a name="l00656"></a>00656   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1MinArrayCt.html#ba181d27ca0a6a3c729590efbd76c004" title="Constraint class.">DebugString</a>() <span class="keyword">const</span>;
<a name="l00657"></a>00657   <span class="keyword">virtual</span> <span class="keywordtype">void</span> WhenRange(<a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d);
<a name="l00658"></a><a class="code" href="classoperations__research_1_1MinArray.html#ae05225f7a77002b2f192adecfebfe6b">00658</a>   <span class="keyword">virtual</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* CastToVar() {
<a name="l00659"></a>00659     <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>();
<a name="l00660"></a>00660     int64 vmin = 0LL;
<a name="l00661"></a>00661     int64 vmax = 0LL;
<a name="l00662"></a>00662     Range(&amp;vmin, &amp;vmax);
<a name="l00663"></a>00663     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* var = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#c313eaefa5980567fbf2b12608f8e854" title="Make Factory.">MakeIntVar</a>(vmin, vmax);
<a name="l00664"></a>00664     AddDelegateName(<span class="stringliteral">"Var"</span>, var);
<a name="l00665"></a>00665     <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <span class="keyword">const</span> ct =
<a name="l00666"></a>00666         s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1MinArrayCt.html#597a78c8dae5aca8edc259f35e7b9520">MinArrayCt</a>(s, <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>.get(), <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>, var));
<a name="l00667"></a>00667     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#9c522a6cff91adae19af5cce7d8e411f" title="propagation">AddConstraint</a>(ct);
<a name="l00668"></a>00668     <span class="keywordflow">return</span> var;
<a name="l00669"></a>00669   }
<a name="l00670"></a>00670 };
<a name="l00671"></a>00671 
<a name="l00672"></a><a class="code" href="classoperations__research_1_1MinArray.html#9ff6d80e9e2259e324c8e5b3a8a0bfd0">00672</a> <a class="code" href="classoperations__research_1_1MinArray.html#9ff6d80e9e2259e324c8e5b3a8a0bfd0">MinArray::~MinArray</a>() {}
<a name="l00673"></a>00673 
<a name="l00674"></a><a class="code" href="classoperations__research_1_1MinArray.html#824e326c0958656f47a3c00497efe995">00674</a> <a class="code" href="classoperations__research_1_1MinArray.html#824e326c0958656f47a3c00497efe995" title="this constructor will copy the array.">MinArray::MinArray</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size)
<a name="l00675"></a>00675     : <a class="code" href="classoperations__research_1_1ArrayExpr.html">ArrayExpr</a>(s, vars, size) {}
<a name="l00676"></a>00676 
<a name="l00677"></a><a class="code" href="classoperations__research_1_1MinArray.html#96c22132b83ebd18e6a9332ad7513153">00677</a> int64 <a class="code" href="classoperations__research_1_1MinArray.html#96c22132b83ebd18e6a9332ad7513153">MinArray::Min</a>()<span class="keyword"> const </span>{
<a name="l00678"></a>00678   int64 min = kint64max;
<a name="l00679"></a>00679   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l00680"></a>00680     <span class="keyword">const</span> int64 vmin = <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;Min();
<a name="l00681"></a>00681     <span class="keywordflow">if</span> (min &gt; vmin) {
<a name="l00682"></a>00682       min = vmin;
<a name="l00683"></a>00683     }
<a name="l00684"></a>00684   }
<a name="l00685"></a>00685   <span class="keywordflow">return</span> min;
<a name="l00686"></a>00686 }
<a name="l00687"></a>00687 
<a name="l00688"></a><a class="code" href="classoperations__research_1_1MinArray.html#a584d7cd51a311478886d35e4a65ee41">00688</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinArray.html#a584d7cd51a311478886d35e4a65ee41">MinArray::SetMin</a>(int64 m) {
<a name="l00689"></a>00689   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l00690"></a>00690     <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;SetMin(m);
<a name="l00691"></a>00691   }
<a name="l00692"></a>00692 }
<a name="l00693"></a>00693 
<a name="l00694"></a><a class="code" href="classoperations__research_1_1MinArray.html#bc46ca862f4cdfca043e2745c1cf7d1a">00694</a> int64 <a class="code" href="classoperations__research_1_1MinArray.html#bc46ca862f4cdfca043e2745c1cf7d1a">MinArray::Max</a>()<span class="keyword"> const </span>{
<a name="l00695"></a>00695   int64 max = kint64max;
<a name="l00696"></a>00696   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l00697"></a>00697     <span class="keyword">const</span> int64 vmax = <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;Max();
<a name="l00698"></a>00698     <span class="keywordflow">if</span> (max &gt; vmax) {
<a name="l00699"></a>00699       max = vmax;
<a name="l00700"></a>00700     }
<a name="l00701"></a>00701   }
<a name="l00702"></a>00702   <span class="keywordflow">return</span> max;
<a name="l00703"></a>00703 }
<a name="l00704"></a>00704 
<a name="l00705"></a><a class="code" href="classoperations__research_1_1MinArray.html#4b0895123f6fd52cb888fab50620b65c">00705</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinArray.html#4b0895123f6fd52cb888fab50620b65c">MinArray::SetMax</a>(int64 m) {
<a name="l00706"></a>00706   <span class="keywordtype">int</span> active = 0;
<a name="l00707"></a>00707   <span class="keywordtype">int</span> curr = -1;
<a name="l00708"></a>00708   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l00709"></a>00709     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;<a class="code" href="classoperations__research_1_1MinArray.html#96c22132b83ebd18e6a9332ad7513153">Min</a>() &lt;= m) {
<a name="l00710"></a>00710       <span class="keywordflow">if</span> (active++ &gt;= 1) {
<a name="l00711"></a>00711         <span class="keywordflow">return</span>;
<a name="l00712"></a>00712       }
<a name="l00713"></a>00713       curr = i;
<a name="l00714"></a>00714     }
<a name="l00715"></a>00715   }
<a name="l00716"></a>00716   <span class="keywordflow">if</span> (active == 0) {
<a name="l00717"></a>00717     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l00718"></a>00718   }
<a name="l00719"></a>00719   <span class="keywordflow">if</span> (active == 1) {
<a name="l00720"></a>00720     <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[curr]-&gt;SetMax(m);
<a name="l00721"></a>00721   }
<a name="l00722"></a>00722 }
<a name="l00723"></a>00723 
<a name="l00724"></a><a class="code" href="classoperations__research_1_1MinArray.html#47dd2a97f94909a4e778635963326f0e">00724</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1MinArray.html#47dd2a97f94909a4e778635963326f0e">MinArray::DebugString</a>()<span class="keyword"> const </span>{
<a name="l00725"></a>00725   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1ArrayExpr.html#e7ddc309e78f402b0e87c970e3af7edf">DebugStringInternal</a>(<span class="stringliteral">"MinArray"</span>);
<a name="l00726"></a>00726 }
<a name="l00727"></a>00727 
<a name="l00728"></a><a class="code" href="classoperations__research_1_1MinArray.html#cb8de4cf512cba93c4883615f0d59c2c">00728</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinArray.html#cb8de4cf512cba93c4883615f0d59c2c" title="Attach a demon that will watch the min or the max of the expression.">MinArray::WhenRange</a>(<a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d) {
<a name="l00729"></a>00729   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l00730"></a>00730     <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;WhenRange(d);
<a name="l00731"></a>00731   }
<a name="l00732"></a>00732 }
<a name="l00733"></a>00733 
<a name="l00734"></a>00734 <span class="comment">// ---------- Max Array ----------</span>
<a name="l00735"></a>00735 
<a name="l00736"></a>00736 <span class="comment">// ----- Max Array Ct -----</span>
<a name="l00737"></a>00737 
<a name="l00738"></a>00738 <span class="comment">// This constraint implements max(vars) == var.  It is delayed such</span>
<a name="l00739"></a>00739 <span class="comment">// that propagation only occurs when all variables have been touched.</span>
<a name="l00740"></a><a class="code" href="classoperations__research_1_1MaxArrayCt.html">00740</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1MaxArrayCt.html" title="Max Array.">MaxArrayCt</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1ArrayConstraint.html" title="Base array classes Used for code factorization.">ArrayConstraint</a> {
<a name="l00741"></a>00741  <span class="keyword">public</span>:
<a name="l00742"></a>00742   <a class="code" href="classoperations__research_1_1MaxArrayCt.html" title="Max Array.">MaxArrayCt</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars, <span class="keywordtype">int</span> size,
<a name="l00743"></a>00743              <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* var);
<a name="l00744"></a><a class="code" href="classoperations__research_1_1MaxArrayCt.html#ca35c492047528243f241545f6e79332">00744</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1MaxArrayCt.html" title="Max Array.">MaxArrayCt</a>() {}
<a name="l00745"></a>00745 
<a name="l00746"></a>00746   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Post();
<a name="l00747"></a>00747   <span class="keyword">virtual</span> <span class="keywordtype">void</span> InitialPropagate();
<a name="l00748"></a>00748 
<a name="l00749"></a>00749   <span class="keywordtype">void</span> Update(<span class="keywordtype">int</span> index);
<a name="l00750"></a>00750   <span class="keywordtype">void</span> UpdateVar();
<a name="l00751"></a>00751 
<a name="l00752"></a>00752   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1MinArray.html#47dd2a97f94909a4e778635963326f0e">DebugString</a>() <span class="keyword">const</span>;
<a name="l00753"></a>00753 
<a name="l00754"></a>00754  <span class="keyword">private</span>:
<a name="l00755"></a><a class="code" href="classoperations__research_1_1MaxArrayCt.html#8941e8e0df0aca0991f4fbf15cf71992">00755</a>   <a class="code" href="classoperations__research_1_1Rev.html" title="These class represent reversible POD types.">Rev&lt;int&gt;</a> max_support_;
<a name="l00756"></a>00756 };
<a name="l00757"></a>00757 
<a name="l00758"></a><a class="code" href="classoperations__research_1_1MaxArrayCt.html#d8605d011a17d0b6384fc4bcb4719557">00758</a> <a class="code" href="classoperations__research_1_1MaxArrayCt.html#d8605d011a17d0b6384fc4bcb4719557">MaxArrayCt::MaxArrayCt</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00759"></a>00759                        <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l00760"></a>00760                        <span class="keywordtype">int</span> size,
<a name="l00761"></a>00761                        <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* var)
<a name="l00762"></a>00762     : <a class="code" href="classoperations__research_1_1ArrayConstraint.html" title="Base array classes Used for code factorization.">ArrayConstraint</a>(s, vars, size, var), max_support_(0) {}
<a name="l00763"></a>00763 
<a name="l00764"></a><a class="code" href="classoperations__research_1_1MaxArrayCt.html#6a5770a161483ff9a677b33b950c96de">00764</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MaxArrayCt.html#6a5770a161483ff9a677b33b950c96de" title="This method is called when the constraint is processed by the solver.">MaxArrayCt::Post</a>() {
<a name="l00765"></a>00765   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>; ++i) {
<a name="l00766"></a>00766     <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d = <a class="code" href="namespaceoperations__research.html#bc7cb18be5d9d418d32782253cd4bf5a">MakeConstraintDemon1</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l00767"></a>00767                                     <span class="keyword">this</span>,
<a name="l00768"></a>00768                                     &amp;<a class="code" href="classoperations__research_1_1MaxArrayCt.html#22afff263c1e7766015f6f320eec2cd3">MaxArrayCt::Update</a>,
<a name="l00769"></a>00769                                     <span class="stringliteral">"Update"</span>,
<a name="l00770"></a>00770                                     i);
<a name="l00771"></a>00771     <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i]-&gt;WhenRange(d);
<a name="l00772"></a>00772   }
<a name="l00773"></a>00773   <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* uv = <a class="code" href="namespaceoperations__research.html#50b3d41d8dbf72bb2ad22235a9e1f53e">MakeConstraintDemon0</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l00774"></a>00774                                    <span class="keyword">this</span>,
<a name="l00775"></a>00775                                    &amp;<a class="code" href="classoperations__research_1_1MaxArrayCt.html#1f3ce824d34b47026ee5b11b98196f80">MaxArrayCt::UpdateVar</a>,
<a name="l00776"></a>00776                                    <span class="stringliteral">"UpdateVar"</span>);
<a name="l00777"></a>00777   <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#845a3c3c71323504f6b59f9c0ea46b08" title="Attach a demon that will watch the min or the max of the expression.">WhenRange</a>(uv);
<a name="l00778"></a>00778 }
<a name="l00779"></a>00779 
<a name="l00780"></a><a class="code" href="classoperations__research_1_1MaxArrayCt.html#23cc284b342498c9ddc782f83efacbe9">00780</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MaxArrayCt.html#23cc284b342498c9ddc782f83efacbe9" title="This method performs the initial propagation of the constraint.">MaxArrayCt::InitialPropagate</a>() {
<a name="l00781"></a>00781   int64 vmin = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>();
<a name="l00782"></a>00782   int64 vmax = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>();
<a name="l00783"></a>00783   int64 cmin = kint64min;
<a name="l00784"></a>00784   int64 cmax = kint64min;
<a name="l00785"></a>00785   <span class="keywordtype">int</span> max_support = -1;
<a name="l00786"></a>00786   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>; ++i) {
<a name="l00787"></a>00787     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i];
<a name="l00788"></a>00788     var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#dee9a082160df545671781df47f2b985">SetMax</a>(vmax);
<a name="l00789"></a>00789     <span class="keyword">const</span> int64 tmin = var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>();
<a name="l00790"></a>00790     <span class="keyword">const</span> int64 tmax = var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>();
<a name="l00791"></a>00791     <span class="keywordflow">if</span> (tmin &gt; cmin) {
<a name="l00792"></a>00792       cmin = tmin;
<a name="l00793"></a>00793     }
<a name="l00794"></a>00794     <span class="keywordflow">if</span> (tmax &gt; cmax) {
<a name="l00795"></a>00795       cmax = tmax;
<a name="l00796"></a>00796       max_support = i;
<a name="l00797"></a>00797     }
<a name="l00798"></a>00798   }
<a name="l00799"></a>00799   <a class="code" href="classoperations__research_1_1MaxArrayCt.html#8941e8e0df0aca0991f4fbf15cf71992">max_support_</a>.<a class="code" href="classoperations__research_1_1Rev.html#614fdcd3e96dc71b0c580f29026380ec">SetValue</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(), max_support);
<a name="l00800"></a>00800   <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#153843dc05670b540a8e83dba2043eb0" title="This method sets both the min and the max of the expression.">SetRange</a>(cmin, cmax);
<a name="l00801"></a>00801   vmin = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>();
<a name="l00802"></a>00802   vmax = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>();
<a name="l00803"></a>00803   <span class="keywordtype">int</span> active = 0;
<a name="l00804"></a>00804   <span class="keywordtype">int</span> curr = -1;
<a name="l00805"></a>00805   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size_; ++i) {
<a name="l00806"></a>00806     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i]-&gt;Max() &gt;= vmin) {
<a name="l00807"></a>00807       <span class="keywordflow">if</span> (active++ &gt;= 1) {
<a name="l00808"></a>00808         <span class="keywordflow">return</span>;
<a name="l00809"></a>00809       }
<a name="l00810"></a>00810       curr = i;
<a name="l00811"></a>00811     }
<a name="l00812"></a>00812   }
<a name="l00813"></a>00813   <span class="keywordflow">if</span> (active == 0) {
<a name="l00814"></a>00814     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l00815"></a>00815   }
<a name="l00816"></a>00816   <span class="keywordflow">if</span> (active == 1) {
<a name="l00817"></a>00817     <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[curr]-&gt;SetMin(vmin);
<a name="l00818"></a>00818   }
<a name="l00819"></a>00819 }
<a name="l00820"></a>00820 
<a name="l00821"></a><a class="code" href="classoperations__research_1_1MaxArrayCt.html#22afff263c1e7766015f6f320eec2cd3">00821</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MaxArrayCt.html#22afff263c1e7766015f6f320eec2cd3">MaxArrayCt::Update</a>(<span class="keywordtype">int</span> index) {
<a name="l00822"></a>00822   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> modified = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[index];
<a name="l00823"></a>00823   <span class="keywordflow">if</span> (modified-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#894ecb1c102fa7fca59661a215f14d50" title="Returns the previous min.">OldMin</a>() != modified-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>()) {
<a name="l00824"></a>00824     <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#fec5a6eea8ee64fbc7fa34d7d28f8d8f">SetMin</a>(modified-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>());
<a name="l00825"></a>00825   }
<a name="l00826"></a>00826   <span class="keyword">const</span> int64 oldmax = modified-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#619ac58213bbff56398934e76dd1079f" title="Returns the previous max.">OldMax</a>();
<a name="l00827"></a>00827   <span class="keywordflow">if</span> (index == <a class="code" href="classoperations__research_1_1MaxArrayCt.html#8941e8e0df0aca0991f4fbf15cf71992">max_support_</a>.<a class="code" href="classoperations__research_1_1Rev.html#c7f33945b63174a54775a3e342c08c28">Value</a>() &amp;&amp; oldmax != modified-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>()) {
<a name="l00828"></a>00828     <span class="comment">// TODO(user) : can we merge this code with above into</span>
<a name="l00829"></a>00829     <span class="comment">// ComputeMaxSupport?</span>
<a name="l00830"></a>00830     int64 cmax = kint64min;
<a name="l00831"></a>00831     <span class="keywordtype">int</span> max_support = -1;
<a name="l00832"></a>00832     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>; ++i) {
<a name="l00833"></a>00833       <span class="keyword">const</span> int64 tmax = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i]-&gt;Max();
<a name="l00834"></a>00834       <span class="keywordflow">if</span> (tmax &gt; cmax) {
<a name="l00835"></a>00835         cmax = tmax;
<a name="l00836"></a>00836         max_support = i;
<a name="l00837"></a>00837       }
<a name="l00838"></a>00838     }
<a name="l00839"></a>00839     <a class="code" href="classoperations__research_1_1MaxArrayCt.html#8941e8e0df0aca0991f4fbf15cf71992">max_support_</a>.<a class="code" href="classoperations__research_1_1Rev.html#614fdcd3e96dc71b0c580f29026380ec">SetValue</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(), max_support);
<a name="l00840"></a>00840     <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#dee9a082160df545671781df47f2b985">SetMax</a>(cmax);
<a name="l00841"></a>00841   }
<a name="l00842"></a>00842 }
<a name="l00843"></a>00843 
<a name="l00844"></a><a class="code" href="classoperations__research_1_1MaxArrayCt.html#1f3ce824d34b47026ee5b11b98196f80">00844</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MaxArrayCt.html#1f3ce824d34b47026ee5b11b98196f80">MaxArrayCt::UpdateVar</a>() {
<a name="l00845"></a>00845   <span class="keyword">const</span> int64 vmax = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>();
<a name="l00846"></a>00846   <span class="keywordflow">if</span> (vmax != <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#619ac58213bbff56398934e76dd1079f" title="Returns the previous max.">OldMax</a>()) {
<a name="l00847"></a>00847     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>; ++i) {
<a name="l00848"></a>00848       <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i]-&gt;SetMax(vmax);
<a name="l00849"></a>00849     }
<a name="l00850"></a>00850   }
<a name="l00851"></a>00851   <span class="keyword">const</span> int64 vmin = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>();
<a name="l00852"></a>00852   <span class="keywordflow">if</span> (vmin != <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#894ecb1c102fa7fca59661a215f14d50" title="Returns the previous min.">OldMin</a>()) {
<a name="l00853"></a>00853     <span class="keywordtype">int</span> active = 0;
<a name="l00854"></a>00854     <span class="keywordtype">int</span> curr = -1;
<a name="l00855"></a>00855     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>; ++i) {
<a name="l00856"></a>00856       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i]-&gt;Max() &gt;= vmin) {
<a name="l00857"></a>00857         <span class="keywordflow">if</span> (active++ &gt;= 1) {
<a name="l00858"></a>00858           <span class="keywordflow">return</span>;
<a name="l00859"></a>00859         }
<a name="l00860"></a>00860         curr = i;
<a name="l00861"></a>00861       }
<a name="l00862"></a>00862     }
<a name="l00863"></a>00863     <span class="keywordflow">if</span> (active == 0) {
<a name="l00864"></a>00864       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l00865"></a>00865     }
<a name="l00866"></a>00866     <span class="keywordflow">if</span> (active == 1) {
<a name="l00867"></a>00867       <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[curr]-&gt;SetMin(vmin);
<a name="l00868"></a>00868     }
<a name="l00869"></a>00869   }
<a name="l00870"></a>00870 }
<a name="l00871"></a>00871 
<a name="l00872"></a><a class="code" href="classoperations__research_1_1MaxArrayCt.html#a9c004ea8fd94b57fabb187cb55f52b4">00872</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1MaxArrayCt.html#a9c004ea8fd94b57fabb187cb55f52b4" title="Constraint class.">MaxArrayCt::DebugString</a>()<span class="keyword"> const </span>{
<a name="l00873"></a>00873   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1ArrayConstraint.html#8f07990e5926230780cb62e8e7fd53fc">DebugStringInternal</a>(<span class="stringliteral">"MaxArrayCt"</span>);
<a name="l00874"></a>00874 }
<a name="l00875"></a>00875 
<a name="l00876"></a>00876 <span class="comment">// Array Max: the max of all the elements. More efficient that using just</span>
<a name="l00877"></a>00877 <span class="comment">// binary MaxIntExpr operators when the array grows</span>
<a name="l00878"></a><a class="code" href="classoperations__research_1_1MaxArray.html">00878</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1MaxArray.html" title="Array Max: the max of all the elements.">MaxArray</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1ArrayExpr.html">ArrayExpr</a> {
<a name="l00879"></a>00879  <span class="keyword">public</span>:
<a name="l00880"></a>00880   <span class="comment">// this constructor will copy the array. The caller can safely delete the</span>
<a name="l00881"></a>00881   <span class="comment">// exprs array himself</span>
<a name="l00882"></a>00882   <a class="code" href="classoperations__research_1_1MaxArray.html" title="Array Max: the max of all the elements.">MaxArray</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* exprs, <span class="keywordtype">int</span> size);
<a name="l00883"></a>00883   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1MaxArray.html" title="Array Max: the max of all the elements.">MaxArray</a>();
<a name="l00884"></a>00884 
<a name="l00885"></a>00885   <span class="keyword">virtual</span> int64 Min() <span class="keyword">const</span>;
<a name="l00886"></a>00886   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetMin(int64 m);
<a name="l00887"></a>00887   <span class="keyword">virtual</span> int64 Max() <span class="keyword">const</span>;
<a name="l00888"></a>00888   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetMax(int64 m);
<a name="l00889"></a>00889   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1MaxArrayCt.html#a9c004ea8fd94b57fabb187cb55f52b4" title="Constraint class.">DebugString</a>() <span class="keyword">const</span>;
<a name="l00890"></a>00890   <span class="keyword">virtual</span> <span class="keywordtype">void</span> WhenRange(<a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d);
<a name="l00891"></a><a class="code" href="classoperations__research_1_1MaxArray.html#d6867f0c29360744d094ad6ccbb2f9c3">00891</a>   <span class="keyword">virtual</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* CastToVar() {
<a name="l00892"></a>00892     <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>();
<a name="l00893"></a>00893     int64 vmin = Min();
<a name="l00894"></a>00894     int64 vmax = Max();
<a name="l00895"></a>00895     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* var = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#c313eaefa5980567fbf2b12608f8e854" title="Make Factory.">MakeIntVar</a>(vmin, vmax);
<a name="l00896"></a>00896     AddDelegateName(<span class="stringliteral">"Var"</span>, var);
<a name="l00897"></a>00897     <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <span class="keyword">const</span> ct =
<a name="l00898"></a>00898         s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1MaxArrayCt.html#d8605d011a17d0b6384fc4bcb4719557">MaxArrayCt</a>(s, <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>.get(), <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>, var));
<a name="l00899"></a>00899     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#9c522a6cff91adae19af5cce7d8e411f" title="propagation">AddConstraint</a>(ct);
<a name="l00900"></a>00900     <span class="keywordflow">return</span> var;
<a name="l00901"></a>00901   }
<a name="l00902"></a>00902 };
<a name="l00903"></a>00903 
<a name="l00904"></a><a class="code" href="classoperations__research_1_1MaxArray.html#ebe947b1646538e8ee8cb4fcc119e6bc">00904</a> <a class="code" href="classoperations__research_1_1MaxArray.html#ebe947b1646538e8ee8cb4fcc119e6bc">MaxArray::~MaxArray</a>() {}
<a name="l00905"></a>00905 
<a name="l00906"></a><a class="code" href="classoperations__research_1_1MaxArray.html#855f40c9aa453d216c840648c02b9329">00906</a> <a class="code" href="classoperations__research_1_1MaxArray.html#855f40c9aa453d216c840648c02b9329" title="this constructor will copy the array.">MaxArray::MaxArray</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size)
<a name="l00907"></a>00907     : <a class="code" href="classoperations__research_1_1ArrayExpr.html">ArrayExpr</a>(s, vars, size) {}
<a name="l00908"></a>00908 
<a name="l00909"></a><a class="code" href="classoperations__research_1_1MaxArray.html#d19e0b316388cef3535e9cd91c2281a4">00909</a> int64 <a class="code" href="classoperations__research_1_1MaxArray.html#d19e0b316388cef3535e9cd91c2281a4">MaxArray::Min</a>()<span class="keyword"> const </span>{
<a name="l00910"></a>00910   int64 min = kint64min;
<a name="l00911"></a>00911   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l00912"></a>00912     <span class="keyword">const</span> int64 vmin = <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;Min();
<a name="l00913"></a>00913     <span class="keywordflow">if</span> (min &lt; vmin) {
<a name="l00914"></a>00914       min = vmin;
<a name="l00915"></a>00915     }
<a name="l00916"></a>00916   }
<a name="l00917"></a>00917   <span class="keywordflow">return</span> min;
<a name="l00918"></a>00918 }
<a name="l00919"></a>00919 
<a name="l00920"></a><a class="code" href="classoperations__research_1_1MaxArray.html#6ea7743bdd81a5b68a7a66a064ff9aef">00920</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MaxArray.html#6ea7743bdd81a5b68a7a66a064ff9aef">MaxArray::SetMin</a>(int64 m) {
<a name="l00921"></a>00921   <span class="keywordtype">int</span> active = 0;
<a name="l00922"></a>00922   <span class="keywordtype">int</span> curr = -1;
<a name="l00923"></a>00923   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l00924"></a>00924     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;<a class="code" href="classoperations__research_1_1MaxArray.html#0d97266b28d0c75500cbca7baccf091d">Max</a>() &gt;= m) {
<a name="l00925"></a>00925       active++;
<a name="l00926"></a>00926       curr = i;
<a name="l00927"></a>00927     }
<a name="l00928"></a>00928   }
<a name="l00929"></a>00929   <span class="keywordflow">if</span> (active == 0) {
<a name="l00930"></a>00930     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l00931"></a>00931   }
<a name="l00932"></a>00932   <span class="keywordflow">if</span> (active == 1) {
<a name="l00933"></a>00933     <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[curr]-&gt;SetMin(m);
<a name="l00934"></a>00934   }
<a name="l00935"></a>00935 }
<a name="l00936"></a>00936 
<a name="l00937"></a><a class="code" href="classoperations__research_1_1MaxArray.html#0d97266b28d0c75500cbca7baccf091d">00937</a> int64 <a class="code" href="classoperations__research_1_1MaxArray.html#0d97266b28d0c75500cbca7baccf091d">MaxArray::Max</a>()<span class="keyword"> const </span>{
<a name="l00938"></a>00938   int64 max = kint64min;
<a name="l00939"></a>00939   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l00940"></a>00940     <span class="keyword">const</span> int64 vmax = <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;Max();
<a name="l00941"></a>00941     <span class="keywordflow">if</span> (max &lt; vmax) {
<a name="l00942"></a>00942       max = vmax;
<a name="l00943"></a>00943     }
<a name="l00944"></a>00944   }
<a name="l00945"></a>00945   <span class="keywordflow">return</span> max;
<a name="l00946"></a>00946 }
<a name="l00947"></a>00947 
<a name="l00948"></a><a class="code" href="classoperations__research_1_1MaxArray.html#c924c43610494d087e45a0e2e4fa023d">00948</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MaxArray.html#c924c43610494d087e45a0e2e4fa023d">MaxArray::SetMax</a>(int64 m) {
<a name="l00949"></a>00949   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l00950"></a>00950     <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;SetMax(m);
<a name="l00951"></a>00951   }
<a name="l00952"></a>00952 }
<a name="l00953"></a>00953 
<a name="l00954"></a><a class="code" href="classoperations__research_1_1MaxArray.html#aafb6927fa363f8e83be4b874c88a562">00954</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1MaxArray.html#aafb6927fa363f8e83be4b874c88a562">MaxArray::DebugString</a>()<span class="keyword"> const </span>{
<a name="l00955"></a>00955   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1ArrayExpr.html#e7ddc309e78f402b0e87c970e3af7edf">DebugStringInternal</a>(<span class="stringliteral">"MaxArray"</span>);
<a name="l00956"></a>00956 }
<a name="l00957"></a>00957 
<a name="l00958"></a><a class="code" href="classoperations__research_1_1MaxArray.html#7619b6ce734936af934f096fb1f08cda">00958</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MaxArray.html#7619b6ce734936af934f096fb1f08cda" title="Attach a demon that will watch the min or the max of the expression.">MaxArray::WhenRange</a>(<a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d) {
<a name="l00959"></a>00959   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l00960"></a>00960     <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;WhenRange(d);
<a name="l00961"></a>00961   }
<a name="l00962"></a>00962 }
<a name="l00963"></a>00963 
<a name="l00964"></a>00964 <span class="comment">// ----- Max Bool Array Ct -----</span>
<a name="l00965"></a>00965 
<a name="l00966"></a>00966 <span class="comment">// This constraint implements max(vars) == var.  It is delayed such</span>
<a name="l00967"></a>00967 <span class="comment">// that propagation only occurs when all variables have been touched.</span>
<a name="l00968"></a><a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html">00968</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html" title="Max Bool Array Ct.">MaxBoolArrayCt</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1ArrayConstraint.html" title="Base array classes Used for code factorization.">ArrayConstraint</a> {
<a name="l00969"></a>00969  <span class="keyword">public</span>:
<a name="l00970"></a>00970   <a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html" title="Max Bool Array Ct.">MaxBoolArrayCt</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars, <span class="keywordtype">int</span> size,
<a name="l00971"></a>00971                  <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* var);
<a name="l00972"></a><a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#dac90a1386e7c425dff4a0d1239e12df">00972</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html" title="Max Bool Array Ct.">MaxBoolArrayCt</a>() {}
<a name="l00973"></a>00973 
<a name="l00974"></a>00974   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Post();
<a name="l00975"></a>00975   <span class="keyword">virtual</span> <span class="keywordtype">void</span> InitialPropagate();
<a name="l00976"></a>00976 
<a name="l00977"></a>00977   <span class="keywordtype">void</span> Update(<span class="keywordtype">int</span> index);
<a name="l00978"></a>00978   <span class="keywordtype">void</span> UpdateVar();
<a name="l00979"></a>00979 
<a name="l00980"></a>00980   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1MaxArray.html#aafb6927fa363f8e83be4b874c88a562">DebugString</a>() <span class="keyword">const</span>;
<a name="l00981"></a>00981 
<a name="l00982"></a>00982  <span class="keyword">private</span>:
<a name="l00983"></a><a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#7ae379dedcc91b90191217cad2450f3d">00983</a>   <a class="code" href="classoperations__research_1_1SmallRevBitSet.html" title="This class represents a small reversible bitset (size &amp;lt;= 64).">SmallRevBitSet</a> bits_;
<a name="l00984"></a><a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#de8c0532b96bd01466daf496a4b783c4">00984</a>   <span class="keywordtype">bool</span> inhibited_;
<a name="l00985"></a>00985 };
<a name="l00986"></a>00986 
<a name="l00987"></a><a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#4989bc924cef167149aadbcc3fa5dbcd">00987</a> <a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#4989bc924cef167149aadbcc3fa5dbcd">MaxBoolArrayCt::MaxBoolArrayCt</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00988"></a>00988                                <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l00989"></a>00989                                <span class="keywordtype">int</span> size,
<a name="l00990"></a>00990                                <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* var)
<a name="l00991"></a>00991     : <a class="code" href="classoperations__research_1_1ArrayConstraint.html" title="Base array classes Used for code factorization.">ArrayConstraint</a>(s, vars, size, var), bits_(size), inhibited_(false) {}
<a name="l00992"></a>00992 
<a name="l00993"></a><a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#1c793d559380e7e9b900b8d3fd699451">00993</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#1c793d559380e7e9b900b8d3fd699451" title="This method is called when the constraint is processed by the solver.">MaxBoolArrayCt::Post</a>() {
<a name="l00994"></a>00994   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>; ++i) {
<a name="l00995"></a>00995     <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d = <a class="code" href="namespaceoperations__research.html#bc7cb18be5d9d418d32782253cd4bf5a">MakeConstraintDemon1</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l00996"></a>00996                                     <span class="keyword">this</span>,
<a name="l00997"></a>00997                                     &amp;<a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#9344d72768574c6f44d186560417ae72">MaxBoolArrayCt::Update</a>,
<a name="l00998"></a>00998                                     <span class="stringliteral">"Update"</span>,
<a name="l00999"></a>00999                                     i);
<a name="l01000"></a>01000     <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i]-&gt;WhenRange(d);
<a name="l01001"></a>01001   }
<a name="l01002"></a>01002 
<a name="l01003"></a>01003   <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* uv = <a class="code" href="namespaceoperations__research.html#50b3d41d8dbf72bb2ad22235a9e1f53e">MakeConstraintDemon0</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l01004"></a>01004                                    <span class="keyword">this</span>,
<a name="l01005"></a>01005                                    &amp;<a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#01ad4aabe56224f4a2b03a969ffab047">MaxBoolArrayCt::UpdateVar</a>,
<a name="l01006"></a>01006                                    <span class="stringliteral">"UpdateVar"</span>);
<a name="l01007"></a>01007   <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#845a3c3c71323504f6b59f9c0ea46b08" title="Attach a demon that will watch the min or the max of the expression.">WhenRange</a>(uv);
<a name="l01008"></a>01008 }
<a name="l01009"></a>01009 
<a name="l01010"></a><a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#8439fdae7d278c61f9f618862eb4e72a">01010</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#8439fdae7d278c61f9f618862eb4e72a" title="This method performs the initial propagation of the constraint.">MaxBoolArrayCt::InitialPropagate</a>() {
<a name="l01011"></a>01011   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>() == 0) {
<a name="l01012"></a>01012     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>; ++i) {
<a name="l01013"></a>01013       <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i]-&gt;SetMax(0LL);
<a name="l01014"></a>01014     }
<a name="l01015"></a>01015     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#de8c0532b96bd01466daf496a4b783c4">inhibited_</a>, <span class="keyword">true</span>);
<a name="l01016"></a>01016   } <span class="keywordflow">else</span> {
<a name="l01017"></a>01017     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>; ++i) {
<a name="l01018"></a>01018       <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var = <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i];
<a name="l01019"></a>01019       <span class="keywordflow">if</span> (var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>() == 1LL) {
<a name="l01020"></a>01020         <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#fec5a6eea8ee64fbc7fa34d7d28f8d8f">SetMin</a>(1LL);
<a name="l01021"></a>01021         <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#de8c0532b96bd01466daf496a4b783c4">inhibited_</a>, <span class="keyword">true</span>);
<a name="l01022"></a>01022         <span class="keywordflow">return</span>;
<a name="l01023"></a>01023       }
<a name="l01024"></a>01024       <span class="keywordflow">if</span> (var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>() == 1LL) {
<a name="l01025"></a>01025         <a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#7ae379dedcc91b90191217cad2450f3d">bits_</a>.<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#427373fdc21062991efa27f991862ff6">SetToOne</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(), i);
<a name="l01026"></a>01026       }
<a name="l01027"></a>01027     }
<a name="l01028"></a>01028     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#7ae379dedcc91b90191217cad2450f3d">bits_</a>.<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#c48a71fee237bc7b7c30da70964feac4">IsCardinalityZero</a>()) {
<a name="l01029"></a>01029       <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#8889930ed76665b0f24f12df2ed4e05c" title="This method sets the value of the expression.">SetValue</a>(0LL);
<a name="l01030"></a>01030       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#de8c0532b96bd01466daf496a4b783c4">inhibited_</a>, <span class="keyword">true</span>);
<a name="l01031"></a>01031     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>() == 1LL &amp;&amp; <a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#7ae379dedcc91b90191217cad2450f3d">bits_</a>.<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#658d742e0b7ad7f6970fc767b6a109b6">IsCardinalityOne</a>()) {
<a name="l01032"></a>01032       <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[<a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#7ae379dedcc91b90191217cad2450f3d">bits_</a>.<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#8f2b8156245201ddfdb9df3d98f5ceb4">GetFirstOne</a>()]-&gt;SetValue(1LL);
<a name="l01033"></a>01033       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#de8c0532b96bd01466daf496a4b783c4">inhibited_</a>, <span class="keyword">true</span>);
<a name="l01034"></a>01034     }
<a name="l01035"></a>01035   }
<a name="l01036"></a>01036 }
<a name="l01037"></a>01037 
<a name="l01038"></a><a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#9344d72768574c6f44d186560417ae72">01038</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#9344d72768574c6f44d186560417ae72">MaxBoolArrayCt::Update</a>(<span class="keywordtype">int</span> index) {
<a name="l01039"></a>01039   <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#de8c0532b96bd01466daf496a4b783c4">inhibited_</a>) {
<a name="l01040"></a>01040     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[index]-&gt;Min() == 1LL) {  <span class="comment">// Bound to 1.</span>
<a name="l01041"></a>01041       <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#8889930ed76665b0f24f12df2ed4e05c" title="This method sets the value of the expression.">SetValue</a>(1LL);
<a name="l01042"></a>01042       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#de8c0532b96bd01466daf496a4b783c4">inhibited_</a>, <span class="keyword">true</span>);
<a name="l01043"></a>01043     } <span class="keywordflow">else</span> {
<a name="l01044"></a>01044       <a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#7ae379dedcc91b90191217cad2450f3d">bits_</a>.<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#22f35c8d356a6bc1dfb95bb36da6d37a">SetToZero</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(), index);
<a name="l01045"></a>01045       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#7ae379dedcc91b90191217cad2450f3d">bits_</a>.<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#c48a71fee237bc7b7c30da70964feac4">IsCardinalityZero</a>()) {
<a name="l01046"></a>01046         <a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#8889930ed76665b0f24f12df2ed4e05c" title="This method sets the value of the expression.">SetValue</a>(0LL);
<a name="l01047"></a>01047         <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#de8c0532b96bd01466daf496a4b783c4">inhibited_</a>, <span class="keyword">true</span>);
<a name="l01048"></a>01048       } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>() == 1LL &amp;&amp; <a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#7ae379dedcc91b90191217cad2450f3d">bits_</a>.<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#658d742e0b7ad7f6970fc767b6a109b6">IsCardinalityOne</a>()) {
<a name="l01049"></a>01049         <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[<a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#7ae379dedcc91b90191217cad2450f3d">bits_</a>.<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#8f2b8156245201ddfdb9df3d98f5ceb4">GetFirstOne</a>()]-&gt;SetValue(1LL);
<a name="l01050"></a>01050         <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#de8c0532b96bd01466daf496a4b783c4">inhibited_</a>, <span class="keyword">true</span>);
<a name="l01051"></a>01051       }
<a name="l01052"></a>01052     }
<a name="l01053"></a>01053   }
<a name="l01054"></a>01054 }
<a name="l01055"></a>01055 
<a name="l01056"></a><a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#01ad4aabe56224f4a2b03a969ffab047">01056</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#01ad4aabe56224f4a2b03a969ffab047">MaxBoolArrayCt::UpdateVar</a>() {
<a name="l01057"></a>01057   <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#de8c0532b96bd01466daf496a4b783c4">inhibited_</a>) {
<a name="l01058"></a>01058     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1ArrayConstraint.html#a3548ded7540f329e22f27492b87d222">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>() == 0) {
<a name="l01059"></a>01059       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>; ++i) {
<a name="l01060"></a>01060         <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[i]-&gt;SetMax(0LL);
<a name="l01061"></a>01061       }
<a name="l01062"></a>01062       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#de8c0532b96bd01466daf496a4b783c4">inhibited_</a>, <span class="keyword">true</span>);
<a name="l01063"></a>01063     } <span class="keywordflow">else</span> {
<a name="l01064"></a>01064       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#7ae379dedcc91b90191217cad2450f3d">bits_</a>.<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#658d742e0b7ad7f6970fc767b6a109b6">IsCardinalityOne</a>()) {
<a name="l01065"></a>01065         <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>[<a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#7ae379dedcc91b90191217cad2450f3d">bits_</a>.<a class="code" href="classoperations__research_1_1SmallRevBitSet.html#8f2b8156245201ddfdb9df3d98f5ceb4">GetFirstOne</a>()]-&gt;SetValue(1LL);
<a name="l01066"></a>01066         <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#de8c0532b96bd01466daf496a4b783c4">inhibited_</a>, <span class="keyword">true</span>);
<a name="l01067"></a>01067       }
<a name="l01068"></a>01068     }
<a name="l01069"></a>01069   }
<a name="l01070"></a>01070 }
<a name="l01071"></a>01071 
<a name="l01072"></a><a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#025813d765e7ea978519a21aab07cb29">01072</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#025813d765e7ea978519a21aab07cb29" title="Constraint class.">MaxBoolArrayCt::DebugString</a>()<span class="keyword"> const </span>{
<a name="l01073"></a>01073   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1ArrayConstraint.html#8f07990e5926230780cb62e8e7fd53fc">DebugStringInternal</a>(<span class="stringliteral">"MaxBoolArrayCt"</span>);
<a name="l01074"></a>01074 }
<a name="l01075"></a>01075 
<a name="l01076"></a>01076 <span class="comment">// ----- MaxBoolArray -----</span>
<a name="l01077"></a>01077 
<a name="l01078"></a><a class="code" href="classoperations__research_1_1MaxBoolArray.html">01078</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1MaxBoolArray.html" title="MaxBoolArray.">MaxBoolArray</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1ArrayExpr.html">ArrayExpr</a> {
<a name="l01079"></a>01079  <span class="keyword">public</span>:
<a name="l01080"></a>01080   <span class="comment">// this constructor will copy the array. The caller can safely delete the</span>
<a name="l01081"></a>01081   <span class="comment">// exprs array himself</span>
<a name="l01082"></a>01082   <a class="code" href="classoperations__research_1_1MaxBoolArray.html" title="MaxBoolArray.">MaxBoolArray</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* exprs, <span class="keywordtype">int</span> size);
<a name="l01083"></a>01083   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1MaxBoolArray.html" title="MaxBoolArray.">MaxBoolArray</a>();
<a name="l01084"></a>01084 
<a name="l01085"></a>01085   <span class="keyword">virtual</span> int64 Min() <span class="keyword">const</span>;
<a name="l01086"></a>01086   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetMin(int64 m);
<a name="l01087"></a>01087   <span class="keyword">virtual</span> int64 Max() <span class="keyword">const</span>;
<a name="l01088"></a>01088   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetMax(int64 m);
<a name="l01089"></a>01089   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#025813d765e7ea978519a21aab07cb29" title="Constraint class.">DebugString</a>() <span class="keyword">const</span>;
<a name="l01090"></a>01090   <span class="keyword">virtual</span> <span class="keywordtype">void</span> WhenRange(<a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d);
<a name="l01091"></a><a class="code" href="classoperations__research_1_1MaxBoolArray.html#b3c8e6a53be7f81495f3ec5c398d08a6">01091</a>   <span class="keyword">virtual</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* CastToVar() {
<a name="l01092"></a>01092     <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>();
<a name="l01093"></a>01093     int64 vmin = Min();
<a name="l01094"></a>01094     int64 vmax = Max();
<a name="l01095"></a>01095     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* var = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#c313eaefa5980567fbf2b12608f8e854" title="Make Factory.">MakeIntVar</a>(vmin, vmax);
<a name="l01096"></a>01096     AddDelegateName(<span class="stringliteral">"Var"</span>, var);
<a name="l01097"></a>01097     <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <span class="keyword">const</span> ct =
<a name="l01098"></a>01098         s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1MaxBoolArrayCt.html#4989bc924cef167149aadbcc3fa5dbcd">MaxBoolArrayCt</a>(s, <a class="code" href="classoperations__research_1_1ArrayConstraint.html#abd25d024b6e6f1d729f5d40f6da38d4">vars_</a>.get(), <a class="code" href="classoperations__research_1_1ArrayConstraint.html#01d2d5a152a492c934092d7134687ec9">size_</a>, var));
<a name="l01099"></a>01099     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#9c522a6cff91adae19af5cce7d8e411f" title="propagation">AddConstraint</a>(ct);
<a name="l01100"></a>01100     <span class="keywordflow">return</span> var;
<a name="l01101"></a>01101   }
<a name="l01102"></a>01102 };
<a name="l01103"></a>01103 
<a name="l01104"></a><a class="code" href="classoperations__research_1_1MaxBoolArray.html#354f4476456a3165b5e82d43119583f6">01104</a> <a class="code" href="classoperations__research_1_1MaxBoolArray.html#354f4476456a3165b5e82d43119583f6">MaxBoolArray::~MaxBoolArray</a>() {}
<a name="l01105"></a>01105 
<a name="l01106"></a><a class="code" href="classoperations__research_1_1MaxBoolArray.html#e9a11079fb4e09f8d4bff5cdf94331cb">01106</a> <a class="code" href="classoperations__research_1_1MaxBoolArray.html#e9a11079fb4e09f8d4bff5cdf94331cb" title="this constructor will copy the array.">MaxBoolArray::MaxBoolArray</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size)
<a name="l01107"></a>01107     : <a class="code" href="classoperations__research_1_1ArrayExpr.html">ArrayExpr</a>(s, vars, size) {}
<a name="l01108"></a>01108 
<a name="l01109"></a><a class="code" href="classoperations__research_1_1MaxBoolArray.html#cc2dce233f9a9bbb27897c8e8c4cbf29">01109</a> int64 <a class="code" href="classoperations__research_1_1MaxBoolArray.html#cc2dce233f9a9bbb27897c8e8c4cbf29">MaxBoolArray::Min</a>()<span class="keyword"> const </span>{
<a name="l01110"></a>01110   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l01111"></a>01111     <span class="keyword">const</span> int64 vmin = <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;Min();
<a name="l01112"></a>01112     <span class="keywordflow">if</span> (vmin == 1LL) {
<a name="l01113"></a>01113       <span class="keywordflow">return</span> 1LL;
<a name="l01114"></a>01114     }
<a name="l01115"></a>01115   }
<a name="l01116"></a>01116   <span class="keywordflow">return</span> 0LL;
<a name="l01117"></a>01117 }
<a name="l01118"></a>01118 
<a name="l01119"></a><a class="code" href="classoperations__research_1_1MaxBoolArray.html#838b294dac15e568bece4fe5820bd274">01119</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MaxBoolArray.html#838b294dac15e568bece4fe5820bd274">MaxBoolArray::SetMin</a>(int64 m) {
<a name="l01120"></a>01120   <span class="keywordflow">if</span> (m &gt; 1) {
<a name="l01121"></a>01121     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l01122"></a>01122   } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (m &lt;= 0) {
<a name="l01123"></a>01123     <span class="keywordflow">return</span>;
<a name="l01124"></a>01124   }
<a name="l01125"></a>01125   DCHECK_EQ(m, 1LL);
<a name="l01126"></a>01126   <span class="keywordtype">int</span> active = 0;
<a name="l01127"></a>01127   <span class="keywordtype">int</span> curr = -1;
<a name="l01128"></a>01128   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l01129"></a>01129     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;<a class="code" href="classoperations__research_1_1MaxBoolArray.html#4b3941fc219083bc4b920773a404a97c">Max</a>() == 1LL) {
<a name="l01130"></a>01130       active++;
<a name="l01131"></a>01131       curr = i;
<a name="l01132"></a>01132     }
<a name="l01133"></a>01133   }
<a name="l01134"></a>01134   <span class="keywordflow">if</span> (active == 0) {
<a name="l01135"></a>01135     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l01136"></a>01136   }
<a name="l01137"></a>01137   <span class="keywordflow">if</span> (active == 1) {
<a name="l01138"></a>01138     <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[curr]-&gt;SetMin(1LL);
<a name="l01139"></a>01139   }
<a name="l01140"></a>01140 }
<a name="l01141"></a>01141 
<a name="l01142"></a><a class="code" href="classoperations__research_1_1MaxBoolArray.html#4b3941fc219083bc4b920773a404a97c">01142</a> int64 <a class="code" href="classoperations__research_1_1MaxBoolArray.html#4b3941fc219083bc4b920773a404a97c">MaxBoolArray::Max</a>()<span class="keyword"> const </span>{
<a name="l01143"></a>01143   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l01144"></a>01144     <span class="keyword">const</span> int64 vmax = <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;Max();
<a name="l01145"></a>01145     <span class="keywordflow">if</span> (vmax == 1LL) {
<a name="l01146"></a>01146       <span class="keywordflow">return</span> 1LL;
<a name="l01147"></a>01147     }
<a name="l01148"></a>01148   }
<a name="l01149"></a>01149   <span class="keywordflow">return</span> 0LL;
<a name="l01150"></a>01150 }
<a name="l01151"></a>01151 
<a name="l01152"></a><a class="code" href="classoperations__research_1_1MaxBoolArray.html#4cbbda1a2e9d1a6d5df481d3e029edf9">01152</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MaxBoolArray.html#4cbbda1a2e9d1a6d5df481d3e029edf9">MaxBoolArray::SetMax</a>(int64 m) {
<a name="l01153"></a>01153   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l01154"></a>01154     <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;SetMax(m);
<a name="l01155"></a>01155   }
<a name="l01156"></a>01156 }
<a name="l01157"></a>01157 
<a name="l01158"></a><a class="code" href="classoperations__research_1_1MaxBoolArray.html#4ce800a32e54a3e78877cef99b05a179">01158</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1MaxBoolArray.html#4ce800a32e54a3e78877cef99b05a179">MaxBoolArray::DebugString</a>()<span class="keyword"> const </span>{
<a name="l01159"></a>01159   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1ArrayExpr.html#e7ddc309e78f402b0e87c970e3af7edf">DebugStringInternal</a>(<span class="stringliteral">"MaxBoolArray"</span>);
<a name="l01160"></a>01160 }
<a name="l01161"></a>01161 
<a name="l01162"></a><a class="code" href="classoperations__research_1_1MaxBoolArray.html#704a98e84fd1cd30ad111fb1a0b55c11">01162</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MaxBoolArray.html#704a98e84fd1cd30ad111fb1a0b55c11" title="Attach a demon that will watch the min or the max of the expression.">MaxBoolArray::WhenRange</a>(<a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d) {
<a name="l01163"></a>01163   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1ArrayExpr.html#93bd359ae46a10feb01e2f7a9c5cfa42">size_</a>; ++i) {
<a name="l01164"></a>01164     <a class="code" href="classoperations__research_1_1ArrayExpr.html#3e9d758405ad19587b3c25adf30aacf6">vars_</a>[i]-&gt;WhenRange(d);
<a name="l01165"></a>01165   }
<a name="l01166"></a>01166 }
<a name="l01167"></a>01167 
<a name="l01168"></a>01168 <span class="comment">// ----- Builders -----</span>
<a name="l01169"></a>01169 
<a name="l01170"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html">01170</a> <span class="keyword">namespace </span>{
<a name="l01171"></a>01171 
<a name="l01172"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#6abe793b638ec5c8c9a24c3cfc84f121">01172</a> <span class="keywordtype">void</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#6abe793b638ec5c8c9a24c3cfc84f121">ScanArray</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size, <span class="keywordtype">int</span>* bound,
<a name="l01173"></a>01173                int64* amin, int64* amax, int64* min_max, int64* max_min) {
<a name="l01174"></a>01174   *amin = kint64max;  <span class="comment">// Max of the array.</span>
<a name="l01175"></a>01175   *min_max = kint64max;  <span class="comment">// Smallest max in the array.</span>
<a name="l01176"></a>01176   *max_min = kint64min;  <span class="comment">// Biggest min in the array.</span>
<a name="l01177"></a>01177   *amax = kint64min;  <span class="comment">// Min of the array.</span>
<a name="l01178"></a>01178   *bound = 0;
<a name="l01179"></a>01179   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {
<a name="l01180"></a>01180     <span class="keyword">const</span> int64 vmin = vars[i]-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>();
<a name="l01181"></a>01181     <span class="keyword">const</span> int64 vmax = vars[i]-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>();
<a name="l01182"></a>01182     <span class="keywordflow">if</span> (vmin &lt; *amin) {
<a name="l01183"></a>01183       *amin = vmin;
<a name="l01184"></a>01184     }
<a name="l01185"></a>01185     <span class="keywordflow">if</span> (vmax &gt; *amax) {
<a name="l01186"></a>01186       *amax = vmax;
<a name="l01187"></a>01187     }
<a name="l01188"></a>01188     <span class="keywordflow">if</span> (vmax &lt; *min_max) {
<a name="l01189"></a>01189       *min_max = vmax;
<a name="l01190"></a>01190     }
<a name="l01191"></a>01191     <span class="keywordflow">if</span> (vmin &gt; *max_min) {
<a name="l01192"></a>01192       *max_min = vmin;
<a name="l01193"></a>01193     }
<a name="l01194"></a>01194     <span class="keywordflow">if</span> (vmin == vmax) {
<a name="l01195"></a>01195       (*bound)++;
<a name="l01196"></a>01196     }
<a name="l01197"></a>01197   }
<a name="l01198"></a>01198 }
<a name="l01199"></a>01199 
<a name="l01200"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#ef6905f52b5f7a2909191583f0ff72bc">01200</a> <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#ef6905f52b5f7a2909191583f0ff72bc">BuildSumArray</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size) {
<a name="l01201"></a>01201   <span class="keywordflow">return</span> s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1SumArray.html" title="Sum Array Expr.">SumArray</a>(s, vars, size));
<a name="l01202"></a>01202 }
<a name="l01203"></a>01203 
<a name="l01204"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#2b1646f70675f26a834cc70eeb7ebe21">01204</a> <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#2b1646f70675f26a834cc70eeb7ebe21">BuildMinArray</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size) {
<a name="l01205"></a>01205   int64 amin = 0, amax = 0, min_max = 0, max_min = 0;
<a name="l01206"></a>01206   <span class="keywordtype">int</span> bound = 0;
<a name="l01207"></a>01207   <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#6abe793b638ec5c8c9a24c3cfc84f121">ScanArray</a>(vars, size, &amp;bound, &amp;amin, &amp;amax, &amp;min_max, &amp;max_min);
<a name="l01208"></a>01208   <span class="keywordflow">if</span> (bound == size || amin == min_max) {  <span class="comment">// Bound min(array)</span>
<a name="l01209"></a>01209     <span class="keywordflow">return</span> s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#8f027a8b96688e6728e2e9ece1441a13" title="IntConst will create a constant expression.">MakeIntConst</a>(amin);
<a name="l01210"></a>01210   }
<a name="l01211"></a>01211   <span class="keywordflow">if</span> (amin == 0 &amp;&amp; amax == 1) {
<a name="l01212"></a>01212     <span class="keywordflow">return</span> s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1MinBoolArray.html" title="MinBoolArray.">MinBoolArray</a>(s, vars, size));
<a name="l01213"></a>01213   }
<a name="l01214"></a>01214   <span class="keywordflow">return</span> s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1MinArray.html" title="Array Min: the min of all the elements.">MinArray</a>(s, vars, size));
<a name="l01215"></a>01215 }
<a name="l01216"></a>01216 
<a name="l01217"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#8e5e37e0c288b783997e8871fb1a5522">01217</a> <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#8e5e37e0c288b783997e8871fb1a5522">BuildMaxArray</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size) {
<a name="l01218"></a>01218   int64 amin = 0, amax = 0, min_max = 0, max_min = 0;
<a name="l01219"></a>01219   <span class="keywordtype">int</span> bound = 0;
<a name="l01220"></a>01220   <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#6abe793b638ec5c8c9a24c3cfc84f121">ScanArray</a>(vars, size, &amp;bound, &amp;amin, &amp;amax, &amp;min_max, &amp;max_min);
<a name="l01221"></a>01221   <span class="keywordflow">if</span> (bound == size || amax == max_min) {  <span class="comment">// Bound max(array)</span>
<a name="l01222"></a>01222     <span class="keywordflow">return</span> s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#8f027a8b96688e6728e2e9ece1441a13" title="IntConst will create a constant expression.">MakeIntConst</a>(amax);
<a name="l01223"></a>01223   }
<a name="l01224"></a>01224   <span class="keywordflow">if</span> (amin == 0 &amp;&amp; amax == 1) {
<a name="l01225"></a>01225     <span class="keywordflow">return</span> s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1MaxBoolArray.html#e9a11079fb4e09f8d4bff5cdf94331cb" title="this constructor will copy the array.">MaxBoolArray</a>(s, vars, size));
<a name="l01226"></a>01226   }
<a name="l01227"></a>01227   <span class="keywordflow">return</span> s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1MaxArray.html" title="Array Max: the max of all the elements.">MaxArray</a>(s, vars, size));
<a name="l01228"></a>01228 }
<a name="l01229"></a>01229 
<a name="l01230"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da99fc01a9bb0c7aae31dfbbbd114edd15">01230</a> <span class="keyword">enum</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da">BuildOp</a> { <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da99fc01a9bb0c7aae31dfbbbd114edd15">SUM_OP</a>, <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da21e81c6cf3fce7ddc1dc9657ca5535d5">MIN_OP</a>, <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da53ede669e5ff418cf4d260e9c093a9d0">MAX_OP</a> };
<a name="l01231"></a>01231 
<a name="l01232"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e068c72f38ab157cc3fcd87e3482e9cf">01232</a> <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#131dd6d980bfead3f7e87543afc4bf78">BuildLogSplitArray</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l01233"></a>01233                             <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars,
<a name="l01234"></a>01234                             <span class="keywordtype">int</span> size,
<a name="l01235"></a>01235                             <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da">BuildOp</a> op) {
<a name="l01236"></a>01236   <span class="keyword">const</span> <span class="keywordtype">int</span> split_size = s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#8b52d4efd0ccb1880d2f1bc794166872" title="Read-only Parameters.">parameters</a>().<a class="code" href="structoperations__research_1_1SolverParameters.html#ee3c55f5ee656ea3c169322ebdf80668" title="When a sum/min/max operations is applied on a large array, this array is recursively...">array_split_size</a>;
<a name="l01237"></a>01237   <span class="keywordflow">if</span> (size == 0) {
<a name="l01238"></a>01238     <span class="keywordflow">return</span> s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#8f027a8b96688e6728e2e9ece1441a13" title="IntConst will create a constant expression.">MakeIntConst</a>(0LL);
<a name="l01239"></a>01239   } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (size == 1) {
<a name="l01240"></a>01240     <span class="keywordflow">return</span> vars[0];
<a name="l01241"></a>01241   } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (size == 2) {
<a name="l01242"></a>01242     <span class="keywordflow">switch</span> (op) {
<a name="l01243"></a>01243       <span class="keywordflow">case</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da99fc01a9bb0c7aae31dfbbbd114edd15">SUM_OP</a>:
<a name="l01244"></a>01244         <span class="keywordflow">return</span> s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#5c6c1e8bb5503babdfe6a59e1fd28851" title="Integer Expressions.">MakeSum</a>(vars[0], vars[1]);
<a name="l01245"></a>01245       <span class="keywordflow">case</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da21e81c6cf3fce7ddc1dc9657ca5535d5">MIN_OP</a>:
<a name="l01246"></a>01246         <span class="keywordflow">return</span> s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#54a5b1827259df21811ad369d2fc4f9b" title="min(vars)">MakeMin</a>(vars[0], vars[1]);
<a name="l01247"></a>01247       <span class="keywordflow">case</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da53ede669e5ff418cf4d260e9c093a9d0">MAX_OP</a>:
<a name="l01248"></a>01248         <span class="keywordflow">return</span> s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#ab177877ce1f613214723c038f3dac85" title="max(vars)">MakeMax</a>(vars[0], vars[1]);
<a name="l01249"></a>01249     };
<a name="l01250"></a>01250   } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (size &gt; split_size) {
<a name="l01251"></a>01251     <span class="keyword">const</span> <span class="keywordtype">int</span> nb_blocks = (size - 1) / split_size + 1;
<a name="l01252"></a>01252     <span class="keyword">const</span> <span class="keywordtype">int</span> block_size = (size + nb_blocks - 1) / nb_blocks;
<a name="l01253"></a>01253     vector&lt;IntVar*&gt; top_vector;
<a name="l01254"></a>01254     <span class="keywordtype">int</span> start = 0;
<a name="l01255"></a>01255     <span class="keywordflow">while</span> (start &lt; size) {
<a name="l01256"></a>01256       <span class="keywordtype">int</span> real_size = (start + block_size &gt; size ? size - start : block_size);
<a name="l01257"></a>01257       <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* intermediate = NULL;
<a name="l01258"></a>01258       <span class="keywordflow">switch</span> (op) {
<a name="l01259"></a>01259         <span class="keywordflow">case</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da99fc01a9bb0c7aae31dfbbbd114edd15">SUM_OP</a>:
<a name="l01260"></a>01260           intermediate = s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#5c6c1e8bb5503babdfe6a59e1fd28851" title="Integer Expressions.">MakeSum</a>(vars + start, real_size)-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#751d151bfe120bc6d378c4570505cbd4" title="Creates a variable from the expression.">Var</a>();
<a name="l01261"></a>01261           <span class="keywordflow">break</span>;
<a name="l01262"></a>01262         <span class="keywordflow">case</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da21e81c6cf3fce7ddc1dc9657ca5535d5">MIN_OP</a>:
<a name="l01263"></a>01263           intermediate = s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#54a5b1827259df21811ad369d2fc4f9b" title="min(vars)">MakeMin</a>(vars + start, real_size)-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#751d151bfe120bc6d378c4570505cbd4" title="Creates a variable from the expression.">Var</a>();
<a name="l01264"></a>01264           <span class="keywordflow">break</span>;
<a name="l01265"></a>01265         <span class="keywordflow">case</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da53ede669e5ff418cf4d260e9c093a9d0">MAX_OP</a>:
<a name="l01266"></a>01266           intermediate = s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#ab177877ce1f613214723c038f3dac85" title="max(vars)">MakeMax</a>(vars + start, real_size)-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#751d151bfe120bc6d378c4570505cbd4" title="Creates a variable from the expression.">Var</a>();
<a name="l01267"></a>01267           <span class="keywordflow">break</span>;
<a name="l01268"></a>01268       }
<a name="l01269"></a>01269       top_vector.push_back(intermediate);
<a name="l01270"></a>01270       start += real_size;
<a name="l01271"></a>01271     }
<a name="l01272"></a>01272     <span class="keywordflow">switch</span> (op) {
<a name="l01273"></a>01273       <span class="keywordflow">case</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da99fc01a9bb0c7aae31dfbbbd114edd15">SUM_OP</a>:
<a name="l01274"></a>01274         <span class="keywordflow">return</span> s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#5c6c1e8bb5503babdfe6a59e1fd28851" title="Integer Expressions.">MakeSum</a>(top_vector);
<a name="l01275"></a>01275       <span class="keywordflow">case</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da21e81c6cf3fce7ddc1dc9657ca5535d5">MIN_OP</a>:
<a name="l01276"></a>01276         <span class="keywordflow">return</span> s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#54a5b1827259df21811ad369d2fc4f9b" title="min(vars)">MakeMin</a>(top_vector);
<a name="l01277"></a>01277       <span class="keywordflow">case</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da53ede669e5ff418cf4d260e9c093a9d0">MAX_OP</a>:
<a name="l01278"></a>01278         <span class="keywordflow">return</span> s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#ab177877ce1f613214723c038f3dac85" title="max(vars)">MakeMax</a>(top_vector);
<a name="l01279"></a>01279     };
<a name="l01280"></a>01280   } <span class="keywordflow">else</span> {
<a name="l01281"></a>01281     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {
<a name="l01282"></a>01282       CHECK_EQ(s, vars[i]-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l01283"></a>01283     }
<a name="l01284"></a>01284     <span class="keywordflow">switch</span> (op) {
<a name="l01285"></a>01285       <span class="keywordflow">case</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da99fc01a9bb0c7aae31dfbbbd114edd15">SUM_OP</a>:
<a name="l01286"></a>01286         <span class="keywordflow">return</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#ef6905f52b5f7a2909191583f0ff72bc">BuildSumArray</a>(s, vars, size);
<a name="l01287"></a>01287       <span class="keywordflow">case</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da21e81c6cf3fce7ddc1dc9657ca5535d5">MIN_OP</a>:
<a name="l01288"></a>01288         <span class="keywordflow">return</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#2b1646f70675f26a834cc70eeb7ebe21">BuildMinArray</a>(s, vars, size);
<a name="l01289"></a>01289       <span class="keywordflow">case</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da53ede669e5ff418cf4d260e9c093a9d0">MAX_OP</a>:
<a name="l01290"></a>01290         <span class="keywordflow">return</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#8e5e37e0c288b783997e8871fb1a5522">BuildMaxArray</a>(s, vars, size);
<a name="l01291"></a>01291     };
<a name="l01292"></a>01292   }
<a name="l01293"></a>01293   LOG(FATAL) &lt;&lt; <span class="stringliteral">"Unknown operator"</span>;
<a name="l01294"></a>01294   <span class="keywordflow">return</span> NULL;
<a name="l01295"></a>01295 }
<a name="l01296"></a>01296 
<a name="l01297"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#131dd6d980bfead3f7e87543afc4bf78">01297</a> <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#131dd6d980bfead3f7e87543afc4bf78">BuildLogSplitArray</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l01298"></a>01298                             <span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars,
<a name="l01299"></a>01299                             <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da">BuildOp</a> op) {
<a name="l01300"></a>01300   <span class="keywordflow">return</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#131dd6d980bfead3f7e87543afc4bf78">BuildLogSplitArray</a>(s, vars.data(), vars.size(), op);
<a name="l01301"></a>01301 }
<a name="l01302"></a>01302 
<a name="l01303"></a>01303 }  <span class="comment">// namespace</span>
<a name="l01304"></a>01304 
<a name="l01305"></a><a class="code" href="classoperations__research_1_1Solver.html#a5901850100d01437993e5365f8c3ad4">01305</a> <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <a class="code" href="classoperations__research_1_1Solver.html#5c6c1e8bb5503babdfe6a59e1fd28851" title="Integer Expressions.">Solver::MakeSum</a>(<span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars) {
<a name="l01306"></a>01306   <span class="keywordflow">return</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#131dd6d980bfead3f7e87543afc4bf78">BuildLogSplitArray</a>(<span class="keyword">this</span>, vars, <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da99fc01a9bb0c7aae31dfbbbd114edd15">SUM_OP</a>);
<a name="l01307"></a>01307 }
<a name="l01308"></a>01308 
<a name="l01309"></a><a class="code" href="classoperations__research_1_1Solver.html#8e18034dcecb59ea3b4884029f604d38">01309</a> <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <a class="code" href="classoperations__research_1_1Solver.html#5c6c1e8bb5503babdfe6a59e1fd28851" title="Integer Expressions.">Solver::MakeSum</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size) {
<a name="l01310"></a>01310   <span class="keywordflow">return</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#131dd6d980bfead3f7e87543afc4bf78">BuildLogSplitArray</a>(<span class="keyword">this</span>, vars, size, <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da99fc01a9bb0c7aae31dfbbbd114edd15">SUM_OP</a>);
<a name="l01311"></a>01311 }
<a name="l01312"></a>01312 
<a name="l01313"></a><a class="code" href="classoperations__research_1_1Solver.html#54a5b1827259df21811ad369d2fc4f9b">01313</a> <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <a class="code" href="classoperations__research_1_1Solver.html#54a5b1827259df21811ad369d2fc4f9b" title="min(vars)">Solver::MakeMin</a>(<span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars) {
<a name="l01314"></a>01314   <span class="keywordflow">return</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#131dd6d980bfead3f7e87543afc4bf78">BuildLogSplitArray</a>(<span class="keyword">this</span>, vars, <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da21e81c6cf3fce7ddc1dc9657ca5535d5">MIN_OP</a>);
<a name="l01315"></a>01315 }
<a name="l01316"></a>01316 
<a name="l01317"></a><a class="code" href="classoperations__research_1_1Solver.html#4224fc3b4bd41cd1a329aef6e578aa30">01317</a> <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <a class="code" href="classoperations__research_1_1Solver.html#54a5b1827259df21811ad369d2fc4f9b" title="min(vars)">Solver::MakeMin</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size) {
<a name="l01318"></a>01318   <span class="keywordflow">return</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#131dd6d980bfead3f7e87543afc4bf78">BuildLogSplitArray</a>(<span class="keyword">this</span>, vars, size, <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da21e81c6cf3fce7ddc1dc9657ca5535d5">MIN_OP</a>);
<a name="l01319"></a>01319 }
<a name="l01320"></a>01320 
<a name="l01321"></a><a class="code" href="classoperations__research_1_1Solver.html#ab177877ce1f613214723c038f3dac85">01321</a> <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <a class="code" href="classoperations__research_1_1Solver.html#ab177877ce1f613214723c038f3dac85" title="max(vars)">Solver::MakeMax</a>(<span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars) {
<a name="l01322"></a>01322   <span class="keywordflow">return</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#131dd6d980bfead3f7e87543afc4bf78">BuildLogSplitArray</a>(<span class="keyword">this</span>, vars, <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da53ede669e5ff418cf4d260e9c093a9d0">MAX_OP</a>);
<a name="l01323"></a>01323 }
<a name="l01324"></a>01324 
<a name="l01325"></a><a class="code" href="classoperations__research_1_1Solver.html#b408ab32dd070a0fc876200104d00f83">01325</a> <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <a class="code" href="classoperations__research_1_1Solver.html#ab177877ce1f613214723c038f3dac85" title="max(vars)">Solver::MakeMax</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size) {
<a name="l01326"></a>01326   <span class="keywordflow">return</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#131dd6d980bfead3f7e87543afc4bf78">BuildLogSplitArray</a>(<span class="keyword">this</span>, vars, size, <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#e5a1ed01676c62bea8e29849c8de00da53ede669e5ff418cf4d260e9c093a9d0">MAX_OP</a>);
<a name="l01327"></a>01327 }
<a name="l01328"></a>01328 
<a name="l01329"></a>01329 <span class="comment">// ---------- Specialized cases ----------</span>
<a name="l01330"></a>01330 
<a name="l01331"></a>01331 <span class="keyword">namespace </span>{
<a name="l01332"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#793bcfc2f52006e1e42125f3ee7dcdfc">01332</a> <span class="keywordtype">bool</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#793bcfc2f52006e1e42125f3ee7dcdfc">AreAllBooleans</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars, <span class="keywordtype">int</span> size) {
<a name="l01333"></a>01333   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {
<a name="l01334"></a>01334     <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* var = vars[i];
<a name="l01335"></a>01335     <span class="keywordflow">if</span> (var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>() &lt; 0 || var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>() &gt; 1) {
<a name="l01336"></a>01336       <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l01337"></a>01337     }
<a name="l01338"></a>01338   }
<a name="l01339"></a>01339   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l01340"></a>01340 }
<a name="l01341"></a>01341 
<a name="l01342"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#d15698d78c7120652f0dc2454b05ba45">01342</a> <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt; <span class="keywordtype">bool</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#d15698d78c7120652f0dc2454b05ba45">AreAllPositive</a>(<span class="keyword">const</span> T* <span class="keyword">const</span> values, <span class="keywordtype">int</span> size) {
<a name="l01343"></a>01343   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {
<a name="l01344"></a>01344     <span class="keywordflow">if</span> (values[i] &lt; 0) {
<a name="l01345"></a>01345       <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l01346"></a>01346     }
<a name="l01347"></a>01347   }
<a name="l01348"></a>01348   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l01349"></a>01349 }
<a name="l01350"></a>01350 
<a name="l01351"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#9b73628fe46a9aab6466fc79c9b3d3d0">01351</a> <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt; <span class="keywordtype">bool</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#9b73628fe46a9aab6466fc79c9b3d3d0">AreAllNull</a>(<span class="keyword">const</span> T* <span class="keyword">const</span> values, <span class="keywordtype">int</span> size) {
<a name="l01352"></a>01352   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {
<a name="l01353"></a>01353     <span class="keywordflow">if</span> (values[i] != 0) {
<a name="l01354"></a>01354       <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l01355"></a>01355     }
<a name="l01356"></a>01356   }
<a name="l01357"></a>01357   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l01358"></a>01358 }
<a name="l01359"></a>01359 
<a name="l01360"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#a0ea2b18a56d1f205373255de37c34e6">01360</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keywordtype">bool</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#a0ea2b18a56d1f205373255de37c34e6">AreAllBoundOrNull</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l01361"></a>01361                                           <span class="keyword">const</span> T* <span class="keyword">const</span> values,
<a name="l01362"></a>01362                                           <span class="keywordtype">int</span> size) {
<a name="l01363"></a>01363   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {
<a name="l01364"></a>01364     <span class="keywordflow">if</span> (values[i] != 0 &amp;&amp; !vars[i]-&gt;Bound()) {
<a name="l01365"></a>01365       <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l01366"></a>01366     }
<a name="l01367"></a>01367   }
<a name="l01368"></a>01368   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l01369"></a>01369 }
<a name="l01370"></a>01370 
<a name="l01371"></a>01371 }  <span class="comment">// namespace</span>
<a name="l01372"></a>01372 
<a name="l01373"></a><a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html">01373</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html" title="namespace">BaseSumBooleanConstraint</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a> {
<a name="l01374"></a>01374  <span class="keyword">public</span>:
<a name="l01375"></a><a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#31f9fb05d67f880f88c0fb3612dabc55">01375</a>   <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html" title="namespace">BaseSumBooleanConstraint</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l01376"></a>01376                            <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars,
<a name="l01377"></a>01377                            <span class="keywordtype">int</span> size)
<a name="l01378"></a>01378       : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s), vars_(new <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>*[size]), size_(size), inactive_(false) {
<a name="l01379"></a>01379     CHECK_GT(size_, 0);
<a name="l01380"></a>01380     CHECK(vars != NULL);
<a name="l01381"></a>01381     memcpy(vars_.get(), vars, size_ * <span class="keyword">sizeof</span>(*vars));
<a name="l01382"></a>01382   }
<a name="l01383"></a><a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#dccae6678eb2d9c34b3d1a9b0c259fd4">01383</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html" title="namespace">BaseSumBooleanConstraint</a>() {}
<a name="l01384"></a>01384  <span class="keyword">protected</span>:
<a name="l01385"></a>01385   <span class="keywordtype">string</span> DebugStringInternal(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; name) <span class="keyword">const</span>;
<a name="l01386"></a>01386 
<a name="l01387"></a><a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">01387</a>   scoped_array&lt;IntVar*&gt; vars_;
<a name="l01388"></a><a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">01388</a>   <span class="keywordtype">int</span> size_;
<a name="l01389"></a><a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#0d26f15940d1ddf6a8094eb0218c2d79">01389</a>   <span class="keywordtype">int</span> inactive_;
<a name="l01390"></a>01390 };
<a name="l01391"></a>01391 
<a name="l01392"></a><a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#f62bb900da533cb32365f7f304193b58">01392</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#f62bb900da533cb32365f7f304193b58">BaseSumBooleanConstraint::DebugStringInternal</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; name)<span class="keyword"> const </span>{
<a name="l01393"></a>01393   <span class="keywordtype">string</span> out = name + <span class="stringliteral">"("</span>;
<a name="l01394"></a>01394   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l01395"></a>01395     <span class="keywordflow">if</span> (i &gt; 0) {
<a name="l01396"></a>01396       out += <span class="stringliteral">", "</span>;
<a name="l01397"></a>01397     }
<a name="l01398"></a>01398     out += <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;DebugString();
<a name="l01399"></a>01399   }
<a name="l01400"></a>01400   out += <span class="stringliteral">")"</span>;
<a name="l01401"></a>01401   <span class="keywordflow">return</span> out;
<a name="l01402"></a>01402 }
<a name="l01403"></a>01403 
<a name="l01404"></a>01404 <span class="comment">// ----- Sum of Boolean &lt;= 1 -----</span>
<a name="l01405"></a>01405 
<a name="l01406"></a><a class="code" href="classoperations__research_1_1SumBooleanLessOrEqualToOne.html">01406</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1SumBooleanLessOrEqualToOne.html" title="Sum of Boolean &amp;lt;= 1.">SumBooleanLessOrEqualToOne</a> : <span class="keyword">public</span>  <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html" title="namespace">BaseSumBooleanConstraint</a> {
<a name="l01407"></a>01407  <span class="keyword">public</span>:
<a name="l01408"></a><a class="code" href="classoperations__research_1_1SumBooleanLessOrEqualToOne.html#bd5f90538d6201c3bb2f4a5c98791675">01408</a>   <a class="code" href="classoperations__research_1_1SumBooleanLessOrEqualToOne.html" title="Sum of Boolean &amp;lt;= 1.">SumBooleanLessOrEqualToOne</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l01409"></a>01409                              <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars,
<a name="l01410"></a>01410                              <span class="keywordtype">int</span> size)
<a name="l01411"></a>01411       :  <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html" title="namespace">BaseSumBooleanConstraint</a>(s, vars, size) {}
<a name="l01412"></a>01412 
<a name="l01413"></a><a class="code" href="classoperations__research_1_1SumBooleanLessOrEqualToOne.html#8f1c5741e562674aa7e0453e2ac8bf90">01413</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1SumBooleanLessOrEqualToOne.html" title="Sum of Boolean &amp;lt;= 1.">SumBooleanLessOrEqualToOne</a>() {}
<a name="l01414"></a>01414 
<a name="l01415"></a><a class="code" href="classoperations__research_1_1SumBooleanLessOrEqualToOne.html#b5919fbb03980ef2fd58a76534daeb34">01415</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Constraint.html#aa882d58b5fc0f2e3df6eff957ad4a0d" title="This method is called when the constraint is processed by the solver.">Post</a>() {
<a name="l01416"></a>01416     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l01417"></a>01417       <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;Bound()) {
<a name="l01418"></a>01418         <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* u = <a class="code" href="namespaceoperations__research.html#bc7cb18be5d9d418d32782253cd4bf5a">MakeConstraintDemon1</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l01419"></a>01419                                         <span class="keyword">this</span>,
<a name="l01420"></a>01420                                         &amp;<a class="code" href="classoperations__research_1_1SumBooleanLessOrEqualToOne.html#4f578aeb26bcce0775c684c02219f2ca">SumBooleanLessOrEqualToOne::Update</a>,
<a name="l01421"></a>01421                                         <span class="stringliteral">"Update"</span>,
<a name="l01422"></a>01422                                         i);
<a name="l01423"></a>01423         <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;WhenBound(u);
<a name="l01424"></a>01424       }
<a name="l01425"></a>01425     }
<a name="l01426"></a>01426   }
<a name="l01427"></a>01427 
<a name="l01428"></a><a class="code" href="classoperations__research_1_1SumBooleanLessOrEqualToOne.html#6dad9d612f83caa68252f43073a4ab54">01428</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Constraint.html#64ab23714e57db311ba5b9fe1e742979" title="This method performs the initial propagation of the constraint.">InitialPropagate</a>() {
<a name="l01429"></a>01429     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l01430"></a>01430       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;Min() == 1) {
<a name="l01431"></a>01431         PushAllToZeroExcept(i);
<a name="l01432"></a>01432         <span class="keywordflow">return</span>;
<a name="l01433"></a>01433       }
<a name="l01434"></a>01434     }
<a name="l01435"></a>01435   }
<a name="l01436"></a>01436 
<a name="l01437"></a><a class="code" href="classoperations__research_1_1SumBooleanLessOrEqualToOne.html#4f578aeb26bcce0775c684c02219f2ca">01437</a>   <span class="keywordtype">void</span> Update(<span class="keywordtype">int</span> index) {
<a name="l01438"></a>01438     <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#0d26f15940d1ddf6a8094eb0218c2d79">inactive_</a>) {
<a name="l01439"></a>01439       DCHECK(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[index]-&gt;Bound());
<a name="l01440"></a>01440       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[index]-&gt;Min() == 1) {
<a name="l01441"></a>01441         PushAllToZeroExcept(index);
<a name="l01442"></a>01442       }
<a name="l01443"></a>01443     }
<a name="l01444"></a>01444   }
<a name="l01445"></a>01445 
<a name="l01446"></a><a class="code" href="classoperations__research_1_1SumBooleanLessOrEqualToOne.html#4be7b0560c092b67e7b1ea8f8eb242d3">01446</a>   <span class="keywordtype">void</span> PushAllToZeroExcept(<span class="keywordtype">int</span> index) {
<a name="l01447"></a>01447     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#0d26f15940d1ddf6a8094eb0218c2d79">inactive_</a>, 1);
<a name="l01448"></a>01448     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l01449"></a>01449       <span class="keywordflow">if</span> (i != index &amp;&amp; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;Max() != 0) {
<a name="l01450"></a>01450         <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;SetMax(0);
<a name="l01451"></a>01451       }
<a name="l01452"></a>01452     }
<a name="l01453"></a>01453   }
<a name="l01454"></a>01454 
<a name="l01455"></a><a class="code" href="classoperations__research_1_1SumBooleanLessOrEqualToOne.html#80a7222f8d42da1576a5448f02679d70">01455</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Constraint.html#f870afb5d6c1fba1d70b38eb581f8cca" title="Constraint class.">DebugString</a>()<span class="keyword"> const </span>{
<a name="l01456"></a>01456     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#f62bb900da533cb32365f7f304193b58">DebugStringInternal</a>(<span class="stringliteral">"SumBooleanLessOrEqualToOne"</span>);
<a name="l01457"></a>01457   }
<a name="l01458"></a>01458 };
<a name="l01459"></a>01459 
<a name="l01460"></a>01460 <span class="comment">// ----- Sum of Boolean &gt;= 1 -----</span>
<a name="l01461"></a>01461 
<a name="l01462"></a>01462 <span class="comment">// We implement this one as a Max(array) == 1.</span>
<a name="l01463"></a>01463 
<a name="l01464"></a><a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html">01464</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html" title="Sum of Boolean &amp;gt;= 1.">SumBooleanGreaterOrEqualToOne</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html" title="namespace">BaseSumBooleanConstraint</a> {
<a name="l01465"></a>01465  <span class="keyword">public</span>:
<a name="l01466"></a>01466   <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html" title="Sum of Boolean &amp;gt;= 1.">SumBooleanGreaterOrEqualToOne</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l01467"></a>01467                                 <span class="keywordtype">int</span> size);
<a name="l01468"></a><a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#57b046bcbea8e4eef014acf7b5ec72df">01468</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html" title="Sum of Boolean &amp;gt;= 1.">SumBooleanGreaterOrEqualToOne</a>() {}
<a name="l01469"></a>01469 
<a name="l01470"></a>01470   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Constraint.html#aa882d58b5fc0f2e3df6eff957ad4a0d" title="This method is called when the constraint is processed by the solver.">Post</a>();
<a name="l01471"></a>01471   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Constraint.html#64ab23714e57db311ba5b9fe1e742979" title="This method performs the initial propagation of the constraint.">InitialPropagate</a>();
<a name="l01472"></a>01472 
<a name="l01473"></a>01473   <span class="keywordtype">void</span> Update(<span class="keywordtype">int</span> index);
<a name="l01474"></a>01474   <span class="keywordtype">void</span> UpdateVar();
<a name="l01475"></a>01475 
<a name="l01476"></a>01476   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Constraint.html#f870afb5d6c1fba1d70b38eb581f8cca" title="Constraint class.">DebugString</a>() <span class="keyword">const</span>;
<a name="l01477"></a>01477 
<a name="l01478"></a>01478  <span class="keyword">private</span>:
<a name="l01479"></a><a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#ee315f9dedf766d355671ec807ee4033">01479</a>   <a class="code" href="classoperations__research_1_1RevBitSet.html" title="This class represents a reversible bitset.">RevBitSet</a> bits_;
<a name="l01480"></a>01480 };
<a name="l01481"></a>01481 
<a name="l01482"></a><a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#0664db333adf2fefeda2f1839ec068d1">01482</a> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#0664db333adf2fefeda2f1839ec068d1">SumBooleanGreaterOrEqualToOne::SumBooleanGreaterOrEqualToOne</a>(
<a name="l01483"></a>01483     <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l01484"></a>01484     <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l01485"></a>01485     <span class="keywordtype">int</span> size)
<a name="l01486"></a>01486     : <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html" title="namespace">BaseSumBooleanConstraint</a>(s, vars, size), bits_(size) {}
<a name="l01487"></a>01487 
<a name="l01488"></a><a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#bb4a07351536c2fe684cf993360a674e">01488</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#bb4a07351536c2fe684cf993360a674e" title="This method is called when the constraint is processed by the solver.">SumBooleanGreaterOrEqualToOne::Post</a>() {
<a name="l01489"></a>01489   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l01490"></a>01490     <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d = <a class="code" href="namespaceoperations__research.html#bc7cb18be5d9d418d32782253cd4bf5a">MakeConstraintDemon1</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l01491"></a>01491                                     <span class="keyword">this</span>,
<a name="l01492"></a>01492                                     &amp;<a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#5f4d2a6277dd7c080b2bb06e0dbb2ed9">SumBooleanGreaterOrEqualToOne::Update</a>,
<a name="l01493"></a>01493                                     <span class="stringliteral">"Update"</span>,
<a name="l01494"></a>01494                                     i);
<a name="l01495"></a>01495     <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;WhenRange(d);
<a name="l01496"></a>01496   }
<a name="l01497"></a>01497 }
<a name="l01498"></a>01498 
<a name="l01499"></a><a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#3ce94e9ceb79c31e30a36e72ca95a6da">01499</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#3ce94e9ceb79c31e30a36e72ca95a6da" title="This method performs the initial propagation of the constraint.">SumBooleanGreaterOrEqualToOne::InitialPropagate</a>() {
<a name="l01500"></a>01500   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l01501"></a>01501     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var = <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i];
<a name="l01502"></a>01502     <span class="keywordflow">if</span> (var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>() == 1LL) {
<a name="l01503"></a>01503       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#0d26f15940d1ddf6a8094eb0218c2d79">inactive_</a>, 1);
<a name="l01504"></a>01504       <span class="keywordflow">return</span>;
<a name="l01505"></a>01505     }
<a name="l01506"></a>01506     <span class="keywordflow">if</span> (var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>() == 1LL) {
<a name="l01507"></a>01507       <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#ee315f9dedf766d355671ec807ee4033">bits_</a>.<a class="code" href="classoperations__research_1_1RevBitSet.html#2ac97e7b0f29e9405ce4465b8d7f407a" title="Array API.">SetToOne</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(), i);
<a name="l01508"></a>01508     }
<a name="l01509"></a>01509   }
<a name="l01510"></a>01510   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#ee315f9dedf766d355671ec807ee4033">bits_</a>.<a class="code" href="classoperations__research_1_1RevBitSet.html#8ec6e7f2b6f808e3c53ac1d120d7ab82">IsCardinalityZero</a>()) {
<a name="l01511"></a>01511     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l01512"></a>01512   } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#ee315f9dedf766d355671ec807ee4033">bits_</a>.<a class="code" href="classoperations__research_1_1RevBitSet.html#9b7a644f43cceff713cd3b641755698d">IsCardinalityOne</a>()) {
<a name="l01513"></a>01513     <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[<a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#ee315f9dedf766d355671ec807ee4033">bits_</a>.<a class="code" href="classoperations__research_1_1RevBitSet.html#84c8bc32d2e8c150d7828e380c51c0c8">GetFirstBit</a>(0)]-&gt;SetValue(1LL);
<a name="l01514"></a>01514     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#0d26f15940d1ddf6a8094eb0218c2d79">inactive_</a>, 1);
<a name="l01515"></a>01515   }
<a name="l01516"></a>01516 }
<a name="l01517"></a>01517 
<a name="l01518"></a><a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#5f4d2a6277dd7c080b2bb06e0dbb2ed9">01518</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#5f4d2a6277dd7c080b2bb06e0dbb2ed9">SumBooleanGreaterOrEqualToOne::Update</a>(<span class="keywordtype">int</span> index) {
<a name="l01519"></a>01519   <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#0d26f15940d1ddf6a8094eb0218c2d79">inactive_</a>) {
<a name="l01520"></a>01520     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[index]-&gt;Min() == 1LL) {  <span class="comment">// Bound to 1.</span>
<a name="l01521"></a>01521       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#0d26f15940d1ddf6a8094eb0218c2d79">inactive_</a>, 1);
<a name="l01522"></a>01522     } <span class="keywordflow">else</span> {
<a name="l01523"></a>01523       <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#ee315f9dedf766d355671ec807ee4033">bits_</a>.<a class="code" href="classoperations__research_1_1RevBitSet.html#487c03117be2f0f5c983acc4d5fd27eb">SetToZero</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(), index);
<a name="l01524"></a>01524       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#ee315f9dedf766d355671ec807ee4033">bits_</a>.<a class="code" href="classoperations__research_1_1RevBitSet.html#8ec6e7f2b6f808e3c53ac1d120d7ab82">IsCardinalityZero</a>()) {
<a name="l01525"></a>01525         <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l01526"></a>01526       } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#ee315f9dedf766d355671ec807ee4033">bits_</a>.<a class="code" href="classoperations__research_1_1RevBitSet.html#9b7a644f43cceff713cd3b641755698d">IsCardinalityOne</a>()) {
<a name="l01527"></a>01527         <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[<a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#ee315f9dedf766d355671ec807ee4033">bits_</a>.<a class="code" href="classoperations__research_1_1RevBitSet.html#84c8bc32d2e8c150d7828e380c51c0c8">GetFirstBit</a>(0)]-&gt;SetValue(1LL);
<a name="l01528"></a>01528         <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#0d26f15940d1ddf6a8094eb0218c2d79">inactive_</a>, 1);
<a name="l01529"></a>01529       }
<a name="l01530"></a>01530     }
<a name="l01531"></a>01531   }
<a name="l01532"></a>01532 }
<a name="l01533"></a>01533 
<a name="l01534"></a><a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#25b5196c8437a54e7c98f5e8b984dbe4">01534</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#25b5196c8437a54e7c98f5e8b984dbe4" title="Constraint class.">SumBooleanGreaterOrEqualToOne::DebugString</a>()<span class="keyword"> const </span>{
<a name="l01535"></a>01535   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#f62bb900da533cb32365f7f304193b58">DebugStringInternal</a>(<span class="stringliteral">"SumBooleanGreaterOrEqualToOne"</span>);
<a name="l01536"></a>01536 }
<a name="l01537"></a>01537 
<a name="l01538"></a>01538 <span class="comment">// ----- Sum of Boolean == 1 -----</span>
<a name="l01539"></a>01539 
<a name="l01540"></a><a class="code" href="classoperations__research_1_1SumBooleanEqualToOne.html">01540</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1SumBooleanEqualToOne.html" title="Sum of Boolean == 1.">SumBooleanEqualToOne</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html" title="namespace">BaseSumBooleanConstraint</a> {
<a name="l01541"></a>01541  <span class="keyword">public</span>:
<a name="l01542"></a><a class="code" href="classoperations__research_1_1SumBooleanEqualToOne.html#8a3706ed33935b310c7365ab6413be08">01542</a>   <a class="code" href="classoperations__research_1_1SumBooleanEqualToOne.html" title="Sum of Boolean == 1.">SumBooleanEqualToOne</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l01543"></a>01543                        <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars,
<a name="l01544"></a>01544                        <span class="keywordtype">int</span> size)
<a name="l01545"></a>01545       : <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html" title="namespace">BaseSumBooleanConstraint</a>(s, vars, size), active_vars_(0) {}
<a name="l01546"></a>01546 
<a name="l01547"></a><a class="code" href="classoperations__research_1_1SumBooleanEqualToOne.html#4b2ddc65813264de588740343936b826">01547</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1SumBooleanEqualToOne.html" title="Sum of Boolean == 1.">SumBooleanEqualToOne</a>() {}
<a name="l01548"></a>01548 
<a name="l01549"></a><a class="code" href="classoperations__research_1_1SumBooleanEqualToOne.html#88c71c07c860aaa4da713a252651efb0">01549</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#bb4a07351536c2fe684cf993360a674e" title="This method is called when the constraint is processed by the solver.">Post</a>() {
<a name="l01550"></a>01550     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l01551"></a>01551       <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* u = <a class="code" href="namespaceoperations__research.html#bc7cb18be5d9d418d32782253cd4bf5a">MakeConstraintDemon1</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l01552"></a>01552                                       <span class="keyword">this</span>,
<a name="l01553"></a>01553                                       &amp;<a class="code" href="classoperations__research_1_1SumBooleanEqualToOne.html#6d615dc7cbcf76fd06c2d34e630612a0">SumBooleanEqualToOne::Update</a>,
<a name="l01554"></a>01554                                       <span class="stringliteral">"Update"</span>,
<a name="l01555"></a>01555                                       i);
<a name="l01556"></a>01556       <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;WhenBound(u);
<a name="l01557"></a>01557     }
<a name="l01558"></a>01558   }
<a name="l01559"></a>01559 
<a name="l01560"></a><a class="code" href="classoperations__research_1_1SumBooleanEqualToOne.html#1613fa595f46f3cab7741e0bc03cbad5">01560</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#3ce94e9ceb79c31e30a36e72ca95a6da" title="This method performs the initial propagation of the constraint.">InitialPropagate</a>() {
<a name="l01561"></a>01561     <span class="keywordtype">int</span> min1 = 0;
<a name="l01562"></a>01562     <span class="keywordtype">int</span> max1 = 0;
<a name="l01563"></a>01563     <span class="keywordtype">int</span> index_min = -1;
<a name="l01564"></a>01564     <span class="keywordtype">int</span> index_max = -1;
<a name="l01565"></a>01565     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l01566"></a>01566       <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var = <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i];
<a name="l01567"></a>01567       <span class="keywordflow">if</span> (var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>() == 1) {
<a name="l01568"></a>01568         min1++;
<a name="l01569"></a>01569         index_min = i;
<a name="l01570"></a>01570       }
<a name="l01571"></a>01571       <span class="keywordflow">if</span> (var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>() == 1) {
<a name="l01572"></a>01572         max1++;
<a name="l01573"></a>01573         index_max = i;
<a name="l01574"></a>01574       }
<a name="l01575"></a>01575     }
<a name="l01576"></a>01576     <span class="keywordflow">if</span> (min1 &gt; 1 || max1 == 0) {
<a name="l01577"></a>01577       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l01578"></a>01578     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (min1 == 1) {
<a name="l01579"></a>01579       DCHECK_NE(-1, index_min);
<a name="l01580"></a>01580       PushAllToZeroExcept(index_min);
<a name="l01581"></a>01581     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (max1 == 1) {
<a name="l01582"></a>01582       DCHECK_NE(-1, index_max);
<a name="l01583"></a>01583       <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[index_max]-&gt;SetValue(1);
<a name="l01584"></a>01584       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#0d26f15940d1ddf6a8094eb0218c2d79">inactive_</a>, 1);
<a name="l01585"></a>01585     } <span class="keywordflow">else</span> {
<a name="l01586"></a>01586       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;active_vars_, max1);
<a name="l01587"></a>01587     }
<a name="l01588"></a>01588   }
<a name="l01589"></a>01589 
<a name="l01590"></a><a class="code" href="classoperations__research_1_1SumBooleanEqualToOne.html#6d615dc7cbcf76fd06c2d34e630612a0">01590</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#5f4d2a6277dd7c080b2bb06e0dbb2ed9">Update</a>(<span class="keywordtype">int</span> index) {
<a name="l01591"></a>01591     <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#0d26f15940d1ddf6a8094eb0218c2d79">inactive_</a>) {
<a name="l01592"></a>01592       DCHECK(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[index]-&gt;Bound());
<a name="l01593"></a>01593       <span class="keyword">const</span> int64 value = <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[index]-&gt;Min();  <span class="comment">// Faster than Value().</span>
<a name="l01594"></a>01594       <span class="keywordflow">if</span> (value == 0) {
<a name="l01595"></a>01595         <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#cf35e0062ce89a8fdf5c1762c5baebfe" title="All-in-one SaveAndAdd_value.">SaveAndAdd</a>(&amp;active_vars_, -1);
<a name="l01596"></a>01596         DCHECK_GE(active_vars_, 0);
<a name="l01597"></a>01597         <span class="keywordflow">if</span> (active_vars_ == 0) {
<a name="l01598"></a>01598           <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l01599"></a>01599         } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (active_vars_ == 1) {
<a name="l01600"></a>01600           <span class="keywordtype">bool</span> found = <span class="keyword">false</span>;
<a name="l01601"></a>01601           <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l01602"></a>01602             <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var = <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i];
<a name="l01603"></a>01603             <span class="keywordflow">if</span> (var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>() == 1) {
<a name="l01604"></a>01604               var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#8889930ed76665b0f24f12df2ed4e05c" title="This method sets the value of the expression.">SetValue</a>(1);
<a name="l01605"></a>01605               PushAllToZeroExcept(i);
<a name="l01606"></a>01606               found = <span class="keyword">true</span>;
<a name="l01607"></a>01607               <span class="keywordflow">break</span>;
<a name="l01608"></a>01608             }
<a name="l01609"></a>01609           }
<a name="l01610"></a>01610           <span class="keywordflow">if</span> (!found) {
<a name="l01611"></a>01611             <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l01612"></a>01612           }
<a name="l01613"></a>01613         }
<a name="l01614"></a>01614       } <span class="keywordflow">else</span> {
<a name="l01615"></a>01615         PushAllToZeroExcept(index);
<a name="l01616"></a>01616       }
<a name="l01617"></a>01617     }
<a name="l01618"></a>01618   }
<a name="l01619"></a>01619 
<a name="l01620"></a><a class="code" href="classoperations__research_1_1SumBooleanEqualToOne.html#13677d9d3f1f13c632b9257942b5aa1d">01620</a>   <span class="keywordtype">void</span> PushAllToZeroExcept(<span class="keywordtype">int</span> index) {
<a name="l01621"></a>01621     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#0d26f15940d1ddf6a8094eb0218c2d79">inactive_</a>, 1);
<a name="l01622"></a>01622     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l01623"></a>01623       <span class="keywordflow">if</span> (i != index &amp;&amp; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;Max() != 0) {
<a name="l01624"></a>01624         <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;SetMax(0);
<a name="l01625"></a>01625       }
<a name="l01626"></a>01626     }
<a name="l01627"></a>01627   }
<a name="l01628"></a>01628 
<a name="l01629"></a><a class="code" href="classoperations__research_1_1SumBooleanEqualToOne.html#2592d8d3943fd0406242a6bc1849855b">01629</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#25b5196c8437a54e7c98f5e8b984dbe4" title="Constraint class.">DebugString</a>()<span class="keyword"> const </span>{
<a name="l01630"></a>01630     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#f62bb900da533cb32365f7f304193b58">DebugStringInternal</a>(<span class="stringliteral">"SumBooleanEqualToOne"</span>);
<a name="l01631"></a>01631   }
<a name="l01632"></a>01632 
<a name="l01633"></a>01633  <span class="keyword">private</span>:
<a name="l01634"></a><a class="code" href="classoperations__research_1_1SumBooleanEqualToOne.html#204e4cab225d266dba885e8c89b33c51">01634</a>   <span class="keywordtype">int</span> active_vars_;
<a name="l01635"></a>01635 };
<a name="l01636"></a>01636 
<a name="l01637"></a>01637 <span class="comment">// ----- Sum of Boolean Equal To Var -----</span>
<a name="l01638"></a>01638 
<a name="l01639"></a><a class="code" href="classoperations__research_1_1SumBooleanEqualToVar.html">01639</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1SumBooleanEqualToVar.html" title="Sum of Boolean Equal To Var.">SumBooleanEqualToVar</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html" title="namespace">BaseSumBooleanConstraint</a> {
<a name="l01640"></a>01640  <span class="keyword">public</span>:
<a name="l01641"></a><a class="code" href="classoperations__research_1_1SumBooleanEqualToVar.html#f127e258028801006304953910c79945">01641</a>   <a class="code" href="classoperations__research_1_1SumBooleanEqualToVar.html" title="Sum of Boolean Equal To Var.">SumBooleanEqualToVar</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l01642"></a>01642                        <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* bool_vars,
<a name="l01643"></a>01643                        <span class="keywordtype">int</span> size,
<a name="l01644"></a>01644                        <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> sum_var)
<a name="l01645"></a>01645       : <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html" title="namespace">BaseSumBooleanConstraint</a>(s, bool_vars, size),
<a name="l01646"></a>01646         num_possible_true_vars_(0),
<a name="l01647"></a>01647         num_always_true_vars_(0),
<a name="l01648"></a>01648         sum_var_(sum_var) {}
<a name="l01649"></a>01649 
<a name="l01650"></a><a class="code" href="classoperations__research_1_1SumBooleanEqualToVar.html#01bdca8bc60f3a0736afb70d74a452a0">01650</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1SumBooleanEqualToVar.html" title="Sum of Boolean Equal To Var.">SumBooleanEqualToVar</a>() {}
<a name="l01651"></a>01651 
<a name="l01652"></a><a class="code" href="classoperations__research_1_1SumBooleanEqualToVar.html#90e3fc98a8d8c45974a4f739323fa83c">01652</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#bb4a07351536c2fe684cf993360a674e" title="This method is called when the constraint is processed by the solver.">Post</a>() {
<a name="l01653"></a>01653     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l01654"></a>01654       <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* <span class="keyword">const</span> u = <a class="code" href="namespaceoperations__research.html#bc7cb18be5d9d418d32782253cd4bf5a">MakeConstraintDemon1</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l01655"></a>01655                                             <span class="keyword">this</span>,
<a name="l01656"></a>01656                                             &amp;<a class="code" href="classoperations__research_1_1SumBooleanEqualToVar.html#1157de22d7853e704adc182a8514894d">SumBooleanEqualToVar::Update</a>,
<a name="l01657"></a>01657                                             <span class="stringliteral">"Update"</span>,
<a name="l01658"></a>01658                                             i);
<a name="l01659"></a>01659       <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;WhenBound(u);
<a name="l01660"></a>01660     }
<a name="l01661"></a>01661     <span class="keywordflow">if</span> (!sum_var_-&gt;Bound()) {
<a name="l01662"></a>01662       <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* <span class="keyword">const</span> u = <a class="code" href="namespaceoperations__research.html#50b3d41d8dbf72bb2ad22235a9e1f53e">MakeConstraintDemon0</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l01663"></a>01663                                             <span class="keyword">this</span>,
<a name="l01664"></a>01664                                             &amp;<a class="code" href="classoperations__research_1_1SumBooleanEqualToVar.html#bfcd301aea2d751d094f173c8e780eba">SumBooleanEqualToVar::UpdateVar</a>,
<a name="l01665"></a>01665                                             <span class="stringliteral">"UpdateVar"</span>);
<a name="l01666"></a>01666       sum_var_-&gt;WhenRange(u);
<a name="l01667"></a>01667     }
<a name="l01668"></a>01668   }
<a name="l01669"></a>01669 
<a name="l01670"></a><a class="code" href="classoperations__research_1_1SumBooleanEqualToVar.html#da1c51ab3f17ba212f890f0afa135552">01670</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#3ce94e9ceb79c31e30a36e72ca95a6da" title="This method performs the initial propagation of the constraint.">InitialPropagate</a>() {
<a name="l01671"></a>01671     <span class="keywordtype">int</span> num_always_true_vars = 0;
<a name="l01672"></a>01672     <span class="keywordtype">int</span> possible_true = 0;
<a name="l01673"></a>01673     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l01674"></a>01674       <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var = <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i];
<a name="l01675"></a>01675       <span class="keywordflow">if</span> (var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>() == 1) {
<a name="l01676"></a>01676         num_always_true_vars++;
<a name="l01677"></a>01677       }
<a name="l01678"></a>01678       <span class="keywordflow">if</span> (var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>() == 1) {
<a name="l01679"></a>01679         possible_true++;
<a name="l01680"></a>01680       }
<a name="l01681"></a>01681     }
<a name="l01682"></a>01682     sum_var_-&gt;SetRange(num_always_true_vars, possible_true);
<a name="l01683"></a>01683     <span class="keyword">const</span> int64 var_min = sum_var_-&gt;Min();
<a name="l01684"></a>01684     <span class="keyword">const</span> int64 var_max = sum_var_-&gt;Max();
<a name="l01685"></a>01685     <span class="keywordflow">if</span> (num_always_true_vars == var_max &amp;&amp; possible_true &gt; var_max) {
<a name="l01686"></a>01686       PushAllUnboundToZero();
<a name="l01687"></a>01687     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (possible_true == var_min &amp;&amp; num_always_true_vars &lt; var_min) {
<a name="l01688"></a>01688       PushAllUnboundToOne();
<a name="l01689"></a>01689     } <span class="keywordflow">else</span> {
<a name="l01690"></a>01690       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;num_possible_true_vars_, possible_true);
<a name="l01691"></a>01691       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;num_always_true_vars_, num_always_true_vars);
<a name="l01692"></a>01692     }
<a name="l01693"></a>01693   }
<a name="l01694"></a>01694 
<a name="l01695"></a><a class="code" href="classoperations__research_1_1SumBooleanEqualToVar.html#bfcd301aea2d751d094f173c8e780eba">01695</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#9a7f82d276cfd1ecc35909a3e7f39957">UpdateVar</a>() {
<a name="l01696"></a>01696     <span class="keywordflow">if</span> (num_possible_true_vars_ == sum_var_-&gt;Min()) {
<a name="l01697"></a>01697       PushAllUnboundToOne();
<a name="l01698"></a>01698     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (num_always_true_vars_ == sum_var_-&gt;Max()) {
<a name="l01699"></a>01699       PushAllUnboundToZero();
<a name="l01700"></a>01700     }
<a name="l01701"></a>01701   }
<a name="l01702"></a>01702 
<a name="l01703"></a><a class="code" href="classoperations__research_1_1SumBooleanEqualToVar.html#1157de22d7853e704adc182a8514894d">01703</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#5f4d2a6277dd7c080b2bb06e0dbb2ed9">Update</a>(<span class="keywordtype">int</span> index) {
<a name="l01704"></a>01704     <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#0d26f15940d1ddf6a8094eb0218c2d79">inactive_</a>) {
<a name="l01705"></a>01705       DCHECK(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[index]-&gt;Bound());
<a name="l01706"></a>01706       <span class="keyword">const</span> int64 value = <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[index]-&gt;Min();  <span class="comment">// Faster than Value().</span>
<a name="l01707"></a>01707       <span class="keywordflow">if</span> (value == 0) {
<a name="l01708"></a>01708         <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#cf35e0062ce89a8fdf5c1762c5baebfe" title="All-in-one SaveAndAdd_value.">SaveAndAdd</a>(&amp;num_possible_true_vars_, -1);
<a name="l01709"></a>01709         <span class="keywordflow">if</span> (num_possible_true_vars_ == sum_var_-&gt;Min()) {
<a name="l01710"></a>01710           PushAllUnboundToOne();
<a name="l01711"></a>01711         }
<a name="l01712"></a>01712       } <span class="keywordflow">else</span> {
<a name="l01713"></a>01713         DCHECK_EQ(1, value);
<a name="l01714"></a>01714         <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#cf35e0062ce89a8fdf5c1762c5baebfe" title="All-in-one SaveAndAdd_value.">SaveAndAdd</a>(&amp;num_always_true_vars_, 1);
<a name="l01715"></a>01715         <span class="keywordflow">if</span> (num_always_true_vars_ == sum_var_-&gt;Max()) {
<a name="l01716"></a>01716           PushAllUnboundToZero();
<a name="l01717"></a>01717         }
<a name="l01718"></a>01718       }
<a name="l01719"></a>01719     }
<a name="l01720"></a>01720   }
<a name="l01721"></a>01721 
<a name="l01722"></a><a class="code" href="classoperations__research_1_1SumBooleanEqualToVar.html#cc47e37b0d7b97062f9b1d82f499c630">01722</a>   <span class="keywordtype">void</span> PushAllUnboundToZero() {
<a name="l01723"></a>01723     int64 counter = 0;
<a name="l01724"></a>01724     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#0d26f15940d1ddf6a8094eb0218c2d79">inactive_</a>, 1);
<a name="l01725"></a>01725     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l01726"></a>01726       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;Min() == 0) {
<a name="l01727"></a>01727         <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;SetValue(0);
<a name="l01728"></a>01728       } <span class="keywordflow">else</span> {
<a name="l01729"></a>01729         counter++;
<a name="l01730"></a>01730       }
<a name="l01731"></a>01731     }
<a name="l01732"></a>01732     <span class="keywordflow">if</span> (counter &lt; sum_var_-&gt;Min() || counter &gt; sum_var_-&gt;Max()) {
<a name="l01733"></a>01733       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l01734"></a>01734     }
<a name="l01735"></a>01735   }
<a name="l01736"></a>01736 
<a name="l01737"></a><a class="code" href="classoperations__research_1_1SumBooleanEqualToVar.html#9f3483a60e0232afb2e950d0211b918e">01737</a>   <span class="keywordtype">void</span> PushAllUnboundToOne() {
<a name="l01738"></a>01738     int64 counter = 0;
<a name="l01739"></a>01739     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#0d26f15940d1ddf6a8094eb0218c2d79">inactive_</a>, 1);
<a name="l01740"></a>01740     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l01741"></a>01741       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;Max() == 1) {
<a name="l01742"></a>01742         <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;SetValue(1);
<a name="l01743"></a>01743         counter++;
<a name="l01744"></a>01744       }
<a name="l01745"></a>01745     }
<a name="l01746"></a>01746     <span class="keywordflow">if</span> (counter &lt; sum_var_-&gt;Min() || counter &gt; sum_var_-&gt;Max()) {
<a name="l01747"></a>01747       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l01748"></a>01748     }
<a name="l01749"></a>01749   }
<a name="l01750"></a>01750 
<a name="l01751"></a><a class="code" href="classoperations__research_1_1SumBooleanEqualToVar.html#a3b6a68d2ee0b980f8e479fea6d49df3">01751</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#25b5196c8437a54e7c98f5e8b984dbe4" title="Constraint class.">DebugString</a>()<span class="keyword"> const </span>{
<a name="l01752"></a>01752     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#f62bb900da533cb32365f7f304193b58">DebugStringInternal</a>(<span class="stringliteral">"SumBooleanEqualToVar"</span>);
<a name="l01753"></a>01753   }
<a name="l01754"></a>01754 
<a name="l01755"></a>01755  <span class="keyword">private</span>:
<a name="l01756"></a><a class="code" href="classoperations__research_1_1SumBooleanEqualToVar.html#52458fe19543c09c88261b719966bec9">01756</a>   <span class="keywordtype">int</span> num_possible_true_vars_;
<a name="l01757"></a><a class="code" href="classoperations__research_1_1SumBooleanEqualToVar.html#8a4505fcaa5da9b4ecf6742d2f0a5f35">01757</a>   <span class="keywordtype">int</span> num_always_true_vars_;
<a name="l01758"></a><a class="code" href="classoperations__research_1_1SumBooleanEqualToVar.html#cf6bfba4f87873da53ea89d15eb2161b">01758</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> sum_var_;
<a name="l01759"></a>01759 };
<a name="l01760"></a>01760 
<a name="l01761"></a>01761 <span class="comment">// ---------- ScalProd ----------</span>
<a name="l01762"></a>01762 
<a name="l01763"></a>01763 <span class="comment">// ----- Boolean Scal Prod -----</span>
<a name="l01764"></a>01764 
<a name="l01765"></a>01765 <span class="keyword">namespace </span>{
<a name="l01766"></a><a class="code" href="structoperations__research_1_1anonymous__namespace_02expr__array_8cc_03_1_1Container.html">01766</a> <span class="keyword">struct </span><a class="code" href="structoperations__research_1_1anonymous__namespace_02expr__array_8cc_03_1_1Container.html">Container</a> {
<a name="l01767"></a><a class="code" href="structoperations__research_1_1anonymous__namespace_02expr__array_8cc_03_1_1Container.html#e30fb60d2e2e1f0dfcadae9268d72b4a">01767</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* var;
<a name="l01768"></a><a class="code" href="structoperations__research_1_1anonymous__namespace_02expr__array_8cc_03_1_1Container.html#bb98ef5b367393e0bf797434ba541f23">01768</a>   int64 coef;
<a name="l01769"></a><a class="code" href="structoperations__research_1_1anonymous__namespace_02expr__array_8cc_03_1_1Container.html#a2ea18129810bcfab34ed68cf8ae831a">01769</a>   <a class="code" href="structoperations__research_1_1anonymous__namespace_02expr__array_8cc_03_1_1Container.html">Container</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* v, int64 c) : var(v), coef(c) {}
<a name="l01770"></a><a class="code" href="structoperations__research_1_1anonymous__namespace_02expr__array_8cc_03_1_1Container.html#93e988e9372de25e2af9721c5309a849">01770</a>   <span class="keywordtype">bool</span> operator&lt;(<span class="keyword">const</span> <a class="code" href="structoperations__research_1_1anonymous__namespace_02expr__array_8cc_03_1_1Container.html">Container</a>&amp; c)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (coef &lt; c.<a class="code" href="structoperations__research_1_1anonymous__namespace_02expr__array_8cc_03_1_1Container.html#bb98ef5b367393e0bf797434ba541f23">coef</a>); }
<a name="l01771"></a>01771 };
<a name="l01772"></a>01772 
<a name="l01773"></a>01773 <span class="comment">// This method will sort both vars and coefficients in increasing</span>
<a name="l01774"></a>01774 <span class="comment">// coefficient order. Vars with null coefficients will be</span>
<a name="l01775"></a>01775 <span class="comment">// removed. Bound vars will be collected and the sum of the</span>
<a name="l01776"></a>01776 <span class="comment">// corresponding products (when the var is bound to 1) is returned by</span>
<a name="l01777"></a>01777 <span class="comment">// this method.</span>
<a name="l01778"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#830ac09abdc0d582c3950a33ec236e96">01778</a> int64 <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#830ac09abdc0d582c3950a33ec236e96" title="This method will sort both vars and coefficients in increasing coefficient order...">SortBothChangeConstant</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>** <span class="keyword">const</span> vars,
<a name="l01779"></a>01779                              int64* <span class="keyword">const</span> coefs,
<a name="l01780"></a>01780                              <span class="keywordtype">int</span>* <span class="keyword">const</span> size) {
<a name="l01781"></a>01781   CHECK_NOTNULL(vars);
<a name="l01782"></a>01782   CHECK_NOTNULL(coefs);
<a name="l01783"></a>01783   CHECK_NOTNULL(size);
<a name="l01784"></a>01784   int64 cst = 0;
<a name="l01785"></a>01785   vector&lt;Container&gt; to_sort;
<a name="l01786"></a>01786   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index = 0; index &lt; *size; ++index) {
<a name="l01787"></a>01787     <span class="keywordflow">if</span> (vars[index]-&gt;Bound()) {
<a name="l01788"></a>01788       cst += coefs[index] * vars[index]-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>();
<a name="l01789"></a>01789     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (coefs[index] != 0) {
<a name="l01790"></a>01790       to_sort.push_back(<a class="code" href="structoperations__research_1_1anonymous__namespace_02expr__array_8cc_03_1_1Container.html">Container</a>(vars[index], coefs[index]));
<a name="l01791"></a>01791     }
<a name="l01792"></a>01792   }
<a name="l01793"></a>01793   std::sort(to_sort.begin(), to_sort.end());
<a name="l01794"></a>01794   *size = to_sort.size();
<a name="l01795"></a>01795   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index = 0; index &lt; *size; ++index) {
<a name="l01796"></a>01796     vars[index] = to_sort[index].var;
<a name="l01797"></a>01797     coefs[index] = to_sort[index].coef;
<a name="l01798"></a>01798   }
<a name="l01799"></a>01799   <span class="keywordflow">return</span> cst;
<a name="l01800"></a>01800 }
<a name="l01801"></a>01801 }  <span class="comment">// namespace</span>
<a name="l01802"></a>01802 
<a name="l01803"></a>01803 <span class="comment">// This constraint implements sum(vars) == var.  It is delayed such</span>
<a name="l01804"></a>01804 <span class="comment">// that propagation only occurs when all variables have been touched.</span>
<a name="l01805"></a><a class="code" href="classoperations__research_1_1BooleanScalProdLessConstant.html">01805</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1BooleanScalProdLessConstant.html" title="namespace">BooleanScalProdLessConstant</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a> {
<a name="l01806"></a>01806  <span class="keyword">public</span>:
<a name="l01807"></a><a class="code" href="classoperations__research_1_1BooleanScalProdLessConstant.html#79028d86a4ce8857a0dc6ccae6a16273">01807</a>   <a class="code" href="classoperations__research_1_1BooleanScalProdLessConstant.html" title="namespace">BooleanScalProdLessConstant</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l01808"></a>01808                               <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l01809"></a>01809                               <span class="keywordtype">int</span> size,
<a name="l01810"></a>01810                               <span class="keyword">const</span> int64* <span class="keyword">const</span> coefs,
<a name="l01811"></a>01811                               int64 upper_bound)
<a name="l01812"></a>01812       : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s),
<a name="l01813"></a>01813         <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>(new <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>*[size]),
<a name="l01814"></a>01814         <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>(size),
<a name="l01815"></a>01815         coefs_(new int64[size]),
<a name="l01816"></a>01816         upper_bound_(upper_bound),
<a name="l01817"></a>01817         first_unbound_backward_(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a> - 1),
<a name="l01818"></a>01818         sum_of_bound_variables_(0LL),
<a name="l01819"></a>01819         max_coefficient_(0) {
<a name="l01820"></a>01820     CHECK_GT(size, 0);
<a name="l01821"></a>01821     CHECK(vars != NULL);
<a name="l01822"></a>01822     CHECK(coefs != NULL);
<a name="l01823"></a>01823     memcpy(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>.get(), vars, <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a> * <span class="keyword">sizeof</span>(*vars));
<a name="l01824"></a>01824     memcpy(coefs_.get(), coefs, <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a> * <span class="keyword">sizeof</span>(*coefs));
<a name="l01825"></a>01825     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l01826"></a>01826       DCHECK_GE(coefs_[i], 0);
<a name="l01827"></a>01827     }
<a name="l01828"></a>01828     upper_bound_ -= <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#830ac09abdc0d582c3950a33ec236e96" title="This method will sort both vars and coefficients in increasing coefficient order...">SortBothChangeConstant</a>(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>.get(), coefs_.get(), &amp;size_);
<a name="l01829"></a>01829     max_coefficient_.SetValue(s, coefs_[size_ - 1]);
<a name="l01830"></a>01830   }
<a name="l01831"></a>01831 
<a name="l01832"></a><a class="code" href="classoperations__research_1_1BooleanScalProdLessConstant.html#5c2130eb52f97d6e70df3d39e6eb60e1">01832</a>   <a class="code" href="classoperations__research_1_1BooleanScalProdLessConstant.html" title="namespace">BooleanScalProdLessConstant</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l01833"></a>01833                               <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l01834"></a>01834                               <span class="keywordtype">int</span> size,
<a name="l01835"></a>01835                               <span class="keyword">const</span> <span class="keywordtype">int</span>* <span class="keyword">const</span> coefs,
<a name="l01836"></a>01836                               int64 upper_bound)
<a name="l01837"></a>01837       : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s),
<a name="l01838"></a>01838         <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>(new <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>*[size]),
<a name="l01839"></a>01839         <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>(size),
<a name="l01840"></a>01840         coefs_(new int64[size]),
<a name="l01841"></a>01841         upper_bound_(upper_bound),
<a name="l01842"></a>01842         first_unbound_backward_(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a> - 1),
<a name="l01843"></a>01843         sum_of_bound_variables_(0LL),
<a name="l01844"></a>01844         max_coefficient_(0) {
<a name="l01845"></a>01845     CHECK_GT(size, 0);
<a name="l01846"></a>01846     CHECK(vars != NULL);
<a name="l01847"></a>01847     CHECK(coefs != NULL);
<a name="l01848"></a>01848     memcpy(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>.get(), vars, <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a> * <span class="keyword">sizeof</span>(*vars));
<a name="l01849"></a>01849     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l01850"></a>01850       DCHECK_GE(coefs[i], 0);
<a name="l01851"></a>01851       coefs_[i] = coefs[i];
<a name="l01852"></a>01852     }
<a name="l01853"></a>01853     upper_bound_ -= <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#830ac09abdc0d582c3950a33ec236e96" title="This method will sort both vars and coefficients in increasing coefficient order...">SortBothChangeConstant</a>(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>.get(), coefs_.get(), &amp;size_);
<a name="l01854"></a>01854     max_coefficient_.SetValue(s, coefs_[size_ - 1]);
<a name="l01855"></a>01855   }
<a name="l01856"></a>01856 
<a name="l01857"></a><a class="code" href="classoperations__research_1_1BooleanScalProdLessConstant.html#881e48263c664d51abeff9be7ffe2747">01857</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1BooleanScalProdLessConstant.html" title="namespace">BooleanScalProdLessConstant</a>() {}
<a name="l01858"></a>01858 
<a name="l01859"></a><a class="code" href="classoperations__research_1_1BooleanScalProdLessConstant.html#4aaee66579f2fab08e60a2fb0fa881f8">01859</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#bb4a07351536c2fe684cf993360a674e" title="This method is called when the constraint is processed by the solver.">Post</a>() {
<a name="l01860"></a>01860     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> var_index = 0; var_index &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++var_index) {
<a name="l01861"></a>01861       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[var_index]-&gt;Bound()) {
<a name="l01862"></a>01862         <span class="keywordflow">continue</span>;
<a name="l01863"></a>01863       }
<a name="l01864"></a>01864       <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d = <a class="code" href="namespaceoperations__research.html#bc7cb18be5d9d418d32782253cd4bf5a">MakeConstraintDemon1</a>(
<a name="l01865"></a>01865           <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l01866"></a>01866           <span class="keyword">this</span>,
<a name="l01867"></a>01867           &amp;<a class="code" href="classoperations__research_1_1BooleanScalProdLessConstant.html#c0f263a7758b4c548daa3e59f473b662">BooleanScalProdLessConstant::Update</a>,
<a name="l01868"></a>01868           <span class="stringliteral">"InitialPropagate"</span>,
<a name="l01869"></a>01869           var_index);
<a name="l01870"></a>01870       <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[var_index]-&gt;WhenRange(d);
<a name="l01871"></a>01871     }
<a name="l01872"></a>01872   }
<a name="l01873"></a>01873 
<a name="l01874"></a><a class="code" href="classoperations__research_1_1BooleanScalProdLessConstant.html#5765f18847b7cee5a72b1d1e86beafb2">01874</a>   <span class="keywordtype">void</span> PushFromTop() {
<a name="l01875"></a>01875     <span class="keyword">const</span> int64 slack = upper_bound_ - sum_of_bound_variables_.Value();
<a name="l01876"></a>01876     <span class="keywordflow">if</span> (slack &lt; 0) {
<a name="l01877"></a>01877       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l01878"></a>01878     }
<a name="l01879"></a>01879     <span class="keywordflow">if</span> (slack &lt; max_coefficient_.Value()) {
<a name="l01880"></a>01880       int64 last_unbound = first_unbound_backward_.Value();
<a name="l01881"></a>01881       <span class="keywordflow">for</span> (;last_unbound &gt;= 0; --last_unbound) {
<a name="l01882"></a>01882         <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[last_unbound]-&gt;Bound()) {
<a name="l01883"></a>01883           <span class="keywordflow">if</span> (coefs_[last_unbound] &lt;= slack) {
<a name="l01884"></a>01884             max_coefficient_.SetValue(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(), coefs_[last_unbound]);
<a name="l01885"></a>01885             <span class="keywordflow">break</span>;
<a name="l01886"></a>01886           } <span class="keywordflow">else</span> {
<a name="l01887"></a>01887             <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[last_unbound]-&gt;SetValue(0);
<a name="l01888"></a>01888           }
<a name="l01889"></a>01889         }
<a name="l01890"></a>01890       }
<a name="l01891"></a>01891       first_unbound_backward_.SetValue(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(), last_unbound);
<a name="l01892"></a>01892     }
<a name="l01893"></a>01893   }
<a name="l01894"></a>01894 
<a name="l01895"></a><a class="code" href="classoperations__research_1_1BooleanScalProdLessConstant.html#ada970535d7b6fe682cd9225402cb99c">01895</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#3ce94e9ceb79c31e30a36e72ca95a6da" title="This method performs the initial propagation of the constraint.">InitialPropagate</a>() {
<a name="l01896"></a>01896     <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>();
<a name="l01897"></a>01897     <span class="keywordtype">int</span> last_unbound = -1;
<a name="l01898"></a>01898     int64 sum = 0LL;
<a name="l01899"></a>01899     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index = 0; index &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++index) {
<a name="l01900"></a>01900       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[index]-&gt;Bound()) {
<a name="l01901"></a>01901         <span class="keyword">const</span> int64 value = <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[index]-&gt;Min();
<a name="l01902"></a>01902         sum += value * coefs_[index];
<a name="l01903"></a>01903       } <span class="keywordflow">else</span> {
<a name="l01904"></a>01904         last_unbound = index;
<a name="l01905"></a>01905       }
<a name="l01906"></a>01906     }
<a name="l01907"></a>01907     sum_of_bound_variables_.SetValue(s, sum);
<a name="l01908"></a>01908     first_unbound_backward_.SetValue(s, last_unbound);
<a name="l01909"></a>01909     PushFromTop();
<a name="l01910"></a>01910   }
<a name="l01911"></a>01911 
<a name="l01912"></a><a class="code" href="classoperations__research_1_1BooleanScalProdLessConstant.html#c0f263a7758b4c548daa3e59f473b662">01912</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#5f4d2a6277dd7c080b2bb06e0dbb2ed9">Update</a>(<span class="keywordtype">int</span> var_index) {
<a name="l01913"></a>01913     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[var_index]-&gt;Min() == 1) {
<a name="l01914"></a>01914       sum_of_bound_variables_.SetValue(
<a name="l01915"></a>01915           <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(), sum_of_bound_variables_.Value() + coefs_[var_index]);
<a name="l01916"></a>01916       PushFromTop();
<a name="l01917"></a>01917     }
<a name="l01918"></a>01918   }
<a name="l01919"></a>01919 
<a name="l01920"></a><a class="code" href="classoperations__research_1_1BooleanScalProdLessConstant.html#50d2cd4fb43f79664ae4db8973a4eec5">01920</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#25b5196c8437a54e7c98f5e8b984dbe4" title="Constraint class.">DebugString</a>()<span class="keyword"> const </span>{
<a name="l01921"></a>01921     <span class="keywordtype">string</span> out =  <span class="stringliteral">"BooleanScalProdLessConstant(["</span>;
<a name="l01922"></a>01922     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l01923"></a>01923       <span class="keywordflow">if</span> (i &gt; 0) {
<a name="l01924"></a>01924         StringAppendF(&amp;out, <span class="stringliteral">", "</span>);
<a name="l01925"></a>01925       }
<a name="l01926"></a>01926       StringAppendF(&amp;out, <span class="stringliteral">"%s"</span>, <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;<a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#25b5196c8437a54e7c98f5e8b984dbe4" title="Constraint class.">DebugString</a>().c_str());
<a name="l01927"></a>01927     }
<a name="l01928"></a>01928     StringAppendF(&amp;out, <span class="stringliteral">"], ["</span>);
<a name="l01929"></a>01929     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size_; ++i) {
<a name="l01930"></a>01930       <span class="keywordflow">if</span> (i &gt; 0) {
<a name="l01931"></a>01931         StringAppendF(&amp;out, <span class="stringliteral">", "</span>);
<a name="l01932"></a>01932       }
<a name="l01933"></a>01933       StringAppendF(&amp;out, <span class="stringliteral">"%"</span> GG_LL_FORMAT <span class="stringliteral">"d"</span>, coefs_[i]);
<a name="l01934"></a>01934     }
<a name="l01935"></a>01935     StringAppendF(&amp;out, <span class="stringliteral">"], %"</span> GG_LL_FORMAT <span class="stringliteral">"d)"</span>, upper_bound_);
<a name="l01936"></a>01936     <span class="keywordflow">return</span> out;
<a name="l01937"></a>01937   }
<a name="l01938"></a>01938  <span class="keyword">private</span>:
<a name="l01939"></a><a class="code" href="classoperations__research_1_1BooleanScalProdLessConstant.html#3188859d266fb5a64fe6976feec42624">01939</a>   scoped_array&lt;IntVar*&gt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>;
<a name="l01940"></a><a class="code" href="classoperations__research_1_1BooleanScalProdLessConstant.html#4525b74c321affba53f5cc6c4aec459d">01940</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>;
<a name="l01941"></a><a class="code" href="classoperations__research_1_1BooleanScalProdLessConstant.html#98bef5a528d5ee1df4c914e34b31fbc1">01941</a>   scoped_array&lt;int64&gt; coefs_;
<a name="l01942"></a><a class="code" href="classoperations__research_1_1BooleanScalProdLessConstant.html#da646e0b12031e31e11d34de29656e53">01942</a>   int64 upper_bound_;
<a name="l01943"></a><a class="code" href="classoperations__research_1_1BooleanScalProdLessConstant.html#2bb0374ad67940e4d4dc7cc731bb6e7f">01943</a>   <a class="code" href="classoperations__research_1_1Rev.html" title="These class represent reversible POD types.">Rev&lt;int&gt;</a> first_unbound_backward_;
<a name="l01944"></a><a class="code" href="classoperations__research_1_1BooleanScalProdLessConstant.html#6068f9b0e09dd68e6eb192ce3cdb5184">01944</a>   <a class="code" href="classoperations__research_1_1Rev.html" title="These class represent reversible POD types.">Rev&lt;int64&gt;</a> sum_of_bound_variables_;
<a name="l01945"></a><a class="code" href="classoperations__research_1_1BooleanScalProdLessConstant.html#b4dea8761a6a13fcfc9930411fdccdbb">01945</a>   <a class="code" href="classoperations__research_1_1Rev.html" title="These class represent reversible POD types.">Rev&lt;int64&gt;</a> max_coefficient_;
<a name="l01946"></a>01946 };
<a name="l01947"></a>01947 
<a name="l01948"></a>01948 <span class="comment">// ----- PositiveBooleanScalProdEqVar -----</span>
<a name="l01949"></a>01949 
<a name="l01950"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqVar.html">01950</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqVar.html" title="PositiveBooleanScalProdEqVar.">PositiveBooleanScalProdEqVar</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a> {
<a name="l01951"></a>01951  <span class="keyword">public</span>:
<a name="l01952"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqVar.html#0dfb620760023b32cf0ff44d24986a7b">01952</a>   <a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqVar.html" title="PositiveBooleanScalProdEqVar.">PositiveBooleanScalProdEqVar</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l01953"></a>01953                                <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l01954"></a>01954                                <span class="keywordtype">int</span> size,
<a name="l01955"></a>01955                                <span class="keyword">const</span> int64* <span class="keyword">const</span> coefs,
<a name="l01956"></a>01956                                <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var,
<a name="l01957"></a>01957                                int64 constant)
<a name="l01958"></a>01958       : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s),
<a name="l01959"></a>01959         <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>(size),
<a name="l01960"></a>01960         <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>(new <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>*[<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>]),
<a name="l01961"></a>01961         coefs_(new int64[<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>]),
<a name="l01962"></a>01962         var_(var),
<a name="l01963"></a>01963         first_unbound_backward_(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a> - 1),
<a name="l01964"></a>01964         sum_of_bound_variables_(0LL),
<a name="l01965"></a>01965         sum_of_all_variables_(0LL),
<a name="l01966"></a>01966         constant_(constant),
<a name="l01967"></a>01967         max_coefficient_(0) {
<a name="l01968"></a>01968     CHECK_GT(size, 0);
<a name="l01969"></a>01969     CHECK(vars != NULL);
<a name="l01970"></a>01970     CHECK(coefs != NULL);
<a name="l01971"></a>01971     memcpy(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>.get(), vars, <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a> * <span class="keyword">sizeof</span>(*vars));
<a name="l01972"></a>01972     memcpy(coefs_.get(), coefs, <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a> * <span class="keyword">sizeof</span>(*coefs));
<a name="l01973"></a>01973     constant_ += <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#830ac09abdc0d582c3950a33ec236e96" title="This method will sort both vars and coefficients in increasing coefficient order...">SortBothChangeConstant</a>(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>.get(), coefs_.get(), &amp;<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>);
<a name="l01974"></a>01974     max_coefficient_.SetValue(s, coefs_[<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a> - 1]);
<a name="l01975"></a>01975   }
<a name="l01976"></a>01976 
<a name="l01977"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqVar.html#0719178caff26e97c916e28f7026d08f">01977</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqVar.html" title="PositiveBooleanScalProdEqVar.">PositiveBooleanScalProdEqVar</a>() {}
<a name="l01978"></a>01978 
<a name="l01979"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqVar.html#fba938e3b4ca035f7c4178dbdf13cd75">01979</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#bb4a07351536c2fe684cf993360a674e" title="This method is called when the constraint is processed by the solver.">Post</a>() {
<a name="l01980"></a>01980     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> var_index = 0; var_index &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++var_index) {
<a name="l01981"></a>01981       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[var_index]-&gt;Bound()) {
<a name="l01982"></a>01982         <span class="keywordflow">continue</span>;
<a name="l01983"></a>01983       }
<a name="l01984"></a>01984       <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* <span class="keyword">const</span> d =
<a name="l01985"></a>01985           <a class="code" href="namespaceoperations__research.html#bc7cb18be5d9d418d32782253cd4bf5a">MakeConstraintDemon1</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l01986"></a>01986                                <span class="keyword">this</span>,
<a name="l01987"></a>01987                                &amp;<a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqVar.html#396d0e00b66967468fe998d67d4b53a6">PositiveBooleanScalProdEqVar::Update</a>,
<a name="l01988"></a>01988                                <span class="stringliteral">"Update"</span>,
<a name="l01989"></a>01989                                var_index);
<a name="l01990"></a>01990       <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[var_index]-&gt;WhenRange(d);
<a name="l01991"></a>01991     }
<a name="l01992"></a>01992     <span class="keywordflow">if</span> (!var_-&gt;Bound()) {
<a name="l01993"></a>01993       <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* <span class="keyword">const</span> uv =
<a name="l01994"></a>01994           <a class="code" href="namespaceoperations__research.html#50b3d41d8dbf72bb2ad22235a9e1f53e">MakeConstraintDemon0</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l01995"></a>01995                                <span class="keyword">this</span>,
<a name="l01996"></a>01996                                &amp;<a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqVar.html#c6dd09c1dadc5c8708fca3419ca81180">PositiveBooleanScalProdEqVar::Propagate</a>,
<a name="l01997"></a>01997                                <span class="stringliteral">"Propagate"</span>);
<a name="l01998"></a>01998       var_-&gt;WhenRange(uv);
<a name="l01999"></a>01999     }
<a name="l02000"></a>02000   }
<a name="l02001"></a>02001 
<a name="l02002"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqVar.html#c6dd09c1dadc5c8708fca3419ca81180">02002</a>   <span class="keywordtype">void</span> Propagate() {
<a name="l02003"></a>02003     var_-&gt;SetRange(sum_of_bound_variables_.Value(),
<a name="l02004"></a>02004                    sum_of_all_variables_.Value());
<a name="l02005"></a>02005     <span class="keyword">const</span> int64 slack_up = var_-&gt;Max() - sum_of_bound_variables_.Value();
<a name="l02006"></a>02006     <span class="keyword">const</span> int64 slack_down = sum_of_all_variables_.Value() - var_-&gt;Min();
<a name="l02007"></a>02007     <span class="keyword">const</span> int64 max_coeff = max_coefficient_.Value();
<a name="l02008"></a>02008     <span class="keywordflow">if</span> (slack_down &lt; max_coeff || slack_up &lt; max_coeff) {
<a name="l02009"></a>02009       int64 last_unbound = first_unbound_backward_.Value();
<a name="l02010"></a>02010       <span class="keywordflow">for</span> (; last_unbound &gt;= 0; --last_unbound) {
<a name="l02011"></a>02011         <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[last_unbound]-&gt;Bound()) {
<a name="l02012"></a>02012           <span class="keywordflow">if</span> (coefs_[last_unbound] &gt; slack_up) {
<a name="l02013"></a>02013             <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[last_unbound]-&gt;SetValue(0);
<a name="l02014"></a>02014           } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (coefs_[last_unbound] &gt; slack_down) {
<a name="l02015"></a>02015             <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[last_unbound]-&gt;SetValue(1);
<a name="l02016"></a>02016           } <span class="keywordflow">else</span> {
<a name="l02017"></a>02017             max_coefficient_.SetValue(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(), coefs_[last_unbound]);
<a name="l02018"></a>02018             <span class="keywordflow">break</span>;
<a name="l02019"></a>02019           }
<a name="l02020"></a>02020         }
<a name="l02021"></a>02021       }
<a name="l02022"></a>02022       first_unbound_backward_.SetValue(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(), last_unbound);
<a name="l02023"></a>02023     }
<a name="l02024"></a>02024   }
<a name="l02025"></a>02025 
<a name="l02026"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqVar.html#2fc3ea490c574d2b7f95ea45adbefd67">02026</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#3ce94e9ceb79c31e30a36e72ca95a6da" title="This method performs the initial propagation of the constraint.">InitialPropagate</a>() {
<a name="l02027"></a>02027     <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>();
<a name="l02028"></a>02028     <span class="keywordtype">int</span> last_unbound = -1;
<a name="l02029"></a>02029     int64 sum_bound = constant_;
<a name="l02030"></a>02030     int64 sum_all = constant_;
<a name="l02031"></a>02031     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index = 0; index &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++index) {
<a name="l02032"></a>02032       <span class="keyword">const</span> int64 value = <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[index]-&gt;Max() * coefs_[index];
<a name="l02033"></a>02033       sum_all += value;
<a name="l02034"></a>02034       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[index]-&gt;Bound()) {
<a name="l02035"></a>02035         sum_bound += value;
<a name="l02036"></a>02036       } <span class="keywordflow">else</span> {
<a name="l02037"></a>02037         last_unbound = index;
<a name="l02038"></a>02038       }
<a name="l02039"></a>02039     }
<a name="l02040"></a>02040     sum_of_bound_variables_.SetValue(s, sum_bound);
<a name="l02041"></a>02041     sum_of_all_variables_.SetValue(s, sum_all);
<a name="l02042"></a>02042     first_unbound_backward_.SetValue(s, last_unbound);
<a name="l02043"></a>02043     Propagate();
<a name="l02044"></a>02044   }
<a name="l02045"></a>02045 
<a name="l02046"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqVar.html#396d0e00b66967468fe998d67d4b53a6">02046</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#5f4d2a6277dd7c080b2bb06e0dbb2ed9">Update</a>(<span class="keywordtype">int</span> var_index) {
<a name="l02047"></a>02047     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[var_index]-&gt;Min() == 1) {
<a name="l02048"></a>02048       sum_of_bound_variables_.SetValue(
<a name="l02049"></a>02049           <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(), sum_of_bound_variables_.Value() + coefs_[var_index]);
<a name="l02050"></a>02050     } <span class="keywordflow">else</span> {
<a name="l02051"></a>02051       sum_of_all_variables_.SetValue(
<a name="l02052"></a>02052           <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(), sum_of_all_variables_.Value() - coefs_[var_index]);
<a name="l02053"></a>02053     }
<a name="l02054"></a>02054     Propagate();
<a name="l02055"></a>02055   }
<a name="l02056"></a>02056 
<a name="l02057"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqVar.html#d6950393383b54f854439e847c2e5659">02057</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#25b5196c8437a54e7c98f5e8b984dbe4" title="Constraint class.">DebugString</a>()<span class="keyword"> const </span>{
<a name="l02058"></a>02058     <span class="keywordtype">string</span> out =  <span class="stringliteral">"PositiveBooleanScalProdEqVar(["</span>;
<a name="l02059"></a>02059     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l02060"></a>02060       <span class="keywordflow">if</span> (i &gt; 0) {
<a name="l02061"></a>02061         StringAppendF(&amp;out, <span class="stringliteral">", "</span>);
<a name="l02062"></a>02062       }
<a name="l02063"></a>02063       StringAppendF(&amp;out, <span class="stringliteral">"%s"</span>, <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;<a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#25b5196c8437a54e7c98f5e8b984dbe4" title="Constraint class.">DebugString</a>().c_str());
<a name="l02064"></a>02064     }
<a name="l02065"></a>02065     StringAppendF(&amp;out, <span class="stringliteral">"], ["</span>);
<a name="l02066"></a>02066     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size_; ++i) {
<a name="l02067"></a>02067       <span class="keywordflow">if</span> (i &gt; 0) {
<a name="l02068"></a>02068         StringAppendF(&amp;out, <span class="stringliteral">", "</span>);
<a name="l02069"></a>02069       }
<a name="l02070"></a>02070       StringAppendF(&amp;out, <span class="stringliteral">"%"</span> GG_LL_FORMAT <span class="stringliteral">"d"</span>, coefs_[i]);
<a name="l02071"></a>02071     }
<a name="l02072"></a>02072     StringAppendF(&amp;out, <span class="stringliteral">"], constant = %"</span> GG_LL_FORMAT <span class="stringliteral">"d, %s)"</span>,
<a name="l02073"></a>02073                   constant_, var_-&gt;DebugString().c_str());
<a name="l02074"></a>02074     <span class="keywordflow">return</span> out;
<a name="l02075"></a>02075   }
<a name="l02076"></a>02076  <span class="keyword">private</span>:
<a name="l02077"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqVar.html#b2032fa5a662d54e98ee64db55b5a69f">02077</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>;
<a name="l02078"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqVar.html#3c44c6d2f6838be65f82c601d69b2377">02078</a>   scoped_array&lt;IntVar*&gt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>;
<a name="l02079"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqVar.html#f312261dd05c7effaed01aa097557d2c">02079</a>   scoped_array&lt;int64&gt; coefs_;
<a name="l02080"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqVar.html#df9ef9bf39a848d5438c063d6d496d6a">02080</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var_;
<a name="l02081"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqVar.html#577b000bd3b1d7e0ea6d119c8954e01d">02081</a>   <a class="code" href="classoperations__research_1_1Rev.html" title="These class represent reversible POD types.">Rev&lt;int&gt;</a> first_unbound_backward_;
<a name="l02082"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqVar.html#8a60c3dc4454a7cc26bcb278c93a3ff4">02082</a>   <a class="code" href="classoperations__research_1_1Rev.html" title="These class represent reversible POD types.">Rev&lt;int64&gt;</a> sum_of_bound_variables_;
<a name="l02083"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqVar.html#628d15ce1ecacb4dc4d246672843bd87">02083</a>   <a class="code" href="classoperations__research_1_1Rev.html" title="These class represent reversible POD types.">Rev&lt;int64&gt;</a> sum_of_all_variables_;
<a name="l02084"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqVar.html#1782685f648c481605a784f33862ccf1">02084</a>   int64 constant_;
<a name="l02085"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqVar.html#959704e73e57228dd9fff6dcdcd14b52">02085</a>   <a class="code" href="classoperations__research_1_1Rev.html" title="These class represent reversible POD types.">Rev&lt;int64&gt;</a> max_coefficient_;
<a name="l02086"></a>02086 };
<a name="l02087"></a>02087 
<a name="l02088"></a>02088 <span class="comment">// ----- PositiveBooleanScalProd -----</span>
<a name="l02089"></a>02089 
<a name="l02090"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProd.html">02090</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1PositiveBooleanScalProd.html" title="PositiveBooleanScalProd.">PositiveBooleanScalProd</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1BaseIntExpr.html" title="This is the base class for all non-variable expressions.">BaseIntExpr</a> {
<a name="l02091"></a>02091  <span class="keyword">public</span>:
<a name="l02092"></a>02092   <span class="comment">// this constructor will copy the array. The caller can safely delete the</span>
<a name="l02093"></a>02093   <span class="comment">// exprs array himself</span>
<a name="l02094"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProd.html#4731cec25739dca417248180096c9af1">02094</a>   <a class="code" href="classoperations__research_1_1PositiveBooleanScalProd.html" title="PositiveBooleanScalProd.">PositiveBooleanScalProd</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l02095"></a>02095                           <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars,
<a name="l02096"></a>02096                           <span class="keywordtype">int</span> size,
<a name="l02097"></a>02097                           <span class="keyword">const</span> int64* <span class="keyword">const</span> coefs)
<a name="l02098"></a>02098       : <a class="code" href="classoperations__research_1_1BaseIntExpr.html" title="This is the base class for all non-variable expressions.">BaseIntExpr</a>(s),
<a name="l02099"></a>02099         <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>(size),
<a name="l02100"></a>02100         <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>(new <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>*[<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>]),
<a name="l02101"></a>02101         coefs_(new int64[<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>]),
<a name="l02102"></a>02102         constant_(0LL) {
<a name="l02103"></a>02103     CHECK_GT(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>, 0);
<a name="l02104"></a>02104     CHECK(vars != NULL);
<a name="l02105"></a>02105     CHECK(coefs != NULL);
<a name="l02106"></a>02106     memcpy(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>.get(), vars, <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a> * <span class="keyword">sizeof</span>(*vars));
<a name="l02107"></a>02107     memcpy(coefs_.get(), coefs, <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a> * <span class="keyword">sizeof</span>(*coefs));
<a name="l02108"></a>02108     constant_ += <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#830ac09abdc0d582c3950a33ec236e96" title="This method will sort both vars and coefficients in increasing coefficient order...">SortBothChangeConstant</a>(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>.get(), coefs_.get(), &amp;<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>);
<a name="l02109"></a>02109     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l02110"></a>02110       DCHECK_GE(coefs_[i], 0);
<a name="l02111"></a>02111     }
<a name="l02112"></a>02112   }
<a name="l02113"></a>02113 
<a name="l02114"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProd.html#106a3ece3207c856dde1576454448a27">02114</a>   <a class="code" href="classoperations__research_1_1PositiveBooleanScalProd.html" title="PositiveBooleanScalProd.">PositiveBooleanScalProd</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l02115"></a>02115                           <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars,
<a name="l02116"></a>02116                           <span class="keywordtype">int</span> size,
<a name="l02117"></a>02117                           <span class="keyword">const</span> <span class="keywordtype">int</span>* <span class="keyword">const</span> coefs)
<a name="l02118"></a>02118       : <a class="code" href="classoperations__research_1_1BaseIntExpr.html" title="This is the base class for all non-variable expressions.">BaseIntExpr</a>(s),
<a name="l02119"></a>02119         <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>(size),
<a name="l02120"></a>02120         <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>(new <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>*[<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>]),
<a name="l02121"></a>02121         coefs_(new int64[<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>]),
<a name="l02122"></a>02122         constant_(0LL) {
<a name="l02123"></a>02123     CHECK_GT(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>, 0);
<a name="l02124"></a>02124     CHECK(vars != NULL);
<a name="l02125"></a>02125     CHECK(coefs != NULL);
<a name="l02126"></a>02126     memcpy(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>.get(), vars, <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a> * <span class="keyword">sizeof</span>(*vars));
<a name="l02127"></a>02127     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l02128"></a>02128       coefs_[i] = coefs[i];
<a name="l02129"></a>02129       DCHECK_GE(coefs_[i], 0);
<a name="l02130"></a>02130     }
<a name="l02131"></a>02131     constant_ += <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#830ac09abdc0d582c3950a33ec236e96" title="This method will sort both vars and coefficients in increasing coefficient order...">SortBothChangeConstant</a>(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>.get(), coefs_.get(), &amp;size_);
<a name="l02132"></a>02132   }
<a name="l02133"></a>02133 
<a name="l02134"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProd.html#905b7bdf9cbd452e3065ea6bcbe67f8c">02134</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1PositiveBooleanScalProd.html" title="PositiveBooleanScalProd.">PositiveBooleanScalProd</a>() {}
<a name="l02135"></a>02135 
<a name="l02136"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProd.html#fbce1f6fcfaa06b20dffea3cca73b7fb">02136</a>   <span class="keyword">virtual</span> int64 Min()<span class="keyword"> const </span>{
<a name="l02137"></a>02137     int64 min = 0;
<a name="l02138"></a>02138     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l02139"></a>02139       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;Min()) {
<a name="l02140"></a>02140         min += coefs_[i];
<a name="l02141"></a>02141       }
<a name="l02142"></a>02142     }
<a name="l02143"></a>02143     <span class="keywordflow">return</span> min + constant_;
<a name="l02144"></a>02144   }
<a name="l02145"></a>02145 
<a name="l02146"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProd.html#4e53a74fa8b649dd8adf4b75976b7962">02146</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetMin(int64 m) {
<a name="l02147"></a>02147     SetRange(m, kint64max);
<a name="l02148"></a>02148   }
<a name="l02149"></a>02149 
<a name="l02150"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProd.html#ca3b736bba996a3c284ac7c4f23bb0fc">02150</a>   <span class="keyword">virtual</span> int64 Max()<span class="keyword"> const </span>{
<a name="l02151"></a>02151     int64 max = 0;
<a name="l02152"></a>02152     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l02153"></a>02153       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;Max()) {
<a name="l02154"></a>02154         max += coefs_[i];
<a name="l02155"></a>02155       }
<a name="l02156"></a>02156     }
<a name="l02157"></a>02157     <span class="keywordflow">return</span> max + constant_;
<a name="l02158"></a>02158   }
<a name="l02159"></a>02159 
<a name="l02160"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProd.html#94ce730c49873abd65dc0cf093a23614">02160</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetMax(int64 m) {
<a name="l02161"></a>02161     SetRange(kint64min, m);
<a name="l02162"></a>02162   }
<a name="l02163"></a>02163 
<a name="l02164"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProd.html#688f96415b2017978ecf580f7614b145">02164</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetRange(int64 l, int64 u) {
<a name="l02165"></a>02165     int64 current_min = constant_;
<a name="l02166"></a>02166     int64 current_max = constant_;
<a name="l02167"></a>02167     int64 diameter = -1;
<a name="l02168"></a>02168     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l02169"></a>02169       <span class="keyword">const</span> int64 coefficient = coefs_[i];
<a name="l02170"></a>02170       <span class="keyword">const</span> int64 var_min = <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;Min() * coefficient;
<a name="l02171"></a>02171       <span class="keyword">const</span> int64 var_max = <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;Max() * coefficient;
<a name="l02172"></a>02172       current_min += var_min;
<a name="l02173"></a>02173       current_max += var_max;
<a name="l02174"></a>02174       <span class="keywordflow">if</span> (var_min != var_max) {  <span class="comment">// Coefficients are increasing.</span>
<a name="l02175"></a>02175         diameter = var_max - var_min;
<a name="l02176"></a>02176       }
<a name="l02177"></a>02177     }
<a name="l02178"></a>02178     <span class="keywordflow">if</span> (u &gt;= current_max &amp;&amp; l &lt;= current_min) {
<a name="l02179"></a>02179       <span class="keywordflow">return</span>;
<a name="l02180"></a>02180     }
<a name="l02181"></a>02181     <span class="keywordflow">if</span> (u &lt; current_min || l &gt; current_max) {
<a name="l02182"></a>02182       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l02183"></a>02183     }
<a name="l02184"></a>02184 
<a name="l02185"></a>02185     u = std::min(current_max, u);
<a name="l02186"></a>02186     l = std::max(l, current_min);
<a name="l02187"></a>02187 
<a name="l02188"></a>02188     <span class="keywordflow">if</span> (u - l &gt; diameter) {
<a name="l02189"></a>02189       <span class="keywordflow">return</span>;
<a name="l02190"></a>02190     }
<a name="l02191"></a>02191 
<a name="l02192"></a>02192     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size_; ++i) {
<a name="l02193"></a>02193       <span class="keyword">const</span> int64 coefficient = coefs_[i];
<a name="l02194"></a>02194       <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var = <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i];
<a name="l02195"></a>02195       <span class="keyword">const</span> int64 new_min = l - current_max + var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>() * coefficient;
<a name="l02196"></a>02196       <span class="keyword">const</span> int64 new_max = u - current_min + var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>() * coefficient;
<a name="l02197"></a>02197       <span class="keywordflow">if</span> (new_max &lt; 0 || new_min &gt; coefficient || new_min &gt; new_max) {
<a name="l02198"></a>02198         <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l02199"></a>02199       }
<a name="l02200"></a>02200       <span class="keywordflow">if</span> (new_min &gt; 0LL) {
<a name="l02201"></a>02201         var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#fec5a6eea8ee64fbc7fa34d7d28f8d8f">SetMin</a>(1LL);
<a name="l02202"></a>02202       } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (new_max &lt; coefficient) {
<a name="l02203"></a>02203         var-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#dee9a082160df545671781df47f2b985">SetMax</a>(0LL);
<a name="l02204"></a>02204       }
<a name="l02205"></a>02205     }
<a name="l02206"></a>02206   }
<a name="l02207"></a>02207 
<a name="l02208"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProd.html#4a410f35490977c1213cdaaddbf9d157">02208</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#25b5196c8437a54e7c98f5e8b984dbe4" title="Constraint class.">DebugString</a>()<span class="keyword"> const </span>{
<a name="l02209"></a>02209     <span class="keywordtype">string</span> out =  <span class="stringliteral">"PositiveBooleanScalProd(["</span>;
<a name="l02210"></a>02210     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l02211"></a>02211       <span class="keywordflow">if</span> (i &gt; 0) {
<a name="l02212"></a>02212         StringAppendF(&amp;out, <span class="stringliteral">", "</span>);
<a name="l02213"></a>02213       }
<a name="l02214"></a>02214       StringAppendF(&amp;out, <span class="stringliteral">"%s"</span>, <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;<a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#25b5196c8437a54e7c98f5e8b984dbe4" title="Constraint class.">DebugString</a>().c_str());
<a name="l02215"></a>02215     }
<a name="l02216"></a>02216     StringAppendF(&amp;out, <span class="stringliteral">"], ["</span>);
<a name="l02217"></a>02217     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size_; ++i) {
<a name="l02218"></a>02218       <span class="keywordflow">if</span> (i &gt; 0) {
<a name="l02219"></a>02219         StringAppendF(&amp;out, <span class="stringliteral">", "</span>);
<a name="l02220"></a>02220       }
<a name="l02221"></a>02221       StringAppendF(&amp;out, <span class="stringliteral">"%"</span> GG_LL_FORMAT <span class="stringliteral">"d"</span>, coefs_[i]);
<a name="l02222"></a>02222     }
<a name="l02223"></a>02223     <span class="keywordflow">if</span> (constant_) {
<a name="l02224"></a>02224       StringAppendF(&amp;out, <span class="stringliteral">"], constant = %"</span> GG_LL_FORMAT <span class="stringliteral">"d)"</span>, constant_);
<a name="l02225"></a>02225     } <span class="keywordflow">else</span> {
<a name="l02226"></a>02226       StringAppendF(&amp;out, <span class="stringliteral">"])"</span>);
<a name="l02227"></a>02227     }
<a name="l02228"></a>02228     <span class="keywordflow">return</span> out;
<a name="l02229"></a>02229   }
<a name="l02230"></a>02230 
<a name="l02231"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProd.html#33c028b36dd76220eccf1e0675d9adcf">02231</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> WhenRange(<a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d) {
<a name="l02232"></a>02232     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l02233"></a>02233       <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;WhenRange(d);
<a name="l02234"></a>02234     }
<a name="l02235"></a>02235   }
<a name="l02236"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProd.html#ad0c872be5eb5b29579070737e8e22bb">02236</a>   <span class="keyword">virtual</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* CastToVar() {
<a name="l02237"></a>02237     <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>();
<a name="l02238"></a>02238     int64 vmin = 0LL;
<a name="l02239"></a>02239     int64 vmax = 0LL;
<a name="l02240"></a>02240     Range(&amp;vmin, &amp;vmax);
<a name="l02241"></a>02241     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#c313eaefa5980567fbf2b12608f8e854" title="Make Factory.">MakeIntVar</a>(vmin, vmax);
<a name="l02242"></a>02242     AddDelegateName(<span class="stringliteral">"Var"</span>, var);
<a name="l02243"></a>02243     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a> &gt; 0) {
<a name="l02244"></a>02244       <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <span class="keyword">const</span> ct = s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(
<a name="l02245"></a>02245           <span class="keyword">new</span> <a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqVar.html" title="PositiveBooleanScalProdEqVar.">PositiveBooleanScalProdEqVar</a>(s,
<a name="l02246"></a>02246                                            <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>.get(),
<a name="l02247"></a>02247                                            <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>,
<a name="l02248"></a>02248                                            coefs_.get(),
<a name="l02249"></a>02249                                            var,
<a name="l02250"></a>02250                                            constant_));
<a name="l02251"></a>02251       s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#9c522a6cff91adae19af5cce7d8e411f" title="propagation">AddConstraint</a>(ct);
<a name="l02252"></a>02252     }
<a name="l02253"></a>02253     <span class="keywordflow">return</span> var;
<a name="l02254"></a>02254   }
<a name="l02255"></a>02255  <span class="keyword">private</span>:
<a name="l02256"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProd.html#fafa355bc6ec2e8cc840d30edbf6e44e">02256</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>;
<a name="l02257"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProd.html#0c6f6e5432cacff444457e2268bdbac9">02257</a>   scoped_array&lt;IntVar*&gt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>;
<a name="l02258"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProd.html#95b32b8653333199b4c2375d57c5f518">02258</a>   scoped_array&lt;int64&gt; coefs_;
<a name="l02259"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProd.html#696970fbafbe8147ae7dc705c9b84e56">02259</a>   int64 constant_;
<a name="l02260"></a>02260 };
<a name="l02261"></a>02261 
<a name="l02262"></a>02262 <span class="comment">// ----- PositiveBooleanScalProdEqCst ----- (all constants &gt;= 0)</span>
<a name="l02263"></a>02263 
<a name="l02264"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqCst.html">02264</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqCst.html" title="PositiveBooleanScalProdEqCst (all constants &amp;gt;= 0).">PositiveBooleanScalProdEqCst</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a> {
<a name="l02265"></a>02265  <span class="keyword">public</span>:
<a name="l02266"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqCst.html#2eb2ee8e9ea6eafb8da566d47e6049c2">02266</a>   <a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqCst.html" title="PositiveBooleanScalProdEqCst (all constants &amp;gt;= 0).">PositiveBooleanScalProdEqCst</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l02267"></a>02267                                <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l02268"></a>02268                                <span class="keywordtype">int</span> size,
<a name="l02269"></a>02269                                <span class="keyword">const</span> int64* <span class="keyword">const</span> coefs,
<a name="l02270"></a>02270                                int64 constant)
<a name="l02271"></a>02271       : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s),
<a name="l02272"></a>02272         <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>(size),
<a name="l02273"></a>02273         <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>(new <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>*[<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>]),
<a name="l02274"></a>02274         coefs_(new int64[<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>]),
<a name="l02275"></a>02275         first_unbound_backward_(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a> - 1),
<a name="l02276"></a>02276         sum_of_bound_variables_(0LL),
<a name="l02277"></a>02277         sum_of_all_variables_(0LL),
<a name="l02278"></a>02278         constant_(constant),
<a name="l02279"></a>02279         max_coefficient_(0) {
<a name="l02280"></a>02280     CHECK_GT(size, 0);
<a name="l02281"></a>02281     CHECK(vars != NULL);
<a name="l02282"></a>02282     CHECK(coefs != NULL);
<a name="l02283"></a>02283     memcpy(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>.get(), vars, <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a> * <span class="keyword">sizeof</span>(*vars));
<a name="l02284"></a>02284     memcpy(coefs_.get(), coefs, <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a> * <span class="keyword">sizeof</span>(*coefs));
<a name="l02285"></a>02285     constant_ -= <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#830ac09abdc0d582c3950a33ec236e96" title="This method will sort both vars and coefficients in increasing coefficient order...">SortBothChangeConstant</a>(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>.get(), coefs_.get(), &amp;<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>);
<a name="l02286"></a>02286     max_coefficient_.SetValue(s, coefs_[<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a> - 1]);
<a name="l02287"></a>02287   }
<a name="l02288"></a>02288 
<a name="l02289"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqCst.html#7717a9ac41dd293d87b5a4d969eb19f1">02289</a>   <a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqCst.html" title="PositiveBooleanScalProdEqCst (all constants &amp;gt;= 0).">PositiveBooleanScalProdEqCst</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l02290"></a>02290                                <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l02291"></a>02291                                <span class="keywordtype">int</span> size,
<a name="l02292"></a>02292                                <span class="keyword">const</span> <span class="keywordtype">int</span>* <span class="keyword">const</span> coefs,
<a name="l02293"></a>02293                                int64 constant)
<a name="l02294"></a>02294       : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s),
<a name="l02295"></a>02295         <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>(size),
<a name="l02296"></a>02296         <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>(new <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>*[<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>]),
<a name="l02297"></a>02297         coefs_(new int64[<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>]),
<a name="l02298"></a>02298         first_unbound_backward_(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a> - 1),
<a name="l02299"></a>02299         sum_of_bound_variables_(0LL),
<a name="l02300"></a>02300         sum_of_all_variables_(0LL),
<a name="l02301"></a>02301         constant_(constant),
<a name="l02302"></a>02302         max_coefficient_(0) {
<a name="l02303"></a>02303     CHECK_GT(size, 0);
<a name="l02304"></a>02304     CHECK(vars != NULL);
<a name="l02305"></a>02305     CHECK(coefs != NULL);
<a name="l02306"></a>02306     memcpy(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>.get(), vars, <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a> * <span class="keyword">sizeof</span>(*vars));
<a name="l02307"></a>02307     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {
<a name="l02308"></a>02308       coefs_[i] = coefs[i];
<a name="l02309"></a>02309     }
<a name="l02310"></a>02310     constant_ -= <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#830ac09abdc0d582c3950a33ec236e96" title="This method will sort both vars and coefficients in increasing coefficient order...">SortBothChangeConstant</a>(<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>.get(), coefs_.get(), &amp;<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>);
<a name="l02311"></a>02311     max_coefficient_.SetValue(s, coefs_[<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a> - 1]);
<a name="l02312"></a>02312   }
<a name="l02313"></a>02313 
<a name="l02314"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqCst.html#49ec4508116a31d928313bc83865d639">02314</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqCst.html" title="PositiveBooleanScalProdEqCst (all constants &amp;gt;= 0).">PositiveBooleanScalProdEqCst</a>() {}
<a name="l02315"></a>02315 
<a name="l02316"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqCst.html#a24fd5c9cdbcd3dcaecf1fd809f7f450">02316</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#bb4a07351536c2fe684cf993360a674e" title="This method is called when the constraint is processed by the solver.">Post</a>() {
<a name="l02317"></a>02317     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> var_index = 0; var_index &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++var_index) {
<a name="l02318"></a>02318       <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[var_index]-&gt;Bound()) {
<a name="l02319"></a>02319         <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* <span class="keyword">const</span> d =
<a name="l02320"></a>02320             <a class="code" href="namespaceoperations__research.html#bc7cb18be5d9d418d32782253cd4bf5a">MakeConstraintDemon1</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l02321"></a>02321                                  <span class="keyword">this</span>,
<a name="l02322"></a>02322                                  &amp;<a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqCst.html#a4d32c8e9102747c10fdf40f7d568ad1">PositiveBooleanScalProdEqCst::Update</a>,
<a name="l02323"></a>02323                                  <span class="stringliteral">"Update"</span>,
<a name="l02324"></a>02324                                  var_index);
<a name="l02325"></a>02325         <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[var_index]-&gt;WhenRange(d);
<a name="l02326"></a>02326       }
<a name="l02327"></a>02327     }
<a name="l02328"></a>02328   }
<a name="l02329"></a>02329 
<a name="l02330"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqCst.html#54e8dca493fa8919e85040fd8c57a7fa">02330</a>   <span class="keywordtype">void</span> Propagate() {
<a name="l02331"></a>02331     <span class="keywordflow">if</span> (sum_of_bound_variables_.Value() &gt; constant_ ||
<a name="l02332"></a>02332         sum_of_all_variables_.Value() &lt; constant_) {
<a name="l02333"></a>02333       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l02334"></a>02334     }
<a name="l02335"></a>02335     <span class="keyword">const</span> int64 slack_up = constant_ - sum_of_bound_variables_.Value();
<a name="l02336"></a>02336     <span class="keyword">const</span> int64 slack_down = sum_of_all_variables_.Value() - constant_;
<a name="l02337"></a>02337     <span class="keyword">const</span> int64 max_coeff = max_coefficient_.Value();
<a name="l02338"></a>02338     <span class="keywordflow">if</span> (slack_down &lt; max_coeff || slack_up &lt; max_coeff) {
<a name="l02339"></a>02339       int64 last_unbound = first_unbound_backward_.Value();
<a name="l02340"></a>02340       <span class="keywordflow">for</span> (; last_unbound &gt;= 0; --last_unbound) {
<a name="l02341"></a>02341         <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[last_unbound]-&gt;Bound()) {
<a name="l02342"></a>02342           <span class="keywordflow">if</span> (coefs_[last_unbound] &gt; slack_up) {
<a name="l02343"></a>02343             <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[last_unbound]-&gt;SetValue(0);
<a name="l02344"></a>02344           } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (coefs_[last_unbound] &gt; slack_down) {
<a name="l02345"></a>02345             <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[last_unbound]-&gt;SetValue(1);
<a name="l02346"></a>02346           } <span class="keywordflow">else</span> {
<a name="l02347"></a>02347             max_coefficient_.SetValue(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(), coefs_[last_unbound]);
<a name="l02348"></a>02348             <span class="keywordflow">break</span>;
<a name="l02349"></a>02349           }
<a name="l02350"></a>02350         }
<a name="l02351"></a>02351       }
<a name="l02352"></a>02352       first_unbound_backward_.SetValue(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(), last_unbound);
<a name="l02353"></a>02353     }
<a name="l02354"></a>02354   }
<a name="l02355"></a>02355 
<a name="l02356"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqCst.html#dbe17f22875e1ffa748178340d656981">02356</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#3ce94e9ceb79c31e30a36e72ca95a6da" title="This method performs the initial propagation of the constraint.">InitialPropagate</a>() {
<a name="l02357"></a>02357     <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>();
<a name="l02358"></a>02358     <span class="keywordtype">int</span> last_unbound = -1;
<a name="l02359"></a>02359     int64 sum_bound = 0LL;
<a name="l02360"></a>02360     int64 sum_all = 0LL;
<a name="l02361"></a>02361     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index = 0; index &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++index) {
<a name="l02362"></a>02362       <span class="keyword">const</span> int64 value = <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[index]-&gt;Max() * coefs_[index];
<a name="l02363"></a>02363       sum_all += value;
<a name="l02364"></a>02364       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[index]-&gt;Bound()) {
<a name="l02365"></a>02365         sum_bound += value;
<a name="l02366"></a>02366       } <span class="keywordflow">else</span> {
<a name="l02367"></a>02367         last_unbound = index;
<a name="l02368"></a>02368       }
<a name="l02369"></a>02369     }
<a name="l02370"></a>02370     sum_of_bound_variables_.SetValue(s, sum_bound);
<a name="l02371"></a>02371     sum_of_all_variables_.SetValue(s, sum_all);
<a name="l02372"></a>02372     first_unbound_backward_.SetValue(s, last_unbound);
<a name="l02373"></a>02373     Propagate();
<a name="l02374"></a>02374   }
<a name="l02375"></a>02375 
<a name="l02376"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqCst.html#a4d32c8e9102747c10fdf40f7d568ad1">02376</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#5f4d2a6277dd7c080b2bb06e0dbb2ed9">Update</a>(<span class="keywordtype">int</span> var_index) {
<a name="l02377"></a>02377     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[var_index]-&gt;Min() == 1) {
<a name="l02378"></a>02378       sum_of_bound_variables_.SetValue(
<a name="l02379"></a>02379           <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(), sum_of_bound_variables_.Value() + coefs_[var_index]);
<a name="l02380"></a>02380     } <span class="keywordflow">else</span> {
<a name="l02381"></a>02381       sum_of_all_variables_.SetValue(
<a name="l02382"></a>02382           <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(), sum_of_all_variables_.Value() - coefs_[var_index]);
<a name="l02383"></a>02383     }
<a name="l02384"></a>02384     Propagate();
<a name="l02385"></a>02385   }
<a name="l02386"></a>02386 
<a name="l02387"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqCst.html#879382abcc46cd707806a3e6f41e1fdd">02387</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#25b5196c8437a54e7c98f5e8b984dbe4" title="Constraint class.">DebugString</a>()<span class="keyword"> const </span>{
<a name="l02388"></a>02388     <span class="keywordtype">string</span> out =  <span class="stringliteral">"PositiveBooleanScalProdEqCst(["</span>;
<a name="l02389"></a>02389     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>; ++i) {
<a name="l02390"></a>02390       <span class="keywordflow">if</span> (i &gt; 0) {
<a name="l02391"></a>02391         StringAppendF(&amp;out, <span class="stringliteral">", "</span>);
<a name="l02392"></a>02392       }
<a name="l02393"></a>02393       StringAppendF(&amp;out, <span class="stringliteral">"%s"</span>, <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>[i]-&gt;<a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html#25b5196c8437a54e7c98f5e8b984dbe4" title="Constraint class.">DebugString</a>().c_str());
<a name="l02394"></a>02394     }
<a name="l02395"></a>02395     StringAppendF(&amp;out, <span class="stringliteral">"], ["</span>);
<a name="l02396"></a>02396     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size_; ++i) {
<a name="l02397"></a>02397       <span class="keywordflow">if</span> (i &gt; 0) {
<a name="l02398"></a>02398         StringAppendF(&amp;out, <span class="stringliteral">", "</span>);
<a name="l02399"></a>02399       }
<a name="l02400"></a>02400       StringAppendF(&amp;out, <span class="stringliteral">"%"</span> GG_LL_FORMAT <span class="stringliteral">"d"</span>, coefs_[i]);
<a name="l02401"></a>02401     }
<a name="l02402"></a>02402     StringAppendF(&amp;out, <span class="stringliteral">"], constant = %"</span> GG_LL_FORMAT <span class="stringliteral">"d)"</span>, constant_);
<a name="l02403"></a>02403     <span class="keywordflow">return</span> out;
<a name="l02404"></a>02404   }
<a name="l02405"></a>02405  <span class="keyword">private</span>:
<a name="l02406"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqCst.html#2b88931822d9c7449c0ccccf9e7bba34">02406</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#e3d172614a1e90ece75de30337447022">size_</a>;
<a name="l02407"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqCst.html#c1e90fa85f7c6010eb5955979d9a9c6b">02407</a>   scoped_array&lt;IntVar*&gt; <a class="code" href="classoperations__research_1_1BaseSumBooleanConstraint.html#d0489255e7b03f5838c0c7b9753b7467">vars_</a>;
<a name="l02408"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqCst.html#21b19eba0b01b4015a6efe08c3479e55">02408</a>   scoped_array&lt;int64&gt; coefs_;
<a name="l02409"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqCst.html#6eb9f65b3c12969b957da19dae0b5604">02409</a>   <a class="code" href="classoperations__research_1_1Rev.html" title="These class represent reversible POD types.">Rev&lt;int&gt;</a> first_unbound_backward_;
<a name="l02410"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqCst.html#6c9ab2a6a772685f541e23a24b45013a">02410</a>   <a class="code" href="classoperations__research_1_1Rev.html" title="These class represent reversible POD types.">Rev&lt;int64&gt;</a> sum_of_bound_variables_;
<a name="l02411"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqCst.html#2950bad1a96789914d0b2780572befa7">02411</a>   <a class="code" href="classoperations__research_1_1Rev.html" title="These class represent reversible POD types.">Rev&lt;int64&gt;</a> sum_of_all_variables_;
<a name="l02412"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqCst.html#5ba8155eef7c63306e4fcce791145c7c">02412</a>   int64 constant_;
<a name="l02413"></a><a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqCst.html#be04c73991407ea82a7e429c9d87b25f">02413</a>   <a class="code" href="classoperations__research_1_1Rev.html" title="These class represent reversible POD types.">Rev&lt;int64&gt;</a> max_coefficient_;
<a name="l02414"></a>02414 };
<a name="l02415"></a>02415 
<a name="l02416"></a>02416 <span class="comment">// ----- API -----</span>
<a name="l02417"></a>02417 
<a name="l02418"></a><a class="code" href="classoperations__research_1_1Solver.html#4b8e2082f12abfb8bad272242ca11df8">02418</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#4b8e2082f12abfb8bad272242ca11df8" title="Variation on arrays.">Solver::MakeSumLessOrEqual</a>(<span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars, int64 cst) {
<a name="l02419"></a>02419   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#4b8e2082f12abfb8bad272242ca11df8" title="Variation on arrays.">MakeSumLessOrEqual</a>(vars.data(), vars.size(), cst);
<a name="l02420"></a>02420 }
<a name="l02421"></a>02421 
<a name="l02422"></a><a class="code" href="classoperations__research_1_1Solver.html#1531312610ccffb3a1e12ed6594cbf47">02422</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#4b8e2082f12abfb8bad272242ca11df8" title="Variation on arrays.">Solver::MakeSumLessOrEqual</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars,
<a name="l02423"></a>02423                                        <span class="keywordtype">int</span> size,
<a name="l02424"></a>02424                                        int64 cst) {
<a name="l02425"></a>02425   <span class="keywordflow">if</span> (cst == 1LL &amp;&amp; <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#793bcfc2f52006e1e42125f3ee7dcdfc">AreAllBooleans</a>(vars, size) &amp;&amp; size &gt; 2) {
<a name="l02426"></a>02426     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1SumBooleanLessOrEqualToOne.html" title="Sum of Boolean &amp;lt;= 1.">SumBooleanLessOrEqualToOne</a>(<span class="keyword">this</span>, vars, size));
<a name="l02427"></a>02427   } <span class="keywordflow">else</span> {
<a name="l02428"></a>02428     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#c62c9da88f979e5838d10f9d0ef7e371" title="left &amp;lt;= right">MakeLessOrEqual</a>(<a class="code" href="classoperations__research_1_1Solver.html#5c6c1e8bb5503babdfe6a59e1fd28851" title="Integer Expressions.">MakeSum</a>(vars, size), cst);
<a name="l02429"></a>02429   }
<a name="l02430"></a>02430 }
<a name="l02431"></a>02431 
<a name="l02432"></a><a class="code" href="classoperations__research_1_1Solver.html#9a2963cf0fe124bac6f35ec65238bce7">02432</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#9a2963cf0fe124bac6f35ec65238bce7">Solver::MakeSumGreaterOrEqual</a>(<span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars,
<a name="l02433"></a>02433                                           int64 cst) {
<a name="l02434"></a>02434   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#9a2963cf0fe124bac6f35ec65238bce7">MakeSumGreaterOrEqual</a>(vars.data(), vars.size(), cst);
<a name="l02435"></a>02435 }
<a name="l02436"></a>02436 
<a name="l02437"></a><a class="code" href="classoperations__research_1_1Solver.html#b8880daeafbf78347d2de544ee486539">02437</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#9a2963cf0fe124bac6f35ec65238bce7">Solver::MakeSumGreaterOrEqual</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars,
<a name="l02438"></a>02438                                           <span class="keywordtype">int</span> size,
<a name="l02439"></a>02439                                           int64 cst) {
<a name="l02440"></a>02440   <span class="keywordflow">if</span> (cst == 1LL &amp;&amp; <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#793bcfc2f52006e1e42125f3ee7dcdfc">AreAllBooleans</a>(vars, size) &amp;&amp; size &gt; 2) {
<a name="l02441"></a>02441     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1SumBooleanGreaterOrEqualToOne.html" title="Sum of Boolean &amp;gt;= 1.">SumBooleanGreaterOrEqualToOne</a>(<span class="keyword">this</span>, vars, size));
<a name="l02442"></a>02442   } <span class="keywordflow">else</span> {
<a name="l02443"></a>02443     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#1fb3cbd575b75e83bdce037f3dbaca18" title="left &amp;gt;= right">MakeGreaterOrEqual</a>(<a class="code" href="classoperations__research_1_1Solver.html#5c6c1e8bb5503babdfe6a59e1fd28851" title="Integer Expressions.">MakeSum</a>(vars, size), cst);
<a name="l02444"></a>02444   }
<a name="l02445"></a>02445 }
<a name="l02446"></a>02446 
<a name="l02447"></a><a class="code" href="classoperations__research_1_1Solver.html#99ae048701a10d245ce2b9eb91a9604e">02447</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#99ae048701a10d245ce2b9eb91a9604e">Solver::MakeSumEquality</a>(<span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars, int64 cst) {
<a name="l02448"></a>02448   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#99ae048701a10d245ce2b9eb91a9604e">MakeSumEquality</a>(vars.data(), vars.size(), cst);
<a name="l02449"></a>02449 }
<a name="l02450"></a>02450 
<a name="l02451"></a><a class="code" href="classoperations__research_1_1Solver.html#aef4dd37fd913aba3e442eb205377c27">02451</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#99ae048701a10d245ce2b9eb91a9604e">Solver::MakeSumEquality</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span>* vars,
<a name="l02452"></a>02452                                     <span class="keywordtype">int</span> size,
<a name="l02453"></a>02453                                     int64 cst) {
<a name="l02454"></a>02454   <span class="keywordflow">if</span> (<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#793bcfc2f52006e1e42125f3ee7dcdfc">AreAllBooleans</a>(vars, size) &amp;&amp; size &gt; 2) {
<a name="l02455"></a>02455     <span class="keywordflow">if</span> (cst == 1) {
<a name="l02456"></a>02456       <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1SumBooleanEqualToOne.html" title="Sum of Boolean == 1.">SumBooleanEqualToOne</a>(<span class="keyword">this</span>, vars, size));
<a name="l02457"></a>02457     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (cst &lt; 0 || cst &gt; size) {
<a name="l02458"></a>02458       <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#de4965f23f87131eed98c01de332cc6c" title="This constraint always fails.">MakeFalseConstraint</a>();
<a name="l02459"></a>02459     } <span class="keywordflow">else</span> {
<a name="l02460"></a>02460       <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1SumBooleanEqualToVar.html" title="Sum of Boolean Equal To Var.">SumBooleanEqualToVar</a>(<span class="keyword">this</span>,
<a name="l02461"></a>02461                                                vars,
<a name="l02462"></a>02462                                                size,
<a name="l02463"></a>02463                                                <a class="code" href="classoperations__research_1_1Solver.html#8f027a8b96688e6728e2e9ece1441a13" title="IntConst will create a constant expression.">MakeIntConst</a>(cst)));
<a name="l02464"></a>02464     }
<a name="l02465"></a>02465   } <span class="keywordflow">else</span> {
<a name="l02466"></a>02466     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#9b994752fb26294ea587bdba75038811" title="left == right">MakeEquality</a>(<a class="code" href="classoperations__research_1_1Solver.html#5c6c1e8bb5503babdfe6a59e1fd28851" title="Integer Expressions.">MakeSum</a>(vars, size), cst);
<a name="l02467"></a>02467   }
<a name="l02468"></a>02468 }
<a name="l02469"></a>02469 
<a name="l02470"></a><a class="code" href="classoperations__research_1_1Solver.html#27e13700ef0b5d7d3b604aaa790271a3">02470</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#27e13700ef0b5d7d3b604aaa790271a3">Solver::MakeScalProdEquality</a>(<span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars,
<a name="l02471"></a>02471                                          <span class="keyword">const</span> vector&lt;int64&gt;&amp; coefficients,
<a name="l02472"></a>02472                                          int64 cst) {
<a name="l02473"></a>02473   DCHECK_EQ(vars.size(), coefficients.size());
<a name="l02474"></a>02474   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#27e13700ef0b5d7d3b604aaa790271a3">MakeScalProdEquality</a>(vars.data(),
<a name="l02475"></a>02475                               vars.size(),
<a name="l02476"></a>02476                               coefficients.data(),
<a name="l02477"></a>02477                               cst);
<a name="l02478"></a>02478 }
<a name="l02479"></a>02479 
<a name="l02480"></a><a class="code" href="classoperations__research_1_1Solver.html#a87e8bd265a4d01f35d3ef9c54716b47">02480</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#27e13700ef0b5d7d3b604aaa790271a3">Solver::MakeScalProdEquality</a>(<span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars,
<a name="l02481"></a>02481                                          <span class="keyword">const</span> vector&lt;int&gt;&amp; coefficients,
<a name="l02482"></a>02482                                          int64 cst) {
<a name="l02483"></a>02483   DCHECK_EQ(vars.size(), coefficients.size());
<a name="l02484"></a>02484   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#27e13700ef0b5d7d3b604aaa790271a3">MakeScalProdEquality</a>(vars.data(),
<a name="l02485"></a>02485                               vars.size(),
<a name="l02486"></a>02486                               coefficients.data(),
<a name="l02487"></a>02487                               cst);
<a name="l02488"></a>02488 }
<a name="l02489"></a>02489 
<a name="l02490"></a><a class="code" href="namespaceoperations__research.html#5ba592d327960faaf9e321c669ce6bbc">02490</a> <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt; <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="namespaceoperations__research.html#5ba592d327960faaf9e321c669ce6bbc">MakeScalProdEqualityFct</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> solver,
<a name="l02491"></a>02491                                                       <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l02492"></a>02492                                                       <span class="keywordtype">int</span> size,
<a name="l02493"></a>02493                                                       T <span class="keyword">const</span> * coefficients,
<a name="l02494"></a>02494                                                       int64 cst) {
<a name="l02495"></a>02495   <span class="keywordflow">if</span> (size == 0 || AreAllNull&lt;T&gt;(coefficients, size)) {
<a name="l02496"></a>02496     <span class="keywordflow">return</span> cst == 0 ? solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#c49a29be9a66cd9e65f2c4faa45c2a77" title="Constraints This constraint always succeeds.">MakeTrueConstraint</a>()
<a name="l02497"></a>02497         : solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#de4965f23f87131eed98c01de332cc6c" title="This constraint always fails.">MakeFalseConstraint</a>();
<a name="l02498"></a>02498   }
<a name="l02499"></a>02499   <span class="keywordflow">if</span> (<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#793bcfc2f52006e1e42125f3ee7dcdfc">AreAllBooleans</a>(vars, size) &amp;&amp; AreAllPositive&lt;T&gt;(coefficients, size)) {
<a name="l02500"></a>02500     <span class="comment">// TODO(user) : bench BooleanScalProdEqVar with IntConst.</span>
<a name="l02501"></a>02501     <span class="keywordflow">return</span> solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1PositiveBooleanScalProdEqCst.html" title="PositiveBooleanScalProdEqCst (all constants &amp;gt;= 0).">PositiveBooleanScalProdEqCst</a>(solver,
<a name="l02502"></a>02502                                                              vars,
<a name="l02503"></a>02503                                                              size,
<a name="l02504"></a>02504                                                              coefficients,
<a name="l02505"></a>02505                                                              cst));
<a name="l02506"></a>02506   }
<a name="l02507"></a>02507   vector&lt;IntVar*&gt; terms;
<a name="l02508"></a>02508   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {
<a name="l02509"></a>02509     terms.push_back(solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#b8f580102878b6d138149279bdfce51c" title="left * right">MakeProd</a>(vars[i], coefficients[i])-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#751d151bfe120bc6d378c4570505cbd4" title="Creates a variable from the expression.">Var</a>());
<a name="l02510"></a>02510   }
<a name="l02511"></a>02511   <span class="keywordflow">return</span> solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#9b994752fb26294ea587bdba75038811" title="left == right">MakeEquality</a>(solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#5c6c1e8bb5503babdfe6a59e1fd28851" title="Integer Expressions.">MakeSum</a>(terms), cst);
<a name="l02512"></a>02512 }
<a name="l02513"></a>02513 
<a name="l02514"></a>02514 
<a name="l02515"></a><a class="code" href="classoperations__research_1_1Solver.html#004225363aab621b65b8583b6116601b">02515</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#27e13700ef0b5d7d3b604aaa790271a3">Solver::MakeScalProdEquality</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l02516"></a>02516                                          <span class="keywordtype">int</span> size,
<a name="l02517"></a>02517                                          int64 <span class="keyword">const</span> * coefficients,
<a name="l02518"></a>02518                                          int64 cst) {
<a name="l02519"></a>02519   <span class="keywordflow">return</span> MakeScalProdEqualityFct&lt;int64&gt;(<span class="keyword">this</span>, vars, size, coefficients, cst);
<a name="l02520"></a>02520 }
<a name="l02521"></a>02521 
<a name="l02522"></a><a class="code" href="classoperations__research_1_1Solver.html#512237972b6947b137f0f99264a007ce">02522</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#27e13700ef0b5d7d3b604aaa790271a3">Solver::MakeScalProdEquality</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l02523"></a>02523                                          <span class="keywordtype">int</span> size,
<a name="l02524"></a>02524                                          <span class="keywordtype">int</span> <span class="keyword">const</span> * coefficients,
<a name="l02525"></a>02525                                          int64 cst) {
<a name="l02526"></a>02526   <span class="keywordflow">return</span> MakeScalProdEqualityFct&lt;int&gt;(<span class="keyword">this</span>, vars, size, coefficients, cst);
<a name="l02527"></a>02527 }
<a name="l02528"></a>02528 
<a name="l02529"></a><a class="code" href="classoperations__research_1_1Solver.html#e33d40d0409c2fd95438d9534aedb516">02529</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#e33d40d0409c2fd95438d9534aedb516">Solver::MakeScalProdGreaterOrEqual</a>(<span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars,
<a name="l02530"></a>02530                                                <span class="keyword">const</span> vector&lt;int64&gt;&amp; coeffs,
<a name="l02531"></a>02531                                                int64 cst) {
<a name="l02532"></a>02532   DCHECK_EQ(vars.size(), coeffs.size());
<a name="l02533"></a>02533   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#e33d40d0409c2fd95438d9534aedb516">MakeScalProdGreaterOrEqual</a>(vars.data(),
<a name="l02534"></a>02534                                     vars.size(),
<a name="l02535"></a>02535                                     coeffs.data(),
<a name="l02536"></a>02536                                     cst);
<a name="l02537"></a>02537 }
<a name="l02538"></a>02538 
<a name="l02539"></a><a class="code" href="classoperations__research_1_1Solver.html#bf32ebdb7010510cfa7db99c32054065">02539</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#e33d40d0409c2fd95438d9534aedb516">Solver::MakeScalProdGreaterOrEqual</a>(<span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars,
<a name="l02540"></a>02540                                                <span class="keyword">const</span> vector&lt;int&gt;&amp; coeffs,
<a name="l02541"></a>02541                                                int64 cst) {
<a name="l02542"></a>02542   DCHECK_EQ(vars.size(), coeffs.size());
<a name="l02543"></a>02543   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#e33d40d0409c2fd95438d9534aedb516">MakeScalProdGreaterOrEqual</a>(vars.data(),
<a name="l02544"></a>02544                                     vars.size(),
<a name="l02545"></a>02545                                     coeffs.data(),
<a name="l02546"></a>02546                                     cst);
<a name="l02547"></a>02547 }
<a name="l02548"></a>02548 
<a name="l02549"></a>02549 <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l02550"></a><a class="code" href="namespaceoperations__research.html#ba3fe251ae098b3f6f56c9a59841abf1">02550</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="namespaceoperations__research.html#ba3fe251ae098b3f6f56c9a59841abf1">MakeScalProdGreaterOrEqualFct</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* solver,
<a name="l02551"></a>02551                                           <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l02552"></a>02552                                           <span class="keywordtype">int</span> size,
<a name="l02553"></a>02553                                           T <span class="keyword">const</span> * coefficients,
<a name="l02554"></a>02554                                           int64 cst) {
<a name="l02555"></a>02555   <span class="keywordflow">if</span> (size == 0 || AreAllNull&lt;T&gt;(coefficients, size)) {
<a name="l02556"></a>02556     <span class="keywordflow">return</span> cst &lt;= 0 ? solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#c49a29be9a66cd9e65f2c4faa45c2a77" title="Constraints This constraint always succeeds.">MakeTrueConstraint</a>()
<a name="l02557"></a>02557         : solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#de4965f23f87131eed98c01de332cc6c" title="This constraint always fails.">MakeFalseConstraint</a>();
<a name="l02558"></a>02558   }
<a name="l02559"></a>02559   vector&lt;IntVar*&gt; terms;
<a name="l02560"></a>02560   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {
<a name="l02561"></a>02561     terms.push_back(solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#b8f580102878b6d138149279bdfce51c" title="left * right">MakeProd</a>(vars[i], coefficients[i])-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#751d151bfe120bc6d378c4570505cbd4" title="Creates a variable from the expression.">Var</a>());
<a name="l02562"></a>02562   }
<a name="l02563"></a>02563   <span class="keywordflow">return</span> solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#1fb3cbd575b75e83bdce037f3dbaca18" title="left &amp;gt;= right">MakeGreaterOrEqual</a>(solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#5c6c1e8bb5503babdfe6a59e1fd28851" title="Integer Expressions.">MakeSum</a>(terms), cst);
<a name="l02564"></a>02564 }
<a name="l02565"></a>02565 
<a name="l02566"></a><a class="code" href="classoperations__research_1_1Solver.html#a031248c1ea8ebc76a7712f593623962">02566</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#e33d40d0409c2fd95438d9534aedb516">Solver::MakeScalProdGreaterOrEqual</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l02567"></a>02567                                                <span class="keywordtype">int</span> size,
<a name="l02568"></a>02568                                                int64 <span class="keyword">const</span> * coefficients,
<a name="l02569"></a>02569                                                int64 cst) {
<a name="l02570"></a>02570   <span class="keywordflow">return</span> MakeScalProdGreaterOrEqualFct&lt;int64&gt;(<span class="keyword">this</span>,
<a name="l02571"></a>02571                                               vars, size, coefficients, cst);
<a name="l02572"></a>02572 }
<a name="l02573"></a>02573 
<a name="l02574"></a><a class="code" href="classoperations__research_1_1Solver.html#8bb642aaded5132ef455efe9fbc3cd1b">02574</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#e33d40d0409c2fd95438d9534aedb516">Solver::MakeScalProdGreaterOrEqual</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l02575"></a>02575                                                <span class="keywordtype">int</span> size,
<a name="l02576"></a>02576                                                <span class="keywordtype">int</span> <span class="keyword">const</span> * coefficients,
<a name="l02577"></a>02577                                                int64 cst) {
<a name="l02578"></a>02578   <span class="keywordflow">return</span> MakeScalProdGreaterOrEqualFct&lt;int&gt;(<span class="keyword">this</span>,
<a name="l02579"></a>02579                                             vars, size, coefficients, cst);
<a name="l02580"></a>02580 }
<a name="l02581"></a>02581 
<a name="l02582"></a><a class="code" href="classoperations__research_1_1Solver.html#c59e62c31fc3177982abb30e13a64aea">02582</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#c59e62c31fc3177982abb30e13a64aea">Solver::MakeScalProdLessOrEqual</a>(<span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars,
<a name="l02583"></a>02583                                             <span class="keyword">const</span> vector&lt;int64&gt;&amp; coefficients,
<a name="l02584"></a>02584                                             int64 cst) {
<a name="l02585"></a>02585   DCHECK_EQ(vars.size(), coefficients.size());
<a name="l02586"></a>02586   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#c59e62c31fc3177982abb30e13a64aea">MakeScalProdLessOrEqual</a>(vars.data(),
<a name="l02587"></a>02587                                  vars.size(),
<a name="l02588"></a>02588                                  coefficients.data(),
<a name="l02589"></a>02589                                  cst);
<a name="l02590"></a>02590 }
<a name="l02591"></a>02591 
<a name="l02592"></a><a class="code" href="classoperations__research_1_1Solver.html#6c0898788b7a82021eb2108fe5d2717e">02592</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#c59e62c31fc3177982abb30e13a64aea">Solver::MakeScalProdLessOrEqual</a>(<span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars,
<a name="l02593"></a>02593                                             <span class="keyword">const</span> vector&lt;int&gt;&amp; coefficients,
<a name="l02594"></a>02594                                             int64 cst) {
<a name="l02595"></a>02595   DCHECK_EQ(vars.size(), coefficients.size());
<a name="l02596"></a>02596   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#c59e62c31fc3177982abb30e13a64aea">MakeScalProdLessOrEqual</a>(vars.data(),
<a name="l02597"></a>02597                                  vars.size(),
<a name="l02598"></a>02598                                  coefficients.data(),
<a name="l02599"></a>02599                                  cst);
<a name="l02600"></a>02600 }
<a name="l02601"></a>02601 
<a name="l02602"></a><a class="code" href="namespaceoperations__research.html#c77904f29952cf8f591a34d36c32e492">02602</a> <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt; <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="namespaceoperations__research.html#c77904f29952cf8f591a34d36c32e492">MakeScalProdLessOrEqualFct</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* solver,
<a name="l02603"></a>02603                                                          <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l02604"></a>02604                                                          <span class="keywordtype">int</span> size,
<a name="l02605"></a>02605                                                          T <span class="keyword">const</span> * coefficients,
<a name="l02606"></a>02606                                                          int64 upper_bound) {
<a name="l02607"></a>02607   <span class="keywordflow">if</span> (size == 0 || AreAllNull&lt;T&gt;(coefficients, size)) {
<a name="l02608"></a>02608     <span class="keywordflow">return</span> upper_bound &gt;= 0 ? solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#c49a29be9a66cd9e65f2c4faa45c2a77" title="Constraints This constraint always succeeds.">MakeTrueConstraint</a>()
<a name="l02609"></a>02609         : solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#de4965f23f87131eed98c01de332cc6c" title="This constraint always fails.">MakeFalseConstraint</a>();
<a name="l02610"></a>02610   }
<a name="l02611"></a>02611   <span class="comment">// TODO(user) : compute constant on the fly.</span>
<a name="l02612"></a>02612   <span class="keywordflow">if</span> (<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#a0ea2b18a56d1f205373255de37c34e6">AreAllBoundOrNull</a>(vars, coefficients, size)) {
<a name="l02613"></a>02613     int64 cst = 0;
<a name="l02614"></a>02614     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {
<a name="l02615"></a>02615       cst += vars[i]-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>() * coefficients[i];
<a name="l02616"></a>02616     }
<a name="l02617"></a>02617     <span class="keywordflow">return</span> cst &lt;= upper_bound ?
<a name="l02618"></a>02618         solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#c49a29be9a66cd9e65f2c4faa45c2a77" title="Constraints This constraint always succeeds.">MakeTrueConstraint</a>() :
<a name="l02619"></a>02619         solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#de4965f23f87131eed98c01de332cc6c" title="This constraint always fails.">MakeFalseConstraint</a>();
<a name="l02620"></a>02620   }
<a name="l02621"></a>02621   <span class="keywordflow">if</span> (<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#793bcfc2f52006e1e42125f3ee7dcdfc">AreAllBooleans</a>(vars, size) &amp;&amp; AreAllPositive&lt;T&gt;(coefficients, size)) {
<a name="l02622"></a>02622     <span class="keywordflow">return</span> solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1BooleanScalProdLessConstant.html" title="namespace">BooleanScalProdLessConstant</a>(solver,
<a name="l02623"></a>02623                                                             vars,
<a name="l02624"></a>02624                                                             size,
<a name="l02625"></a>02625                                                             coefficients,
<a name="l02626"></a>02626                                                             upper_bound));
<a name="l02627"></a>02627   }
<a name="l02628"></a>02628   vector&lt;IntVar*&gt; terms;
<a name="l02629"></a>02629   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {
<a name="l02630"></a>02630     terms.push_back(solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#b8f580102878b6d138149279bdfce51c" title="left * right">MakeProd</a>(vars[i], coefficients[i])-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#751d151bfe120bc6d378c4570505cbd4" title="Creates a variable from the expression.">Var</a>());
<a name="l02631"></a>02631   }
<a name="l02632"></a>02632   <span class="keywordflow">return</span> solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#c62c9da88f979e5838d10f9d0ef7e371" title="left &amp;lt;= right">MakeLessOrEqual</a>(solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#5c6c1e8bb5503babdfe6a59e1fd28851" title="Integer Expressions.">MakeSum</a>(terms), upper_bound);
<a name="l02633"></a>02633 }
<a name="l02634"></a>02634 
<a name="l02635"></a><a class="code" href="classoperations__research_1_1Solver.html#cd94d370652ae71845beabdcaad6d2ac">02635</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#c59e62c31fc3177982abb30e13a64aea">Solver::MakeScalProdLessOrEqual</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l02636"></a>02636                                             <span class="keywordtype">int</span> size,
<a name="l02637"></a>02637                                             int64 <span class="keyword">const</span> * coefficients,
<a name="l02638"></a>02638                                             int64 cst) {
<a name="l02639"></a>02639   <span class="keywordflow">return</span> MakeScalProdLessOrEqualFct&lt;int64&gt;(<span class="keyword">this</span>, vars, size, coefficients, cst);
<a name="l02640"></a>02640 }
<a name="l02641"></a>02641 
<a name="l02642"></a><a class="code" href="classoperations__research_1_1Solver.html#07490e6319c652d8d13b7c86aacef574">02642</a> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>* <a class="code" href="classoperations__research_1_1Solver.html#c59e62c31fc3177982abb30e13a64aea">Solver::MakeScalProdLessOrEqual</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l02643"></a>02643                                             <span class="keywordtype">int</span> size,
<a name="l02644"></a>02644                                             <span class="keywordtype">int</span> <span class="keyword">const</span> * coefficients,
<a name="l02645"></a>02645                                             int64 cst) {
<a name="l02646"></a>02646   <span class="keywordflow">return</span> MakeScalProdLessOrEqualFct&lt;int&gt;(<span class="keyword">this</span>, vars, size, coefficients, cst);
<a name="l02647"></a>02647 }
<a name="l02648"></a>02648 
<a name="l02649"></a><a class="code" href="classoperations__research_1_1Solver.html#6f25b274fd0b9da915ac4edb7fbe006f">02649</a> <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <a class="code" href="classoperations__research_1_1Solver.html#6f25b274fd0b9da915ac4edb7fbe006f" title="scalar product">Solver::MakeScalProd</a>(<span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars,
<a name="l02650"></a>02650                               <span class="keyword">const</span> vector&lt;int64&gt;&amp; coefs) {
<a name="l02651"></a>02651   DCHECK_EQ(vars.size(), coefs.size());
<a name="l02652"></a>02652   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#6f25b274fd0b9da915ac4edb7fbe006f" title="scalar product">MakeScalProd</a>(vars.data(), coefs.data(), vars.size());
<a name="l02653"></a>02653 }
<a name="l02654"></a>02654 
<a name="l02655"></a><a class="code" href="classoperations__research_1_1Solver.html#b8ec60bb0c222501ff9223be3ba69fc8">02655</a> <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <a class="code" href="classoperations__research_1_1Solver.html#6f25b274fd0b9da915ac4edb7fbe006f" title="scalar product">Solver::MakeScalProd</a>(<span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars,
<a name="l02656"></a>02656                               <span class="keyword">const</span> vector&lt;int&gt;&amp; coefs) {
<a name="l02657"></a>02657   DCHECK_EQ(vars.size(), coefs.size());
<a name="l02658"></a>02658   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#6f25b274fd0b9da915ac4edb7fbe006f" title="scalar product">MakeScalProd</a>(vars.data(), coefs.data(), vars.size());
<a name="l02659"></a>02659 }
<a name="l02660"></a>02660 
<a name="l02661"></a><a class="code" href="namespaceoperations__research.html#e8b2663d41e48e64784a5eaecdf60b3e">02661</a> <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt; <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <a class="code" href="namespaceoperations__research.html#e8b2663d41e48e64784a5eaecdf60b3e">MakeScalProdFct</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* solver,
<a name="l02662"></a>02662                                            <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l02663"></a>02663                                            <span class="keyword">const</span> T* <span class="keyword">const</span> coefs,
<a name="l02664"></a>02664                                            <span class="keywordtype">int</span> size) {
<a name="l02665"></a>02665   <span class="keywordflow">if</span> (size == 0 || AreAllNull&lt;T&gt;(coefs, size)) {
<a name="l02666"></a>02666     <span class="keywordflow">return</span> solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#8f027a8b96688e6728e2e9ece1441a13" title="IntConst will create a constant expression.">MakeIntConst</a>(0LL);
<a name="l02667"></a>02667   }
<a name="l02668"></a>02668   <span class="keywordflow">if</span> (<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#a0ea2b18a56d1f205373255de37c34e6">AreAllBoundOrNull</a>(vars, coefs, size)) {
<a name="l02669"></a>02669     int64 cst = 0;
<a name="l02670"></a>02670     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {
<a name="l02671"></a>02671       cst += vars[i]-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>() * coefs[i];
<a name="l02672"></a>02672     }
<a name="l02673"></a>02673     <span class="keywordflow">return</span> solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#8f027a8b96688e6728e2e9ece1441a13" title="IntConst will create a constant expression.">MakeIntConst</a>(cst);
<a name="l02674"></a>02674   }
<a name="l02675"></a>02675   <span class="keywordflow">if</span> (<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02expr__array_8cc_03.html#793bcfc2f52006e1e42125f3ee7dcdfc">AreAllBooleans</a>(vars, size)) {
<a name="l02676"></a>02676     <span class="keywordflow">if</span> (AreAllPositive&lt;T&gt;(coefs, size)) {
<a name="l02677"></a>02677       <span class="keywordflow">return</span> solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(
<a name="l02678"></a>02678           <span class="keyword">new</span> <a class="code" href="classoperations__research_1_1PositiveBooleanScalProd.html" title="PositiveBooleanScalProd.">PositiveBooleanScalProd</a>(solver, vars, size, coefs));
<a name="l02679"></a>02679     } <span class="keywordflow">else</span> {
<a name="l02680"></a>02680       <span class="comment">// If some coefficients are non-positive, partition coefficients in two</span>
<a name="l02681"></a>02681       <span class="comment">// sets, one for the positive coefficients P and one for the negative</span>
<a name="l02682"></a>02682       <span class="comment">// ones N.</span>
<a name="l02683"></a>02683       <span class="comment">// Create two PositiveBooleanScalProd expressions, one on P (s1), the</span>
<a name="l02684"></a>02684       <span class="comment">// other on Opposite(N) (s2).</span>
<a name="l02685"></a>02685       <span class="comment">// The final expression is then s1 - s2.</span>
<a name="l02686"></a>02686       <span class="comment">// If P is empty, the expression is Opposite(s2).</span>
<a name="l02687"></a>02687       vector&lt;T&gt; positive_coefs;
<a name="l02688"></a>02688       vector&lt;T&gt; negative_coefs;
<a name="l02689"></a>02689       vector&lt;IntVar*&gt; positive_coef_vars;
<a name="l02690"></a>02690       vector&lt;IntVar*&gt; negative_coef_vars;
<a name="l02691"></a>02691       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {
<a name="l02692"></a>02692         <span class="keyword">const</span> T coef = coefs[i];
<a name="l02693"></a>02693         <span class="keywordflow">if</span> (coef &gt; 0) {
<a name="l02694"></a>02694           positive_coefs.push_back(coef);
<a name="l02695"></a>02695           positive_coef_vars.push_back(vars[i]);
<a name="l02696"></a>02696         } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (coef &lt; 0) {
<a name="l02697"></a>02697           negative_coefs.push_back(-coef);
<a name="l02698"></a>02698           negative_coef_vars.push_back(vars[i]);
<a name="l02699"></a>02699         }
<a name="l02700"></a>02700       }
<a name="l02701"></a>02701       CHECK_GT(negative_coef_vars.size(), 0);
<a name="l02702"></a>02702       <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* negatives =
<a name="l02703"></a>02703           solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(
<a name="l02704"></a>02704               <span class="keyword">new</span> <a class="code" href="classoperations__research_1_1PositiveBooleanScalProd.html" title="PositiveBooleanScalProd.">PositiveBooleanScalProd</a>(solver,
<a name="l02705"></a>02705                                           negative_coef_vars.data(),
<a name="l02706"></a>02706                                           negative_coef_vars.size(),
<a name="l02707"></a>02707                                           negative_coefs.data()));
<a name="l02708"></a>02708       <span class="keywordflow">if</span> (!positive_coefs.empty()) {
<a name="l02709"></a>02709         <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* positives =
<a name="l02710"></a>02710             solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(
<a name="l02711"></a>02711                 <span class="keyword">new</span> <a class="code" href="classoperations__research_1_1PositiveBooleanScalProd.html" title="PositiveBooleanScalProd.">PositiveBooleanScalProd</a>(solver,
<a name="l02712"></a>02712                                             positive_coef_vars.data(),
<a name="l02713"></a>02713                                             positive_coef_vars.size(),
<a name="l02714"></a>02714                                             positive_coefs.data()));
<a name="l02715"></a>02715         <span class="comment">// Cast to var to avoid slow propagation; all operations on the expr are</span>
<a name="l02716"></a>02716         <span class="comment">// O(n)!</span>
<a name="l02717"></a>02717         <span class="keywordflow">return</span> solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#33eb3b496c4a4fccbdf04393ad7101f0" title="left - right">MakeDifference</a>(positives-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#751d151bfe120bc6d378c4570505cbd4" title="Creates a variable from the expression.">Var</a>(), negatives-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#603366ed03f64fa205c53bb9d00e3bdb" title="Creates a variable from the expression.">Var</a>());
<a name="l02718"></a>02718       } <span class="keywordflow">else</span> {
<a name="l02719"></a>02719         <span class="keywordflow">return</span> solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#445f666b8ce165ce9590200186448e8e" title="-expr">MakeOpposite</a>(negatives);
<a name="l02720"></a>02720       }
<a name="l02721"></a>02721     }
<a name="l02722"></a>02722   }
<a name="l02723"></a>02723   vector&lt;IntVar*&gt; terms;
<a name="l02724"></a>02724   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {
<a name="l02725"></a>02725     terms.push_back(solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#b8f580102878b6d138149279bdfce51c" title="left * right">MakeProd</a>(vars[i], coefs[i])-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#751d151bfe120bc6d378c4570505cbd4" title="Creates a variable from the expression.">Var</a>());
<a name="l02726"></a>02726   }
<a name="l02727"></a>02727   <span class="keywordflow">return</span> solver-&gt;<a class="code" href="classoperations__research_1_1Solver.html#5c6c1e8bb5503babdfe6a59e1fd28851" title="Integer Expressions.">MakeSum</a>(terms);
<a name="l02728"></a>02728 }
<a name="l02729"></a>02729 
<a name="l02730"></a><a class="code" href="classoperations__research_1_1Solver.html#75666fa9f94275b37aceb22856794c04">02730</a> <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <a class="code" href="classoperations__research_1_1Solver.html#6f25b274fd0b9da915ac4edb7fbe006f" title="scalar product">Solver::MakeScalProd</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l02731"></a>02731                               <span class="keyword">const</span> int64* <span class="keyword">const</span> coefs,
<a name="l02732"></a>02732                               <span class="keywordtype">int</span> size) {
<a name="l02733"></a>02733   <span class="keywordflow">return</span> MakeScalProdFct&lt;int64&gt;(<span class="keyword">this</span>, vars, coefs, size);
<a name="l02734"></a>02734 }
<a name="l02735"></a>02735 
<a name="l02736"></a><a class="code" href="classoperations__research_1_1Solver.html#cd0dd9a10789596d5523591530aea389">02736</a> <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <a class="code" href="classoperations__research_1_1Solver.html#6f25b274fd0b9da915ac4edb7fbe006f" title="scalar product">Solver::MakeScalProd</a>(<a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l02737"></a>02737                               <span class="keyword">const</span> <span class="keywordtype">int</span>* <span class="keyword">const</span> coefs,
<a name="l02738"></a>02738                               <span class="keywordtype">int</span> size) {
<a name="l02739"></a>02739   <span class="keywordflow">return</span> MakeScalProdFct&lt;int&gt;(<span class="keyword">this</span>, vars, coefs, size);
<a name="l02740"></a>02740 }
<a name="l02741"></a>02741 
<a name="l02742"></a>02742 
<a name="l02743"></a>02743 }  <span class="comment">// namespace operations_research</span>
</pre></div></div>

  <!-- Start of footer. -->
  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <tr valign=top>
      <td colspan=2 height=10></td>
    </tr>
    <tr valign=top>
      <td colspan=2 bgcolor=#389613 height=3></td>
    </tr>
  </table>

  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br />

  
  </body>
</html>
