<!-- Good morning, Mr. Phelps. -->
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
    <title>google3/constraint_solver/element.cc Source File - Doxy</title>
    <link rel="shortcut icon" href="../../favicon.ico">
    <!-- Both stylesheets are supplied by Doxygen, with maybe minor tweaks from Google. -->
    <link href="../../doxygen.css" rel="stylesheet" type="text/css">
    <link href="../../tabs.css" rel="stylesheet" type="text/css">
  </head>

  <body topmargin=0 leftmargin=20 bottommargin=0 rightmargin=20 marginwidth=20 marginheight=0>
  <!-- Second part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
  <style>
    a.doxy_logo:hover {
      background-color: #389613
    }
  </style>

  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <!-- Top horizontal line with the color of the day. -->
    <tr valign=top>
      <td colspan=3 bgcolor=#389613 height=3></td>
    </tr>

    <!-- Header row with the links at the right. -->
    <tr valign=top>
      <td colspan=3 align=right>
        <font size=-1>
          Generated on: <font color=#389613><b>Fri Apr  1 14:13:18 PDT 2011</b></font>
            for <b>custom file set</b>
        </font>
      </td>
    </tr>

    <!-- Header row with the logo and the search form. -->
    <tr valign=top>
      <!-- Logo. -->
      <td align=left width=150>
        <table width=150 height=54 cellpadding=0 cellspacing=0 border=0>
          <tr valign=top>
            <!-- First part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
            <td bgcolor=#389613>
              <a class="doxy_logo" href="../../index.html"><img src="../../doxy_logo.png" alt="Doxy" border=0></a>
            </td>
          </tr>
        </table>
      </td>
    </tr>

    <!-- Tiny vertical space below the form. -->
    <tr valign=top>
      <td colspan=3 height=3></td>
    </tr>
  </table>

  <!-- Header navigation row. -->
  <div class="memproto">
    <table width=100% cellpadding=0 cellspacing=0 border=0>
      <tr>
        <td align=left style="padding-left: 20px"><font size=+1><b><tt><font color=#333333>//
            <a href="../../index.html"><font color=#389613>doxy</font></a>/</font>
            <a href="../../google3/index.html">google3</a>/
            <a href="../../google3/constraint_solver/index.html">constraint_solver</a>/
            </tt></b></font>
        </td>
      </tr>
    </table>
  </div>
  <br />
    <!-- No subdirs found. -->
  <!-- End of header. -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>google3/constraint_solver/element.cc</h1><a href="element_8cc.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright 2010 Google</span>
<a name="l00002"></a>00002 <span class="comment">// Licensed under the Apache License, Version 2.0 (the "License");</span>
<a name="l00003"></a>00003 <span class="comment">// you may not use this file except in compliance with the License.</span>
<a name="l00004"></a>00004 <span class="comment">// You may obtain a copy of the License at</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">//     http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Unless required by applicable law or agreed to in writing, software</span>
<a name="l00009"></a>00009 <span class="comment">// distributed under the License is distributed on an "AS IS" BASIS,</span>
<a name="l00010"></a>00010 <span class="comment">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00011"></a>00011 <span class="comment">// See the License for the specific language governing permissions and</span>
<a name="l00012"></a>00012 <span class="comment">// limitations under the License.</span>
<a name="l00013"></a>00013 
<a name="l00014"></a>00014 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00015"></a>00015 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 <span class="preprocessor">#include "base/callback.h"</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include "base/integral_types.h"</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include "base/logging.h"</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include "base/scoped_ptr.h"</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include "base/stringprintf.h"</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include "<a class="code" href="constraint__solveri_8h.html">constraint_solver/constraint_solveri.h</a>"</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="keyword">namespace </span>operations_research {
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="comment">// ----- IntExprElement -----</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 IntVar* <a class="code" href="namespaceoperations__research.html#410fbe357429cf20f223cfda08a596ce" title="IntExprElement.">BuildDomainIntVar</a>(Solver* <span class="keyword">const</span> s,
<a name="l00029"></a>00029                           <span class="keyword">const</span> int64* <span class="keyword">const</span> values,
<a name="l00030"></a>00030                           <span class="keywordtype">int</span> size,
<a name="l00031"></a>00031                           <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; name);
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="keywordtype">void</span> <a class="code" href="namespaceoperations__research.html#e3a98f9c2023f21d02dcbaa9b90cb0df">LinkVarExpr</a>(Solver* <span class="keyword">const</span> s, IntExpr* <span class="keyword">const</span> expr, IntVar* <span class="keyword">const</span> var);
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="comment">// ----- BaseIntExprElement -----</span>
<a name="l00036"></a>00036 
<a name="l00037"></a><a class="code" href="classoperations__research_1_1BaseIntExprElement.html">00037</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1BaseIntExprElement.html" title="BaseIntExprElement.">BaseIntExprElement</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1BaseIntExpr.html" title="This is the base class for all non-variable expressions.">BaseIntExpr</a> {
<a name="l00038"></a>00038  <span class="keyword">public</span>:
<a name="l00039"></a>00039   <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#d26399a0b727ce4d1ca2d63ab587f4bc">BaseIntExprElement</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> expr);
<a name="l00040"></a><a class="code" href="classoperations__research_1_1BaseIntExprElement.html#cab55db029846a2e9be6138c843f5b48">00040</a>   <span class="keyword">virtual</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#cab55db029846a2e9be6138c843f5b48">~BaseIntExprElement</a>() {}
<a name="l00041"></a>00041   <span class="keyword">virtual</span> int64 <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#d116eeaf39b8e4d152fcf930bc20bb6a">Min</a>() <span class="keyword">const</span>;
<a name="l00042"></a>00042   <span class="keyword">virtual</span> int64 <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#96fe9af589df988c2faa001e6210067b">Max</a>() <span class="keyword">const</span>;
<a name="l00043"></a>00043   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#b0da04204da55410f574a2961c3fa746" title="By default calls Min() and Max(), but can be redefined when Min and Max code can...">Range</a>(int64* mi, int64* ma);
<a name="l00044"></a>00044   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#a6c6f34b7949fc4cadf6bcf29aa99cd5">SetMin</a>(int64 m);
<a name="l00045"></a>00045   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#8408a7793fc326636e79af23689577d8">SetMax</a>(int64 m);
<a name="l00046"></a>00046   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#a5f87560875926367d7f11df603be14e" title="This method sets both the min and the max of the expression.">SetRange</a>(int64 mi, int64 ma);
<a name="l00047"></a><a class="code" href="classoperations__research_1_1BaseIntExprElement.html#f0db674216713bd1a77423ccf24a7136">00047</a>   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#f0db674216713bd1a77423ccf24a7136" title="Returns true if the min and the max of the expression are equal.">Bound</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (<a class="code" href="classoperations__research_1_1BaseIntExprElement.html#aa4b2aaca596398f622d500fa44804f1">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#b2eb094c29f2bdbce94d82a84b16e888" title="Returns true if the min and the max of the expression are equal.">Bound</a>()); }
<a name="l00048"></a>00048   <span class="comment">// TODO(user) : improve me, the previous test is not always true</span>
<a name="l00049"></a><a class="code" href="classoperations__research_1_1BaseIntExprElement.html#3beec41336409f9053ba9d82bec89a6a">00049</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#3beec41336409f9053ba9d82bec89a6a">WhenRange</a>(<a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d) {
<a name="l00050"></a>00050     <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#aa4b2aaca596398f622d500fa44804f1">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#845a3c3c71323504f6b59f9c0ea46b08" title="Attach a demon that will watch the min or the max of the expression.">WhenRange</a>(d);
<a name="l00051"></a>00051   }
<a name="l00052"></a>00052  <span class="keyword">protected</span>:
<a name="l00053"></a>00053   <span class="keyword">virtual</span> int64 <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#c1351120962df9b69ebd832583936b88">ElementValue</a>(<span class="keywordtype">int</span> index) <span class="keyword">const</span> = 0;
<a name="l00054"></a>00054   <span class="keyword">virtual</span> int64 <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#2ddfb410da416321c5ed29642c713df0">ExprMin</a>() <span class="keyword">const</span> = 0;
<a name="l00055"></a>00055   <span class="keyword">virtual</span> int64 <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#2181b09b3fd759d7763d39b15ff2f15f">ExprMax</a>() <span class="keyword">const</span> = 0;
<a name="l00056"></a>00056 
<a name="l00057"></a><a class="code" href="classoperations__research_1_1BaseIntExprElement.html#aa4b2aaca596398f622d500fa44804f1">00057</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#aa4b2aaca596398f622d500fa44804f1">expr_</a>;
<a name="l00058"></a>00058  <span class="keyword">private</span>:
<a name="l00059"></a>00059   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#77c4cda8447acce71d039bc57c80e5ae">UpdateSupports</a>() <span class="keyword">const</span>;
<a name="l00060"></a>00060 
<a name="l00061"></a><a class="code" href="classoperations__research_1_1BaseIntExprElement.html#944695a358bb9d1c4bfa50f08fcf55cc">00061</a>   <span class="keyword">mutable</span> int64 <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#944695a358bb9d1c4bfa50f08fcf55cc">min_</a>;
<a name="l00062"></a><a class="code" href="classoperations__research_1_1BaseIntExprElement.html#0e21d1c747a4139a17cc189e27134af4">00062</a>   <span class="keyword">mutable</span> <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#0e21d1c747a4139a17cc189e27134af4">min_support_</a>;
<a name="l00063"></a><a class="code" href="classoperations__research_1_1BaseIntExprElement.html#d222724658fbf379fc968647c4ea0df9">00063</a>   <span class="keyword">mutable</span> int64 <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#d222724658fbf379fc968647c4ea0df9">max_</a>;
<a name="l00064"></a><a class="code" href="classoperations__research_1_1BaseIntExprElement.html#7a6eee5db86ee170649960e16eb3580c">00064</a>   <span class="keyword">mutable</span> <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#7a6eee5db86ee170649960e16eb3580c">max_support_</a>;
<a name="l00065"></a><a class="code" href="classoperations__research_1_1BaseIntExprElement.html#08f420dcbf3fe4e221e2efa6576d1157">00065</a>   <span class="keyword">mutable</span> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#08f420dcbf3fe4e221e2efa6576d1157">initial_update_</a>;
<a name="l00066"></a><a class="code" href="classoperations__research_1_1BaseIntExprElement.html#88e3a8398781435abb3b60d1a36a9bb1">00066</a>   <a class="code" href="classoperations__research_1_1IntVarIterator.html" title="The class Iterator has two direct subclasses.">IntVarIterator</a>* <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#88e3a8398781435abb3b60d1a36a9bb1">expr_iterator_</a>;
<a name="l00067"></a>00067 };
<a name="l00068"></a>00068 
<a name="l00069"></a><a class="code" href="classoperations__research_1_1BaseIntExprElement.html#d26399a0b727ce4d1ca2d63ab587f4bc">00069</a> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#d26399a0b727ce4d1ca2d63ab587f4bc">BaseIntExprElement::BaseIntExprElement</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> e)
<a name="l00070"></a>00070     : <a class="code" href="classoperations__research_1_1BaseIntExpr.html" title="This is the base class for all non-variable expressions.">BaseIntExpr</a>(s),
<a name="l00071"></a>00071       expr_(e),
<a name="l00072"></a>00072       min_(0),
<a name="l00073"></a>00073       min_support_(-1),
<a name="l00074"></a>00074       max_(0),
<a name="l00075"></a>00075       max_support_(-1),
<a name="l00076"></a>00076       initial_update_(true),
<a name="l00077"></a>00077       expr_iterator_(expr_-&gt;MakeDomainIterator(true)) {}
<a name="l00078"></a>00078 
<a name="l00079"></a><a class="code" href="classoperations__research_1_1BaseIntExprElement.html#d116eeaf39b8e4d152fcf930bc20bb6a">00079</a> int64 BaseIntExprElement::Min()<span class="keyword"> const </span>{
<a name="l00080"></a>00080   <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#77c4cda8447acce71d039bc57c80e5ae">UpdateSupports</a>();
<a name="l00081"></a>00081   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#944695a358bb9d1c4bfa50f08fcf55cc">min_</a>;
<a name="l00082"></a>00082 }
<a name="l00083"></a>00083 
<a name="l00084"></a><a class="code" href="classoperations__research_1_1BaseIntExprElement.html#96fe9af589df988c2faa001e6210067b">00084</a> int64 <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#96fe9af589df988c2faa001e6210067b">BaseIntExprElement::Max</a>()<span class="keyword"> const </span>{
<a name="l00085"></a>00085   <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#77c4cda8447acce71d039bc57c80e5ae">UpdateSupports</a>();
<a name="l00086"></a>00086   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#d222724658fbf379fc968647c4ea0df9">max_</a>;
<a name="l00087"></a>00087 }
<a name="l00088"></a>00088 
<a name="l00089"></a><a class="code" href="classoperations__research_1_1BaseIntExprElement.html#b0da04204da55410f574a2961c3fa746">00089</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#b0da04204da55410f574a2961c3fa746" title="By default calls Min() and Max(), but can be redefined when Min and Max code can...">BaseIntExprElement::Range</a>(int64* mi, int64* ma) {
<a name="l00090"></a>00090   <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#77c4cda8447acce71d039bc57c80e5ae">UpdateSupports</a>();
<a name="l00091"></a>00091   *mi = <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#944695a358bb9d1c4bfa50f08fcf55cc">min_</a>;
<a name="l00092"></a>00092   *ma = <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#d222724658fbf379fc968647c4ea0df9">max_</a>;
<a name="l00093"></a>00093 }
<a name="l00094"></a>00094 
<a name="l00095"></a><a class="code" href="element_8cc.html#e40d2ccaf13a8f831331ba8be7115994">00095</a> <span class="preprocessor">#define UPDATE_BASE_ELEMENT_INDEX_BOUNDS(test)  \</span>
<a name="l00096"></a>00096 <span class="preprocessor">  const int64 emin = ExprMin();                 \</span>
<a name="l00097"></a>00097 <span class="preprocessor">  const int64 emax = ExprMax();                 \</span>
<a name="l00098"></a>00098 <span class="preprocessor">  int64 nmin = emin;                            \</span>
<a name="l00099"></a>00099 <span class="preprocessor">  int64 value = ElementValue(nmin);             \</span>
<a name="l00100"></a>00100 <span class="preprocessor">  while (nmin &lt; emax &amp;&amp; test) {                 \</span>
<a name="l00101"></a>00101 <span class="preprocessor">    nmin++;                                     \</span>
<a name="l00102"></a>00102 <span class="preprocessor">    value = ElementValue(nmin);                 \</span>
<a name="l00103"></a>00103 <span class="preprocessor">  }                                             \</span>
<a name="l00104"></a>00104 <span class="preprocessor">  if (nmin == emax &amp;&amp; test) {                   \</span>
<a name="l00105"></a>00105 <span class="preprocessor">    solver()-&gt;Fail();                           \</span>
<a name="l00106"></a>00106 <span class="preprocessor">  }                                             \</span>
<a name="l00107"></a>00107 <span class="preprocessor">  int64 nmax = emax;                            \</span>
<a name="l00108"></a>00108 <span class="preprocessor">  value = ElementValue(nmax);                   \</span>
<a name="l00109"></a>00109 <span class="preprocessor">  while (nmax &gt;= nmin &amp;&amp; test) {                \</span>
<a name="l00110"></a>00110 <span class="preprocessor">    nmax--;                                     \</span>
<a name="l00111"></a>00111 <span class="preprocessor">    value = ElementValue(nmax);                 \</span>
<a name="l00112"></a>00112 <span class="preprocessor">  }                                             \</span>
<a name="l00113"></a>00113 <span class="preprocessor">  expr_-&gt;SetRange(nmin, nmax);</span>
<a name="l00114"></a>00114 <span class="preprocessor"></span>
<a name="l00115"></a><a class="code" href="classoperations__research_1_1BaseIntExprElement.html#a6c6f34b7949fc4cadf6bcf29aa99cd5">00115</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#a6c6f34b7949fc4cadf6bcf29aa99cd5">BaseIntExprElement::SetMin</a>(int64 m) {
<a name="l00116"></a>00116   <a class="code" href="element_8cc.html#e40d2ccaf13a8f831331ba8be7115994">UPDATE_BASE_ELEMENT_INDEX_BOUNDS</a>(value &lt; m);
<a name="l00117"></a>00117 }
<a name="l00118"></a>00118 
<a name="l00119"></a><a class="code" href="classoperations__research_1_1BaseIntExprElement.html#8408a7793fc326636e79af23689577d8">00119</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#8408a7793fc326636e79af23689577d8">BaseIntExprElement::SetMax</a>(int64 m) {
<a name="l00120"></a>00120   <a class="code" href="element_8cc.html#e40d2ccaf13a8f831331ba8be7115994">UPDATE_BASE_ELEMENT_INDEX_BOUNDS</a>(value &gt; m);
<a name="l00121"></a>00121 }
<a name="l00122"></a>00122 
<a name="l00123"></a><a class="code" href="classoperations__research_1_1BaseIntExprElement.html#a5f87560875926367d7f11df603be14e">00123</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#a5f87560875926367d7f11df603be14e" title="This method sets both the min and the max of the expression.">BaseIntExprElement::SetRange</a>(int64 mi, int64 ma) {
<a name="l00124"></a>00124   <span class="keywordflow">if</span> (mi &gt; ma) {
<a name="l00125"></a>00125     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l00126"></a>00126   }
<a name="l00127"></a>00127   <a class="code" href="element_8cc.html#e40d2ccaf13a8f831331ba8be7115994">UPDATE_BASE_ELEMENT_INDEX_BOUNDS</a>((value &lt; mi || value &gt; ma));
<a name="l00128"></a>00128 }
<a name="l00129"></a>00129 
<a name="l00130"></a>00130 <span class="preprocessor">#undef UPDATE_BASE_ELEMENT_INDEX_BOUNDS</span>
<a name="l00131"></a>00131 <span class="preprocessor"></span>
<a name="l00132"></a><a class="code" href="classoperations__research_1_1BaseIntExprElement.html#77c4cda8447acce71d039bc57c80e5ae">00132</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#77c4cda8447acce71d039bc57c80e5ae">BaseIntExprElement::UpdateSupports</a>()<span class="keyword"> const </span>{
<a name="l00133"></a>00133   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1BaseIntExprElement.html#08f420dcbf3fe4e221e2efa6576d1157">initial_update_</a>
<a name="l00134"></a>00134       || !<a class="code" href="classoperations__research_1_1BaseIntExprElement.html#aa4b2aaca596398f622d500fa44804f1">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#6e297b67956343bed8a4aece6a2c88a3" title="This method returns wether the value &amp;#39;v&amp;#39; is in the domain of the variable...">Contains</a>(<a class="code" href="classoperations__research_1_1BaseIntExprElement.html#0e21d1c747a4139a17cc189e27134af4">min_support_</a>)
<a name="l00135"></a>00135       || !<a class="code" href="classoperations__research_1_1BaseIntExprElement.html#aa4b2aaca596398f622d500fa44804f1">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#6e297b67956343bed8a4aece6a2c88a3" title="This method returns wether the value &amp;#39;v&amp;#39; is in the domain of the variable...">Contains</a>(<a class="code" href="classoperations__research_1_1BaseIntExprElement.html#7a6eee5db86ee170649960e16eb3580c">max_support_</a>)) {
<a name="l00136"></a>00136     <span class="keyword">const</span> int64 emin = <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#2ddfb410da416321c5ed29642c713df0">ExprMin</a>();
<a name="l00137"></a>00137     <span class="keyword">const</span> int64 emax = <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#2181b09b3fd759d7763d39b15ff2f15f">ExprMax</a>();
<a name="l00138"></a>00138     int64 min_value = <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#c1351120962df9b69ebd832583936b88">ElementValue</a>(emax);
<a name="l00139"></a>00139     int64 max_value = min_value;
<a name="l00140"></a>00140     <span class="keywordtype">int</span> min_support = emax;
<a name="l00141"></a>00141     <span class="keywordtype">int</span> max_support = emax;
<a name="l00142"></a>00142     <span class="keywordflow">for</span> (<a class="code" href="classoperations__research_1_1BaseIntExprElement.html#88e3a8398781435abb3b60d1a36a9bb1">expr_iterator_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#c5e717b4d80a83e797fd6f996f040f8c" title="This method must be called before each loop.">Init</a>(); <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#88e3a8398781435abb3b60d1a36a9bb1">expr_iterator_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#35ab3d4e05e41e87312043b3fbb803f4" title="This method indicates if we can call Value() or not.">Ok</a>(); <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#88e3a8398781435abb3b60d1a36a9bb1">expr_iterator_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#7d3ca63d1636290367162ad3fb4f5157" title="This method moves the iterator to the next value.">Next</a>()) {
<a name="l00143"></a>00143       <span class="keyword">const</span> int64 index = <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#88e3a8398781435abb3b60d1a36a9bb1">expr_iterator_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#8cd71554efc9460ca2319bbe79574ffa" title="This method returns the value of the hole.">Value</a>();
<a name="l00144"></a>00144       <span class="keywordflow">if</span> (index &gt;= emin &amp;&amp; index &lt;= emax) {
<a name="l00145"></a>00145         <span class="keyword">const</span> int64 value = <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#c1351120962df9b69ebd832583936b88">ElementValue</a>(index);
<a name="l00146"></a>00146         <span class="keywordflow">if</span> (value &gt; max_value) {
<a name="l00147"></a>00147           max_value = value;
<a name="l00148"></a>00148           max_support = index;
<a name="l00149"></a>00149         } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (value &lt; min_value) {
<a name="l00150"></a>00150           min_value = value;
<a name="l00151"></a>00151           min_support = index;
<a name="l00152"></a>00152         }
<a name="l00153"></a>00153       }
<a name="l00154"></a>00154     }
<a name="l00155"></a>00155     <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* s = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>();
<a name="l00156"></a>00156     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1BaseIntExprElement.html#944695a358bb9d1c4bfa50f08fcf55cc">min_</a>, min_value);
<a name="l00157"></a>00157     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1BaseIntExprElement.html#0e21d1c747a4139a17cc189e27134af4">min_support_</a>, min_support);
<a name="l00158"></a>00158     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1BaseIntExprElement.html#d222724658fbf379fc968647c4ea0df9">max_</a>, max_value);
<a name="l00159"></a>00159     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1BaseIntExprElement.html#7a6eee5db86ee170649960e16eb3580c">max_support_</a>, max_support);
<a name="l00160"></a>00160     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1BaseIntExprElement.html#08f420dcbf3fe4e221e2efa6576d1157">initial_update_</a>, <span class="keyword">false</span>);
<a name="l00161"></a>00161   }
<a name="l00162"></a>00162 }
<a name="l00163"></a>00163 
<a name="l00164"></a>00164 <span class="comment">// ----- IntElementConstraint -----</span>
<a name="l00165"></a>00165 
<a name="l00166"></a>00166 <span class="comment">// This constraint implements 'elem' == 'values'['index'].</span>
<a name="l00167"></a>00167 <span class="comment">// It scans the bounds of 'elem' to propagate on the domain of 'index'.</span>
<a name="l00168"></a>00168 <span class="comment">// It scans the domain of 'index' to compute the new bounds of 'elem'.</span>
<a name="l00169"></a><a class="code" href="classoperations__research_1_1IntElementConstraint.html">00169</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1IntElementConstraint.html" title="IntElementConstraint.">IntElementConstraint</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a> {
<a name="l00170"></a>00170  <span class="keyword">public</span>:
<a name="l00171"></a><a class="code" href="classoperations__research_1_1IntElementConstraint.html#b65018e0ee080750e53732ad6eceb263">00171</a>   <a class="code" href="classoperations__research_1_1IntElementConstraint.html" title="IntElementConstraint.">IntElementConstraint</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00172"></a>00172                        <span class="keyword">const</span> int64* <span class="keyword">const</span> values,
<a name="l00173"></a>00173                        <span class="keywordtype">int</span> size,
<a name="l00174"></a>00174                        <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> index,
<a name="l00175"></a>00175                        <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> elem)
<a name="l00176"></a>00176       : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s),
<a name="l00177"></a>00177         values_(new int64[size]),
<a name="l00178"></a>00178         size_(size),
<a name="l00179"></a>00179         index_(index),
<a name="l00180"></a>00180         elem_(elem),
<a name="l00181"></a>00181         index_iterator_(index_-&gt;MakeDomainIterator(true)) {
<a name="l00182"></a>00182     CHECK_NOTNULL(values);
<a name="l00183"></a>00183     CHECK_NOTNULL(index);
<a name="l00184"></a>00184     CHECK_NOTNULL(elem);
<a name="l00185"></a>00185     memcpy(values_.get(), values, size_ * <span class="keyword">sizeof</span>(*values));
<a name="l00186"></a>00186   }
<a name="l00187"></a>00187 
<a name="l00188"></a><a class="code" href="classoperations__research_1_1IntElementConstraint.html#6f3825f92f1e78b0c6d1378a310daf2e">00188</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Post() {
<a name="l00189"></a>00189     <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* <span class="keyword">const</span> d =
<a name="l00190"></a>00190         <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#d0a8c964ae9e7618ad447207c052ee5c">MakeDelayedConstraintInitialPropagateCallback</a>(<span class="keyword">this</span>);
<a name="l00191"></a>00191     index_-&gt;WhenDomain(d);
<a name="l00192"></a>00192     elem_-&gt;WhenRange(d);
<a name="l00193"></a>00193   }
<a name="l00194"></a>00194 
<a name="l00195"></a><a class="code" href="classoperations__research_1_1IntElementConstraint.html#812ab22f35b48ac7a08f48038d1ece08">00195</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> InitialPropagate() {
<a name="l00196"></a>00196     index_-&gt;SetRange(0, size_ - 1);
<a name="l00197"></a>00197     <span class="keyword">const</span> int64 elem_min = elem_-&gt;Min();
<a name="l00198"></a>00198     <span class="keyword">const</span> int64 elem_max = elem_-&gt;Max();
<a name="l00199"></a>00199     int64 new_min = elem_max;
<a name="l00200"></a>00200     int64 new_max = elem_min;
<a name="l00201"></a>00201     to_remove_.clear();
<a name="l00202"></a>00202     <span class="keywordflow">for</span> (index_iterator_-&gt;Init();
<a name="l00203"></a>00203          index_iterator_-&gt;Ok();
<a name="l00204"></a>00204          index_iterator_-&gt;Next()) {
<a name="l00205"></a>00205       <span class="keyword">const</span> int64 index = index_iterator_-&gt;Value();
<a name="l00206"></a>00206       <span class="keyword">const</span> int64 value = values_[index];
<a name="l00207"></a>00207       <span class="keywordflow">if</span> (value &lt; elem_min || value &gt; elem_max) {
<a name="l00208"></a>00208         to_remove_.push_back(index);
<a name="l00209"></a>00209       } <span class="keywordflow">else</span> {
<a name="l00210"></a>00210         <span class="keywordflow">if</span> (value &lt; new_min) {
<a name="l00211"></a>00211           new_min = value;
<a name="l00212"></a>00212         }
<a name="l00213"></a>00213         <span class="keywordflow">if</span> (value &gt; new_max) {
<a name="l00214"></a>00214           new_max = value;
<a name="l00215"></a>00215         }
<a name="l00216"></a>00216       }
<a name="l00217"></a>00217     }
<a name="l00218"></a>00218     elem_-&gt;SetRange(new_min, new_max);
<a name="l00219"></a>00219     <span class="keywordflow">if</span> (!to_remove_.empty()) {
<a name="l00220"></a>00220       index_-&gt;RemoveValues(to_remove_);
<a name="l00221"></a>00221     }
<a name="l00222"></a>00222   }
<a name="l00223"></a>00223 
<a name="l00224"></a><a class="code" href="classoperations__research_1_1IntElementConstraint.html#0e832109f95270e7e7875845621e8e7b">00224</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#fc971d7ca0617641f29e7e510e98a767">DebugString</a>()<span class="keyword"> const </span>{
<a name="l00225"></a>00225     <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"IntElementConstraint(values, %d, %s, %s)"</span>,
<a name="l00226"></a>00226                         size_,
<a name="l00227"></a>00227                         index_-&gt;DebugString().c_str(),
<a name="l00228"></a>00228                         elem_-&gt;DebugString().c_str());
<a name="l00229"></a>00229   }
<a name="l00230"></a>00230  <span class="keyword">private</span>:
<a name="l00231"></a><a class="code" href="classoperations__research_1_1IntElementConstraint.html#93175cadc6e4ea5c554be705043da580">00231</a>   scoped_array&lt;int64&gt; values_;
<a name="l00232"></a><a class="code" href="classoperations__research_1_1IntElementConstraint.html#d41c066b80054e5f6f8f30a914f7a9c1">00232</a>   <span class="keyword">const</span> <span class="keywordtype">int</span> size_;
<a name="l00233"></a><a class="code" href="classoperations__research_1_1IntElementConstraint.html#518a1c8a8bd5d183226f2c1c27ef3101">00233</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> index_;
<a name="l00234"></a><a class="code" href="classoperations__research_1_1IntElementConstraint.html#1fb6381a6bcd01be0d2401222d526c7a">00234</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> elem_;
<a name="l00235"></a><a class="code" href="classoperations__research_1_1IntElementConstraint.html#10c0bad9d14813933a3786bb119563f4">00235</a>   <a class="code" href="classoperations__research_1_1IntVarIterator.html" title="The class Iterator has two direct subclasses.">IntVarIterator</a>* <span class="keyword">const</span> index_iterator_;
<a name="l00236"></a><a class="code" href="classoperations__research_1_1IntElementConstraint.html#7302d68dddcf55da035eb1041f7be231">00236</a>   vector&lt;int64&gt; to_remove_;
<a name="l00237"></a>00237 };
<a name="l00238"></a>00238 
<a name="l00239"></a>00239 <span class="comment">// ----- IntExprElement</span>
<a name="l00240"></a>00240 
<a name="l00241"></a><a class="code" href="classoperations__research_1_1IntExprElement.html">00241</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1IntExprElement.html" title="IntExprElement.">IntExprElement</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html" title="BaseIntExprElement.">BaseIntExprElement</a> {
<a name="l00242"></a>00242  <span class="keyword">public</span>:
<a name="l00243"></a>00243   <a class="code" href="classoperations__research_1_1IntExprElement.html" title="IntExprElement.">IntExprElement</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <span class="keyword">const</span> int64* <span class="keyword">const</span> vals, <span class="keywordtype">int</span> size,
<a name="l00244"></a>00244                  <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> expr);
<a name="l00245"></a>00245   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1IntExprElement.html" title="IntExprElement.">IntExprElement</a>();
<a name="l00246"></a><a class="code" href="classoperations__research_1_1IntExprElement.html#eaa8d221d3cab16a01f473da51582f0f">00246</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#89b827a71613c6c120d5ac326202df7e" title="Naming.">name</a>()<span class="keyword"> const </span>{
<a name="l00247"></a>00247     <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"IntElement(values, %s)"</span>, <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#aa4b2aaca596398f622d500fa44804f1">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#89b827a71613c6c120d5ac326202df7e" title="Naming.">name</a>().c_str());
<a name="l00248"></a>00248   }
<a name="l00249"></a><a class="code" href="classoperations__research_1_1IntExprElement.html#cf249fb97c976a93ef254b78ed3ed76a">00249</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#fc971d7ca0617641f29e7e510e98a767">DebugString</a>()<span class="keyword"> const </span>{
<a name="l00250"></a>00250     <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"IntElement(values, %d, %s)"</span>,
<a name="l00251"></a>00251                         size_, <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#aa4b2aaca596398f622d500fa44804f1">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#fc971d7ca0617641f29e7e510e98a767">DebugString</a>().c_str());
<a name="l00252"></a>00252   }
<a name="l00253"></a><a class="code" href="classoperations__research_1_1IntExprElement.html#3a2c530a29633c12a9f49355a774b5b8">00253</a>   <span class="keyword">virtual</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <a class="code" href="classoperations__research_1_1BaseIntExpr.html#1d4d6a63140435221e0dfcaf913d6ffb">CastToVar</a>() {
<a name="l00254"></a>00254     <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>();
<a name="l00255"></a>00255     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var = <a class="code" href="namespaceoperations__research.html#410fbe357429cf20f223cfda08a596ce" title="IntExprElement.">BuildDomainIntVar</a>(s, values_, size_, <span class="stringliteral">""</span>);
<a name="l00256"></a>00256     <a class="code" href="classoperations__research_1_1BaseIntExpr.html#df31ce654e47f0a049a4a17db94631b5">AddDelegateName</a>(<span class="stringliteral">"Var"</span>, var);
<a name="l00257"></a>00257     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#9c522a6cff91adae19af5cce7d8e411f" title="propagation">AddConstraint</a>(s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1IntElementConstraint.html" title="IntElementConstraint.">IntElementConstraint</a>(s,
<a name="l00258"></a>00258                                                           values_,
<a name="l00259"></a>00259                                                           size_,
<a name="l00260"></a>00260                                                           <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#aa4b2aaca596398f622d500fa44804f1">expr_</a>,
<a name="l00261"></a>00261                                                           var)));
<a name="l00262"></a>00262     <span class="keywordflow">return</span> var;
<a name="l00263"></a>00263   }
<a name="l00264"></a>00264  <span class="keyword">protected</span>:
<a name="l00265"></a><a class="code" href="classoperations__research_1_1IntExprElement.html#1b9bbe3ecf9018d2bb095fd8193530ef">00265</a>   <span class="keyword">virtual</span> int64 <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#c1351120962df9b69ebd832583936b88">ElementValue</a>(<span class="keywordtype">int</span> index)<span class="keyword"> const </span>{
<a name="l00266"></a>00266     DCHECK_LT(index, size_);
<a name="l00267"></a>00267     <span class="keywordflow">return</span> values_[index];
<a name="l00268"></a>00268   }
<a name="l00269"></a><a class="code" href="classoperations__research_1_1IntExprElement.html#e789ae62d3402aec57d3559fde579777">00269</a>   <span class="keyword">virtual</span> int64 <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#2ddfb410da416321c5ed29642c713df0">ExprMin</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> max(0LL, <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#aa4b2aaca596398f622d500fa44804f1">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>()); }
<a name="l00270"></a><a class="code" href="classoperations__research_1_1IntExprElement.html#b922b8b21a39f4ecabc0237826c9c34a">00270</a>   <span class="keyword">virtual</span> int64 <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#2181b09b3fd759d7763d39b15ff2f15f">ExprMax</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> min(size_ - 1LL, <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#aa4b2aaca596398f622d500fa44804f1">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>()); }
<a name="l00271"></a>00271  <span class="keyword">private</span>:
<a name="l00272"></a><a class="code" href="classoperations__research_1_1IntExprElement.html#1738453b6305eb1743eea726366b8afe">00272</a>   int64* <span class="keyword">const</span> values_;
<a name="l00273"></a><a class="code" href="classoperations__research_1_1IntExprElement.html#d60900fb7ec02f8f6d905eff347c1c8d">00273</a>   <span class="keyword">const</span> <span class="keywordtype">int</span> size_;
<a name="l00274"></a>00274 };
<a name="l00275"></a>00275 
<a name="l00276"></a><a class="code" href="classoperations__research_1_1IntExprElement.html#145245690f6def60a1fa27751eaab809">00276</a> <a class="code" href="classoperations__research_1_1IntExprElement.html#145245690f6def60a1fa27751eaab809">IntExprElement::IntExprElement</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00277"></a>00277                                <span class="keyword">const</span> int64* <span class="keyword">const</span> vals,
<a name="l00278"></a>00278                                <span class="keywordtype">int</span> size,
<a name="l00279"></a>00279                                <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> e)
<a name="l00280"></a>00280     : <a class="code" href="classoperations__research_1_1BaseIntExprElement.html" title="BaseIntExprElement.">BaseIntExprElement</a>(s, e), values_(new int64[size]), size_(size) {
<a name="l00281"></a>00281   CHECK(vals) &lt;&lt; <span class="stringliteral">"null pointer"</span>;
<a name="l00282"></a>00282   memcpy(<a class="code" href="classoperations__research_1_1IntExprElement.html#1738453b6305eb1743eea726366b8afe">values_</a>, vals, <a class="code" href="classoperations__research_1_1IntExprElement.html#d60900fb7ec02f8f6d905eff347c1c8d">size_</a> * <span class="keyword">sizeof</span>(*vals));
<a name="l00283"></a>00283 }
<a name="l00284"></a>00284 
<a name="l00285"></a><a class="code" href="classoperations__research_1_1IntExprElement.html#7cf540bce5b4d8214f1395e491ac3523">00285</a> <a class="code" href="classoperations__research_1_1IntExprElement.html#7cf540bce5b4d8214f1395e491ac3523">IntExprElement::~IntExprElement</a>() {
<a name="l00286"></a>00286   <span class="keyword">delete</span> [] <a class="code" href="classoperations__research_1_1IntExprElement.html#1738453b6305eb1743eea726366b8afe">values_</a>;
<a name="l00287"></a>00287 }
<a name="l00288"></a>00288 
<a name="l00289"></a>00289 <span class="comment">// ----- Increasing Element -----</span>
<a name="l00290"></a>00290 
<a name="l00291"></a><a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html">00291</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html" title="Increasing Element.">IncreasingIntExprElement</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1BaseIntExpr.html" title="This is the base class for all non-variable expressions.">BaseIntExpr</a> {
<a name="l00292"></a>00292  <span class="keyword">public</span>:
<a name="l00293"></a>00293   <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html" title="Increasing Element.">IncreasingIntExprElement</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s, <span class="keyword">const</span> int64* <span class="keyword">const</span> vals, <span class="keywordtype">int</span> size,
<a name="l00294"></a>00294                  <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> index);
<a name="l00295"></a><a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#03c6b0bf06f3745238cc3716f9212a94">00295</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html" title="Increasing Element.">IncreasingIntExprElement</a>() {}
<a name="l00296"></a>00296 
<a name="l00297"></a>00297   <span class="keyword">virtual</span> int64 <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#d116eeaf39b8e4d152fcf930bc20bb6a">Min</a>() <span class="keyword">const</span>;
<a name="l00298"></a>00298   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#a6c6f34b7949fc4cadf6bcf29aa99cd5">SetMin</a>(int64 m);
<a name="l00299"></a>00299   <span class="keyword">virtual</span> int64 <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#96fe9af589df988c2faa001e6210067b">Max</a>() <span class="keyword">const</span>;
<a name="l00300"></a>00300   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#8408a7793fc326636e79af23689577d8">SetMax</a>(int64 m);
<a name="l00301"></a>00301   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#a5f87560875926367d7f11df603be14e" title="This method sets both the min and the max of the expression.">SetRange</a>(int64 mi, int64 ma);
<a name="l00302"></a><a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#4aa41c236978dd5fcf00d7f6ccd87b10">00302</a>   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#f0db674216713bd1a77423ccf24a7136" title="Returns true if the min and the max of the expression are equal.">Bound</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (index_-&gt;Bound()); }
<a name="l00303"></a>00303   <span class="comment">// TODO(user) : improve me, the previous test is not always true</span>
<a name="l00304"></a><a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#6f45099c4297310861b7404391a7b37d">00304</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1IntExprElement.html#eaa8d221d3cab16a01f473da51582f0f" title="Naming.">name</a>()<span class="keyword"> const </span>{
<a name="l00305"></a>00305     <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"IntElement(values, %s)"</span>, index_-&gt;name().c_str());
<a name="l00306"></a>00306   }
<a name="l00307"></a><a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#cac1324eb3213d2e359b8d5b407d1af0">00307</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1IntExprElement.html#cf249fb97c976a93ef254b78ed3ed76a">DebugString</a>()<span class="keyword"> const </span>{
<a name="l00308"></a>00308     <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"IntElement(values, %d, %s)"</span>,
<a name="l00309"></a>00309                         <a class="code" href="classoperations__research_1_1IntExprElement.html#d60900fb7ec02f8f6d905eff347c1c8d">size_</a>, index_-&gt;DebugString().c_str());
<a name="l00310"></a>00310   }
<a name="l00311"></a><a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#2a0618e113bf6b61df13d750197cf6b6">00311</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html#3beec41336409f9053ba9d82bec89a6a">WhenRange</a>(<a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d) {
<a name="l00312"></a>00312     index_-&gt;WhenRange(d);
<a name="l00313"></a>00313   }
<a name="l00314"></a><a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#565271195c69e822716261774d0dd413">00314</a>   <span class="keyword">virtual</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <a class="code" href="classoperations__research_1_1IntExprElement.html#3a2c530a29633c12a9f49355a774b5b8">CastToVar</a>() {
<a name="l00315"></a>00315     <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>();
<a name="l00316"></a>00316     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var = <a class="code" href="namespaceoperations__research.html#410fbe357429cf20f223cfda08a596ce" title="IntExprElement.">BuildDomainIntVar</a>(s, <a class="code" href="classoperations__research_1_1IntExprElement.html#1738453b6305eb1743eea726366b8afe">values_</a>.get(), <a class="code" href="classoperations__research_1_1IntExprElement.html#d60900fb7ec02f8f6d905eff347c1c8d">size_</a>, <span class="stringliteral">""</span>);
<a name="l00317"></a>00317     <a class="code" href="classoperations__research_1_1BaseIntExpr.html#df31ce654e47f0a049a4a17db94631b5">AddDelegateName</a>(<span class="stringliteral">"Var"</span>, var);
<a name="l00318"></a>00318     <a class="code" href="namespaceoperations__research.html#e3a98f9c2023f21d02dcbaa9b90cb0df">LinkVarExpr</a>(s, <span class="keyword">this</span>, var);
<a name="l00319"></a>00319     <span class="keywordflow">return</span> var;
<a name="l00320"></a>00320   }
<a name="l00321"></a>00321  <span class="keyword">private</span>:
<a name="l00322"></a><a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#9bdf1b7faf5b28a6aada82af6309a0f3">00322</a>   scoped_array&lt;int64&gt; <a class="code" href="classoperations__research_1_1IntExprElement.html#1738453b6305eb1743eea726366b8afe">values_</a>;
<a name="l00323"></a><a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#f874b7e60251eaaff4715290ea96b564">00323</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1IntExprElement.html#d60900fb7ec02f8f6d905eff347c1c8d">size_</a>;
<a name="l00324"></a><a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#62507f273cdb2e617e1f87b146528311">00324</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> index_;
<a name="l00325"></a>00325 };
<a name="l00326"></a>00326 
<a name="l00327"></a><a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#b7bd9714616e78ff789141e49776eb9a">00327</a> <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#b7bd9714616e78ff789141e49776eb9a">IncreasingIntExprElement::IncreasingIntExprElement</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00328"></a>00328                                                    <span class="keyword">const</span> int64* <span class="keyword">const</span> vals,
<a name="l00329"></a>00329                                                    <span class="keywordtype">int</span> size,
<a name="l00330"></a>00330                                                    <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> index)
<a name="l00331"></a>00331     : <a class="code" href="classoperations__research_1_1BaseIntExpr.html" title="This is the base class for all non-variable expressions.">BaseIntExpr</a>(s), <a class="code" href="classoperations__research_1_1IntExprElement.html#1738453b6305eb1743eea726366b8afe">values_</a>(new int64[size]),
<a name="l00332"></a>00332       <a class="code" href="classoperations__research_1_1IntExprElement.html#d60900fb7ec02f8f6d905eff347c1c8d">size_</a>(size), index_(index) {
<a name="l00333"></a>00333   DCHECK(vals);
<a name="l00334"></a>00334   DCHECK(index);
<a name="l00335"></a>00335   DCHECK_GT(size, 0);
<a name="l00336"></a>00336   DCHECK(s);
<a name="l00337"></a>00337   memcpy(<a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#9bdf1b7faf5b28a6aada82af6309a0f3">values_</a>.get(), vals, <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#f874b7e60251eaaff4715290ea96b564">size_</a> * <span class="keyword">sizeof</span>(*vals));
<a name="l00338"></a>00338 }
<a name="l00339"></a>00339 
<a name="l00340"></a><a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#c0fc804372e6d462274823660a722c49">00340</a> int64 <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#c0fc804372e6d462274823660a722c49">IncreasingIntExprElement::Min</a>()<span class="keyword"> const </span>{
<a name="l00341"></a>00341   <span class="keyword">const</span> int64 expression_min = max(0LL, <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#62507f273cdb2e617e1f87b146528311">index_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>());
<a name="l00342"></a>00342   <span class="keywordflow">return</span>  (expression_min &lt; <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#f874b7e60251eaaff4715290ea96b564">size_</a> ? <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#9bdf1b7faf5b28a6aada82af6309a0f3">values_</a>[expression_min] : kint64max);
<a name="l00343"></a>00343 }
<a name="l00344"></a>00344 
<a name="l00345"></a><a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#788dc626347f0248116663011528ada8">00345</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#788dc626347f0248116663011528ada8">IncreasingIntExprElement::SetMin</a>(int64 m) {
<a name="l00346"></a>00346   <span class="keyword">const</span> int64 expression_min = max(0LL, <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#62507f273cdb2e617e1f87b146528311">index_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>());
<a name="l00347"></a>00347   <span class="keyword">const</span> int64 expression_max = min(<a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#f874b7e60251eaaff4715290ea96b564">size_</a> - 1LL, <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#62507f273cdb2e617e1f87b146528311">index_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>());
<a name="l00348"></a>00348   <span class="keywordflow">if</span> (expression_min &gt; expression_max || m &gt; <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#9bdf1b7faf5b28a6aada82af6309a0f3">values_</a>[expression_max]) {
<a name="l00349"></a>00349     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l00350"></a>00350   }
<a name="l00351"></a>00351   int64 nmin = expression_min;
<a name="l00352"></a>00352   <span class="keywordflow">while</span> (nmin &lt;= expression_max &amp;&amp; <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#9bdf1b7faf5b28a6aada82af6309a0f3">values_</a>[nmin] &lt; m) {
<a name="l00353"></a>00353     nmin++;
<a name="l00354"></a>00354   }
<a name="l00355"></a>00355   DCHECK_LE(nmin, expression_max);
<a name="l00356"></a>00356   <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#62507f273cdb2e617e1f87b146528311">index_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#fec5a6eea8ee64fbc7fa34d7d28f8d8f">SetMin</a>(nmin);
<a name="l00357"></a>00357 }
<a name="l00358"></a>00358 
<a name="l00359"></a><a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#a86f4e5d1a9801856e742d838cfde1c5">00359</a> int64 <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#a86f4e5d1a9801856e742d838cfde1c5">IncreasingIntExprElement::Max</a>()<span class="keyword"> const </span>{
<a name="l00360"></a>00360   <span class="keyword">const</span> int64 expression_max = min(<a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#f874b7e60251eaaff4715290ea96b564">size_</a> - 1LL, <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#62507f273cdb2e617e1f87b146528311">index_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>());
<a name="l00361"></a>00361   <span class="keywordflow">return</span> (expression_max &gt;= 0 ? <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#9bdf1b7faf5b28a6aada82af6309a0f3">values_</a>[expression_max] : kint64max);
<a name="l00362"></a>00362 }
<a name="l00363"></a>00363 
<a name="l00364"></a><a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#f87eca6690efefb5cf76ab988dbc6af0">00364</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#f87eca6690efefb5cf76ab988dbc6af0">IncreasingIntExprElement::SetMax</a>(int64 m) {
<a name="l00365"></a>00365   <span class="keyword">const</span> int64 expression_min = max(0LL, <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#62507f273cdb2e617e1f87b146528311">index_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>());
<a name="l00366"></a>00366   <span class="keyword">const</span> int64 expression_max = min(<a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#f874b7e60251eaaff4715290ea96b564">size_</a> - 1LL, <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#62507f273cdb2e617e1f87b146528311">index_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>());
<a name="l00367"></a>00367   <span class="keywordflow">if</span> (expression_min &gt; expression_max || m &lt; <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#9bdf1b7faf5b28a6aada82af6309a0f3">values_</a>[expression_min]) {
<a name="l00368"></a>00368     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l00369"></a>00369   }
<a name="l00370"></a>00370   int64 nmax = expression_max;
<a name="l00371"></a>00371   <span class="keywordflow">while</span> (nmax &gt;= expression_min &amp;&amp; <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#9bdf1b7faf5b28a6aada82af6309a0f3">values_</a>[nmax] &gt; m) {
<a name="l00372"></a>00372     nmax--;
<a name="l00373"></a>00373   }
<a name="l00374"></a>00374   DCHECK_GE(nmax, expression_min);
<a name="l00375"></a>00375   <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#62507f273cdb2e617e1f87b146528311">index_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#153843dc05670b540a8e83dba2043eb0" title="This method sets both the min and the max of the expression.">SetRange</a>(expression_min, nmax);
<a name="l00376"></a>00376 }
<a name="l00377"></a>00377 
<a name="l00378"></a><a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#3a8f8b807ee9165e6b4cafbc87855193">00378</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#3a8f8b807ee9165e6b4cafbc87855193" title="This method sets both the min and the max of the expression.">IncreasingIntExprElement::SetRange</a>(int64 mi, int64 ma) {
<a name="l00379"></a>00379   <span class="keywordflow">if</span> (mi &gt; ma) {
<a name="l00380"></a>00380     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l00381"></a>00381   }
<a name="l00382"></a>00382   <span class="keyword">const</span> int64 expression_min = max(0LL, <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#62507f273cdb2e617e1f87b146528311">index_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>());
<a name="l00383"></a>00383   <span class="keyword">const</span> int64 expression_max = min(<a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#f874b7e60251eaaff4715290ea96b564">size_</a> - 1LL, <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#62507f273cdb2e617e1f87b146528311">index_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>());
<a name="l00384"></a>00384   <span class="keywordflow">if</span> (expression_min &gt; expression_max ||
<a name="l00385"></a>00385       mi &gt; <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#9bdf1b7faf5b28a6aada82af6309a0f3">values_</a>[expression_max] ||
<a name="l00386"></a>00386       ma &lt; <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#9bdf1b7faf5b28a6aada82af6309a0f3">values_</a>[expression_min]) {
<a name="l00387"></a>00387     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l00388"></a>00388   }
<a name="l00389"></a>00389   int64 nmin = expression_min;
<a name="l00390"></a>00390   <span class="keywordflow">while</span> (nmin &lt;= expression_max &amp;&amp; (<a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#9bdf1b7faf5b28a6aada82af6309a0f3">values_</a>[nmin] &lt; mi || <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#9bdf1b7faf5b28a6aada82af6309a0f3">values_</a>[nmin] &gt; ma)) {
<a name="l00391"></a>00391     nmin++;
<a name="l00392"></a>00392   }
<a name="l00393"></a>00393   DCHECK_LE(nmin, expression_max);
<a name="l00394"></a>00394   int64 nmax = expression_max;
<a name="l00395"></a>00395   <span class="keywordflow">while</span> (nmax &gt;= nmin &amp;&amp; (<a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#9bdf1b7faf5b28a6aada82af6309a0f3">values_</a>[nmax] &lt; mi || <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#9bdf1b7faf5b28a6aada82af6309a0f3">values_</a>[nmax] &gt; ma)) {
<a name="l00396"></a>00396     nmax--;
<a name="l00397"></a>00397   }
<a name="l00398"></a>00398   DCHECK_GE(nmax, expression_min);
<a name="l00399"></a>00399   <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html#62507f273cdb2e617e1f87b146528311">index_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#153843dc05670b540a8e83dba2043eb0" title="This method sets both the min and the max of the expression.">SetRange</a>(nmin, nmax);
<a name="l00400"></a>00400 }
<a name="l00401"></a>00401 
<a name="l00402"></a>00402 <span class="comment">// ----- Solver::MakeElement(int array, int var) -----</span>
<a name="l00403"></a>00403 
<a name="l00404"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02element_8cc_03.html">00404</a> <span class="keyword">namespace </span>{
<a name="l00405"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02element_8cc_03.html#b7f9bf88cd606ca0dbf1f69644dfae6b">00405</a> <span class="keywordtype">bool</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02element_8cc_03.html#b7f9bf88cd606ca0dbf1f69644dfae6b">IsConstant</a>(<span class="keyword">const</span> int64* <span class="keyword">const</span> vals, <span class="keywordtype">int</span> size) {
<a name="l00406"></a>00406   <span class="keyword">const</span> int64 val0 = vals[0];
<a name="l00407"></a>00407   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt; size; ++i) {
<a name="l00408"></a>00408     <span class="keywordflow">if</span> (vals[i] != val0) {
<a name="l00409"></a>00409       <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00410"></a>00410     }
<a name="l00411"></a>00411   }
<a name="l00412"></a>00412   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00413"></a>00413 }
<a name="l00414"></a>00414 
<a name="l00415"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02element_8cc_03.html#34339fd0ee69694eb5b4f8fd2afd5d84">00415</a> <span class="keywordtype">bool</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02element_8cc_03.html#34339fd0ee69694eb5b4f8fd2afd5d84">IsBoolean</a>(<span class="keyword">const</span> int64* <span class="keyword">const</span> vals, <span class="keywordtype">int</span> size) {
<a name="l00416"></a>00416   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {
<a name="l00417"></a>00417     <span class="keywordflow">if</span> (vals[i] &amp; ~GG_LONGLONG(1)) {
<a name="l00418"></a>00418       <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00419"></a>00419     }
<a name="l00420"></a>00420   }
<a name="l00421"></a>00421   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00422"></a>00422 }
<a name="l00423"></a>00423 
<a name="l00424"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02element_8cc_03.html#eea609e229591acfa4248f65e9efd2bf">00424</a> <span class="keywordtype">bool</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02element_8cc_03.html#eea609e229591acfa4248f65e9efd2bf">IsIncreasing</a>(<span class="keyword">const</span> int64* <span class="keyword">const</span> vals, <span class="keywordtype">int</span> size) {
<a name="l00425"></a>00425   int64 last = vals[0];
<a name="l00426"></a>00426   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt; size; ++i) {
<a name="l00427"></a>00427     <span class="keyword">const</span> int64 next = vals[i];
<a name="l00428"></a>00428     <span class="keywordflow">if</span> (next &lt; last) {
<a name="l00429"></a>00429       <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00430"></a>00430     }
<a name="l00431"></a>00431     last = next;
<a name="l00432"></a>00432   }
<a name="l00433"></a>00433   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00434"></a>00434 }
<a name="l00435"></a>00435 }  <span class="comment">// namespace</span>
<a name="l00436"></a>00436 
<a name="l00437"></a><a class="code" href="classoperations__research_1_1Solver.html#c4de55735fc3881482b12c577b435fbf">00437</a> <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <a class="code" href="classoperations__research_1_1Solver.html#c4de55735fc3881482b12c577b435fbf" title="vals[expr]">Solver::MakeElement</a>(<span class="keyword">const</span> int64* <span class="keyword">const</span> vals,
<a name="l00438"></a>00438                              <span class="keywordtype">int</span> size,
<a name="l00439"></a>00439                              <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> index) {
<a name="l00440"></a>00440   DCHECK(index);
<a name="l00441"></a>00441   DCHECK_EQ(<span class="keyword">this</span>, index-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00442"></a>00442   DCHECK_GT(size, 0);
<a name="l00443"></a>00443   DCHECK(vals);
<a name="l00444"></a>00444   <span class="comment">// Various checks.</span>
<a name="l00445"></a>00445   <span class="comment">// Is array constant?</span>
<a name="l00446"></a>00446   <span class="keywordflow">if</span> (<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02element_8cc_03.html#b7f9bf88cd606ca0dbf1f69644dfae6b">IsConstant</a>(vals, size)) {
<a name="l00447"></a>00447     <a class="code" href="classoperations__research_1_1Solver.html#9c522a6cff91adae19af5cce7d8e411f" title="propagation">AddConstraint</a>(<a class="code" href="classoperations__research_1_1Solver.html#a0ad8b1ab316563e36ac8c8fa6b46d65" title="(l &amp;lt;= b &amp;lt;= u)">MakeBetweenCt</a>(index, 0, size - 1));
<a name="l00448"></a>00448     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#8f027a8b96688e6728e2e9ece1441a13" title="IntConst will create a constant expression.">MakeIntConst</a>(vals[0]);
<a name="l00449"></a>00449   }
<a name="l00450"></a>00450   <span class="comment">// Is array built with booleans only?</span>
<a name="l00451"></a>00451   <span class="comment">// TODO(user): We could maintain the index of the first one.</span>
<a name="l00452"></a>00452   <span class="keywordflow">if</span> (<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02element_8cc_03.html#34339fd0ee69694eb5b4f8fd2afd5d84">IsBoolean</a>(vals, size)) {
<a name="l00453"></a>00453     vector&lt;int64&gt; ones;
<a name="l00454"></a>00454     <span class="keywordtype">int</span> first_zero = -1;
<a name="l00455"></a>00455     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {
<a name="l00456"></a>00456       <span class="keywordflow">if</span> (vals[i] == 1LL) {
<a name="l00457"></a>00457         ones.push_back(i);
<a name="l00458"></a>00458       } <span class="keywordflow">else</span> {
<a name="l00459"></a>00459         first_zero = i;
<a name="l00460"></a>00460       }
<a name="l00461"></a>00461     }
<a name="l00462"></a>00462     <span class="keywordflow">if</span> (ones.size() == 1) {
<a name="l00463"></a>00463       DCHECK_EQ(1LL, vals[ones.back()]);
<a name="l00464"></a>00464       <a class="code" href="classoperations__research_1_1Solver.html#9c522a6cff91adae19af5cce7d8e411f" title="propagation">AddConstraint</a>(<a class="code" href="classoperations__research_1_1Solver.html#a0ad8b1ab316563e36ac8c8fa6b46d65" title="(l &amp;lt;= b &amp;lt;= u)">MakeBetweenCt</a>(index, 0, size - 1));
<a name="l00465"></a>00465       <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#840c0de8978cabdfac9a0e3a9841d438" title="status var of (v == c)">MakeIsEqualCstVar</a>(index, ones.back());
<a name="l00466"></a>00466     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ones.size() == size - 1) {
<a name="l00467"></a>00467       <a class="code" href="classoperations__research_1_1Solver.html#9c522a6cff91adae19af5cce7d8e411f" title="propagation">AddConstraint</a>(<a class="code" href="classoperations__research_1_1Solver.html#a0ad8b1ab316563e36ac8c8fa6b46d65" title="(l &amp;lt;= b &amp;lt;= u)">MakeBetweenCt</a>(index, 0, size - 1));
<a name="l00468"></a>00468       <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#693c653ae6859f8c4b4a0914653f0f94" title="status var of (v != c)">MakeIsDifferentCstVar</a>(index, first_zero);
<a name="l00469"></a>00469     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ones.size() == ones.back() - ones.front() + 1) {  <span class="comment">// contiguous.</span>
<a name="l00470"></a>00470       <a class="code" href="classoperations__research_1_1Solver.html#9c522a6cff91adae19af5cce7d8e411f" title="propagation">AddConstraint</a>(<a class="code" href="classoperations__research_1_1Solver.html#a0ad8b1ab316563e36ac8c8fa6b46d65" title="(l &amp;lt;= b &amp;lt;= u)">MakeBetweenCt</a>(index, 0, size - 1));
<a name="l00471"></a>00471       <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> b = <a class="code" href="classoperations__research_1_1Solver.html#3ae2ecd6cd2eabd555cf2b3ec8a7d57d" title="MakeBoolVar will create a variable with a {0, 1} domain.">MakeBoolVar</a>(<span class="stringliteral">"ContiguousBooleanElementVar"</span>);
<a name="l00472"></a>00472       <a class="code" href="classoperations__research_1_1Solver.html#9c522a6cff91adae19af5cce7d8e411f" title="propagation">AddConstraint</a>(<a class="code" href="classoperations__research_1_1Solver.html#941a2119fa78dcf2a33ce541fd6e966b" title="b == (l &amp;lt;= v &amp;lt;= u)">MakeIsBetweenCt</a>(index, ones.front(), ones.back(), b));
<a name="l00473"></a>00473       <span class="keywordflow">return</span> b;
<a name="l00474"></a>00474     } <span class="keywordflow">else</span> {
<a name="l00475"></a>00475       <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> b = <a class="code" href="classoperations__research_1_1Solver.html#3ae2ecd6cd2eabd555cf2b3ec8a7d57d" title="MakeBoolVar will create a variable with a {0, 1} domain.">MakeBoolVar</a>(<span class="stringliteral">"NonContiguousBooleanElementVar"</span>);
<a name="l00476"></a>00476       <a class="code" href="classoperations__research_1_1Solver.html#9c522a6cff91adae19af5cce7d8e411f" title="propagation">AddConstraint</a>(<a class="code" href="classoperations__research_1_1Solver.html#a0ad8b1ab316563e36ac8c8fa6b46d65" title="(l &amp;lt;= b &amp;lt;= u)">MakeBetweenCt</a>(index, 0, size - 1));
<a name="l00477"></a>00477       <a class="code" href="classoperations__research_1_1Solver.html#9c522a6cff91adae19af5cce7d8e411f" title="propagation">AddConstraint</a>(<a class="code" href="classoperations__research_1_1Solver.html#cda6704ae832a0187fa46d9c5813fe00" title="b == (v in set)">MakeIsMemberCt</a>(index, ones, b));
<a name="l00478"></a>00478       <span class="keywordflow">return</span> b;
<a name="l00479"></a>00479     }
<a name="l00480"></a>00480   }
<a name="l00481"></a>00481   <span class="comment">// Is Array increasing</span>
<a name="l00482"></a>00482   <span class="keywordflow">if</span> (<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02element_8cc_03.html#eea609e229591acfa4248f65e9efd2bf">IsIncreasing</a>(vals, size)) {
<a name="l00483"></a>00483     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1IncreasingIntExprElement.html" title="Increasing Element.">IncreasingIntExprElement</a>(<span class="keyword">this</span>, vals, size, index));
<a name="l00484"></a>00484   }
<a name="l00485"></a>00485   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1IntExprElement.html" title="IntExprElement.">IntExprElement</a>(<span class="keyword">this</span>, vals, size, index));
<a name="l00486"></a>00486 }
<a name="l00487"></a>00487 
<a name="l00488"></a><a class="code" href="classoperations__research_1_1Solver.html#edd68c519ccc43d486cd24cb841c57d1">00488</a> <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <a class="code" href="classoperations__research_1_1Solver.html#c4de55735fc3881482b12c577b435fbf" title="vals[expr]">Solver::MakeElement</a>(<span class="keyword">const</span> vector&lt;int64&gt;&amp; vals, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> index) {
<a name="l00489"></a>00489   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#c4de55735fc3881482b12c577b435fbf" title="vals[expr]">MakeElement</a>(vals.data(), vals.size(), index);
<a name="l00490"></a>00490 }
<a name="l00491"></a>00491 
<a name="l00492"></a>00492 <span class="comment">// ----- IntExprFunctionElement -----</span>
<a name="l00493"></a>00493 
<a name="l00494"></a><a class="code" href="classoperations__research_1_1IntExprFunctionElement.html">00494</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1IntExprFunctionElement.html" title="IntExprFunctionElement.">IntExprFunctionElement</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1BaseIntExprElement.html" title="BaseIntExprElement.">BaseIntExprElement</a> {
<a name="l00495"></a>00495  <span class="keyword">public</span>:
<a name="l00496"></a>00496   <a class="code" href="classoperations__research_1_1IntExprFunctionElement.html" title="IntExprFunctionElement.">IntExprFunctionElement</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00497"></a>00497                          ResultCallback1&lt;int64, int64&gt;* values,
<a name="l00498"></a>00498                          <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> expr,
<a name="l00499"></a>00499                          <span class="keywordtype">bool</span> del);
<a name="l00500"></a>00500   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1IntExprFunctionElement.html" title="IntExprFunctionElement.">IntExprFunctionElement</a>();
<a name="l00501"></a><a class="code" href="classoperations__research_1_1IntExprFunctionElement.html#e73602dbbc55ea543772cefb703868b6">00501</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> name()<span class="keyword"> const </span>{
<a name="l00502"></a>00502     <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"IntFunctionElement(%s)"</span>, expr_-&gt;name().c_str());
<a name="l00503"></a>00503   }
<a name="l00504"></a><a class="code" href="classoperations__research_1_1IntExprFunctionElement.html#96f02c71bf3a523f8028714925ccc277">00504</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Solver.html#a7a09bf2f27ccbdc1d1d386bd94e142a" title="misc debug string.">DebugString</a>()<span class="keyword"> const </span>{
<a name="l00505"></a>00505     <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"IntFunctionElement(%s)"</span>, expr_-&gt;DebugString().c_str());
<a name="l00506"></a>00506   }
<a name="l00507"></a>00507  <span class="keyword">protected</span>:
<a name="l00508"></a><a class="code" href="classoperations__research_1_1IntExprFunctionElement.html#91807d679dc6a090b21cad9cf3870853">00508</a>   <span class="keyword">virtual</span> int64 ElementValue(<span class="keywordtype">int</span> index)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> values_-&gt;Run(index); }
<a name="l00509"></a><a class="code" href="classoperations__research_1_1IntExprFunctionElement.html#d1e506f4bccaa4550c3a52a7e4d62861">00509</a>   <span class="keyword">virtual</span> int64 ExprMin()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> expr_-&gt;Min(); }
<a name="l00510"></a><a class="code" href="classoperations__research_1_1IntExprFunctionElement.html#0b4a5f0fabbd6921e221048e56e1f1d5">00510</a>   <span class="keyword">virtual</span> int64 ExprMax()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> expr_-&gt;Max(); }
<a name="l00511"></a>00511  <span class="keyword">private</span>:
<a name="l00512"></a><a class="code" href="classoperations__research_1_1IntExprFunctionElement.html#e1cabc0e8a0cb1f021fb12fead8f954c">00512</a>   ResultCallback1&lt;int64, int64&gt;* values_;
<a name="l00513"></a><a class="code" href="classoperations__research_1_1IntExprFunctionElement.html#92d89b47d24f07a91886a05d15aeb6bb">00513</a>   <span class="keyword">const</span> <span class="keywordtype">bool</span> delete_;
<a name="l00514"></a>00514 };
<a name="l00515"></a>00515 
<a name="l00516"></a><a class="code" href="classoperations__research_1_1IntExprFunctionElement.html#acf17058cf606ef9727e86714f1a62df">00516</a> <a class="code" href="classoperations__research_1_1IntExprFunctionElement.html#acf17058cf606ef9727e86714f1a62df">IntExprFunctionElement::IntExprFunctionElement</a>(
<a name="l00517"></a>00517     <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00518"></a>00518     ResultCallback1&lt;int64, int64&gt;* values,
<a name="l00519"></a>00519     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> e,
<a name="l00520"></a>00520     <span class="keywordtype">bool</span> del)
<a name="l00521"></a>00521     : <a class="code" href="classoperations__research_1_1BaseIntExprElement.html" title="BaseIntExprElement.">BaseIntExprElement</a>(s, e),
<a name="l00522"></a>00522       values_(values),
<a name="l00523"></a>00523       delete_(del) {
<a name="l00524"></a>00524   CHECK(values) &lt;&lt; <span class="stringliteral">"null pointer"</span>;
<a name="l00525"></a>00525   values-&gt;CheckIsRepeatable();
<a name="l00526"></a>00526 }
<a name="l00527"></a>00527 
<a name="l00528"></a><a class="code" href="classoperations__research_1_1IntExprFunctionElement.html#013c8388986de4f78135c591223c639e">00528</a> <a class="code" href="classoperations__research_1_1IntExprFunctionElement.html#013c8388986de4f78135c591223c639e">IntExprFunctionElement::~IntExprFunctionElement</a>() {
<a name="l00529"></a>00529   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1IntExprFunctionElement.html#92d89b47d24f07a91886a05d15aeb6bb">delete_</a>) {
<a name="l00530"></a>00530     <span class="keyword">delete</span> <a class="code" href="classoperations__research_1_1IntExprFunctionElement.html#e1cabc0e8a0cb1f021fb12fead8f954c">values_</a>;
<a name="l00531"></a>00531   }
<a name="l00532"></a>00532 }
<a name="l00533"></a>00533 
<a name="l00534"></a><a class="code" href="classoperations__research_1_1Solver.html#23dd53d0b72f1cdd6dcf9ea20f5cedc5">00534</a> <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <a class="code" href="classoperations__research_1_1Solver.html#c4de55735fc3881482b12c577b435fbf" title="vals[expr]">Solver::MakeElement</a>(ResultCallback1&lt;int64, int64&gt;* values,
<a name="l00535"></a>00535                              <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> index) {
<a name="l00536"></a>00536   CHECK_EQ(<span class="keyword">this</span>, index-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00537"></a>00537   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1IntExprFunctionElement.html" title="IntExprFunctionElement.">IntExprFunctionElement</a>(<span class="keyword">this</span>, values, index, <span class="keyword">true</span>));
<a name="l00538"></a>00538 }
<a name="l00539"></a>00539 
<a name="l00540"></a>00540 <span class="comment">// ----- IntIntExprFunctionElement -----</span>
<a name="l00541"></a>00541 
<a name="l00542"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html">00542</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html" title="IntIntExprFunctionElement.">IntIntExprFunctionElement</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1BaseIntExpr.html" title="This is the base class for all non-variable expressions.">BaseIntExpr</a> {
<a name="l00543"></a>00543  <span class="keyword">public</span>:
<a name="l00544"></a>00544   <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html" title="IntIntExprFunctionElement.">IntIntExprFunctionElement</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00545"></a>00545                             ResultCallback2&lt;int64, int64, int64&gt;* values,
<a name="l00546"></a>00546                             <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> expr1,
<a name="l00547"></a>00547                             <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> expr2);
<a name="l00548"></a>00548   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html" title="IntIntExprFunctionElement.">IntIntExprFunctionElement</a>();
<a name="l00549"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#f6ab36bb6799d17c901d81949ece7f2b">00549</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Solver.html#a7a09bf2f27ccbdc1d1d386bd94e142a" title="misc debug string.">DebugString</a>()<span class="keyword"> const </span>{
<a name="l00550"></a>00550     <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"IntIntFunctionElement(%s,%s)"</span>,
<a name="l00551"></a>00551                         expr1_-&gt;DebugString().c_str(),
<a name="l00552"></a>00552                         expr2_-&gt;DebugString().c_str());
<a name="l00553"></a>00553   }
<a name="l00554"></a>00554   <span class="keyword">virtual</span> int64 Min() <span class="keyword">const</span>;
<a name="l00555"></a>00555   <span class="keyword">virtual</span> int64 Max() <span class="keyword">const</span>;
<a name="l00556"></a>00556   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Range(int64* mi, int64* ma);
<a name="l00557"></a>00557   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetMin(int64 m);
<a name="l00558"></a>00558   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetMax(int64 m);
<a name="l00559"></a>00559   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetRange(int64 mi, int64 ma);
<a name="l00560"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#e5f3235464b54c123fa6ce3c13e6e8da">00560</a>   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Bound()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> expr1_-&gt;Bound() &amp;&amp; expr2_-&gt;Bound(); }
<a name="l00561"></a>00561   <span class="comment">// TODO(user) : improve me, the previous test is not always true</span>
<a name="l00562"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#395535487133e3cbd8e239a5dcf1a4cf">00562</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> WhenRange(<a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d) {
<a name="l00563"></a>00563     expr1_-&gt;WhenRange(d);
<a name="l00564"></a>00564     expr2_-&gt;WhenRange(d);
<a name="l00565"></a>00565   }
<a name="l00566"></a>00566  <span class="keyword">private</span>:
<a name="l00567"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#5c2df138032e7f58da1bd755276f3157">00567</a>   int64 ElementValue(<span class="keywordtype">int</span> index1, <span class="keywordtype">int</span> index2)<span class="keyword"> const </span>{
<a name="l00568"></a>00568     <span class="keywordflow">return</span> values_-&gt;Run(index1, index2);
<a name="l00569"></a>00569   }
<a name="l00570"></a>00570   <span class="keywordtype">void</span> UpdateSupports() <span class="keyword">const</span>;
<a name="l00571"></a>00571 
<a name="l00572"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#547cdf5fe59c02cd098575ed64917e8a">00572</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> expr1_;
<a name="l00573"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#9dd82e155f9ae4251d9f2551671daf96">00573</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> expr2_;
<a name="l00574"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#32c9e4ee4ebf42d5d759e4f6c83578af">00574</a>   <span class="keyword">mutable</span> int64 min_;
<a name="l00575"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#c1adf472d1e81f198d0e7ec4e1105596">00575</a>   <span class="keyword">mutable</span> <span class="keywordtype">int</span> min_support1_;
<a name="l00576"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#232dfadcb33e87dab6e30ff60621d439">00576</a>   <span class="keyword">mutable</span> <span class="keywordtype">int</span> min_support2_;
<a name="l00577"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#357744976300bf8413808c27c3278111">00577</a>   <span class="keyword">mutable</span> int64 max_;
<a name="l00578"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#b62020efc113c675a8db795f528e2363">00578</a>   <span class="keyword">mutable</span> <span class="keywordtype">int</span> max_support1_;
<a name="l00579"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#2a47457eeeade8edee71091fe883a0b3">00579</a>   <span class="keyword">mutable</span> <span class="keywordtype">int</span> max_support2_;
<a name="l00580"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#80c6ee95232f845a28b35bcd4896a921">00580</a>   <span class="keyword">mutable</span> <span class="keywordtype">bool</span> initial_update_;
<a name="l00581"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#25906e5f8327414c952c8b4f2ce930f8">00581</a>   scoped_ptr&lt;ResultCallback2&lt;int64, int64, int64&gt; &gt; values_;
<a name="l00582"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#48f22bdccc6a756de81b2738092a5847">00582</a>   <a class="code" href="classoperations__research_1_1IntVarIterator.html" title="The class Iterator has two direct subclasses.">IntVarIterator</a>* <span class="keyword">const</span> expr1_iterator_;
<a name="l00583"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#780df52a34d8a5988626bfa3f6eaad91">00583</a>   <a class="code" href="classoperations__research_1_1IntVarIterator.html" title="The class Iterator has two direct subclasses.">IntVarIterator</a>* <span class="keyword">const</span> expr2_iterator_;
<a name="l00584"></a>00584 };
<a name="l00585"></a>00585 
<a name="l00586"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#fa4b06404fbc097b706442e4c2f25525">00586</a> <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#fa4b06404fbc097b706442e4c2f25525">IntIntExprFunctionElement::IntIntExprFunctionElement</a>(
<a name="l00587"></a>00587     <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00588"></a>00588     ResultCallback2&lt;int64, int64, int64&gt;* values,
<a name="l00589"></a>00589     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> expr1,
<a name="l00590"></a>00590     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> expr2)
<a name="l00591"></a>00591     : <a class="code" href="classoperations__research_1_1BaseIntExpr.html" title="This is the base class for all non-variable expressions.">BaseIntExpr</a>(s),
<a name="l00592"></a>00592       expr1_(expr1),
<a name="l00593"></a>00593       expr2_(expr2),
<a name="l00594"></a>00594       min_(0),
<a name="l00595"></a>00595       min_support1_(-1),
<a name="l00596"></a>00596       min_support2_(-1),
<a name="l00597"></a>00597       max_(0),
<a name="l00598"></a>00598       max_support1_(-1),
<a name="l00599"></a>00599       max_support2_(-1),
<a name="l00600"></a>00600       initial_update_(true),
<a name="l00601"></a>00601       values_(values),
<a name="l00602"></a>00602       expr1_iterator_(expr1_-&gt;MakeDomainIterator(true)),
<a name="l00603"></a>00603       expr2_iterator_(expr2_-&gt;MakeDomainIterator(true)) {
<a name="l00604"></a>00604   CHECK(values) &lt;&lt; <span class="stringliteral">"null pointer"</span>;
<a name="l00605"></a>00605   values-&gt;CheckIsRepeatable();
<a name="l00606"></a>00606 }
<a name="l00607"></a>00607 
<a name="l00608"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#585d3aa1022942a61781640acfc61ee9">00608</a> <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#585d3aa1022942a61781640acfc61ee9">IntIntExprFunctionElement::~IntIntExprFunctionElement</a>() {}
<a name="l00609"></a>00609 
<a name="l00610"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#993f1115e5da14b4840b5ff6a0bf08b2">00610</a> int64 <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#993f1115e5da14b4840b5ff6a0bf08b2">IntIntExprFunctionElement::Min</a>()<span class="keyword"> const </span>{
<a name="l00611"></a>00611   <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#020df434e4fe0ede9666a13513cc4da5">UpdateSupports</a>();
<a name="l00612"></a>00612   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#32c9e4ee4ebf42d5d759e4f6c83578af">min_</a>;
<a name="l00613"></a>00613 }
<a name="l00614"></a>00614 
<a name="l00615"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#ca256c4a6b41565c09357ec17adfbbcf">00615</a> int64 <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#ca256c4a6b41565c09357ec17adfbbcf">IntIntExprFunctionElement::Max</a>()<span class="keyword"> const </span>{
<a name="l00616"></a>00616   <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#020df434e4fe0ede9666a13513cc4da5">UpdateSupports</a>();
<a name="l00617"></a>00617   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#357744976300bf8413808c27c3278111">max_</a>;
<a name="l00618"></a>00618 }
<a name="l00619"></a>00619 
<a name="l00620"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#dc4e7da9b49f66dd198b387b5b7b7ae1">00620</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#dc4e7da9b49f66dd198b387b5b7b7ae1" title="By default calls Min() and Max(), but can be redefined when Min and Max code can...">IntIntExprFunctionElement::Range</a>(int64* lower_bound, int64* upper_bound) {
<a name="l00621"></a>00621   <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#020df434e4fe0ede9666a13513cc4da5">UpdateSupports</a>();
<a name="l00622"></a>00622   *lower_bound = <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#32c9e4ee4ebf42d5d759e4f6c83578af">min_</a>;
<a name="l00623"></a>00623   *upper_bound = <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#357744976300bf8413808c27c3278111">max_</a>;
<a name="l00624"></a>00624 }
<a name="l00625"></a>00625 
<a name="l00626"></a><a class="code" href="element_8cc.html#03fb7adebf0edf074fec98d8790c6506">00626</a> <span class="preprocessor">#define UPDATE_ELEMENT_INDEX_BOUNDS(test)       \</span>
<a name="l00627"></a>00627 <span class="preprocessor">  const int64 emin1 = expr1_-&gt;Min();            \</span>
<a name="l00628"></a>00628 <span class="preprocessor">  const int64 emax1 = expr1_-&gt;Max();            \</span>
<a name="l00629"></a>00629 <span class="preprocessor">  const int64 emin2 = expr2_-&gt;Min();            \</span>
<a name="l00630"></a>00630 <span class="preprocessor">  const int64 emax2 = expr2_-&gt;Max();            \</span>
<a name="l00631"></a>00631 <span class="preprocessor">  int64 nmin1 = emin1;                          \</span>
<a name="l00632"></a>00632 <span class="preprocessor">  bool found = false;                           \</span>
<a name="l00633"></a>00633 <span class="preprocessor">  while (nmin1 &lt;= emax1 &amp;&amp; !found) {            \</span>
<a name="l00634"></a>00634 <span class="preprocessor">    for (int i = emin2; i &lt;= emax2; ++i) {      \</span>
<a name="l00635"></a>00635 <span class="preprocessor">      int64 value = ElementValue(nmin1, i);     \</span>
<a name="l00636"></a>00636 <span class="preprocessor">      if (test) {                               \</span>
<a name="l00637"></a>00637 <span class="preprocessor">        found = true;                           \</span>
<a name="l00638"></a>00638 <span class="preprocessor">        break;                                  \</span>
<a name="l00639"></a>00639 <span class="preprocessor">      }                                         \</span>
<a name="l00640"></a>00640 <span class="preprocessor">    }                                           \</span>
<a name="l00641"></a>00641 <span class="preprocessor">    if (!found) {                               \</span>
<a name="l00642"></a>00642 <span class="preprocessor">      nmin1++;                                  \</span>
<a name="l00643"></a>00643 <span class="preprocessor">    }                                           \</span>
<a name="l00644"></a>00644 <span class="preprocessor">  }                                             \</span>
<a name="l00645"></a>00645 <span class="preprocessor">  if (nmin1 &gt; emax1) {                          \</span>
<a name="l00646"></a>00646 <span class="preprocessor">    solver()-&gt;Fail();                           \</span>
<a name="l00647"></a>00647 <span class="preprocessor">  }                                             \</span>
<a name="l00648"></a>00648 <span class="preprocessor">  int64 nmin2 = emin2;                          \</span>
<a name="l00649"></a>00649 <span class="preprocessor">  found = false;                                \</span>
<a name="l00650"></a>00650 <span class="preprocessor">  while (nmin2 &lt;= emax2 &amp;&amp; !found) {            \</span>
<a name="l00651"></a>00651 <span class="preprocessor">    for (int i = emin1; i &lt;= emax1; ++i) {      \</span>
<a name="l00652"></a>00652 <span class="preprocessor">      int64 value = ElementValue(i, nmin2);     \</span>
<a name="l00653"></a>00653 <span class="preprocessor">      if (test) {                               \</span>
<a name="l00654"></a>00654 <span class="preprocessor">        found = true;                           \</span>
<a name="l00655"></a>00655 <span class="preprocessor">        break;                                  \</span>
<a name="l00656"></a>00656 <span class="preprocessor">      }                                         \</span>
<a name="l00657"></a>00657 <span class="preprocessor">    }                                           \</span>
<a name="l00658"></a>00658 <span class="preprocessor">    if (!found) {                               \</span>
<a name="l00659"></a>00659 <span class="preprocessor">      nmin2++;                                  \</span>
<a name="l00660"></a>00660 <span class="preprocessor">    }                                           \</span>
<a name="l00661"></a>00661 <span class="preprocessor">  }                                             \</span>
<a name="l00662"></a>00662 <span class="preprocessor">  if (nmin2 &gt; emax2) {                          \</span>
<a name="l00663"></a>00663 <span class="preprocessor">    solver()-&gt;Fail();                           \</span>
<a name="l00664"></a>00664 <span class="preprocessor">  }                                             \</span>
<a name="l00665"></a>00665 <span class="preprocessor">  int64 nmax1 = emax1;                          \</span>
<a name="l00666"></a>00666 <span class="preprocessor">  found = false;                                \</span>
<a name="l00667"></a>00667 <span class="preprocessor">  while (nmax1 &gt;= nmin1 &amp;&amp; !found) {            \</span>
<a name="l00668"></a>00668 <span class="preprocessor">    for (int i = emin2; i &lt;= emax2; ++i) {      \</span>
<a name="l00669"></a>00669 <span class="preprocessor">      int64 value = ElementValue(nmax1, i);     \</span>
<a name="l00670"></a>00670 <span class="preprocessor">      if (test) {                               \</span>
<a name="l00671"></a>00671 <span class="preprocessor">        found = true;                           \</span>
<a name="l00672"></a>00672 <span class="preprocessor">        break;                                  \</span>
<a name="l00673"></a>00673 <span class="preprocessor">      }                                         \</span>
<a name="l00674"></a>00674 <span class="preprocessor">    }                                           \</span>
<a name="l00675"></a>00675 <span class="preprocessor">    if (!found) {                               \</span>
<a name="l00676"></a>00676 <span class="preprocessor">      nmax1--;                                  \</span>
<a name="l00677"></a>00677 <span class="preprocessor">    }                                           \</span>
<a name="l00678"></a>00678 <span class="preprocessor">  }                                             \</span>
<a name="l00679"></a>00679 <span class="preprocessor">  int64 nmax2 = emax2;                          \</span>
<a name="l00680"></a>00680 <span class="preprocessor">  found = false;                                \</span>
<a name="l00681"></a>00681 <span class="preprocessor">  while (nmax2 &gt;= nmin2 &amp;&amp; !found) {            \</span>
<a name="l00682"></a>00682 <span class="preprocessor">    for (int i = emin1; i &lt;= emax1; ++i) {      \</span>
<a name="l00683"></a>00683 <span class="preprocessor">      int64 value = ElementValue(i, nmax2);     \</span>
<a name="l00684"></a>00684 <span class="preprocessor">      if (test) {                               \</span>
<a name="l00685"></a>00685 <span class="preprocessor">        found = true;                           \</span>
<a name="l00686"></a>00686 <span class="preprocessor">        break;                                  \</span>
<a name="l00687"></a>00687 <span class="preprocessor">      }                                         \</span>
<a name="l00688"></a>00688 <span class="preprocessor">    }                                           \</span>
<a name="l00689"></a>00689 <span class="preprocessor">    if (!found) {                               \</span>
<a name="l00690"></a>00690 <span class="preprocessor">      nmax2--;                                  \</span>
<a name="l00691"></a>00691 <span class="preprocessor">    }                                           \</span>
<a name="l00692"></a>00692 <span class="preprocessor">  }                                             \</span>
<a name="l00693"></a>00693 <span class="preprocessor">  expr1_-&gt;SetRange(nmin1, nmax1);               \</span>
<a name="l00694"></a>00694 <span class="preprocessor">  expr2_-&gt;SetRange(nmin2, nmax2);</span>
<a name="l00695"></a>00695 <span class="preprocessor"></span>
<a name="l00696"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#973965ea1b188e9146f09f86458838c5">00696</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#973965ea1b188e9146f09f86458838c5">IntIntExprFunctionElement::SetMin</a>(int64 lower_bound) {
<a name="l00697"></a>00697   <a class="code" href="element_8cc.html#03fb7adebf0edf074fec98d8790c6506">UPDATE_ELEMENT_INDEX_BOUNDS</a>(value &gt;= lower_bound);
<a name="l00698"></a>00698 }
<a name="l00699"></a>00699 
<a name="l00700"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#4ce14a1b35ed944a01df867d38fd3314">00700</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#4ce14a1b35ed944a01df867d38fd3314">IntIntExprFunctionElement::SetMax</a>(int64 upper_bound) {
<a name="l00701"></a>00701   <a class="code" href="element_8cc.html#03fb7adebf0edf074fec98d8790c6506">UPDATE_ELEMENT_INDEX_BOUNDS</a>(value &lt;= upper_bound);
<a name="l00702"></a>00702 }
<a name="l00703"></a>00703 
<a name="l00704"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#88683d6ad6a539006791e6740a787aef">00704</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#88683d6ad6a539006791e6740a787aef" title="This method sets both the min and the max of the expression.">IntIntExprFunctionElement::SetRange</a>(int64 lower_bound, int64 upper_bound) {
<a name="l00705"></a>00705   <span class="keywordflow">if</span> (lower_bound &gt; upper_bound) {
<a name="l00706"></a>00706     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l00707"></a>00707   }
<a name="l00708"></a>00708   <a class="code" href="element_8cc.html#03fb7adebf0edf074fec98d8790c6506">UPDATE_ELEMENT_INDEX_BOUNDS</a>(value &gt;= lower_bound &amp;&amp; value &lt;= upper_bound);
<a name="l00709"></a>00709 }
<a name="l00710"></a>00710 
<a name="l00711"></a>00711 <span class="preprocessor">#undef UPDATE_ELEMENT_INDEX_BOUNDS</span>
<a name="l00712"></a>00712 <span class="preprocessor"></span>
<a name="l00713"></a><a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#020df434e4fe0ede9666a13513cc4da5">00713</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#020df434e4fe0ede9666a13513cc4da5">IntIntExprFunctionElement::UpdateSupports</a>()<span class="keyword"> const </span>{
<a name="l00714"></a>00714   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#80c6ee95232f845a28b35bcd4896a921">initial_update_</a>
<a name="l00715"></a>00715       || !<a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#547cdf5fe59c02cd098575ed64917e8a">expr1_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#6e297b67956343bed8a4aece6a2c88a3" title="This method returns wether the value &amp;#39;v&amp;#39; is in the domain of the variable...">Contains</a>(<a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#c1adf472d1e81f198d0e7ec4e1105596">min_support1_</a>)
<a name="l00716"></a>00716       || !<a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#547cdf5fe59c02cd098575ed64917e8a">expr1_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#6e297b67956343bed8a4aece6a2c88a3" title="This method returns wether the value &amp;#39;v&amp;#39; is in the domain of the variable...">Contains</a>(<a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#b62020efc113c675a8db795f528e2363">max_support1_</a>)
<a name="l00717"></a>00717       || !<a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#9dd82e155f9ae4251d9f2551671daf96">expr2_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#6e297b67956343bed8a4aece6a2c88a3" title="This method returns wether the value &amp;#39;v&amp;#39; is in the domain of the variable...">Contains</a>(<a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#232dfadcb33e87dab6e30ff60621d439">min_support2_</a>)
<a name="l00718"></a>00718       || !<a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#9dd82e155f9ae4251d9f2551671daf96">expr2_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#6e297b67956343bed8a4aece6a2c88a3" title="This method returns wether the value &amp;#39;v&amp;#39; is in the domain of the variable...">Contains</a>(<a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#2a47457eeeade8edee71091fe883a0b3">max_support2_</a>)) {
<a name="l00719"></a>00719     <span class="keyword">const</span> int64 emax1 = <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#547cdf5fe59c02cd098575ed64917e8a">expr1_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>();
<a name="l00720"></a>00720     <span class="keyword">const</span> int64 emax2 = <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#9dd82e155f9ae4251d9f2551671daf96">expr2_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>();
<a name="l00721"></a>00721     int64 min_value = <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#5c2df138032e7f58da1bd755276f3157">ElementValue</a>(emax1, emax2);
<a name="l00722"></a>00722     int64 max_value = min_value;
<a name="l00723"></a>00723     <span class="keywordtype">int</span> min_support1 = emax1;
<a name="l00724"></a>00724     <span class="keywordtype">int</span> max_support1 = emax1;
<a name="l00725"></a>00725     <span class="keywordtype">int</span> min_support2 = emax2;
<a name="l00726"></a>00726     <span class="keywordtype">int</span> max_support2 = emax2;
<a name="l00727"></a>00727     <span class="keywordflow">for</span> (<a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#48f22bdccc6a756de81b2738092a5847">expr1_iterator_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#c5e717b4d80a83e797fd6f996f040f8c" title="This method must be called before each loop.">Init</a>();
<a name="l00728"></a>00728          <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#48f22bdccc6a756de81b2738092a5847">expr1_iterator_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#35ab3d4e05e41e87312043b3fbb803f4" title="This method indicates if we can call Value() or not.">Ok</a>();
<a name="l00729"></a>00729          <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#48f22bdccc6a756de81b2738092a5847">expr1_iterator_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#7d3ca63d1636290367162ad3fb4f5157" title="This method moves the iterator to the next value.">Next</a>()) {
<a name="l00730"></a>00730       <span class="keyword">const</span> int64 index1 = <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#48f22bdccc6a756de81b2738092a5847">expr1_iterator_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#8cd71554efc9460ca2319bbe79574ffa" title="This method returns the value of the hole.">Value</a>();
<a name="l00731"></a>00731       <span class="keywordflow">for</span> (<a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#780df52a34d8a5988626bfa3f6eaad91">expr2_iterator_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#c5e717b4d80a83e797fd6f996f040f8c" title="This method must be called before each loop.">Init</a>();
<a name="l00732"></a>00732            <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#780df52a34d8a5988626bfa3f6eaad91">expr2_iterator_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#35ab3d4e05e41e87312043b3fbb803f4" title="This method indicates if we can call Value() or not.">Ok</a>();
<a name="l00733"></a>00733            <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#780df52a34d8a5988626bfa3f6eaad91">expr2_iterator_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#7d3ca63d1636290367162ad3fb4f5157" title="This method moves the iterator to the next value.">Next</a>()) {
<a name="l00734"></a>00734         <span class="keyword">const</span> int64 index2 = <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#780df52a34d8a5988626bfa3f6eaad91">expr2_iterator_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVarIterator.html#8cd71554efc9460ca2319bbe79574ffa" title="This method returns the value of the hole.">Value</a>();
<a name="l00735"></a>00735         <span class="keyword">const</span> int64 value = <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#5c2df138032e7f58da1bd755276f3157">ElementValue</a>(index1, index2);
<a name="l00736"></a>00736         <span class="keywordflow">if</span> (value &gt; max_value) {
<a name="l00737"></a>00737           max_value = value;
<a name="l00738"></a>00738           max_support1 = index1;
<a name="l00739"></a>00739           max_support2 = index2;
<a name="l00740"></a>00740         } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (value &lt; min_value) {
<a name="l00741"></a>00741           min_value = value;
<a name="l00742"></a>00742           min_support1 = index1;
<a name="l00743"></a>00743           min_support2 = index2;
<a name="l00744"></a>00744         }
<a name="l00745"></a>00745       }
<a name="l00746"></a>00746     }
<a name="l00747"></a>00747     <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* s = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>();
<a name="l00748"></a>00748     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#32c9e4ee4ebf42d5d759e4f6c83578af">min_</a>, min_value);
<a name="l00749"></a>00749     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#c1adf472d1e81f198d0e7ec4e1105596">min_support1_</a>, min_support1);
<a name="l00750"></a>00750     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#232dfadcb33e87dab6e30ff60621d439">min_support2_</a>, min_support2);
<a name="l00751"></a>00751     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#357744976300bf8413808c27c3278111">max_</a>, max_value);
<a name="l00752"></a>00752     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#b62020efc113c675a8db795f528e2363">max_support1_</a>, max_support1);
<a name="l00753"></a>00753     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#2a47457eeeade8edee71091fe883a0b3">max_support2_</a>, max_support2);
<a name="l00754"></a>00754     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html#80c6ee95232f845a28b35bcd4896a921">initial_update_</a>, <span class="keyword">false</span>);
<a name="l00755"></a>00755   }
<a name="l00756"></a>00756 }
<a name="l00757"></a>00757 
<a name="l00758"></a><a class="code" href="classoperations__research_1_1Solver.html#737a0bfa88290cf0dd24b0884074763c">00758</a> <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <a class="code" href="classoperations__research_1_1Solver.html#c4de55735fc3881482b12c577b435fbf" title="vals[expr]">Solver::MakeElement</a>(ResultCallback2&lt;int64, int64, int64&gt;* values,
<a name="l00759"></a>00759                              <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> index1, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> index2) {
<a name="l00760"></a>00760   CHECK_EQ(<span class="keyword">this</span>, index1-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00761"></a>00761   CHECK_EQ(<span class="keyword">this</span>, index2-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l00762"></a>00762   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(
<a name="l00763"></a>00763       <span class="keyword">new</span> <a class="code" href="classoperations__research_1_1IntIntExprFunctionElement.html" title="IntIntExprFunctionElement.">IntIntExprFunctionElement</a>(<span class="keyword">this</span>, values, index1, index2));
<a name="l00764"></a>00764 }
<a name="l00765"></a>00765 
<a name="l00766"></a>00766 <span class="comment">// ---------- Generalized element ----------</span>
<a name="l00767"></a>00767 
<a name="l00768"></a>00768 <span class="comment">// ----- IntExprArrayElementCt -----</span>
<a name="l00769"></a>00769 
<a name="l00770"></a>00770 <span class="comment">// This constraint implements vars[index] == var. It is delayed such</span>
<a name="l00771"></a>00771 <span class="comment">// that propagation only occurs when all variables have been touched.</span>
<a name="l00772"></a>00772 
<a name="l00773"></a><a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html">00773</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html" title="Generalized element.">IntExprArrayElementCt</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a> {
<a name="l00774"></a>00774  <span class="keyword">public</span>:
<a name="l00775"></a>00775   <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html" title="Generalized element.">IntExprArrayElementCt</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00776"></a>00776                         <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l00777"></a>00777                         <span class="keywordtype">int</span> size,
<a name="l00778"></a>00778                         <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> expr,
<a name="l00779"></a>00779                         <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var);
<a name="l00780"></a><a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#c4f9665d467883368e15946837dbbb11">00780</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html" title="Generalized element.">IntExprArrayElementCt</a>() {}
<a name="l00781"></a>00781 
<a name="l00782"></a>00782     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Post();
<a name="l00783"></a>00783   <span class="keyword">virtual</span> <span class="keywordtype">void</span> InitialPropagate();
<a name="l00784"></a>00784 
<a name="l00785"></a>00785   <span class="keywordtype">void</span> Propagate();
<a name="l00786"></a>00786   <span class="keywordtype">void</span> Update(<span class="keywordtype">int</span> index);
<a name="l00787"></a>00787   <span class="keywordtype">void</span> UpdateExpr();
<a name="l00788"></a>00788 
<a name="l00789"></a>00789   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1Solver.html#a7a09bf2f27ccbdc1d1d386bd94e142a" title="misc debug string.">DebugString</a>() <span class="keyword">const</span>;
<a name="l00790"></a>00790  <span class="keyword">private</span>:
<a name="l00791"></a><a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#e0d5306a3432be024c8d9446bf7202b9">00791</a>   scoped_array&lt;IntVar*&gt; vars_;
<a name="l00792"></a><a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#d4ad6234ae45668c7d80f32447561836">00792</a>   <span class="keywordtype">int</span> size_;
<a name="l00793"></a><a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#1f301462a3904ef9aa39c4c05218a9f3">00793</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> expr_;
<a name="l00794"></a><a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#ec495236d417529d2e93aed42050629d">00794</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var_;
<a name="l00795"></a><a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#510242a95d968d22d85e0b62e37dc478">00795</a>   <span class="keywordtype">int</span> min_support_;
<a name="l00796"></a><a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#c12919f281254eece188156f7e098ade">00796</a>   <span class="keywordtype">int</span> max_support_;
<a name="l00797"></a>00797 };
<a name="l00798"></a>00798 
<a name="l00799"></a><a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#76e0b9278662f86b0547c41ffa831462">00799</a> <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#76e0b9278662f86b0547c41ffa831462">IntExprArrayElementCt::IntExprArrayElementCt</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00800"></a>00800                                              <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l00801"></a>00801                                              <span class="keywordtype">int</span> size,
<a name="l00802"></a>00802                                              <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> expr,
<a name="l00803"></a>00803                                              <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> var)
<a name="l00804"></a>00804     : <a class="code" href="classoperations__research_1_1Constraint.html" title="A constraint is the main modeling object.">Constraint</a>(s),
<a name="l00805"></a>00805       vars_(new <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>*[size]),
<a name="l00806"></a>00806       size_(size),
<a name="l00807"></a>00807       expr_(expr),
<a name="l00808"></a>00808       var_(var),
<a name="l00809"></a>00809       min_support_(-1),
<a name="l00810"></a>00810       max_support_(-1) {
<a name="l00811"></a>00811   memcpy(<a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#e0d5306a3432be024c8d9446bf7202b9">vars_</a>.get(), vars, <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#d4ad6234ae45668c7d80f32447561836">size_</a> * <span class="keyword">sizeof</span>(*vars));
<a name="l00812"></a>00812 }
<a name="l00813"></a>00813 
<a name="l00814"></a><a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#781f6beb1ceb68419f6ea929e8aaa3a2">00814</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#781f6beb1ceb68419f6ea929e8aaa3a2" title="This method is called when the constraint is processed by the solver.">IntExprArrayElementCt::Post</a>() {
<a name="l00815"></a>00815   <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d = <a class="code" href="namespaceoperations__research.html#16f35a1c0ce076f2587fffbab80200b6">MakeDelayedConstraintDemon0</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l00816"></a>00816                                          <span class="keyword">this</span>,
<a name="l00817"></a>00817                                          &amp;<a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#02cc96e2c91ef3e8e4e86646f5341c7b">IntExprArrayElementCt::Propagate</a>,
<a name="l00818"></a>00818                                          <span class="stringliteral">"Propagate"</span>);
<a name="l00819"></a>00819   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#d4ad6234ae45668c7d80f32447561836">size_</a>; ++i) {
<a name="l00820"></a>00820     <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#e0d5306a3432be024c8d9446bf7202b9">vars_</a>[i]-&gt;WhenRange(d);
<a name="l00821"></a>00821     <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* u = <a class="code" href="namespaceoperations__research.html#bc7cb18be5d9d418d32782253cd4bf5a">MakeConstraintDemon1</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l00822"></a>00822                                     <span class="keyword">this</span>,
<a name="l00823"></a>00823                                     &amp;<a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#14ea316051d961fb00c04c990ff878d1">IntExprArrayElementCt::Update</a>,
<a name="l00824"></a>00824                                     <span class="stringliteral">"Update"</span>,
<a name="l00825"></a>00825                                     i);
<a name="l00826"></a>00826     <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#e0d5306a3432be024c8d9446bf7202b9">vars_</a>[i]-&gt;WhenRange(u);
<a name="l00827"></a>00827   }
<a name="l00828"></a>00828   <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#1f301462a3904ef9aa39c4c05218a9f3">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#845a3c3c71323504f6b59f9c0ea46b08" title="Attach a demon that will watch the min or the max of the expression.">WhenRange</a>(d);
<a name="l00829"></a>00829   <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* ue = <a class="code" href="namespaceoperations__research.html#50b3d41d8dbf72bb2ad22235a9e1f53e">MakeConstraintDemon0</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l00830"></a>00830                                    <span class="keyword">this</span>,
<a name="l00831"></a>00831                                    &amp;<a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#348ae6005d3409a3f2cddac5af1fb45e">IntExprArrayElementCt::UpdateExpr</a>,
<a name="l00832"></a>00832                                    <span class="stringliteral">"UpdateExpr"</span>);
<a name="l00833"></a>00833   <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#1f301462a3904ef9aa39c4c05218a9f3">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#845a3c3c71323504f6b59f9c0ea46b08" title="Attach a demon that will watch the min or the max of the expression.">WhenRange</a>(ue);
<a name="l00834"></a>00834   <a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* uv = <a class="code" href="namespaceoperations__research.html#50b3d41d8dbf72bb2ad22235a9e1f53e">MakeConstraintDemon0</a>(<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>(),
<a name="l00835"></a>00835                                    <span class="keyword">this</span>,
<a name="l00836"></a>00836                                    &amp;<a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#02cc96e2c91ef3e8e4e86646f5341c7b">IntExprArrayElementCt::Propagate</a>,
<a name="l00837"></a>00837                                    <span class="stringliteral">"UpdateVar"</span>);
<a name="l00838"></a>00838 
<a name="l00839"></a>00839   <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#ec495236d417529d2e93aed42050629d">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#845a3c3c71323504f6b59f9c0ea46b08" title="Attach a demon that will watch the min or the max of the expression.">WhenRange</a>(uv);
<a name="l00840"></a>00840 }
<a name="l00841"></a>00841 
<a name="l00842"></a><a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#9dda95ed5c37472336a43ef8e6de83bd">00842</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#9dda95ed5c37472336a43ef8e6de83bd" title="This method performs the initial propagation of the constraint.">IntExprArrayElementCt::InitialPropagate</a>() {
<a name="l00843"></a>00843   <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#02cc96e2c91ef3e8e4e86646f5341c7b">Propagate</a>();
<a name="l00844"></a>00844 }
<a name="l00845"></a>00845 
<a name="l00846"></a><a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#02cc96e2c91ef3e8e4e86646f5341c7b">00846</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#02cc96e2c91ef3e8e4e86646f5341c7b">IntExprArrayElementCt::Propagate</a>() {
<a name="l00847"></a>00847   <span class="keyword">const</span> int64 emin = max(0LL, <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#1f301462a3904ef9aa39c4c05218a9f3">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>());
<a name="l00848"></a>00848   <span class="keyword">const</span> int64 emax = min(<a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#d4ad6234ae45668c7d80f32447561836">size_</a> - 1LL, <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#1f301462a3904ef9aa39c4c05218a9f3">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>());
<a name="l00849"></a>00849   <span class="keyword">const</span> int64 vmin = <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#ec495236d417529d2e93aed42050629d">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>();
<a name="l00850"></a>00850   <span class="keyword">const</span> int64 vmax = <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#ec495236d417529d2e93aed42050629d">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>();
<a name="l00851"></a>00851   <span class="keywordflow">if</span> (emin == emax) {
<a name="l00852"></a>00852     <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#1f301462a3904ef9aa39c4c05218a9f3">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#8889930ed76665b0f24f12df2ed4e05c" title="This method sets the value of the expression.">SetValue</a>(emin);  <span class="comment">// in case it was reduced by the above min/max.</span>
<a name="l00853"></a>00853     <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#e0d5306a3432be024c8d9446bf7202b9">vars_</a>[emin]-&gt;SetRange(vmin, vmax);
<a name="l00854"></a>00854   } <span class="keywordflow">else</span> {
<a name="l00855"></a>00855     int64 nmin = emin;
<a name="l00856"></a>00856     <span class="keywordflow">while</span> (nmin &lt;= emax &amp;&amp; (<a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#e0d5306a3432be024c8d9446bf7202b9">vars_</a>[nmin]-&gt;Min() &gt; vmax ||
<a name="l00857"></a>00857                             <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#e0d5306a3432be024c8d9446bf7202b9">vars_</a>[nmin]-&gt;Max() &lt; vmin)) {
<a name="l00858"></a>00858       nmin++;
<a name="l00859"></a>00859     }
<a name="l00860"></a>00860     int64 nmax = emax;
<a name="l00861"></a>00861     <span class="keywordflow">while</span> (nmax &gt;= nmin &amp;&amp; (<a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#e0d5306a3432be024c8d9446bf7202b9">vars_</a>[nmax]-&gt;Max() &lt; vmin ||
<a name="l00862"></a>00862                             <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#e0d5306a3432be024c8d9446bf7202b9">vars_</a>[nmax]-&gt;Min() &gt; vmax)) {
<a name="l00863"></a>00863       nmax--;
<a name="l00864"></a>00864     }
<a name="l00865"></a>00865     <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#1f301462a3904ef9aa39c4c05218a9f3">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#153843dc05670b540a8e83dba2043eb0" title="This method sets both the min and the max of the expression.">SetRange</a>(nmin, nmax);
<a name="l00866"></a>00866     <span class="keywordflow">if</span> (nmin == nmax) {
<a name="l00867"></a>00867       <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#e0d5306a3432be024c8d9446bf7202b9">vars_</a>[nmin]-&gt;SetRange(vmin, vmax);
<a name="l00868"></a>00868     }
<a name="l00869"></a>00869   }
<a name="l00870"></a>00870   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#510242a95d968d22d85e0b62e37dc478">min_support_</a> == -1 || <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#c12919f281254eece188156f7e098ade">max_support_</a> == -1) {
<a name="l00871"></a>00871     <span class="keywordtype">int</span> min_support = -1;
<a name="l00872"></a>00872     <span class="keywordtype">int</span> max_support = -1;
<a name="l00873"></a>00873     int64 gmin = kint64max;
<a name="l00874"></a>00874     int64 gmax = kint64min;
<a name="l00875"></a>00875     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#1f301462a3904ef9aa39c4c05218a9f3">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>(); i &lt;= <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#1f301462a3904ef9aa39c4c05218a9f3">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>(); ++i) {
<a name="l00876"></a>00876       <span class="keyword">const</span> int64 vmin = <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#e0d5306a3432be024c8d9446bf7202b9">vars_</a>[i]-&gt;Min();
<a name="l00877"></a>00877       <span class="keywordflow">if</span> (vmin &lt; gmin) {
<a name="l00878"></a>00878         gmin = vmin;
<a name="l00879"></a>00879       }
<a name="l00880"></a>00880       <span class="keyword">const</span> int64 vmax = <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#e0d5306a3432be024c8d9446bf7202b9">vars_</a>[i]-&gt;Max();
<a name="l00881"></a>00881       <span class="keywordflow">if</span> (vmax &gt; gmax) {
<a name="l00882"></a>00882         gmax = vmax;
<a name="l00883"></a>00883       }
<a name="l00884"></a>00884     }
<a name="l00885"></a>00885     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#510242a95d968d22d85e0b62e37dc478">min_support_</a>, min_support);
<a name="l00886"></a>00886     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#c12919f281254eece188156f7e098ade">max_support_</a>, max_support);
<a name="l00887"></a>00887     <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#ec495236d417529d2e93aed42050629d">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#153843dc05670b540a8e83dba2043eb0" title="This method sets both the min and the max of the expression.">SetRange</a>(gmin, gmax);
<a name="l00888"></a>00888   }
<a name="l00889"></a>00889 }
<a name="l00890"></a>00890 
<a name="l00891"></a><a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#14ea316051d961fb00c04c990ff878d1">00891</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#14ea316051d961fb00c04c990ff878d1">IntExprArrayElementCt::Update</a>(<span class="keywordtype">int</span> index) {
<a name="l00892"></a>00892   <span class="keywordflow">if</span> (index == <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#510242a95d968d22d85e0b62e37dc478">min_support_</a> || index == <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#c12919f281254eece188156f7e098ade">max_support_</a>) {
<a name="l00893"></a>00893     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#510242a95d968d22d85e0b62e37dc478">min_support_</a>, -1);
<a name="l00894"></a>00894     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#c12919f281254eece188156f7e098ade">max_support_</a>, -1);
<a name="l00895"></a>00895   }
<a name="l00896"></a>00896 }
<a name="l00897"></a>00897 
<a name="l00898"></a><a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#348ae6005d3409a3f2cddac5af1fb45e">00898</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#348ae6005d3409a3f2cddac5af1fb45e">IntExprArrayElementCt::UpdateExpr</a>() {
<a name="l00899"></a>00899   <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#1f301462a3904ef9aa39c4c05218a9f3">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#6e297b67956343bed8a4aece6a2c88a3" title="This method returns wether the value &amp;#39;v&amp;#39; is in the domain of the variable...">Contains</a>(<a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#510242a95d968d22d85e0b62e37dc478">min_support_</a>) || !<a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#1f301462a3904ef9aa39c4c05218a9f3">expr_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#6e297b67956343bed8a4aece6a2c88a3" title="This method returns wether the value &amp;#39;v&amp;#39; is in the domain of the variable...">Contains</a>(<a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#c12919f281254eece188156f7e098ade">max_support_</a>)) {
<a name="l00900"></a>00900     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#510242a95d968d22d85e0b62e37dc478">min_support_</a>, -1);
<a name="l00901"></a>00901     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#fca376d8b0abd52b94534112442f1614" title="All-in-one SaveAndSetValue.">SaveAndSetValue</a>(&amp;<a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#c12919f281254eece188156f7e098ade">max_support_</a>, -1);
<a name="l00902"></a>00902   }
<a name="l00903"></a>00903 }
<a name="l00904"></a>00904 
<a name="l00905"></a><a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#8f45190c54a4f24ab1ba2c0c2aff1213">00905</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#8f45190c54a4f24ab1ba2c0c2aff1213" title="Constraint class.">IntExprArrayElementCt::DebugString</a>()<span class="keyword"> const </span>{
<a name="l00906"></a>00906   <span class="keywordtype">string</span> out = <span class="stringliteral">"IntExprArrayElementCt("</span>;
<a name="l00907"></a>00907   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#d4ad6234ae45668c7d80f32447561836">size_</a>; ++i) {
<a name="l00908"></a>00908     <span class="keywordflow">if</span> (i &gt; 0) {
<a name="l00909"></a>00909       out += <span class="stringliteral">", "</span>;
<a name="l00910"></a>00910     }
<a name="l00911"></a>00911     out += <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#e0d5306a3432be024c8d9446bf7202b9">vars_</a>[i]-&gt;DebugString();
<a name="l00912"></a>00912   }
<a name="l00913"></a>00913   out += <span class="stringliteral">", "</span> + <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#ec495236d417529d2e93aed42050629d">var_</a>-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#fc971d7ca0617641f29e7e510e98a767">DebugString</a>() + <span class="stringliteral">")"</span>;
<a name="l00914"></a>00914   <span class="keywordflow">return</span> out;
<a name="l00915"></a>00915 }
<a name="l00916"></a>00916 
<a name="l00917"></a>00917 <span class="comment">// ----- IntExprArrayElement -----</span>
<a name="l00918"></a>00918 
<a name="l00919"></a><a class="code" href="classoperations__research_1_1IntExprArrayElement.html">00919</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1IntExprArrayElement.html" title="IntExprArrayElement.">IntExprArrayElement</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1BaseIntExpr.html" title="This is the base class for all non-variable expressions.">BaseIntExpr</a> {
<a name="l00920"></a>00920  <span class="keyword">public</span>:
<a name="l00921"></a>00921   <a class="code" href="classoperations__research_1_1IntExprArrayElement.html" title="IntExprArrayElement.">IntExprArrayElement</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00922"></a>00922                       <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l00923"></a>00923                       <span class="keywordtype">int</span> size,
<a name="l00924"></a>00924                       <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> expr);
<a name="l00925"></a><a class="code" href="classoperations__research_1_1IntExprArrayElement.html#79d08b487bf0bc73eaf8987d07a1c852">00925</a>   <span class="keyword">virtual</span> ~<a class="code" href="classoperations__research_1_1IntExprArrayElement.html" title="IntExprArrayElement.">IntExprArrayElement</a>() {}
<a name="l00926"></a>00926 
<a name="l00927"></a>00927   <span class="keyword">virtual</span> int64 Min() <span class="keyword">const</span>;
<a name="l00928"></a>00928   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetMin(int64 m);
<a name="l00929"></a>00929   <span class="keyword">virtual</span> int64 Max() <span class="keyword">const</span>;
<a name="l00930"></a>00930   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetMax(int64 m);
<a name="l00931"></a>00931   <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetRange(int64 mi, int64 ma);
<a name="l00932"></a>00932   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Bound() <span class="keyword">const</span>;
<a name="l00933"></a><a class="code" href="classoperations__research_1_1IntExprArrayElement.html#bbb41d38fa103f63b8600e83dc97590a">00933</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#89b827a71613c6c120d5ac326202df7e" title="Naming.">name</a>()<span class="keyword"> const </span>{
<a name="l00934"></a>00934     <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"IntArrayElement(vars, %s)"</span>, <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#ec495236d417529d2e93aed42050629d">var_</a>-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#89b827a71613c6c120d5ac326202df7e" title="Naming.">name</a>().c_str());
<a name="l00935"></a>00935   }
<a name="l00936"></a><a class="code" href="classoperations__research_1_1IntExprArrayElement.html#496fa8621c89c64b092b7891e9a95b5c">00936</a>   <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#8f45190c54a4f24ab1ba2c0c2aff1213" title="Constraint class.">DebugString</a>()<span class="keyword"> const </span>{
<a name="l00937"></a>00937     <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"IntArrayElement(vars, %d, %s)"</span>,
<a name="l00938"></a>00938                         <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#d4ad6234ae45668c7d80f32447561836">size_</a>, <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#ec495236d417529d2e93aed42050629d">var_</a>-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#fc971d7ca0617641f29e7e510e98a767">DebugString</a>().c_str());
<a name="l00939"></a>00939   }
<a name="l00940"></a><a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a08a5bdf63b9eabf7fde89fe96d2d612">00940</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> WhenRange(<a class="code" href="classoperations__research_1_1Demon.html" title="A Demon is the base element of a propagation queue.">Demon</a>* d) {
<a name="l00941"></a>00941     <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#ec495236d417529d2e93aed42050629d">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#845a3c3c71323504f6b59f9c0ea46b08" title="Attach a demon that will watch the min or the max of the expression.">WhenRange</a>(d);
<a name="l00942"></a>00942     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#d4ad6234ae45668c7d80f32447561836">size_</a>; ++i) {
<a name="l00943"></a>00943       <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#e0d5306a3432be024c8d9446bf7202b9">vars_</a>[i]-&gt;WhenRange(d);
<a name="l00944"></a>00944     }
<a name="l00945"></a>00945   }
<a name="l00946"></a><a class="code" href="classoperations__research_1_1IntExprArrayElement.html#6bf4e8de9f7fff7305132d85bb79b03a">00946</a>   <span class="keyword">virtual</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* CastToVar() {
<a name="l00947"></a>00947     <a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>();
<a name="l00948"></a>00948     int64 vmin = 0LL;
<a name="l00949"></a>00949     int64 vmax = 0LL;
<a name="l00950"></a>00950     Range(&amp;vmin, &amp;vmax);
<a name="l00951"></a>00951     <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* var = <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#c313eaefa5980567fbf2b12608f8e854" title="Make Factory.">MakeIntVar</a>(vmin, vmax);
<a name="l00952"></a>00952     AddDelegateName(<span class="stringliteral">"Var"</span>, var);
<a name="l00953"></a>00953     s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#9c522a6cff91adae19af5cce7d8e411f" title="propagation">AddConstraint</a>(s-&gt;<a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html" title="Generalized element.">IntExprArrayElementCt</a>(s,
<a name="l00954"></a>00954                                                            <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#e0d5306a3432be024c8d9446bf7202b9">vars_</a>.get(),
<a name="l00955"></a>00955                                                            <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#d4ad6234ae45668c7d80f32447561836">size_</a>,
<a name="l00956"></a>00956                                                            <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#ec495236d417529d2e93aed42050629d">var_</a>,
<a name="l00957"></a>00957                                                            var)));
<a name="l00958"></a>00958     <span class="keywordflow">return</span> var;
<a name="l00959"></a>00959   }
<a name="l00960"></a>00960  <span class="keyword">private</span>:
<a name="l00961"></a><a class="code" href="classoperations__research_1_1IntExprArrayElement.html#dbaeaee3e5e19e9da6d398dcc1aa6b5d">00961</a>   scoped_array&lt;IntVar*&gt; <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#e0d5306a3432be024c8d9446bf7202b9">vars_</a>;
<a name="l00962"></a><a class="code" href="classoperations__research_1_1IntExprArrayElement.html#66ff2af502a3ad42cae24f8835db547e">00962</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#d4ad6234ae45668c7d80f32447561836">size_</a>;
<a name="l00963"></a><a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">00963</a>   <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#ec495236d417529d2e93aed42050629d">var_</a>;
<a name="l00964"></a>00964 };
<a name="l00965"></a>00965 
<a name="l00966"></a><a class="code" href="classoperations__research_1_1IntExprArrayElement.html#dab4cc919a28bbe62c68945f638f07e8">00966</a> <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#dab4cc919a28bbe62c68945f638f07e8">IntExprArrayElement::IntExprArrayElement</a>(<a class="code" href="classoperations__research_1_1Solver.html" title="Solver Class.">Solver</a>* <span class="keyword">const</span> s,
<a name="l00967"></a>00967                                          <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l00968"></a>00968                                          <span class="keywordtype">int</span> size,
<a name="l00969"></a>00969                                          <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> v)
<a name="l00970"></a>00970     : <a class="code" href="classoperations__research_1_1BaseIntExpr.html" title="This is the base class for all non-variable expressions.">BaseIntExpr</a>(s), <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#e0d5306a3432be024c8d9446bf7202b9">vars_</a>(new <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>*[size]),
<a name="l00971"></a>00971       <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#d4ad6234ae45668c7d80f32447561836">size_</a>(size), <a class="code" href="classoperations__research_1_1IntExprArrayElementCt.html#ec495236d417529d2e93aed42050629d">var_</a>(v) {
<a name="l00972"></a>00972   CHECK(vars);
<a name="l00973"></a>00973   memcpy(<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#dbaeaee3e5e19e9da6d398dcc1aa6b5d">vars_</a>.get(), vars, <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#66ff2af502a3ad42cae24f8835db547e">size_</a> * <span class="keyword">sizeof</span>(*vars));
<a name="l00974"></a>00974 }
<a name="l00975"></a>00975 
<a name="l00976"></a><a class="code" href="classoperations__research_1_1IntExprArrayElement.html#b76b928fd3b1b9696473d4f11a4359b3">00976</a> int64 <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#b76b928fd3b1b9696473d4f11a4359b3">IntExprArrayElement::Min</a>()<span class="keyword"> const </span>{
<a name="l00977"></a>00977   <span class="keyword">const</span> int64 emin = max(0LL, <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>());
<a name="l00978"></a>00978   <span class="keyword">const</span> int64 emax = min(<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#66ff2af502a3ad42cae24f8835db547e">size_</a> - 1LL, <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>());
<a name="l00979"></a>00979   int64 res = kint64max;
<a name="l00980"></a>00980   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = emin; i &lt;= emax; ++i) {
<a name="l00981"></a>00981     <span class="keyword">const</span> int64 vmin = <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#dbaeaee3e5e19e9da6d398dcc1aa6b5d">vars_</a>[i]-&gt;Min();
<a name="l00982"></a>00982     <span class="keywordflow">if</span> (vmin &lt; res &amp;&amp; var_-&gt;Contains(i)) {
<a name="l00983"></a>00983       res = vmin;
<a name="l00984"></a>00984     }
<a name="l00985"></a>00985   }
<a name="l00986"></a>00986   <span class="keywordflow">return</span> res;
<a name="l00987"></a>00987 }
<a name="l00988"></a>00988 
<a name="l00989"></a><a class="code" href="classoperations__research_1_1IntExprArrayElement.html#86d7255e9bb20b24d87681fa3b25dccf">00989</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#86d7255e9bb20b24d87681fa3b25dccf">IntExprArrayElement::SetMin</a>(int64 m) {
<a name="l00990"></a>00990   <span class="keyword">const</span> int64 emin = max(0LL, <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>());
<a name="l00991"></a>00991   <span class="keyword">const</span> int64 emax = min(<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#66ff2af502a3ad42cae24f8835db547e">size_</a> - 1LL, <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>());
<a name="l00992"></a>00992   <span class="keywordflow">if</span> (emin == emax) {
<a name="l00993"></a>00993     <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#8889930ed76665b0f24f12df2ed4e05c" title="This method sets the value of the expression.">SetValue</a>(emin);  <span class="comment">// in case it was reduced by the above min/max.</span>
<a name="l00994"></a>00994     <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#dbaeaee3e5e19e9da6d398dcc1aa6b5d">vars_</a>[emin]-&gt;SetMin(m);
<a name="l00995"></a>00995   } <span class="keywordflow">else</span> {
<a name="l00996"></a>00996     int64 nmin = emin;
<a name="l00997"></a>00997     <span class="keywordflow">while</span> (nmin &lt;= emax &amp;&amp; <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#dbaeaee3e5e19e9da6d398dcc1aa6b5d">vars_</a>[nmin]-&gt;<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#05c3d070307b9fa5ced5247b3886889a">Max</a>() &lt; m) {
<a name="l00998"></a>00998       nmin++;
<a name="l00999"></a>00999     }
<a name="l01000"></a>01000     <span class="keywordflow">if</span> (nmin &gt; emax) {
<a name="l01001"></a>01001       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l01002"></a>01002     }
<a name="l01003"></a>01003     int64 nmax = emax;
<a name="l01004"></a>01004     <span class="keywordflow">while</span> (nmax &gt;= nmin &amp;&amp; <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#dbaeaee3e5e19e9da6d398dcc1aa6b5d">vars_</a>[nmax]-&gt;<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#05c3d070307b9fa5ced5247b3886889a">Max</a>() &lt; m) {
<a name="l01005"></a>01005       nmax--;
<a name="l01006"></a>01006     }
<a name="l01007"></a>01007     <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#153843dc05670b540a8e83dba2043eb0" title="This method sets both the min and the max of the expression.">SetRange</a>(nmin, nmax);
<a name="l01008"></a>01008     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#b2eb094c29f2bdbce94d82a84b16e888" title="Returns true if the min and the max of the expression are equal.">Bound</a>()) {
<a name="l01009"></a>01009       <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#dbaeaee3e5e19e9da6d398dcc1aa6b5d">vars_</a>[<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>()]-&gt;SetMin(m);
<a name="l01010"></a>01010     }
<a name="l01011"></a>01011   }
<a name="l01012"></a>01012 }
<a name="l01013"></a>01013 
<a name="l01014"></a><a class="code" href="classoperations__research_1_1IntExprArrayElement.html#05c3d070307b9fa5ced5247b3886889a">01014</a> int64 <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#05c3d070307b9fa5ced5247b3886889a">IntExprArrayElement::Max</a>()<span class="keyword"> const </span>{
<a name="l01015"></a>01015   <span class="keyword">const</span> int64 emin = max(0LL, <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>());
<a name="l01016"></a>01016   <span class="keyword">const</span> int64 emax = min(<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#66ff2af502a3ad42cae24f8835db547e">size_</a> - 1LL, <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>());
<a name="l01017"></a>01017   int64 res = kint64min;
<a name="l01018"></a>01018   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = emin; i &lt;= emax; ++i) {
<a name="l01019"></a>01019     <span class="keyword">const</span> int64 vmax = <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#dbaeaee3e5e19e9da6d398dcc1aa6b5d">vars_</a>[i]-&gt;Max();
<a name="l01020"></a>01020     <span class="keywordflow">if</span> (vmax &gt; res &amp;&amp; <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#6e297b67956343bed8a4aece6a2c88a3" title="This method returns wether the value &amp;#39;v&amp;#39; is in the domain of the variable...">Contains</a>(i)) {
<a name="l01021"></a>01021       res = vmax;
<a name="l01022"></a>01022     }
<a name="l01023"></a>01023   }
<a name="l01024"></a>01024   <span class="keywordflow">return</span> res;
<a name="l01025"></a>01025 }
<a name="l01026"></a>01026 
<a name="l01027"></a><a class="code" href="classoperations__research_1_1IntExprArrayElement.html#e9b361efc746dd368c916de151f89209">01027</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#e9b361efc746dd368c916de151f89209">IntExprArrayElement::SetMax</a>(int64 m) {
<a name="l01028"></a>01028   <span class="keyword">const</span> int64 emin = max(0LL, <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>());
<a name="l01029"></a>01029   <span class="keyword">const</span> int64 emax = min(<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#66ff2af502a3ad42cae24f8835db547e">size_</a> - 1LL, <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>());
<a name="l01030"></a>01030   <span class="keywordflow">if</span> (emin == emax) {
<a name="l01031"></a>01031     <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#8889930ed76665b0f24f12df2ed4e05c" title="This method sets the value of the expression.">SetValue</a>(emin);  <span class="comment">// in case it was reduced by the above min/max.</span>
<a name="l01032"></a>01032     <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#dbaeaee3e5e19e9da6d398dcc1aa6b5d">vars_</a>[emin]-&gt;SetMax(m);
<a name="l01033"></a>01033   } <span class="keywordflow">else</span> {
<a name="l01034"></a>01034     int64 nmin = emin;
<a name="l01035"></a>01035     <span class="keywordflow">while</span> (nmin &lt;= emax &amp;&amp; <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#dbaeaee3e5e19e9da6d398dcc1aa6b5d">vars_</a>[nmin]-&gt;<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#b76b928fd3b1b9696473d4f11a4359b3">Min</a>() &gt; m) {
<a name="l01036"></a>01036       nmin++;
<a name="l01037"></a>01037     }
<a name="l01038"></a>01038     <span class="keywordflow">if</span> (nmin &gt; emax) {
<a name="l01039"></a>01039       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l01040"></a>01040     }
<a name="l01041"></a>01041     int64 nmax = emax;
<a name="l01042"></a>01042     <span class="keywordflow">while</span> (nmax &gt;= nmin &amp;&amp; <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#dbaeaee3e5e19e9da6d398dcc1aa6b5d">vars_</a>[nmax]-&gt;<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#b76b928fd3b1b9696473d4f11a4359b3">Min</a>() &gt; m) {
<a name="l01043"></a>01043       nmax--;
<a name="l01044"></a>01044     }
<a name="l01045"></a>01045     <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#153843dc05670b540a8e83dba2043eb0" title="This method sets both the min and the max of the expression.">SetRange</a>(nmin, nmax);
<a name="l01046"></a>01046     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#b2eb094c29f2bdbce94d82a84b16e888" title="Returns true if the min and the max of the expression are equal.">Bound</a>()) {
<a name="l01047"></a>01047       <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#dbaeaee3e5e19e9da6d398dcc1aa6b5d">vars_</a>[<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>()]-&gt;SetMax(m);
<a name="l01048"></a>01048     }
<a name="l01049"></a>01049   }
<a name="l01050"></a>01050 }
<a name="l01051"></a>01051 
<a name="l01052"></a><a class="code" href="classoperations__research_1_1IntExprArrayElement.html#d5e136e39cc5ba3772ef9c4faa14b4fa">01052</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#d5e136e39cc5ba3772ef9c4faa14b4fa" title="This method sets both the min and the max of the expression.">IntExprArrayElement::SetRange</a>(int64 mi, int64 ma) {
<a name="l01053"></a>01053   <span class="keywordflow">if</span> (mi &gt; ma) {
<a name="l01054"></a>01054     <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l01055"></a>01055   }
<a name="l01056"></a>01056   <span class="keyword">const</span> int64 emin = max(0LL, <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>());
<a name="l01057"></a>01057   <span class="keyword">const</span> int64 emax = min(<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#66ff2af502a3ad42cae24f8835db547e">size_</a> - 1LL, <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>());
<a name="l01058"></a>01058   <span class="keywordflow">if</span> (emin == emax) {
<a name="l01059"></a>01059     <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#8889930ed76665b0f24f12df2ed4e05c" title="This method sets the value of the expression.">SetValue</a>(emin);  <span class="comment">// in case it was reduced by the above min/max.</span>
<a name="l01060"></a>01060     <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#dbaeaee3e5e19e9da6d398dcc1aa6b5d">vars_</a>[emin]-&gt;SetRange(mi, ma);
<a name="l01061"></a>01061   } <span class="keywordflow">else</span> {
<a name="l01062"></a>01062     int64 nmin = emin;
<a name="l01063"></a>01063     <span class="keywordflow">while</span> (nmin &lt;= emax &amp;&amp; (<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#dbaeaee3e5e19e9da6d398dcc1aa6b5d">vars_</a>[nmin]-&gt;<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#b76b928fd3b1b9696473d4f11a4359b3">Min</a>() &gt; ma ||
<a name="l01064"></a>01064                             <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#dbaeaee3e5e19e9da6d398dcc1aa6b5d">vars_</a>[nmin]-&gt;<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#05c3d070307b9fa5ced5247b3886889a">Max</a>() &lt; mi)) {
<a name="l01065"></a>01065       nmin++;
<a name="l01066"></a>01066     }
<a name="l01067"></a>01067     <span class="keywordflow">if</span> (nmin &gt; emax) {
<a name="l01068"></a>01068       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l01069"></a>01069     }
<a name="l01070"></a>01070     int64 nmax = emax;
<a name="l01071"></a>01071     <span class="keywordflow">while</span> (nmax &gt;= nmin &amp;&amp; (<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#dbaeaee3e5e19e9da6d398dcc1aa6b5d">vars_</a>[nmax]-&gt;<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#05c3d070307b9fa5ced5247b3886889a">Max</a>() &lt; mi ||
<a name="l01072"></a>01072                             <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#dbaeaee3e5e19e9da6d398dcc1aa6b5d">vars_</a>[nmax]-&gt;<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#b76b928fd3b1b9696473d4f11a4359b3">Min</a>() &gt; ma)) {
<a name="l01073"></a>01073       nmax--;
<a name="l01074"></a>01074     }
<a name="l01075"></a>01075     <span class="keywordflow">if</span> (nmax &lt; emin) {
<a name="l01076"></a>01076       <a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>()-&gt;<a class="code" href="classoperations__research_1_1Solver.html#45534161a4dda7e1997bc0effd606648" title="Abandon the current branch in the search tree. A backtrack will follow.">Fail</a>();
<a name="l01077"></a>01077     }
<a name="l01078"></a>01078     <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#153843dc05670b540a8e83dba2043eb0" title="This method sets both the min and the max of the expression.">SetRange</a>(nmin, nmax);
<a name="l01079"></a>01079     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#b2eb094c29f2bdbce94d82a84b16e888" title="Returns true if the min and the max of the expression are equal.">Bound</a>()) {
<a name="l01080"></a>01080       <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#dbaeaee3e5e19e9da6d398dcc1aa6b5d">vars_</a>[<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>()]-&gt;SetRange(mi, ma);
<a name="l01081"></a>01081     }
<a name="l01082"></a>01082   }
<a name="l01083"></a>01083 }
<a name="l01084"></a>01084 
<a name="l01085"></a><a class="code" href="classoperations__research_1_1IntExprArrayElement.html#76f49d16e4afcf38054b93e264e610da">01085</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#76f49d16e4afcf38054b93e264e610da" title="Returns true if the min and the max of the expression are equal.">IntExprArrayElement::Bound</a>()<span class="keyword"> const </span>{
<a name="l01086"></a>01086   <span class="keyword">const</span> int64 emin = max(0LL, <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#58d589131cbea30d4826248a2fa06aba">Min</a>());
<a name="l01087"></a>01087   <span class="keyword">const</span> int64 emax = min(<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#66ff2af502a3ad42cae24f8835db547e">size_</a> - 1LL, <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntExpr.html#1fb9e08cff06a9a5b5739de4acba587c">Max</a>());
<a name="l01088"></a>01088   <span class="keyword">const</span> int64 v = <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#dbaeaee3e5e19e9da6d398dcc1aa6b5d">vars_</a>[emin]-&gt;Min();
<a name="l01089"></a>01089   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = emin; i &lt;= emax; ++i) {
<a name="l01090"></a>01090     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#a330b54e0704bf27b600196a66b3fb1a">var_</a>-&gt;<a class="code" href="classoperations__research_1_1IntVar.html#6e297b67956343bed8a4aece6a2c88a3" title="This method returns wether the value &amp;#39;v&amp;#39; is in the domain of the variable...">Contains</a>(i) &amp;&amp; (!<a class="code" href="classoperations__research_1_1IntExprArrayElement.html#dbaeaee3e5e19e9da6d398dcc1aa6b5d">vars_</a>[i]-&gt;Bound() || <a class="code" href="classoperations__research_1_1IntExprArrayElement.html#dbaeaee3e5e19e9da6d398dcc1aa6b5d">vars_</a>[i]-&gt;Value() != v)) {
<a name="l01091"></a>01091       <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l01092"></a>01092     }
<a name="l01093"></a>01093   }
<a name="l01094"></a>01094   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l01095"></a>01095 }
<a name="l01096"></a>01096 
<a name="l01097"></a><a class="code" href="classoperations__research_1_1Solver.html#2e7fc5550d555cd87e695f1c3040ff69">01097</a> <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <a class="code" href="classoperations__research_1_1Solver.html#c4de55735fc3881482b12c577b435fbf" title="vals[expr]">Solver::MakeElement</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> * vars,
<a name="l01098"></a>01098                              <span class="keywordtype">int</span> size,
<a name="l01099"></a>01099                              <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> index) {
<a name="l01100"></a>01100   CHECK_EQ(<span class="keyword">this</span>, index-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l01101"></a>01101   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1IntExprArrayElement.html" title="IntExprArrayElement.">IntExprArrayElement</a>(<span class="keyword">this</span>, vars, size, index));
<a name="l01102"></a>01102 }
<a name="l01103"></a>01103 
<a name="l01104"></a><a class="code" href="classoperations__research_1_1Solver.html#4605d5793ea950c2f5d7c6d50c0c95e3">01104</a> <a class="code" href="classoperations__research_1_1IntExpr.html" title="The class IntExpr is the base of all integer expressions in constraint programming...">IntExpr</a>* <a class="code" href="classoperations__research_1_1Solver.html#c4de55735fc3881482b12c577b435fbf" title="vals[expr]">Solver::MakeElement</a>(<span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars, <a class="code" href="classoperations__research_1_1IntVar.html" title="The class IntVar is a subset of IntExpr.">IntVar</a>* <span class="keyword">const</span> index) {
<a name="l01105"></a>01105   CHECK_EQ(<span class="keyword">this</span>, index-&gt;<a class="code" href="classoperations__research_1_1PropagationBaseObject.html#2851ada2b74b1f107fb50d84043471dc">solver</a>());
<a name="l01106"></a>01106   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Solver.html#83ceb54f811483fd1c0444cddba8a600" title="The RevAlloc method stores the corresponding object in a stack.">RevAlloc</a>(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1IntExprArrayElement.html" title="IntExprArrayElement.">IntExprArrayElement</a>(<span class="keyword">this</span>, vars.data(),
<a name="l01107"></a>01107                                           vars.size(), index));
<a name="l01108"></a>01108 }
<a name="l01109"></a>01109 
<a name="l01110"></a>01110 }  <span class="comment">// namespace operations_research</span>
</pre></div></div>

  <!-- Start of footer. -->
  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <tr valign=top>
      <td colspan=2 height=10></td>
    </tr>
    <tr valign=top>
      <td colspan=2 bgcolor=#389613 height=3></td>
    </tr>
  </table>

  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br />

  
  </body>
</html>
