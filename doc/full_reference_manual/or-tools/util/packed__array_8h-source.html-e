<!-- Good morning, Mr. Phelps. -->
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
    <title>google3/util/packed_array.h Source File - Doxy</title>
    <link rel="shortcut icon" href="../../favicon.ico">
    <!-- Both stylesheets are supplied by Doxygen, with maybe minor tweaks from Google. -->
    <link href="../../doxygen.css" rel="stylesheet" type="text/css">
    <link href="../../tabs.css" rel="stylesheet" type="text/css">
  </head>

  <body topmargin=0 leftmargin=20 bottommargin=0 rightmargin=20 marginwidth=20 marginheight=0>
  <!-- Second part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
  <style>
    a.doxy_logo:hover {
      background-color: #389613
    }
  </style>

  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <!-- Top horizontal line with the color of the day. -->
    <tr valign=top>
      <td colspan=3 bgcolor=#389613 height=3></td>
    </tr>

    <!-- Header row with the links at the right. -->
    <tr valign=top>
      <td colspan=3 align=right>
        <font size=-1>
          Generated on: <font color=#389613><b>Fri Apr  1 14:13:18 PDT 2011</b></font>
            for <b>custom file set</b>
        </font>
      </td>
    </tr>

    <!-- Header row with the logo and the search form. -->
    <tr valign=top>
      <!-- Logo. -->
      <td align=left width=150>
        <table width=150 height=54 cellpadding=0 cellspacing=0 border=0>
          <tr valign=top>
            <!-- First part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
            <td bgcolor=#389613>
              <a class="doxy_logo" href="../../index.html"><img src="../../doxy_logo.png" alt="Doxy" border=0></a>
            </td>
          </tr>
        </table>
      </td>
    </tr>

    <!-- Tiny vertical space below the form. -->
    <tr valign=top>
      <td colspan=3 height=3></td>
    </tr>
  </table>

  <!-- Header navigation row. -->
  <div class="memproto">
    <table width=100% cellpadding=0 cellspacing=0 border=0>
      <tr>
        <td align=left style="padding-left: 20px"><font size=+1><b><tt><font color=#333333>//
            <a href="../../index.html"><font color=#389613>doxy</font></a>/</font>
            <a href="../../google3/index.html">google3</a>/
            <a href="../../google3/util/index.html">util</a>/
            </tt></b></font>
        </td>
      </tr>
    </table>
  </div>
  <br />
    <!-- No subdirs found. -->
  <!-- End of header. -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>google3/util/packed_array.h</h1><a href="packed__array_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright 2010 Google</span>
<a name="l00002"></a>00002 <span class="comment">// Licensed under the Apache License, Version 2.0 (the "License");</span>
<a name="l00003"></a>00003 <span class="comment">// you may not use this file except in compliance with the License.</span>
<a name="l00004"></a>00004 <span class="comment">// You may obtain a copy of the License at</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">//     http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Unless required by applicable law or agreed to in writing, software</span>
<a name="l00009"></a>00009 <span class="comment">// distributed under the License is distributed on an "AS IS" BASIS,</span>
<a name="l00010"></a>00010 <span class="comment">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00011"></a>00011 <span class="comment">// See the License for the specific language governing permissions and</span>
<a name="l00012"></a>00012 <span class="comment">// limitations under the License.</span>
<a name="l00013"></a>00013 
<a name="l00014"></a>00014 <span class="preprocessor">#ifndef UTIL_PACKED_ARRAY_H_</span>
<a name="l00015"></a>00015 <span class="preprocessor"></span><span class="preprocessor">#define UTIL_PACKED_ARRAY_H_</span>
<a name="l00016"></a>00016 <span class="preprocessor"></span>
<a name="l00017"></a>00017 <span class="preprocessor">#if defined(__APPLE__) &amp;&amp; defined(__GNUC__)</span>
<a name="l00018"></a>00018 <span class="preprocessor"></span><span class="preprocessor">#include &lt;machine/endian.h&gt;</span>
<a name="l00019"></a>00019 <span class="preprocessor">#else</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#include &lt;endian.h&gt;</span>
<a name="l00021"></a>00021 <span class="preprocessor">#endif</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span><span class="preprocessor">#include &lt;limits.h&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;limits&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include "base/integral_types.h"</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include "base/logging.h"</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include "base/scoped_ptr.h"</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="comment">// An array class for storing arrays of signed integers on NumBytes bytes,</span>
<a name="l00030"></a>00030 <span class="comment">// The range of indices is specified at the construction of the object.</span>
<a name="l00031"></a>00031 <span class="comment">// The minimum and maximum indices are inclusive.</span>
<a name="l00032"></a>00032 <span class="comment">// Think of the Pascal syntax array[min_index..max_index] of ...</span>
<a name="l00033"></a>00033 <span class="comment">// For example PackedArray&lt;5&gt;(-100000,100000) will store 200001 signed</span>
<a name="l00034"></a>00034 <span class="comment">// integers on 5 bytes or 40 bits, and the possible range of indices will be</span>
<a name="l00035"></a>00035 <span class="comment">// -100000..100000.</span>
<a name="l00036"></a>00036 <span class="comment">//</span>
<a name="l00037"></a>00037 <span class="comment">// There is no penalty for using this class for integer sizes of 1,2,4,8 bytes.</span>
<a name="l00038"></a>00038 <span class="comment">// For other sizes the write time penalty ranges from 20% to 100% (for a 7-byte</span>
<a name="l00039"></a>00039 <span class="comment">// integer.) The read time penalty is about 50% for integer sizes different</span>
<a name="l00040"></a>00040 <span class="comment">// from 1,2,4,8 bytes.</span>
<a name="l00041"></a>00041 <span class="comment">//</span>
<a name="l00042"></a>00042 <span class="comment">// WARNING: The implementation of this class assumes the underlying architecture</span>
<a name="l00043"></a>00043 <span class="comment">// is little-endian.</span>
<a name="l00044"></a>00044 <span class="comment">// TODO(user): make the implementation big-endian compatible.</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="preprocessor">#if __BYTE_ORDER != __LITTLE_ENDIAN</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span><span class="preprocessor">#error "The implementation of PackedArray assumes a little-endian architecture."</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span>
<a name="l00050"></a>00050 <span class="keyword">namespace </span>operations_research {
<a name="l00051"></a>00051 
<a name="l00052"></a><a class="code" href="namespaceoperations__research.html#038fd9956774dc3224cda8ac268babbc">00052</a> <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> <a class="code" href="namespaceoperations__research.html#038fd9956774dc3224cda8ac268babbc">byte</a>;
<a name="l00053"></a>00053 
<a name="l00054"></a><a class="code" href="classoperations__research_1_1PackedArrayAllocator.html">00054</a> <span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keywordtype">int</span> NumBytes&gt; <span class="keyword">class </span><a class="code" href="classoperations__research_1_1PackedArrayAllocator.html">PackedArrayAllocator</a> {
<a name="l00055"></a>00055  <span class="keyword">public</span>:
<a name="l00056"></a><a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#7ac773bf789ea92cf08c939e3ed7612e">00056</a>   <span class="keyword">explicit</span> <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#7ac773bf789ea92cf08c939e3ed7612e">PackedArrayAllocator</a>()
<a name="l00057"></a>00057       : <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#e35783fd5395a8b34badcf76d9f88155" title="Pointer to the element indexed by zero in the array.">base_</a>(NULL),
<a name="l00058"></a>00058         <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#a27d3963c156c04c905caec778757c04" title="Minimum index for the array.">min_index_</a>(0),
<a name="l00059"></a>00059         <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#00578cd28be4abb67bd25200a226e367" title="Maximum index for the array.">max_index_</a>(0),
<a name="l00060"></a>00060         <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#2d58e0b4a380618ef1dc7237d8338219" title="The size of the array in bytes.">size_in_bytes_</a>(0),
<a name="l00061"></a>00061         <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#f282714791fb4b5b6bbe457401aabd6d" title="Storage memory for the array.">storage_</a>() {}
<a name="l00062"></a>00062   <span class="comment">// Reserves memory for new minimum and new maximum indices.</span>
<a name="l00063"></a>00063   <span class="comment">// Never shrinks the memory allocated.</span>
<a name="l00064"></a><a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#84d79a55e671017b345b73e07100bf8c">00064</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#84d79a55e671017b345b73e07100bf8c" title="Reserves memory for new minimum and new maximum indices.">Reserve</a>(int64 new_min_index, int64 new_max_index) {
<a name="l00065"></a>00065     DCHECK_LE(new_min_index, new_max_index);
<a name="l00066"></a>00066     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#e35783fd5395a8b34badcf76d9f88155" title="Pointer to the element indexed by zero in the array.">base_</a> != NULL
<a name="l00067"></a>00067         &amp;&amp; new_min_index &gt;= <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#a27d3963c156c04c905caec778757c04" title="Minimum index for the array.">min_index_</a>
<a name="l00068"></a>00068         &amp;&amp; new_max_index &lt;= <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#00578cd28be4abb67bd25200a226e367" title="Maximum index for the array.">max_index_</a>) {
<a name="l00069"></a>00069       <span class="keywordflow">return</span>;
<a name="l00070"></a>00070     }
<a name="l00071"></a>00071     DCHECK(<a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#e35783fd5395a8b34badcf76d9f88155" title="Pointer to the element indexed by zero in the array.">base_</a> == NULL || new_min_index &lt;= <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#a27d3963c156c04c905caec778757c04" title="Minimum index for the array.">min_index_</a>);
<a name="l00072"></a>00072     DCHECK(<a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#e35783fd5395a8b34badcf76d9f88155" title="Pointer to the element indexed by zero in the array.">base_</a> == NULL || new_max_index &gt;= <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#00578cd28be4abb67bd25200a226e367" title="Maximum index for the array.">max_index_</a>);
<a name="l00073"></a>00073     <span class="keyword">const</span> uint64 max_uint64 = std::numeric_limits&lt;uint64&gt;::max();
<a name="l00074"></a>00074     <span class="keyword">const</span> uint64 new_size = new_max_index - new_min_index + 1;
<a name="l00075"></a>00075     DCHECK_GT(max_uint64 / NumBytes, new_size);
<a name="l00076"></a>00076     <span class="comment">// We need to pad the array to allow reading the last element as an int64.</span>
<a name="l00077"></a>00077     <span class="keyword">const</span> uint64 new_size_in_bytes = new_size * NumBytes
<a name="l00078"></a>00078                                    + <span class="keyword">sizeof</span>(int64) - NumBytes; <span class="comment">// NOLINT</span>
<a name="l00079"></a>00079     <a class="code" href="namespaceoperations__research.html#038fd9956774dc3224cda8ac268babbc">byte</a>* new_storage = <span class="keyword">new</span> <a class="code" href="namespaceoperations__research.html#038fd9956774dc3224cda8ac268babbc">byte</a>[new_size_in_bytes];
<a name="l00080"></a>00080 
<a name="l00081"></a>00081     <a class="code" href="namespaceoperations__research.html#038fd9956774dc3224cda8ac268babbc">byte</a>* <span class="keyword">const</span> new_base = new_storage - new_min_index * NumBytes;
<a name="l00082"></a>00082     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#e35783fd5395a8b34badcf76d9f88155" title="Pointer to the element indexed by zero in the array.">base_</a> != NULL) {
<a name="l00083"></a>00083       <a class="code" href="namespaceoperations__research.html#038fd9956774dc3224cda8ac268babbc">byte</a>* <span class="keyword">const</span> destination = new_base + <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#a27d3963c156c04c905caec778757c04" title="Minimum index for the array.">min_index_</a> * NumBytes;
<a name="l00084"></a>00084       memcpy(destination, <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#f282714791fb4b5b6bbe457401aabd6d" title="Storage memory for the array.">storage_</a>.get(), <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#2d58e0b4a380618ef1dc7237d8338219" title="The size of the array in bytes.">size_in_bytes_</a>);
<a name="l00085"></a>00085     }
<a name="l00086"></a>00086 
<a name="l00087"></a>00087     <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#e35783fd5395a8b34badcf76d9f88155" title="Pointer to the element indexed by zero in the array.">base_</a> = <span class="keyword">reinterpret_cast&lt;</span>T*<span class="keyword">&gt;</span>(new_base);
<a name="l00088"></a>00088     <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#a27d3963c156c04c905caec778757c04" title="Minimum index for the array.">min_index_</a> = new_min_index;
<a name="l00089"></a>00089     <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#00578cd28be4abb67bd25200a226e367" title="Maximum index for the array.">max_index_</a> = new_max_index;
<a name="l00090"></a>00090     <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#2d58e0b4a380618ef1dc7237d8338219" title="The size of the array in bytes.">size_in_bytes_</a> = new_size_in_bytes;
<a name="l00091"></a>00091     <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#f282714791fb4b5b6bbe457401aabd6d" title="Storage memory for the array.">storage_</a>.reset(reinterpret_cast&lt;T*&gt;(new_storage));
<a name="l00092"></a>00092   }
<a name="l00093"></a>00093 
<a name="l00094"></a><a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#dae2294e7e5bf0489fbed3a2e3373e49">00094</a>   int64 <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#dae2294e7e5bf0489fbed3a2e3373e49">min_index</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#a27d3963c156c04c905caec778757c04" title="Minimum index for the array.">min_index_</a>; }
<a name="l00095"></a>00095 
<a name="l00096"></a><a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#1c3a58e7ab17fc6c134d1bc3e110b6e3">00096</a>   int64 <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#1c3a58e7ab17fc6c134d1bc3e110b6e3">max_index</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#00578cd28be4abb67bd25200a226e367" title="Maximum index for the array.">max_index_</a>; }
<a name="l00097"></a>00097 
<a name="l00098"></a><a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#f23aa69b7334a54116240b13e22a0bad">00098</a>   T* <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#f23aa69b7334a54116240b13e22a0bad">Base</a>()<span class="keyword"> const </span>{
<a name="l00099"></a>00099     DCHECK(<a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#e35783fd5395a8b34badcf76d9f88155" title="Pointer to the element indexed by zero in the array.">base_</a> != NULL);
<a name="l00100"></a>00100     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#e35783fd5395a8b34badcf76d9f88155" title="Pointer to the element indexed by zero in the array.">base_</a>;
<a name="l00101"></a>00101   }
<a name="l00102"></a>00102 
<a name="l00103"></a>00103  <span class="keyword">private</span>:
<a name="l00104"></a>00104   <span class="comment">// Pointer to the element indexed by zero in the array.</span>
<a name="l00105"></a><a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#e35783fd5395a8b34badcf76d9f88155">00105</a>   T*                 <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#e35783fd5395a8b34badcf76d9f88155" title="Pointer to the element indexed by zero in the array.">base_</a>;
<a name="l00106"></a>00106 
<a name="l00107"></a>00107   <span class="comment">// Minimum index for the array.</span>
<a name="l00108"></a><a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#a27d3963c156c04c905caec778757c04">00108</a>   int64              <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#a27d3963c156c04c905caec778757c04" title="Minimum index for the array.">min_index_</a>;
<a name="l00109"></a>00109 
<a name="l00110"></a>00110   <span class="comment">// Maximum index for the array.</span>
<a name="l00111"></a><a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#00578cd28be4abb67bd25200a226e367">00111</a>   int64              <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#00578cd28be4abb67bd25200a226e367" title="Maximum index for the array.">max_index_</a>;
<a name="l00112"></a>00112 
<a name="l00113"></a>00113   <span class="comment">// The size of the array in bytes.</span>
<a name="l00114"></a><a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#2d58e0b4a380618ef1dc7237d8338219">00114</a>   uint64             <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#2d58e0b4a380618ef1dc7237d8338219" title="The size of the array in bytes.">size_in_bytes_</a>;
<a name="l00115"></a>00115 
<a name="l00116"></a>00116   <span class="comment">// Storage memory for the array.</span>
<a name="l00117"></a><a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#f282714791fb4b5b6bbe457401aabd6d">00117</a>   scoped_array&lt;T&gt; <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html#f282714791fb4b5b6bbe457401aabd6d" title="Storage memory for the array.">storage_</a>;
<a name="l00118"></a>00118 };
<a name="l00119"></a>00119 
<a name="l00120"></a><a class="code" href="classoperations__research_1_1PackedArray.html">00120</a> <span class="keyword">template</span>&lt;<span class="keywordtype">int</span> NumBytes&gt; <span class="keyword">class </span><a class="code" href="classoperations__research_1_1PackedArray.html">PackedArray</a> {
<a name="l00121"></a>00121  <span class="keyword">public</span>:
<a name="l00122"></a><a class="code" href="classoperations__research_1_1PackedArray.html#77bf8638b6b360a8e5b5d6055d6a2ac0">00122</a>   <a class="code" href="classoperations__research_1_1PackedArray.html#77bf8638b6b360a8e5b5d6055d6a2ac0">PackedArray</a>() : <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>() {}
<a name="l00123"></a>00123 
<a name="l00124"></a>00124   <span class="comment">// The constructor for PackedArray takes a mininum index and a maximum index.</span>
<a name="l00125"></a>00125   <span class="comment">// These can be positive or negative, and the value for minimum_index</span>
<a name="l00126"></a>00126   <span class="comment">// and for maximun_index can be set and read (i.e. the bounds are inclusive.)</span>
<a name="l00127"></a><a class="code" href="classoperations__research_1_1PackedArray.html#4a64641b36350199795a1562a8c63323">00127</a>   <a class="code" href="classoperations__research_1_1PackedArray.html#77bf8638b6b360a8e5b5d6055d6a2ac0">PackedArray</a>(int64 <a class="code" href="classoperations__research_1_1PackedArray.html#20af7ec328dc116d46e8ca5ba7326cf5" title="Returns the minimum possible index for the array.">min_index</a>, int64 <a class="code" href="classoperations__research_1_1PackedArray.html#17b4fafa106c6456e9a3588acbd0e9ea" title="Returns the maximum possible index for the array.">max_index</a>) : <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>() {
<a name="l00128"></a>00128     <a class="code" href="classoperations__research_1_1PackedArray.html#77b9436ce42dace4f8aaee927f4c5d09" title="Reserves memory for new minimum and new maximum indices.">Reserve</a>(min_index, max_index);
<a name="l00129"></a>00129   }
<a name="l00130"></a>00130 
<a name="l00131"></a><a class="code" href="classoperations__research_1_1PackedArray.html#fe7ecfa2d84628e96db732e941db53de">00131</a>   <a class="code" href="classoperations__research_1_1PackedArray.html#fe7ecfa2d84628e96db732e941db53de">~PackedArray</a>() {}
<a name="l00132"></a>00132 
<a name="l00133"></a>00133   <span class="comment">// Returns the minimum possible index for the array.</span>
<a name="l00134"></a><a class="code" href="classoperations__research_1_1PackedArray.html#20af7ec328dc116d46e8ca5ba7326cf5">00134</a>   int64 <a class="code" href="classoperations__research_1_1PackedArray.html#20af7ec328dc116d46e8ca5ba7326cf5" title="Returns the minimum possible index for the array.">min_index</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.min_index(); }
<a name="l00135"></a>00135 
<a name="l00136"></a>00136   <span class="comment">// Returns the maximum possible index for the array.</span>
<a name="l00137"></a><a class="code" href="classoperations__research_1_1PackedArray.html#17b4fafa106c6456e9a3588acbd0e9ea">00137</a>   int64 <a class="code" href="classoperations__research_1_1PackedArray.html#17b4fafa106c6456e9a3588acbd0e9ea" title="Returns the maximum possible index for the array.">max_index</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.max_index(); }
<a name="l00138"></a>00138 
<a name="l00139"></a>00139   <span class="comment">// Returns the value stored at index.</span>
<a name="l00140"></a><a class="code" href="classoperations__research_1_1PackedArray.html#a6532ca16db6fb783df06b06af2de7d8">00140</a>   int64 <a class="code" href="classoperations__research_1_1PackedArray.html#a6532ca16db6fb783df06b06af2de7d8" title="Returns the value stored at index.">Value</a>(int64 index)<span class="keyword"> const </span>{
<a name="l00141"></a>00141     DCHECK_LE(<a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.min_index(), index);
<a name="l00142"></a>00142     DCHECK_GE(<a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.max_index(), index);
<a name="l00143"></a>00143     int64 value =
<a name="l00144"></a>00144         *<span class="keyword">reinterpret_cast&lt;</span>int64*<span class="keyword">&gt;</span>(<a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.Base() + index * NumBytes);
<a name="l00145"></a>00145     <span class="keyword">const</span> <span class="keywordtype">int</span> shift = (<span class="keyword">sizeof</span>(value) - NumBytes) * CHAR_BIT;
<a name="l00146"></a>00146     value &lt;&lt;= shift;  <span class="comment">// These two lines are</span>
<a name="l00147"></a>00147     value &gt;&gt;= shift;  <span class="comment">// for sign extension.</span>
<a name="l00148"></a>00148     <span class="keywordflow">return</span> value;
<a name="l00149"></a>00149   }
<a name="l00150"></a>00150 
<a name="l00151"></a>00151 <span class="preprocessor">#if !defined(SWIG)</span>
<a name="l00152"></a>00152 <span class="preprocessor"></span>  <span class="comment">// Shortcut for returning the value stored at index.</span>
<a name="l00153"></a><a class="code" href="classoperations__research_1_1PackedArray.html#8d240f632ffbd6d1719ce1213d58c56e">00153</a>   int64 <a class="code" href="classoperations__research_1_1PackedArray.html#8d240f632ffbd6d1719ce1213d58c56e" title="Shortcut for returning the value stored at index.">operator[]</a>(int64 index)<span class="keyword"> const </span>{
<a name="l00154"></a>00154     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1PackedArray.html#a6532ca16db6fb783df06b06af2de7d8" title="Returns the value stored at index.">Value</a>(index);
<a name="l00155"></a>00155   }
<a name="l00156"></a>00156 <span class="preprocessor">#endif</span>
<a name="l00157"></a>00157 <span class="preprocessor"></span>
<a name="l00158"></a>00158 <span class="comment">// Let n by the number of bytes (i.e. sizeof) of type.</span>
<a name="l00159"></a>00159 <span class="comment">// PACKED_ARRAY_WRITE_IF_ENOUGH_BYTES_AND_ADVANCE writes the first n lowest</span>
<a name="l00160"></a>00160 <span class="comment">// significant bytes of value at address. It then shifts value by n bytes to</span>
<a name="l00161"></a>00161 <span class="comment">// the right, and advances address by n bytes.</span>
<a name="l00162"></a><a class="code" href="packed__array_8h.html#f0797ab5e0c586f69f18c3fb03262fc8">00162</a> <span class="preprocessor">#define PACKED_ARRAY_WRITE_IF_ENOUGH_BYTES_AND_ADVANCE(type, address, value)  \</span>
<a name="l00163"></a>00163 <span class="preprocessor">{                                                                             \</span>
<a name="l00164"></a>00164 <span class="preprocessor">  const int64 kSize = sizeof(type);                                           \</span>
<a name="l00165"></a>00165 <span class="preprocessor">  if (NumBytes &amp; kSize) {                                                     \</span>
<a name="l00166"></a>00166 <span class="preprocessor">    const int64 k1 = GG_LONGLONG(1);                                          \</span>
<a name="l00167"></a>00167 <span class="preprocessor">    const int64 kSizeInBits = sizeof(type) * CHAR_BIT;                        \</span>
<a name="l00168"></a>00168 <span class="preprocessor">    const int64 kMask = (k1 &lt;&lt; kSizeInBits) - 1;                              \</span>
<a name="l00169"></a>00169 <span class="preprocessor">    reinterpret_cast&lt;type*&gt;(address)[0] = value &amp; kMask;                      \</span>
<a name="l00170"></a>00170 <span class="preprocessor">    value &gt;&gt;= kSizeInBits;                                                    \</span>
<a name="l00171"></a>00171 <span class="preprocessor">    address += kSize;                                                         \</span>
<a name="l00172"></a>00172 <span class="preprocessor">  }                                                                           \</span>
<a name="l00173"></a>00173 <span class="preprocessor">}</span>
<a name="l00174"></a>00174 <span class="preprocessor"></span>
<a name="l00175"></a>00175   <span class="comment">// Sets to value the content of the array at index.</span>
<a name="l00176"></a><a class="code" href="classoperations__research_1_1PackedArray.html#ccc251bda770eec6ea9f7131f7a98697">00176</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1PackedArray.html#ccc251bda770eec6ea9f7131f7a98697" title="Sets to value the content of the array at index.">Set</a>(int64 index, int64 value) {
<a name="l00177"></a>00177     DCHECK_LE(<a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.min_index(), index);
<a name="l00178"></a>00178     DCHECK_GE(<a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.max_index(), index);
<a name="l00179"></a>00179     DCHECK_LE(<a class="code" href="classoperations__research_1_1PackedArray.html#3996897d6910476ee42f3baaad6ea173" title="The minimun signed integer representable with NumBytes bytes.">kMinInteger</a>, value);
<a name="l00180"></a>00180     DCHECK_GE(<a class="code" href="classoperations__research_1_1PackedArray.html#0b47a82cb9ef478f687970717390c4e1" title="The maximun signed integer representable with NumBytes bytes.">kMaxInteger</a>, value);
<a name="l00181"></a>00181     <a class="code" href="namespaceoperations__research.html#038fd9956774dc3224cda8ac268babbc">byte</a>* current = <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.Base() + index * NumBytes;
<a name="l00182"></a>00182     <a class="code" href="packed__array_8h.html#f0797ab5e0c586f69f18c3fb03262fc8" title="Let n by the number of bytes (i.e.">PACKED_ARRAY_WRITE_IF_ENOUGH_BYTES_AND_ADVANCE</a>(int32, current, value);
<a name="l00183"></a>00183     <a class="code" href="packed__array_8h.html#f0797ab5e0c586f69f18c3fb03262fc8" title="Let n by the number of bytes (i.e.">PACKED_ARRAY_WRITE_IF_ENOUGH_BYTES_AND_ADVANCE</a>(int16, current, value);
<a name="l00184"></a>00184     <a class="code" href="packed__array_8h.html#f0797ab5e0c586f69f18c3fb03262fc8" title="Let n by the number of bytes (i.e.">PACKED_ARRAY_WRITE_IF_ENOUGH_BYTES_AND_ADVANCE</a>(<a class="code" href="namespaceoperations__research.html#038fd9956774dc3224cda8ac268babbc">byte</a>, current, value);
<a name="l00185"></a>00185   }
<a name="l00186"></a>00186 
<a name="l00187"></a>00187   <span class="comment">// Reserves memory for new minimum and new maximum indices.</span>
<a name="l00188"></a>00188   <span class="comment">// Never shrinks the memory allocated.</span>
<a name="l00189"></a><a class="code" href="classoperations__research_1_1PackedArray.html#77b9436ce42dace4f8aaee927f4c5d09">00189</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1PackedArray.html#77b9436ce42dace4f8aaee927f4c5d09" title="Reserves memory for new minimum and new maximum indices.">Reserve</a>(int64 new_min_index, int64 new_max_index) {
<a name="l00190"></a>00190     <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.Reserve(new_min_index, new_max_index);
<a name="l00191"></a>00191   }
<a name="l00192"></a>00192 
<a name="l00193"></a>00193   <span class="comment">// Sets all the elements in the array to value. Set is bypassed to maximize</span>
<a name="l00194"></a>00194   <span class="comment">// performance.</span>
<a name="l00195"></a><a class="code" href="classoperations__research_1_1PackedArray.html#1f0eed8261cc4a4a18569d8ddda0eea2">00195</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1PackedArray.html#1f0eed8261cc4a4a18569d8ddda0eea2" title="Sets all the elements in the array to value.">Assign</a>(int64 value) {
<a name="l00196"></a>00196     DCHECK_LE(<a class="code" href="classoperations__research_1_1PackedArray.html#3996897d6910476ee42f3baaad6ea173" title="The minimun signed integer representable with NumBytes bytes.">kMinInteger</a>, value);
<a name="l00197"></a>00197     DCHECK_GE(<a class="code" href="classoperations__research_1_1PackedArray.html#0b47a82cb9ef478f687970717390c4e1" title="The maximun signed integer representable with NumBytes bytes.">kMaxInteger</a>, value);
<a name="l00198"></a>00198     <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#038fd9956774dc3224cda8ac268babbc">byte</a>* end = <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.Base() + <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.max_index() * NumBytes;
<a name="l00199"></a>00199     <a class="code" href="namespaceoperations__research.html#038fd9956774dc3224cda8ac268babbc">byte</a>* current = <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.Base() + <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.min_index() * NumBytes;
<a name="l00200"></a>00200     <span class="keywordflow">while</span> (current &lt;= end) {
<a name="l00201"></a>00201       int64 v = value;  <span class="comment">// v is going to be modified by the following macro.</span>
<a name="l00202"></a>00202       <a class="code" href="packed__array_8h.html#f0797ab5e0c586f69f18c3fb03262fc8" title="Let n by the number of bytes (i.e.">PACKED_ARRAY_WRITE_IF_ENOUGH_BYTES_AND_ADVANCE</a>(int32, current, v);
<a name="l00203"></a>00203       <a class="code" href="packed__array_8h.html#f0797ab5e0c586f69f18c3fb03262fc8" title="Let n by the number of bytes (i.e.">PACKED_ARRAY_WRITE_IF_ENOUGH_BYTES_AND_ADVANCE</a>(int16, current, v);
<a name="l00204"></a>00204       <a class="code" href="packed__array_8h.html#f0797ab5e0c586f69f18c3fb03262fc8" title="Let n by the number of bytes (i.e.">PACKED_ARRAY_WRITE_IF_ENOUGH_BYTES_AND_ADVANCE</a>(<a class="code" href="namespaceoperations__research.html#038fd9956774dc3224cda8ac268babbc">byte</a>, current, v);
<a name="l00205"></a>00205     }
<a name="l00206"></a>00206   }
<a name="l00207"></a>00207 <span class="preprocessor">#undef PACKED_ARRAY_WRITE_IF_ENOUGH_BYTES_AND_ADVANCE</span>
<a name="l00208"></a>00208 <span class="preprocessor"></span>
<a name="l00209"></a>00209  <span class="keyword">private</span>:
<a name="l00210"></a>00210   <span class="comment">// The bitmask corresponding to all the bits in Numbytes bytes set.</span>
<a name="l00211"></a><a class="code" href="classoperations__research_1_1PackedArray.html#a089ccc00b52df533559879ccaf54813">00211</a>   <span class="keyword">static</span> <span class="keyword">const</span> uint64 <a class="code" href="classoperations__research_1_1PackedArray.html#a089ccc00b52df533559879ccaf54813" title="The bitmask corresponding to all the bits in Numbytes bytes set.">kBitMask</a>;
<a name="l00212"></a>00212 
<a name="l00213"></a>00213   <span class="comment">// The minimun signed integer representable with NumBytes bytes.</span>
<a name="l00214"></a><a class="code" href="classoperations__research_1_1PackedArray.html#3996897d6910476ee42f3baaad6ea173">00214</a>   <span class="keyword">static</span> <span class="keyword">const</span> int64 <a class="code" href="classoperations__research_1_1PackedArray.html#3996897d6910476ee42f3baaad6ea173" title="The minimun signed integer representable with NumBytes bytes.">kMinInteger</a>;
<a name="l00215"></a>00215 
<a name="l00216"></a>00216   <span class="comment">// The maximun signed integer representable with NumBytes bytes.</span>
<a name="l00217"></a><a class="code" href="classoperations__research_1_1PackedArray.html#0b47a82cb9ef478f687970717390c4e1">00217</a>   <span class="keyword">static</span> <span class="keyword">const</span> int64 <a class="code" href="classoperations__research_1_1PackedArray.html#0b47a82cb9ef478f687970717390c4e1" title="The maximun signed integer representable with NumBytes bytes.">kMaxInteger</a>;
<a name="l00218"></a>00218 
<a name="l00219"></a><a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">00219</a>   <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html">PackedArrayAllocator&lt;byte, NumBytes&gt;</a> <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>;
<a name="l00220"></a>00220 };
<a name="l00221"></a>00221 
<a name="l00222"></a>00222 <span class="keyword">template</span>&lt;<span class="keywordtype">int</span> NumBytes&gt; <span class="keyword">const</span> uint64 <a class="code" href="classoperations__research_1_1PackedArray.html">PackedArray&lt;NumBytes&gt;::kBitMask</a> =
<a name="l00223"></a>00223     (GG_ULONGLONG(1) &lt;&lt; (CHAR_BIT * NumBytes)) - 1;
<a name="l00224"></a>00224 
<a name="l00225"></a>00225 <span class="keyword">template</span>&lt;<span class="keywordtype">int</span> NumBytes&gt;<span class="keyword">const</span> int64 <a class="code" href="classoperations__research_1_1PackedArray.html">PackedArray&lt;NumBytes&gt;::kMinInteger</a> =
<a name="l00226"></a>00226     ~<a class="code" href="classoperations__research_1_1PackedArray.html">PackedArray&lt;NumBytes&gt;::kMaxInteger</a>;
<a name="l00227"></a>00227 
<a name="l00228"></a>00228 <span class="keyword">template</span>&lt;<span class="keywordtype">int</span> NumBytes&gt; <span class="keyword">const</span> int64 <a class="code" href="classoperations__research_1_1PackedArray.html">PackedArray&lt;NumBytes&gt;::kMaxInteger</a> =
<a name="l00229"></a>00229     <a class="code" href="classoperations__research_1_1PackedArray.html">PackedArray&lt;NumBytes&gt;::kBitMask</a> &gt;&gt; 1;
<a name="l00230"></a>00230 
<a name="l00231"></a>00231 <span class="comment">// A specialization of the template for int32 (NumBytes = 4.)</span>
<a name="l00232"></a>00232 <span class="comment">// TODO(user): also make a specialization for int16 if needed(?).</span>
<a name="l00233"></a>00233 
<a name="l00234"></a><a class="code" href="classoperations__research_1_1PackedArray_3_014_01_4.html">00234</a> <span class="keyword">template</span>&lt;&gt; <span class="keyword">class </span><a class="code" href="classoperations__research_1_1PackedArray.html">PackedArray</a>&lt;4&gt; {
<a name="l00235"></a>00235  <span class="keyword">public</span>:
<a name="l00236"></a><a class="code" href="classoperations__research_1_1PackedArray_3_014_01_4.html#ebb21f01ae2cbe2faa5018eccb5e622f">00236</a>   <a class="code" href="classoperations__research_1_1PackedArray.html#77bf8638b6b360a8e5b5d6055d6a2ac0">PackedArray</a>() : <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>() {}
<a name="l00237"></a>00237 
<a name="l00238"></a><a class="code" href="classoperations__research_1_1PackedArray_3_014_01_4.html#224cd154c0249cc8ac00b821387b1af7">00238</a>   <a class="code" href="classoperations__research_1_1PackedArray.html#77bf8638b6b360a8e5b5d6055d6a2ac0">PackedArray</a>(int64 <a class="code" href="classoperations__research_1_1PackedArray.html#20af7ec328dc116d46e8ca5ba7326cf5" title="Returns the minimum possible index for the array.">min_index</a>, int64 <a class="code" href="classoperations__research_1_1PackedArray.html#17b4fafa106c6456e9a3588acbd0e9ea" title="Returns the maximum possible index for the array.">max_index</a>) : <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>() {
<a name="l00239"></a>00239     <a class="code" href="classoperations__research_1_1PackedArray.html#77b9436ce42dace4f8aaee927f4c5d09" title="Reserves memory for new minimum and new maximum indices.">Reserve</a>(min_index, max_index);
<a name="l00240"></a>00240   }
<a name="l00241"></a>00241 
<a name="l00242"></a><a class="code" href="classoperations__research_1_1PackedArray_3_014_01_4.html#b2dca664ff888864a5bbfb2d84b92243">00242</a>   int64 <a class="code" href="classoperations__research_1_1PackedArray.html#20af7ec328dc116d46e8ca5ba7326cf5" title="Returns the minimum possible index for the array.">min_index</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.min_index(); }
<a name="l00243"></a>00243 
<a name="l00244"></a><a class="code" href="classoperations__research_1_1PackedArray_3_014_01_4.html#c32cc37e7dd7dce2c5d5921f91c12857">00244</a>   int64 <a class="code" href="classoperations__research_1_1PackedArray.html#17b4fafa106c6456e9a3588acbd0e9ea" title="Returns the maximum possible index for the array.">max_index</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.max_index(); }
<a name="l00245"></a>00245 
<a name="l00246"></a>00246   <span class="comment">// Returns the value stored at index.</span>
<a name="l00247"></a><a class="code" href="classoperations__research_1_1PackedArray_3_014_01_4.html#afb5e9040b73be18cd0c4673ea24f411">00247</a>   int64 <a class="code" href="classoperations__research_1_1PackedArray.html#a6532ca16db6fb783df06b06af2de7d8" title="Returns the value stored at index.">Value</a>(int64 index)<span class="keyword"> const </span>{
<a name="l00248"></a>00248     DCHECK_LE(<a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.min_index(), index);
<a name="l00249"></a>00249     DCHECK_GE(<a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.max_index(), index);
<a name="l00250"></a>00250     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.Base()[index];
<a name="l00251"></a>00251   }
<a name="l00252"></a>00252 
<a name="l00253"></a>00253 <span class="preprocessor">#if !defined(SWIG)</span>
<a name="l00254"></a>00254 <span class="preprocessor"></span>  <span class="comment">// Shortcut for returning the value stored at index.</span>
<a name="l00255"></a><a class="code" href="classoperations__research_1_1PackedArray_3_014_01_4.html#f334f8cd079cc64c453dcd4ab9306b6e">00255</a>   int64 <a class="code" href="classoperations__research_1_1PackedArray.html#8d240f632ffbd6d1719ce1213d58c56e" title="Shortcut for returning the value stored at index.">operator[]</a>(int64 index)<span class="keyword"> const </span>{
<a name="l00256"></a>00256     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1PackedArray.html#a6532ca16db6fb783df06b06af2de7d8" title="Returns the value stored at index.">Value</a>(index);
<a name="l00257"></a>00257   }
<a name="l00258"></a>00258 <span class="preprocessor">#endif</span>
<a name="l00259"></a>00259 <span class="preprocessor"></span>
<a name="l00260"></a>00260   <span class="comment">// Sets to value the content of the array at index.</span>
<a name="l00261"></a><a class="code" href="classoperations__research_1_1PackedArray_3_014_01_4.html#9b31d04bca18f3d65551d6aa178501cc">00261</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1PackedArray.html#ccc251bda770eec6ea9f7131f7a98697" title="Sets to value the content of the array at index.">Set</a>(int64 index, int64 value) {
<a name="l00262"></a>00262     DCHECK_LE(<a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.min_index(), index);
<a name="l00263"></a>00263     DCHECK_GE(<a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.max_index(), index);
<a name="l00264"></a>00264     DCHECK_LE(std::numeric_limits&lt;int32&gt;::min(), value);
<a name="l00265"></a>00265     DCHECK_GE(std::numeric_limits&lt;int32&gt;::max(), value);
<a name="l00266"></a>00266     <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.Base()[index] = value;
<a name="l00267"></a>00267   }
<a name="l00268"></a>00268 
<a name="l00269"></a>00269   <span class="comment">// Reserves memory for new minimum and new maximum indices.</span>
<a name="l00270"></a>00270   <span class="comment">// Never shrinks the memory allocated.</span>
<a name="l00271"></a><a class="code" href="classoperations__research_1_1PackedArray_3_014_01_4.html#e454a89721a5d1c071369c7524b4f664">00271</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1PackedArray.html#77b9436ce42dace4f8aaee927f4c5d09" title="Reserves memory for new minimum and new maximum indices.">Reserve</a>(int64 new_min_index, int64 new_max_index) {
<a name="l00272"></a>00272     <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.Reserve(new_min_index, new_max_index);
<a name="l00273"></a>00273   }
<a name="l00274"></a>00274 
<a name="l00275"></a>00275   <span class="comment">// Sets all the elements in the array to value.</span>
<a name="l00276"></a><a class="code" href="classoperations__research_1_1PackedArray_3_014_01_4.html#73e089e2ad05f837daa5d88bb3c6e387">00276</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1PackedArray.html#1f0eed8261cc4a4a18569d8ddda0eea2" title="Sets all the elements in the array to value.">Assign</a>(int64 value) {
<a name="l00277"></a>00277     DCHECK_LE(std::numeric_limits&lt;int32&gt;::min(), value);
<a name="l00278"></a>00278     DCHECK_GE(std::numeric_limits&lt;int32&gt;::max(), value);
<a name="l00279"></a>00279     int32 v = value;  <span class="comment">// Do the type conversion only once.</span>
<a name="l00280"></a>00280     <span class="keyword">const</span> int32* end = <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.Base() + <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.max_index();
<a name="l00281"></a>00281     <span class="keywordflow">for</span> (int32* current = <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.Base() + <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.min_index();
<a name="l00282"></a>00282          current &lt;= end;
<a name="l00283"></a>00283          ++current) {
<a name="l00284"></a>00284       *current = v;
<a name="l00285"></a>00285     }
<a name="l00286"></a>00286   }
<a name="l00287"></a>00287 
<a name="l00288"></a>00288  <span class="keyword">private</span>:
<a name="l00289"></a><a class="code" href="classoperations__research_1_1PackedArray_3_014_01_4.html#43eece3c2e51312cf4a2185e6fff66a1">00289</a>   <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html">PackedArrayAllocator&lt;int32, 4&gt;</a> <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>;
<a name="l00290"></a>00290 };
<a name="l00291"></a>00291 
<a name="l00292"></a>00292 <span class="comment">//</span>
<a name="l00293"></a>00293 <span class="comment">// A specialization of the template for int64 (NumBytes = 8.)</span>
<a name="l00294"></a>00294 <span class="comment">// There is some duplicated code with PackedArray&lt;4&gt;.</span>
<a name="l00295"></a>00295 <span class="comment">//</span>
<a name="l00296"></a><a class="code" href="classoperations__research_1_1PackedArray_3_018_01_4.html">00296</a> <span class="keyword">template</span>&lt;&gt; <span class="keyword">class </span><a class="code" href="classoperations__research_1_1PackedArray.html">PackedArray</a>&lt;8&gt; {
<a name="l00297"></a>00297  <span class="keyword">public</span>:
<a name="l00298"></a><a class="code" href="classoperations__research_1_1PackedArray_3_018_01_4.html#d706c119b053d9057ce3ab75fd34523d">00298</a>   <a class="code" href="classoperations__research_1_1PackedArray.html#77bf8638b6b360a8e5b5d6055d6a2ac0">PackedArray</a>() : <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>() {}
<a name="l00299"></a>00299 
<a name="l00300"></a><a class="code" href="classoperations__research_1_1PackedArray_3_018_01_4.html#3f00dcf2d2f07045e43448a706bbaa7e">00300</a>   <a class="code" href="classoperations__research_1_1PackedArray.html#77bf8638b6b360a8e5b5d6055d6a2ac0">PackedArray</a>(int64 <a class="code" href="classoperations__research_1_1PackedArray.html#20af7ec328dc116d46e8ca5ba7326cf5" title="Returns the minimum possible index for the array.">min_index</a>, int64 <a class="code" href="classoperations__research_1_1PackedArray.html#17b4fafa106c6456e9a3588acbd0e9ea" title="Returns the maximum possible index for the array.">max_index</a>) : <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>() {
<a name="l00301"></a>00301     <a class="code" href="classoperations__research_1_1PackedArray.html#77b9436ce42dace4f8aaee927f4c5d09" title="Reserves memory for new minimum and new maximum indices.">Reserve</a>(min_index, max_index);
<a name="l00302"></a>00302   }
<a name="l00303"></a>00303 
<a name="l00304"></a><a class="code" href="classoperations__research_1_1PackedArray_3_018_01_4.html#a71d1800ad3c2d7174162323f398db91">00304</a>   int64 <a class="code" href="classoperations__research_1_1PackedArray.html#20af7ec328dc116d46e8ca5ba7326cf5" title="Returns the minimum possible index for the array.">min_index</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.min_index(); }
<a name="l00305"></a>00305 
<a name="l00306"></a><a class="code" href="classoperations__research_1_1PackedArray_3_018_01_4.html#5e6d8ecb849b82a75891c790b880f94b">00306</a>   int64 <a class="code" href="classoperations__research_1_1PackedArray.html#17b4fafa106c6456e9a3588acbd0e9ea" title="Returns the maximum possible index for the array.">max_index</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.max_index(); }
<a name="l00307"></a>00307 
<a name="l00308"></a>00308   <span class="comment">// Returns the value stored at index.</span>
<a name="l00309"></a><a class="code" href="classoperations__research_1_1PackedArray_3_018_01_4.html#24c9e5a458c5cb338118ed72ec9835f9">00309</a>   int64 <a class="code" href="classoperations__research_1_1PackedArray.html#a6532ca16db6fb783df06b06af2de7d8" title="Returns the value stored at index.">Value</a>(int64 index)<span class="keyword"> const </span>{
<a name="l00310"></a>00310     DCHECK_LE(<a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.min_index(), index);
<a name="l00311"></a>00311     DCHECK_GE(<a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.max_index(), index);
<a name="l00312"></a>00312     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.Base()[index];
<a name="l00313"></a>00313   }
<a name="l00314"></a>00314 
<a name="l00315"></a>00315 <span class="preprocessor">#if !defined(SWIG)</span>
<a name="l00316"></a>00316 <span class="preprocessor"></span>  <span class="comment">// Shortcut for returning the value stored at index.</span>
<a name="l00317"></a><a class="code" href="classoperations__research_1_1PackedArray_3_018_01_4.html#ea5c2df5351e30b6588f1ef201a9cb18">00317</a>   int64 <a class="code" href="classoperations__research_1_1PackedArray.html#8d240f632ffbd6d1719ce1213d58c56e" title="Shortcut for returning the value stored at index.">operator[]</a>(int64 index)<span class="keyword"> const </span>{
<a name="l00318"></a>00318     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1PackedArray.html#a6532ca16db6fb783df06b06af2de7d8" title="Returns the value stored at index.">Value</a>(index);
<a name="l00319"></a>00319   }
<a name="l00320"></a>00320 <span class="preprocessor">#endif</span>
<a name="l00321"></a>00321 <span class="preprocessor"></span>
<a name="l00322"></a>00322   <span class="comment">// Sets to value the content of the array at index.</span>
<a name="l00323"></a><a class="code" href="classoperations__research_1_1PackedArray_3_018_01_4.html#9b1567e8bc7b797728bbbe6a4f69d84a">00323</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1PackedArray.html#ccc251bda770eec6ea9f7131f7a98697" title="Sets to value the content of the array at index.">Set</a>(int64 index, int64 value) {
<a name="l00324"></a>00324     DCHECK_LE(<a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.min_index(), index);
<a name="l00325"></a>00325     DCHECK_GE(<a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.max_index(), index);
<a name="l00326"></a>00326     <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.Base()[index] = value;
<a name="l00327"></a>00327   }
<a name="l00328"></a>00328 
<a name="l00329"></a>00329   <span class="comment">// Reserves memory for new minimum and new maximum indices.</span>
<a name="l00330"></a>00330   <span class="comment">// Never shrinks the memory allocated.</span>
<a name="l00331"></a><a class="code" href="classoperations__research_1_1PackedArray_3_018_01_4.html#18fbee2ab62b609bb7b81785947d3074">00331</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1PackedArray.html#77b9436ce42dace4f8aaee927f4c5d09" title="Reserves memory for new minimum and new maximum indices.">Reserve</a>(int64 new_min_index, int64 new_max_index) {
<a name="l00332"></a>00332     <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.Reserve(new_min_index, new_max_index);
<a name="l00333"></a>00333   }
<a name="l00334"></a>00334 
<a name="l00335"></a>00335   <span class="comment">// Sets all the elements in the array to value.</span>
<a name="l00336"></a><a class="code" href="classoperations__research_1_1PackedArray_3_018_01_4.html#5058d94ac9dd9ca004986c6d53506752">00336</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1PackedArray.html#1f0eed8261cc4a4a18569d8ddda0eea2" title="Sets all the elements in the array to value.">Assign</a>(int64 value) {
<a name="l00337"></a>00337     <span class="keyword">const</span> int64* end = <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.Base() + <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.max_index();
<a name="l00338"></a>00338     <span class="keywordflow">for</span> (int64* current = <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.Base() + <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>.min_index();
<a name="l00339"></a>00339          current &lt;= end;
<a name="l00340"></a>00340          ++current) {
<a name="l00341"></a>00341       *current = value;
<a name="l00342"></a>00342     }
<a name="l00343"></a>00343   }
<a name="l00344"></a>00344 
<a name="l00345"></a>00345  <span class="keyword">private</span>:
<a name="l00346"></a><a class="code" href="classoperations__research_1_1PackedArray_3_018_01_4.html#0458ee6e3fdcd1d6b151cd26cb35c22d">00346</a>   <a class="code" href="classoperations__research_1_1PackedArrayAllocator.html">PackedArrayAllocator&lt;int64, 8&gt;</a> <a class="code" href="classoperations__research_1_1PackedArray.html#cbe6a607021fabde3f1d0248bc8170b3">allocator_</a>;
<a name="l00347"></a>00347 };
<a name="l00348"></a>00348 
<a name="l00349"></a>00349 <span class="comment">// Shorthands for all the types of PackedArray's.</span>
<a name="l00350"></a><a class="code" href="namespaceoperations__research.html#26b432c1b95b58d815893ed924c7db2b">00350</a> <span class="keyword">typedef</span> <a class="code" href="classoperations__research_1_1PackedArray.html">PackedArray&lt;1&gt;</a> <a class="code" href="classoperations__research_1_1PackedArray.html">Int8PackedArray</a>;
<a name="l00351"></a><a class="code" href="namespaceoperations__research.html#c0fb83b00ec16e03c127486b4d23c457">00351</a> <span class="keyword">typedef</span> <a class="code" href="classoperations__research_1_1PackedArray.html">PackedArray&lt;2&gt;</a> <a class="code" href="classoperations__research_1_1PackedArray.html">Int16PackedArray</a>;
<a name="l00352"></a><a class="code" href="namespaceoperations__research.html#30634e925379f1343dd61fdc87d6f7dc">00352</a> <span class="keyword">typedef</span> <a class="code" href="classoperations__research_1_1PackedArray.html">PackedArray&lt;3&gt;</a> <a class="code" href="classoperations__research_1_1PackedArray.html">Int24PackedArray</a>;
<a name="l00353"></a><a class="code" href="namespaceoperations__research.html#c7c88a1df5bcc5b2ab8505991ec7133a">00353</a> <span class="keyword">typedef</span> <a class="code" href="classoperations__research_1_1PackedArray.html">PackedArray&lt;4&gt;</a> <a class="code" href="classoperations__research_1_1PackedArray_3_014_01_4.html" title="A specialization of the template for int32 (NumBytes = 4.">Int32PackedArray</a>;
<a name="l00354"></a><a class="code" href="namespaceoperations__research.html#4a9defe487ff25dabae1ba1f39563d5e">00354</a> <span class="keyword">typedef</span> <a class="code" href="classoperations__research_1_1PackedArray.html">PackedArray&lt;5&gt;</a> <a class="code" href="classoperations__research_1_1PackedArray.html">Int40PackedArray</a>;
<a name="l00355"></a><a class="code" href="namespaceoperations__research.html#0513f268ca9496ac9f86368091e38c45">00355</a> <span class="keyword">typedef</span> <a class="code" href="classoperations__research_1_1PackedArray.html">PackedArray&lt;6&gt;</a> <a class="code" href="classoperations__research_1_1PackedArray.html">Int48PackedArray</a>;
<a name="l00356"></a><a class="code" href="namespaceoperations__research.html#484b5a63e93ddf0e3cd22a70041b5eda">00356</a> <span class="keyword">typedef</span> <a class="code" href="classoperations__research_1_1PackedArray.html">PackedArray&lt;7&gt;</a> <a class="code" href="classoperations__research_1_1PackedArray.html">Int56PackedArray</a>;
<a name="l00357"></a><a class="code" href="namespaceoperations__research.html#e2b92c54f75364b40e3d65f0f6ca10d2">00357</a> <span class="keyword">typedef</span> <a class="code" href="classoperations__research_1_1PackedArray.html">PackedArray&lt;8&gt;</a> <a class="code" href="classoperations__research_1_1PackedArray_3_018_01_4.html" title="A specialization of the template for int64 (NumBytes = 8.">Int64PackedArray</a>;
<a name="l00358"></a>00358 }  <span class="comment">// namespace operations_research</span>
<a name="l00359"></a>00359 
<a name="l00360"></a>00360 <span class="preprocessor">#endif  // UTIL_PACKED_ARRAY_H_</span>
</pre></div></div>

  <!-- Start of footer. -->
  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <tr valign=top>
      <td colspan=2 height=10></td>
    </tr>
    <tr valign=top>
      <td colspan=2 bgcolor=#389613 height=3></td>
    </tr>
  </table>

  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br />

  
  </body>
</html>
