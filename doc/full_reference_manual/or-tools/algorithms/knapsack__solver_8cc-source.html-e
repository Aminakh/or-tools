<!-- Good morning, Mr. Phelps. -->
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
    <title>google3/algorithms/knapsack_solver.cc Source File - Doxy</title>
    <link rel="shortcut icon" href="../../favicon.ico">
    <!-- Both stylesheets are supplied by Doxygen, with maybe minor tweaks from Google. -->
    <link href="../../doxygen.css" rel="stylesheet" type="text/css">
    <link href="../../tabs.css" rel="stylesheet" type="text/css">
  </head>

  <body topmargin=0 leftmargin=20 bottommargin=0 rightmargin=20 marginwidth=20 marginheight=0>
  <!-- Second part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
  <style>
    a.doxy_logo:hover {
      background-color: #389613
    }
  </style>

  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <!-- Top horizontal line with the color of the day. -->
    <tr valign=top>
      <td colspan=3 bgcolor=#389613 height=3></td>
    </tr>

    <!-- Header row with the links at the right. -->
    <tr valign=top>
      <td colspan=3 align=right>
        <font size=-1>
          Generated on: <font color=#389613><b>Fri Apr  1 14:13:18 PDT 2011</b></font>
            for <b>custom file set</b>
        </font>
      </td>
    </tr>

    <!-- Header row with the logo and the search form. -->
    <tr valign=top>
      <!-- Logo. -->
      <td align=left width=150>
        <table width=150 height=54 cellpadding=0 cellspacing=0 border=0>
          <tr valign=top>
            <!-- First part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
            <td bgcolor=#389613>
              <a class="doxy_logo" href="../../index.html"><img src="../../doxy_logo.png" alt="Doxy" border=0></a>
            </td>
          </tr>
        </table>
      </td>
    </tr>

    <!-- Tiny vertical space below the form. -->
    <tr valign=top>
      <td colspan=3 height=3></td>
    </tr>
  </table>

  <!-- Header navigation row. -->
  <div class="memproto">
    <table width=100% cellpadding=0 cellspacing=0 border=0>
      <tr>
        <td align=left style="padding-left: 20px"><font size=+1><b><tt><font color=#333333>//
            <a href="../../index.html"><font color=#389613>doxy</font></a>/</font>
            <a href="../../google3/index.html">google3</a>/
            <a href="../../google3/algorithms/index.html">algorithms</a>/
            </tt></b></font>
        </td>
      </tr>
    </table>
  </div>
  <br />
    <!-- No subdirs found. -->
  <!-- End of header. -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>google3/algorithms/knapsack_solver.cc</h1><a href="knapsack__solver_8cc.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright 2010 Google</span>
<a name="l00002"></a>00002 <span class="comment">// Licensed under the Apache License, Version 2.0 (the "License");</span>
<a name="l00003"></a>00003 <span class="comment">// you may not use this file except in compliance with the License.</span>
<a name="l00004"></a>00004 <span class="comment">// You may obtain a copy of the License at</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">//     http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Unless required by applicable law or agreed to in writing, software</span>
<a name="l00009"></a>00009 <span class="comment">// distributed under the License is distributed on an "AS IS" BASIS,</span>
<a name="l00010"></a>00010 <span class="comment">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00011"></a>00011 <span class="comment">// See the License for the specific language governing permissions and</span>
<a name="l00012"></a>00012 <span class="comment">// limitations under the License.</span>
<a name="l00013"></a>00013 
<a name="l00014"></a>00014 <span class="preprocessor">#include "<a class="code" href="knapsack__solver_8h.html">algorithms/knapsack_solver.h</a>"</span>
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include &lt;queue&gt;</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#include "base/concise_iterator.h"</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include "base/stl_util-inl.h"</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include "util/bitset.h"</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="keyword">namespace </span>operations_research {
<a name="l00026"></a>00026 
<a name="l00027"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html">00027</a> <span class="keyword">namespace </span>{
<a name="l00028"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#5a2dab00159c2bbae70017a6ff34de31">00028</a> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#5a2dab00159c2bbae70017a6ff34de31">kNoSelection</a> = -1;
<a name="l00029"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#f86c01f36d41a1f80f4b3dee143890a7">00029</a> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#f86c01f36d41a1f80f4b3dee143890a7">kMasterPropagatorId</a> = 0;
<a name="l00030"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#4bdf336ab51fb448ceea2303b1d716ba">00030</a> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#4bdf336ab51fb448ceea2303b1d716ba">kMaxNumberOfBruteForceItems</a> = 30;
<a name="l00031"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#4352af3b9a4bf487772e4f8aee52334b">00031</a> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#4352af3b9a4bf487772e4f8aee52334b">kMaxNumberOf64Items</a> = 64;
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="comment">// Comparator used to sort item in decreasing efficiency order</span>
<a name="l00034"></a>00034 <span class="comment">// (see KnapsackCapacityPropagator).</span>
<a name="l00035"></a><a class="code" href="structoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03_1_1CompareKnapsackItemsInDecreasingEfficiencyOrder.html">00035</a> <span class="keyword">struct </span><a class="code" href="structoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03_1_1CompareKnapsackItemsInDecreasingEfficiencyOrder.html" title="Comparator used to sort item in decreasing efficiency order (see KnapsackCapacityPropagator)...">CompareKnapsackItemsInDecreasingEfficiencyOrder</a> {
<a name="l00036"></a><a class="code" href="structoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03_1_1CompareKnapsackItemsInDecreasingEfficiencyOrder.html#d5ffe3dcbebea4e88b5762150f944c1e">00036</a>   <span class="keyword">explicit</span> <a class="code" href="structoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03_1_1CompareKnapsackItemsInDecreasingEfficiencyOrder.html" title="Comparator used to sort item in decreasing efficiency order (see KnapsackCapacityPropagator)...">CompareKnapsackItemsInDecreasingEfficiencyOrder</a>(int64 _profit_max)
<a name="l00037"></a>00037       : profit_max(_profit_max) {
<a name="l00038"></a>00038   }
<a name="l00039"></a><a class="code" href="structoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03_1_1CompareKnapsackItemsInDecreasingEfficiencyOrder.html#b15f4cd333c9b5cf54f44d96fadf64f3">00039</a>   <span class="keywordtype">bool</span> operator() (<span class="keyword">const</span> <a class="code" href="structoperations__research_1_1KnapsackItem.html" title="KnapsackItem KnapsackItem is a small struct to pair an item weight with its corresponding...">KnapsackItemPtr</a>&amp; item1,
<a name="l00040"></a>00040                    <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1KnapsackItem.html" title="KnapsackItem KnapsackItem is a small struct to pair an item weight with its corresponding...">KnapsackItemPtr</a>&amp; item2)<span class="keyword"> const </span>{
<a name="l00041"></a>00041     <span class="keywordflow">return</span> item1-&gt;<a class="code" href="structoperations__research_1_1KnapsackItem.html#b03ce6d7e9ffb72e37f3b013f0a67808">GetEfficiency</a>(profit_max) &gt; item2-&gt;<a class="code" href="structoperations__research_1_1KnapsackItem.html#b03ce6d7e9ffb72e37f3b013f0a67808">GetEfficiency</a>(profit_max);
<a name="l00042"></a>00042   }
<a name="l00043"></a><a class="code" href="structoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03_1_1CompareKnapsackItemsInDecreasingEfficiencyOrder.html#9daa2721d2592fb76cc39641ca8097d9">00043</a>   <span class="keyword">const</span> int64 profit_max;
<a name="l00044"></a>00044 };
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="comment">// Comparator used to sort search nodes in the priority queue in order</span>
<a name="l00047"></a>00047 <span class="comment">// to pop first the node with the highest profit upper bound</span>
<a name="l00048"></a>00048 <span class="comment">// (see KnapsackSearchNode). When two nodes have the same upper bound, we</span>
<a name="l00049"></a>00049 <span class="comment">// prefer the one with the highest current profit, ie. usually the one closer</span>
<a name="l00050"></a>00050 <span class="comment">// to a leaf. In practice, the main advantage is to have smaller path.</span>
<a name="l00051"></a><a class="code" href="structoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03_1_1CompareKnapsackSd3ab3a4a7f92fc67febd9bc24b2262ed.html">00051</a> <span class="keyword">struct </span><a class="code" href="structoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03_1_1CompareKnapsackSd3ab3a4a7f92fc67febd9bc24b2262ed.html" title="Comparator used to sort search nodes in the priority queue in order to pop first...">CompareKnapsackSearchNodePtrInDecreasingUpperBoundOrder</a> {
<a name="l00052"></a><a class="code" href="structoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03_1_1CompareKnapsackSd3ab3a4a7f92fc67febd9bc24b2262ed.html#ab562eaa9a815110aa21a111b78d677d">00052</a>   <span class="keywordtype">bool</span> operator()(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1KnapsackSearchNode.html" title="KnapsackSearchNode KnapsackSearchNode is a class used to describe a decision in the...">KnapsackSearchNode</a>* node_1,
<a name="l00053"></a>00053                   <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1KnapsackSearchNode.html" title="KnapsackSearchNode KnapsackSearchNode is a class used to describe a decision in the...">KnapsackSearchNode</a>* node_2)<span class="keyword"> const </span>{
<a name="l00054"></a>00054     <span class="keyword">const</span> int64 profit_upper_bound_1 = node_1-&gt;<a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#9da502872de28f78ff37e037c450a88b">profit_upper_bound</a>();
<a name="l00055"></a>00055     <span class="keyword">const</span> int64 profit_upper_bound_2 = node_2-&gt;<a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#9da502872de28f78ff37e037c450a88b">profit_upper_bound</a>();
<a name="l00056"></a>00056     <span class="keywordflow">if</span> (profit_upper_bound_1 == profit_upper_bound_2) {
<a name="l00057"></a>00057       <span class="keywordflow">return</span> node_1-&gt;<a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#9fdd03da778dfedbb3c39c1a04e6ea45">current_profit</a>() &lt; node_2-&gt;<a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#9fdd03da778dfedbb3c39c1a04e6ea45">current_profit</a>();
<a name="l00058"></a>00058     }
<a name="l00059"></a>00059     <span class="keywordflow">return</span> profit_upper_bound_1 &lt; profit_upper_bound_2;
<a name="l00060"></a>00060   }
<a name="l00061"></a>00061 };
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 <span class="keyword">typedef</span> std::priority_queue&lt;
<a name="l00064"></a>00064   <a class="code" href="classoperations__research_1_1KnapsackSearchNode.html" title="KnapsackSearchNode KnapsackSearchNode is a class used to describe a decision in the...">KnapsackSearchNode</a>*,
<a name="l00065"></a>00065   vector&lt;KnapsackSearchNode*&gt;,
<a name="l00066"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#a5182e510e461417468d407bf39d8d60">00066</a>   <a class="code" href="structoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03_1_1CompareKnapsackSd3ab3a4a7f92fc67febd9bc24b2262ed.html" title="Comparator used to sort search nodes in the priority queue in order to pop first...">CompareKnapsackSearchNodePtrInDecreasingUpperBoundOrder</a>&gt; <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#a5182e510e461417468d407bf39d8d60">SearchQueue</a>;
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 <span class="comment">// Returns true when value_1 * value_2 may overflow int64.</span>
<a name="l00069"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#569efa2b714bdc8fdaa023c298afe575">00069</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#569efa2b714bdc8fdaa023c298afe575" title="Returns true when value_1 * value_2 may overflow int64.">WillProductOverflow</a>(int64 value_1, int64 value_2) {
<a name="l00070"></a>00070   <span class="keyword">const</span> <span class="keywordtype">int</span> MostSignificantBitPosition1 = MostSignificantBitPosition64(value_1);
<a name="l00071"></a>00071   <span class="keyword">const</span> <span class="keywordtype">int</span> MostSignificantBitPosition2 = MostSignificantBitPosition64(value_2);
<a name="l00072"></a>00072   <span class="comment">// The sum should be less than 61 to be safe as we are only considering the</span>
<a name="l00073"></a>00073   <span class="comment">// most significant bit and dealing with int64 instead of uint64.</span>
<a name="l00074"></a>00074   <span class="keyword">const</span> <span class="keywordtype">int</span> kOverflow = 61;
<a name="l00075"></a>00075   <span class="keywordflow">return</span> MostSignificantBitPosition1 + MostSignificantBitPosition2 &gt; kOverflow;
<a name="l00076"></a>00076 }
<a name="l00077"></a>00077 
<a name="l00078"></a>00078 <span class="comment">// Returns an upper bound of (numerator_1 * numerator_2) / denominator</span>
<a name="l00079"></a><a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#25a300cd3966269a71a67c04f77fe0e3">00079</a> int64 <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#25a300cd3966269a71a67c04f77fe0e3" title="Returns an upper bound of (numerator_1 * numerator_2) / denominator.">UpperBoundOfRatio</a>(int64 numerator_1,
<a name="l00080"></a>00080                         int64 numerator_2,
<a name="l00081"></a>00081                         int64 denominator) {
<a name="l00082"></a>00082   DCHECK_GT(denominator, 0LL);
<a name="l00083"></a>00083   <span class="keywordflow">if</span> (!<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#569efa2b714bdc8fdaa023c298afe575" title="Returns true when value_1 * value_2 may overflow int64.">WillProductOverflow</a>(numerator_1, numerator_2)) {
<a name="l00084"></a>00084     <span class="keyword">const</span> int64 numerator = numerator_1 * numerator_2;
<a name="l00085"></a>00085     <span class="comment">// Round to zero.</span>
<a name="l00086"></a>00086     <span class="keyword">const</span> int64 result = numerator / denominator;
<a name="l00087"></a>00087     <span class="keywordflow">return</span> result;
<a name="l00088"></a>00088   } <span class="keywordflow">else</span> {
<a name="l00089"></a>00089     <span class="keyword">const</span> <span class="keywordtype">double</span> ratio = (<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(numerator_1)
<a name="l00090"></a>00090                           * static_cast&lt;double&gt;(numerator_2))
<a name="l00091"></a>00091         / static_cast&lt;double&gt;(denominator);
<a name="l00092"></a>00092     <span class="comment">// Round near.</span>
<a name="l00093"></a>00093     <span class="keyword">const</span> int64 result = <span class="keyword">static_cast&lt;</span>int64<span class="keyword">&gt;</span>(floor(ratio + 0.5));
<a name="l00094"></a>00094     <span class="keywordflow">return</span> result;
<a name="l00095"></a>00095   }
<a name="l00096"></a>00096 }
<a name="l00097"></a>00097 
<a name="l00098"></a>00098 }  <span class="comment">// local namespace</span>
<a name="l00099"></a>00099 
<a name="l00100"></a>00100 <span class="comment">// ----- KnapsackSearchNode -----</span>
<a name="l00101"></a><a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#e4b93f14ee40150e79e0551006a93705">00101</a> <a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#e4b93f14ee40150e79e0551006a93705" title="local namespace">KnapsackSearchNode::KnapsackSearchNode</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1KnapsackSearchNode.html" title="KnapsackSearchNode KnapsackSearchNode is a class used to describe a decision in the...">KnapsackSearchNode</a>* <span class="keyword">const</span> parent,
<a name="l00102"></a>00102                                        <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1KnapsackAssignment.html" title="The following code defines needed classes for the KnapsackGenericSolver class which...">KnapsackAssignment</a>&amp; assignment)
<a name="l00103"></a>00103     : depth_((parent == NULL) ? 0 : parent-&gt;depth() + 1),
<a name="l00104"></a>00104       parent_(parent),
<a name="l00105"></a>00105       assignment_(assignment),
<a name="l00106"></a>00106       current_profit_(0),
<a name="l00107"></a>00107       profit_upper_bound_(kint64max),
<a name="l00108"></a>00108       next_item_id_(<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#5a2dab00159c2bbae70017a6ff34de31">kNoSelection</a>) {
<a name="l00109"></a>00109 }
<a name="l00110"></a>00110 
<a name="l00111"></a>00111 <span class="comment">// ----- KnapsackSearchPath -----</span>
<a name="l00112"></a><a class="code" href="classoperations__research_1_1KnapsackSearchPath.html#459653bd55ab09a55714f660419367b1">00112</a> KnapsackSearchPath::KnapsackSearchPath(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1KnapsackSearchNode.html" title="KnapsackSearchNode KnapsackSearchNode is a class used to describe a decision in the...">KnapsackSearchNode</a>&amp; from,
<a name="l00113"></a>00113                                        <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1KnapsackSearchNode.html" title="KnapsackSearchNode KnapsackSearchNode is a class used to describe a decision in the...">KnapsackSearchNode</a>&amp; to)
<a name="l00114"></a>00114     : from_(from),
<a name="l00115"></a>00115       via_(NULL),
<a name="l00116"></a>00116       to_(to) {
<a name="l00117"></a>00117 }
<a name="l00118"></a>00118 
<a name="l00119"></a><a class="code" href="classoperations__research_1_1KnapsackSearchPath.html#91d3f4f27442d3ee1f748811d5d0d964">00119</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1KnapsackSearchPath.html#91d3f4f27442d3ee1f748811d5d0d964">KnapsackSearchPath::Init</a>() {
<a name="l00120"></a>00120   <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1KnapsackSearchNode.html" title="KnapsackSearchNode KnapsackSearchNode is a class used to describe a decision in the...">KnapsackSearchNode</a>* node_from = <a class="code" href="classoperations__research_1_1KnapsackSearchPath.html#5b7eab42722a4a7232785eb55130f390">MoveUpToDepth</a>(<a class="code" href="classoperations__research_1_1KnapsackSearchPath.html#bdcf5c81a7f03aeea4529eb73f46aa4d">from_</a>, <a class="code" href="classoperations__research_1_1KnapsackSearchPath.html#6920f68420ecc37d1e1a82d42e2e99c5">to_</a>.<a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#d03ab22cb5ffd4b4e775e19a8bf0b892">depth</a>());
<a name="l00121"></a>00121   <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1KnapsackSearchNode.html" title="KnapsackSearchNode KnapsackSearchNode is a class used to describe a decision in the...">KnapsackSearchNode</a>* node_to = <a class="code" href="classoperations__research_1_1KnapsackSearchPath.html#5b7eab42722a4a7232785eb55130f390">MoveUpToDepth</a>(<a class="code" href="classoperations__research_1_1KnapsackSearchPath.html#6920f68420ecc37d1e1a82d42e2e99c5">to_</a>, <a class="code" href="classoperations__research_1_1KnapsackSearchPath.html#bdcf5c81a7f03aeea4529eb73f46aa4d">from_</a>.<a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#d03ab22cb5ffd4b4e775e19a8bf0b892">depth</a>());
<a name="l00122"></a>00122   CHECK_EQ(node_from-&gt;<a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#d03ab22cb5ffd4b4e775e19a8bf0b892">depth</a>(), node_to-&gt;depth());
<a name="l00123"></a>00123 
<a name="l00124"></a>00124   <span class="comment">// Find common parent.</span>
<a name="l00125"></a>00125   <span class="keywordflow">while</span> (node_from != node_to) {
<a name="l00126"></a>00126     node_from = node_from-&gt;<a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#caa1e816412b67a0cbe73c7a98e03888">parent</a>();
<a name="l00127"></a>00127     node_to = node_to-&gt;<a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#caa1e816412b67a0cbe73c7a98e03888">parent</a>();
<a name="l00128"></a>00128   }
<a name="l00129"></a>00129   <a class="code" href="classoperations__research_1_1KnapsackSearchPath.html#b11b23674ee3ab94d39baae1e7b929b9" title="Computed in &amp;#39;Init&amp;#39;.">via_</a> = node_from;
<a name="l00130"></a>00130 }
<a name="l00131"></a>00131 
<a name="l00132"></a><a class="code" href="classoperations__research_1_1KnapsackSearchPath.html#5b7eab42722a4a7232785eb55130f390">00132</a> <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1KnapsackSearchNode.html" title="KnapsackSearchNode KnapsackSearchNode is a class used to describe a decision in the...">KnapsackSearchNode</a>* <a class="code" href="classoperations__research_1_1KnapsackSearchPath.html#5b7eab42722a4a7232785eb55130f390">KnapsackSearchPath::MoveUpToDepth</a>(
<a name="l00133"></a>00133     <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1KnapsackSearchNode.html" title="KnapsackSearchNode KnapsackSearchNode is a class used to describe a decision in the...">KnapsackSearchNode</a>&amp; node,
<a name="l00134"></a>00134     <span class="keywordtype">int</span> depth)<span class="keyword"> const </span>{
<a name="l00135"></a>00135   <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1KnapsackSearchNode.html" title="KnapsackSearchNode KnapsackSearchNode is a class used to describe a decision in the...">KnapsackSearchNode</a>* current_node = &amp;node;
<a name="l00136"></a>00136   <span class="keywordflow">while</span> (current_node-&gt;<a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#d03ab22cb5ffd4b4e775e19a8bf0b892">depth</a>() &gt; depth) {
<a name="l00137"></a>00137     current_node = current_node-&gt;<a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#caa1e816412b67a0cbe73c7a98e03888">parent</a>();
<a name="l00138"></a>00138   }
<a name="l00139"></a>00139   <span class="keywordflow">return</span> current_node;
<a name="l00140"></a>00140 }
<a name="l00141"></a>00141 
<a name="l00142"></a>00142 <span class="comment">// ----- KnapsackState -----</span>
<a name="l00143"></a><a class="code" href="classoperations__research_1_1KnapsackState.html#db083eb4c9bb7413cff7262e58c5abe0">00143</a> <a class="code" href="classoperations__research_1_1KnapsackState.html#db083eb4c9bb7413cff7262e58c5abe0" title="KnapsackState.">KnapsackState::KnapsackState</a>() : is_bound_(), is_in_() {}
<a name="l00144"></a>00144 
<a name="l00145"></a><a class="code" href="classoperations__research_1_1KnapsackState.html#6b5c2748ef2668630c5bfdfa56093e95">00145</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1KnapsackState.html#6b5c2748ef2668630c5bfdfa56093e95" title="Initializes vectors with number_of_items set to false (i.e. not bound yet).">KnapsackState::Init</a>(<span class="keywordtype">int</span> number_of_items) {
<a name="l00146"></a>00146   <a class="code" href="classoperations__research_1_1KnapsackState.html#9f6fdb199a508895cc2a91bfec813e7d" title="Vectors &amp;#39;is_bound_&amp;#39; and &amp;#39;is_in_&amp;#39; contain a boolean value for each...">is_bound_</a>.assign(number_of_items, <span class="keyword">false</span>);
<a name="l00147"></a>00147   <a class="code" href="classoperations__research_1_1KnapsackState.html#d5f20d1918f94f3811f6fc2313f200df">is_in_</a>.assign(number_of_items, <span class="keyword">false</span>);
<a name="l00148"></a>00148 }
<a name="l00149"></a>00149 
<a name="l00150"></a>00150 <span class="comment">// Returns false when the state is invalid.</span>
<a name="l00151"></a><a class="code" href="classoperations__research_1_1KnapsackState.html#3fa5da9a819f219f4c51e410fe12c1a3">00151</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1KnapsackState.html#3fa5da9a819f219f4c51e410fe12c1a3" title="Updates the state by applying or reverting a decision.">KnapsackState::UpdateState</a>(<span class="keywordtype">bool</span> revert,
<a name="l00152"></a>00152                                 <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1KnapsackAssignment.html" title="The following code defines needed classes for the KnapsackGenericSolver class which...">KnapsackAssignment</a>&amp; assignment) {
<a name="l00153"></a>00153   <span class="keywordflow">if</span> (revert) {
<a name="l00154"></a>00154     <a class="code" href="classoperations__research_1_1KnapsackState.html#9f6fdb199a508895cc2a91bfec813e7d" title="Vectors &amp;#39;is_bound_&amp;#39; and &amp;#39;is_in_&amp;#39; contain a boolean value for each...">is_bound_</a>[assignment.<a class="code" href="structoperations__research_1_1KnapsackAssignment.html#91340b6da590fae44e79199666ccf468">item_id</a>] = <span class="keyword">false</span>;
<a name="l00155"></a>00155   } <span class="keywordflow">else</span> {
<a name="l00156"></a>00156     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1KnapsackState.html#9f6fdb199a508895cc2a91bfec813e7d" title="Vectors &amp;#39;is_bound_&amp;#39; and &amp;#39;is_in_&amp;#39; contain a boolean value for each...">is_bound_</a>[assignment.<a class="code" href="structoperations__research_1_1KnapsackAssignment.html#91340b6da590fae44e79199666ccf468">item_id</a>]
<a name="l00157"></a>00157         &amp;&amp; <a class="code" href="classoperations__research_1_1KnapsackState.html#d5f20d1918f94f3811f6fc2313f200df">is_in_</a>[assignment.<a class="code" href="structoperations__research_1_1KnapsackAssignment.html#91340b6da590fae44e79199666ccf468">item_id</a>] != assignment.<a class="code" href="structoperations__research_1_1KnapsackAssignment.html#b4ba3de70cb7aa3ad9aaee3dd2c60b7b">is_in</a>) {
<a name="l00158"></a>00158       <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00159"></a>00159     }
<a name="l00160"></a>00160     <a class="code" href="classoperations__research_1_1KnapsackState.html#9f6fdb199a508895cc2a91bfec813e7d" title="Vectors &amp;#39;is_bound_&amp;#39; and &amp;#39;is_in_&amp;#39; contain a boolean value for each...">is_bound_</a>[assignment.<a class="code" href="structoperations__research_1_1KnapsackAssignment.html#91340b6da590fae44e79199666ccf468">item_id</a>] = <span class="keyword">true</span>;
<a name="l00161"></a>00161     <a class="code" href="classoperations__research_1_1KnapsackState.html#d5f20d1918f94f3811f6fc2313f200df">is_in_</a>[assignment.<a class="code" href="structoperations__research_1_1KnapsackAssignment.html#91340b6da590fae44e79199666ccf468">item_id</a>] = assignment.<a class="code" href="structoperations__research_1_1KnapsackAssignment.html#b4ba3de70cb7aa3ad9aaee3dd2c60b7b">is_in</a>;
<a name="l00162"></a>00162   }
<a name="l00163"></a>00163   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00164"></a>00164 }
<a name="l00165"></a>00165 
<a name="l00166"></a>00166 <span class="comment">// ----- KnapsackPropagator -----</span>
<a name="l00167"></a><a class="code" href="classoperations__research_1_1KnapsackPropagator.html#8d55d0c6ac3f05b72100f1635cfd2250">00167</a> <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#8d55d0c6ac3f05b72100f1635cfd2250" title="KnapsackPropagator.">KnapsackPropagator::KnapsackPropagator</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1KnapsackState.html" title="KnapsackState KnapsackState represents a partial solution to the knapsack problem...">KnapsackState</a>&amp; state)
<a name="l00168"></a>00168     : items_(),
<a name="l00169"></a>00169       current_profit_(0),
<a name="l00170"></a>00170       profit_lower_bound_(0),
<a name="l00171"></a>00171       profit_upper_bound_(kint64max),
<a name="l00172"></a>00172       state_(state) {
<a name="l00173"></a>00173 }
<a name="l00174"></a>00174 
<a name="l00175"></a><a class="code" href="classoperations__research_1_1KnapsackPropagator.html#8fce110c9e0d27acfa950f295105db98">00175</a> <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#8fce110c9e0d27acfa950f295105db98">KnapsackPropagator::~KnapsackPropagator</a>() {
<a name="l00176"></a>00176   STLDeleteElements(&amp;<a class="code" href="classoperations__research_1_1KnapsackPropagator.html#5a0a4eb9fcd8a1daea4f43cfadc9582c">items_</a>);
<a name="l00177"></a>00177 }
<a name="l00178"></a>00178 
<a name="l00179"></a><a class="code" href="classoperations__research_1_1KnapsackPropagator.html#996e50b37b39c1baee7286d0ced28176">00179</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#996e50b37b39c1baee7286d0ced28176" title="Initializes data structure and then calls InitPropagator.">KnapsackPropagator::Init</a>(<span class="keyword">const</span> vector&lt;int64&gt;&amp; profits,
<a name="l00180"></a>00180                               <span class="keyword">const</span> vector&lt;int64&gt;&amp; weights) {
<a name="l00181"></a>00181   <span class="keyword">const</span> <span class="keywordtype">int</span> number_of_items = profits.size();
<a name="l00182"></a>00182   <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#5a0a4eb9fcd8a1daea4f43cfadc9582c">items_</a>.assign(number_of_items, static_cast&lt;KnapsackItemPtr&gt;(NULL));
<a name="l00183"></a>00183   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; number_of_items; ++i) {
<a name="l00184"></a>00184     <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#5a0a4eb9fcd8a1daea4f43cfadc9582c">items_</a>[i] = <span class="keyword">new</span> <a class="code" href="structoperations__research_1_1KnapsackItem.html" title="KnapsackItem KnapsackItem is a small struct to pair an item weight with its corresponding...">KnapsackItem</a>(i, weights[i], profits[i]);
<a name="l00185"></a>00185   }
<a name="l00186"></a>00186   <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#7358dfdcd148b16fafb70654c76beef0">current_profit_</a> = 0;
<a name="l00187"></a>00187   <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#4dfbf4601766ba4b4780a9c7b4b952d5">profit_lower_bound_</a> = kint64min;
<a name="l00188"></a>00188   <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#a3194cf559e44eca542f12368b5188bf">profit_upper_bound_</a> = kint64max;
<a name="l00189"></a>00189   <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#eb99e95f19c68257f0b450cfff8fc3d0" title="Initializes data structure.">InitPropagator</a>();
<a name="l00190"></a>00190 }
<a name="l00191"></a>00191 
<a name="l00192"></a><a class="code" href="classoperations__research_1_1KnapsackPropagator.html#5843f83c839a81d039724b6d49ba325a">00192</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#5843f83c839a81d039724b6d49ba325a" title="Updates data structure and then calls UpdatePropagator.">KnapsackPropagator::Update</a>(<span class="keywordtype">bool</span> revert,
<a name="l00193"></a>00193                                 <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1KnapsackAssignment.html" title="The following code defines needed classes for the KnapsackGenericSolver class which...">KnapsackAssignment</a>&amp; assignment) {
<a name="l00194"></a>00194   <span class="keywordflow">if</span> (assignment.<a class="code" href="structoperations__research_1_1KnapsackAssignment.html#b4ba3de70cb7aa3ad9aaee3dd2c60b7b">is_in</a>) {
<a name="l00195"></a>00195     <span class="keywordflow">if</span> (revert) {
<a name="l00196"></a>00196       <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#7358dfdcd148b16fafb70654c76beef0">current_profit_</a> -= <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#5a0a4eb9fcd8a1daea4f43cfadc9582c">items_</a>[assignment.<a class="code" href="structoperations__research_1_1KnapsackAssignment.html#91340b6da590fae44e79199666ccf468">item_id</a>]-&gt;profit;
<a name="l00197"></a>00197     } <span class="keywordflow">else</span> {
<a name="l00198"></a>00198       <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#7358dfdcd148b16fafb70654c76beef0">current_profit_</a> += <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#5a0a4eb9fcd8a1daea4f43cfadc9582c">items_</a>[assignment.<a class="code" href="structoperations__research_1_1KnapsackAssignment.html#91340b6da590fae44e79199666ccf468">item_id</a>]-&gt;profit;
<a name="l00199"></a>00199     }
<a name="l00200"></a>00200   }
<a name="l00201"></a>00201   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#baf6d9225cde1b0d83d1a54299705ccb" title="Updates internal data structure incrementally.">UpdatePropagator</a>(revert, assignment);
<a name="l00202"></a>00202 }
<a name="l00203"></a>00203 
<a name="l00204"></a><a class="code" href="classoperations__research_1_1KnapsackPropagator.html#9b5784a2e7890cb274a47b22a3bd2632">00204</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#9b5784a2e7890cb274a47b22a3bd2632" title="Copies the current state into &amp;#39;solution&amp;#39;.">KnapsackPropagator::CopyCurrentStateToSolution</a>(
<a name="l00205"></a>00205     <span class="keywordtype">bool</span> has_one_propagator,
<a name="l00206"></a>00206     vector&lt;bool&gt;* solution)<span class="keyword"> const </span>{
<a name="l00207"></a>00207   CHECK_NOTNULL(solution);
<a name="l00208"></a>00208   <span class="keywordflow">for</span> (ConstIter&lt;vector&lt;KnapsackItemPtr&gt; &gt; it(<a class="code" href="classoperations__research_1_1KnapsackPropagator.html#5a0a4eb9fcd8a1daea4f43cfadc9582c">items_</a>); !it.at_end(); ++it) {
<a name="l00209"></a>00209     <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1KnapsackItem.html" title="KnapsackItem KnapsackItem is a small struct to pair an item weight with its corresponding...">KnapsackItem</a>* <span class="keyword">const</span> item = *it;
<a name="l00210"></a>00210     <span class="keyword">const</span> <span class="keywordtype">int</span> item_id = item-&gt;<a class="code" href="structoperations__research_1_1KnapsackItem.html#69aae0cb6039a8a356744648c8dfb9c1" title="The &amp;#39;id&amp;#39; field is used to retrieve the initial item in order to communicate...">id</a>;
<a name="l00211"></a>00211     (*solution)[item_id] = <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#5f83226614c10f86fbb6a93f0e45699a">state_</a>.<a class="code" href="classoperations__research_1_1KnapsackState.html#655599e6b5868d245dc5bdbff1e58562">is_bound</a>(item_id) &amp;&amp; <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#5f83226614c10f86fbb6a93f0e45699a">state_</a>.<a class="code" href="classoperations__research_1_1KnapsackState.html#e6177760c102009215a18f4a8164e296">is_in</a>(item_id);
<a name="l00212"></a>00212   }
<a name="l00213"></a>00213   <span class="keywordflow">if</span> (has_one_propagator) {
<a name="l00214"></a>00214     <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#08908297f2e1112fa7883c09496b91b6" title="Copies the current state into &amp;#39;solution&amp;#39;.">CopyCurrentStateToSolutionPropagator</a>(solution);
<a name="l00215"></a>00215   }
<a name="l00216"></a>00216 }
<a name="l00217"></a>00217 
<a name="l00218"></a>00218 
<a name="l00219"></a>00219 <span class="comment">// ----- KnapsackCapacityPropagator -----</span>
<a name="l00220"></a><a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#9dd517fbac9988f24173eaf86238976e">00220</a> <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#9dd517fbac9988f24173eaf86238976e" title="KnapsackCapacityPropagator.">KnapsackCapacityPropagator::KnapsackCapacityPropagator</a>(
<a name="l00221"></a>00221     <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1KnapsackState.html" title="KnapsackState KnapsackState represents a partial solution to the knapsack problem...">KnapsackState</a>&amp; <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#f99f78cdf7d5a7fd2f39ecb686053bb3">state</a>,
<a name="l00222"></a>00222     int64 capacity)
<a name="l00223"></a>00223     : <a class="code" href="classoperations__research_1_1KnapsackPropagator.html" title="KnapsackPropagator KnapsackPropagator is the base to model and propagate a constraint...">KnapsackPropagator</a>(state),
<a name="l00224"></a>00224       capacity_(capacity),
<a name="l00225"></a>00225       consumed_capacity_(0),
<a name="l00226"></a>00226       break_item_id_(<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#5a2dab00159c2bbae70017a6ff34de31">kNoSelection</a>),
<a name="l00227"></a>00227       sorted_items_(),
<a name="l00228"></a>00228       profit_max_(0) {
<a name="l00229"></a>00229 }
<a name="l00230"></a>00230 
<a name="l00231"></a><a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#39b58fe16f376b293d12aeed3aa02f37">00231</a> <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#39b58fe16f376b293d12aeed3aa02f37">KnapsackCapacityPropagator::~KnapsackCapacityPropagator</a>() {
<a name="l00232"></a>00232 }
<a name="l00233"></a>00233 
<a name="l00234"></a>00234 <span class="comment">// TODO(user): Make it more incremental, by saving the break item in a</span>
<a name="l00235"></a>00235 <span class="comment">// search node for instance.</span>
<a name="l00236"></a><a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#6adba495113d9029500bdcf212558dd0">00236</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#6adba495113d9029500bdcf212558dd0">KnapsackCapacityPropagator::ComputeProfitBounds</a>() {
<a name="l00237"></a>00237   <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#697a86fbe4ab12732c8e6972ebdd5947">set_profit_lower_bound</a>(<a class="code" href="classoperations__research_1_1KnapsackPropagator.html#e3c81bb19d396fb12ff7262585f69306">current_profit</a>());
<a name="l00238"></a>00238   <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#6846aa3f8338b84c656ed486bc0d49b9">break_item_id_</a> = <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#5a2dab00159c2bbae70017a6ff34de31">kNoSelection</a>;
<a name="l00239"></a>00239 
<a name="l00240"></a>00240   int64 remaining_capacity = <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#123367768b4aa4ad8e39752dfbfc359a">capacity_</a> - <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#3ddce916bf350e1bdafc417fbcc8e113">consumed_capacity_</a>;
<a name="l00241"></a>00241   <span class="keywordtype">int</span> break_sorted_item_id = <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#5a2dab00159c2bbae70017a6ff34de31">kNoSelection</a>;
<a name="l00242"></a>00242   <span class="keyword">const</span> <span class="keywordtype">int</span> number_of_sorted_items = <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#1de321e0990ab397e692ffcaf9c12959">sorted_items_</a>.size();
<a name="l00243"></a>00243   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> sorted_id = 0; sorted_id &lt; number_of_sorted_items; ++sorted_id) {
<a name="l00244"></a>00244     <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1KnapsackItem.html" title="KnapsackItem KnapsackItem is a small struct to pair an item weight with its corresponding...">KnapsackItem</a>* <span class="keyword">const</span> item = <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#1de321e0990ab397e692ffcaf9c12959">sorted_items_</a>[sorted_id];
<a name="l00245"></a>00245     <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1KnapsackPropagator.html#f99f78cdf7d5a7fd2f39ecb686053bb3">state</a>().is_bound(item-&gt;<a class="code" href="structoperations__research_1_1KnapsackItem.html#69aae0cb6039a8a356744648c8dfb9c1" title="The &amp;#39;id&amp;#39; field is used to retrieve the initial item in order to communicate...">id</a>)) {
<a name="l00246"></a>00246       <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#6846aa3f8338b84c656ed486bc0d49b9">break_item_id_</a> = item-&gt;<a class="code" href="structoperations__research_1_1KnapsackItem.html#69aae0cb6039a8a356744648c8dfb9c1" title="The &amp;#39;id&amp;#39; field is used to retrieve the initial item in order to communicate...">id</a>;
<a name="l00247"></a>00247 
<a name="l00248"></a>00248       <span class="keywordflow">if</span> (remaining_capacity &gt;= item-&gt;<a class="code" href="structoperations__research_1_1KnapsackItem.html#b974e9e70c585c50c96851ecb454d882">weight</a>) {
<a name="l00249"></a>00249         remaining_capacity -= item-&gt;<a class="code" href="structoperations__research_1_1KnapsackItem.html#b974e9e70c585c50c96851ecb454d882">weight</a>;
<a name="l00250"></a>00250         <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#697a86fbe4ab12732c8e6972ebdd5947">set_profit_lower_bound</a>(<a class="code" href="classoperations__research_1_1KnapsackPropagator.html#75629119df27253b732fb1bd6f208112">profit_lower_bound</a>() + item-&gt;<a class="code" href="structoperations__research_1_1KnapsackItem.html#057015810b94bfb1b5efac74e9d8d487">profit</a>);
<a name="l00251"></a>00251       } <span class="keywordflow">else</span> {
<a name="l00252"></a>00252         break_sorted_item_id = sorted_id;
<a name="l00253"></a>00253         <span class="keywordflow">break</span>;
<a name="l00254"></a>00254       }
<a name="l00255"></a>00255     }
<a name="l00256"></a>00256   }
<a name="l00257"></a>00257 
<a name="l00258"></a>00258   <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#7bbc1ccc57318641a01cd253299f5861">set_profit_upper_bound</a>(<a class="code" href="classoperations__research_1_1KnapsackPropagator.html#75629119df27253b732fb1bd6f208112">profit_lower_bound</a>());
<a name="l00259"></a>00259 
<a name="l00260"></a>00260   <span class="keywordflow">if</span> (break_sorted_item_id != <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#5a2dab00159c2bbae70017a6ff34de31">kNoSelection</a>) {
<a name="l00261"></a>00261     <span class="keyword">const</span> int64 additional_profit = <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#0e90329c87b3700874fe7e0bf5cf1554" title="An obvious additional profit upper bound corresponds to the linear relaxation: remaining_capacity...">GetAdditionalProfit</a>(remaining_capacity,
<a name="l00262"></a>00262                                                         break_sorted_item_id);
<a name="l00263"></a>00263     <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#7bbc1ccc57318641a01cd253299f5861">set_profit_upper_bound</a>(<a class="code" href="classoperations__research_1_1KnapsackPropagator.html#c43c5fca86e7bfbe630f403b26250b84">profit_upper_bound</a>() + additional_profit);
<a name="l00264"></a>00264   }
<a name="l00265"></a>00265 }
<a name="l00266"></a>00266 
<a name="l00267"></a><a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#7e7251f29470ff0420ef01f231f5cb81">00267</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#7e7251f29470ff0420ef01f231f5cb81" title="Initializes KnapsackCapacityPropagator (eg.">KnapsackCapacityPropagator::InitPropagator</a>() {
<a name="l00268"></a>00268   <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#3ddce916bf350e1bdafc417fbcc8e113">consumed_capacity_</a> = 0;
<a name="l00269"></a>00269   <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#6846aa3f8338b84c656ed486bc0d49b9">break_item_id_</a> = <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#5a2dab00159c2bbae70017a6ff34de31">kNoSelection</a>;
<a name="l00270"></a>00270   <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#1de321e0990ab397e692ffcaf9c12959">sorted_items_</a> = <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#53429fbef32b42f69b7a587a09aaf580">items</a>();
<a name="l00271"></a>00271   <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#7cc4ca0598c5f2d8f2533ecd567c26f3">profit_max_</a> = 0;
<a name="l00272"></a>00272   <span class="keywordflow">for</span> (ConstIter&lt;vector&lt;KnapsackItemPtr&gt; &gt; it(<a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#1de321e0990ab397e692ffcaf9c12959">sorted_items_</a>);
<a name="l00273"></a>00273        !it.at_end(); ++it) {
<a name="l00274"></a>00274     <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#7cc4ca0598c5f2d8f2533ecd567c26f3">profit_max_</a> = max(<a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#7cc4ca0598c5f2d8f2533ecd567c26f3">profit_max_</a>, (*it)-&gt;profit);
<a name="l00275"></a>00275   }
<a name="l00276"></a>00276   ++<a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#7cc4ca0598c5f2d8f2533ecd567c26f3">profit_max_</a>;
<a name="l00277"></a>00277   CompareKnapsackItemsInDecreasingEfficiencyOrder compare_object(<a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#7cc4ca0598c5f2d8f2533ecd567c26f3">profit_max_</a>);
<a name="l00278"></a>00278   sort(<a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#1de321e0990ab397e692ffcaf9c12959">sorted_items_</a>.begin(), <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#1de321e0990ab397e692ffcaf9c12959">sorted_items_</a>.end(), compare_object);
<a name="l00279"></a>00279 }
<a name="l00280"></a>00280 
<a name="l00281"></a>00281 <span class="comment">// Returns false when the propagator fails.</span>
<a name="l00282"></a><a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#b3e2a0bc78fb1b79be1c32bf718973c0">00282</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#b3e2a0bc78fb1b79be1c32bf718973c0" title="Updates internal data structure incrementally (ie.">KnapsackCapacityPropagator::UpdatePropagator</a>(
<a name="l00283"></a>00283     <span class="keywordtype">bool</span> revert,
<a name="l00284"></a>00284     <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1KnapsackAssignment.html" title="The following code defines needed classes for the KnapsackGenericSolver class which...">KnapsackAssignment</a>&amp; assignment) {
<a name="l00285"></a>00285   <span class="keywordflow">if</span> (assignment.<a class="code" href="structoperations__research_1_1KnapsackAssignment.html#b4ba3de70cb7aa3ad9aaee3dd2c60b7b">is_in</a>) {
<a name="l00286"></a>00286     <span class="keywordflow">if</span> (revert) {
<a name="l00287"></a>00287       <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#3ddce916bf350e1bdafc417fbcc8e113">consumed_capacity_</a> -= <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#53429fbef32b42f69b7a587a09aaf580">items</a>()[assignment.<a class="code" href="structoperations__research_1_1KnapsackAssignment.html#91340b6da590fae44e79199666ccf468">item_id</a>]-&gt;weight;
<a name="l00288"></a>00288     } <span class="keywordflow">else</span> {
<a name="l00289"></a>00289       <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#3ddce916bf350e1bdafc417fbcc8e113">consumed_capacity_</a> += <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#53429fbef32b42f69b7a587a09aaf580">items</a>()[assignment.<a class="code" href="structoperations__research_1_1KnapsackAssignment.html#91340b6da590fae44e79199666ccf468">item_id</a>]-&gt;weight;
<a name="l00290"></a>00290       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#3ddce916bf350e1bdafc417fbcc8e113">consumed_capacity_</a> &gt; <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#123367768b4aa4ad8e39752dfbfc359a">capacity_</a>) {
<a name="l00291"></a>00291         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00292"></a>00292       }
<a name="l00293"></a>00293     }
<a name="l00294"></a>00294   }
<a name="l00295"></a>00295   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00296"></a>00296 }
<a name="l00297"></a>00297 
<a name="l00298"></a><a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#775087fd7387891453b145b02ce00b17">00298</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#775087fd7387891453b145b02ce00b17" title="Copies the current state into &amp;#39;solution&amp;#39;.">KnapsackCapacityPropagator::CopyCurrentStateToSolutionPropagator</a>(
<a name="l00299"></a>00299     vector&lt;bool&gt;* solution)<span class="keyword"> const </span>{
<a name="l00300"></a>00300   CHECK_NOTNULL(solution);
<a name="l00301"></a>00301   int64 remaining_capacity = <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#123367768b4aa4ad8e39752dfbfc359a">capacity_</a> - <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#3ddce916bf350e1bdafc417fbcc8e113">consumed_capacity_</a>;
<a name="l00302"></a>00302   <span class="keywordflow">for</span> (ConstIter&lt;vector&lt;KnapsackItemPtr&gt; &gt; it(<a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#1de321e0990ab397e692ffcaf9c12959">sorted_items_</a>);
<a name="l00303"></a>00303        !it.at_end(); ++it) {
<a name="l00304"></a>00304     <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1KnapsackItem.html" title="KnapsackItem KnapsackItem is a small struct to pair an item weight with its corresponding...">KnapsackItem</a>* <span class="keyword">const</span> item = *it;
<a name="l00305"></a>00305     <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1KnapsackPropagator.html#f99f78cdf7d5a7fd2f39ecb686053bb3">state</a>().<a class="code" href="classoperations__research_1_1KnapsackState.html#655599e6b5868d245dc5bdbff1e58562">is_bound</a>(item-&gt;<a class="code" href="structoperations__research_1_1KnapsackItem.html#69aae0cb6039a8a356744648c8dfb9c1" title="The &amp;#39;id&amp;#39; field is used to retrieve the initial item in order to communicate...">id</a>)) {
<a name="l00306"></a>00306       <span class="keywordflow">if</span> (remaining_capacity &gt;= item-&gt;<a class="code" href="structoperations__research_1_1KnapsackItem.html#b974e9e70c585c50c96851ecb454d882">weight</a>) {
<a name="l00307"></a>00307         remaining_capacity -= item-&gt;<a class="code" href="structoperations__research_1_1KnapsackItem.html#b974e9e70c585c50c96851ecb454d882">weight</a>;
<a name="l00308"></a>00308         (*solution)[item-&gt;<a class="code" href="structoperations__research_1_1KnapsackItem.html#69aae0cb6039a8a356744648c8dfb9c1" title="The &amp;#39;id&amp;#39; field is used to retrieve the initial item in order to communicate...">id</a>] = <span class="keyword">true</span>;
<a name="l00309"></a>00309       } <span class="keywordflow">else</span> {
<a name="l00310"></a>00310         <span class="keywordflow">return</span>;
<a name="l00311"></a>00311       }
<a name="l00312"></a>00312     }
<a name="l00313"></a>00313   }
<a name="l00314"></a>00314 }
<a name="l00315"></a>00315 
<a name="l00316"></a><a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#0e90329c87b3700874fe7e0bf5cf1554">00316</a> int64 <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#0e90329c87b3700874fe7e0bf5cf1554" title="An obvious additional profit upper bound corresponds to the linear relaxation: remaining_capacity...">KnapsackCapacityPropagator::GetAdditionalProfit</a>(int64 remaining_capacity,
<a name="l00317"></a>00317                                                       <span class="keywordtype">int</span> break_item_id)<span class="keyword"> const </span>{
<a name="l00318"></a>00318   <span class="keyword">const</span> <span class="keywordtype">int</span> after_break_item_id = break_item_id + 1;
<a name="l00319"></a>00319   int64 additional_profit_when_no_break_item = 0;
<a name="l00320"></a>00320   <span class="keywordflow">if</span> (after_break_item_id &lt; <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#1de321e0990ab397e692ffcaf9c12959">sorted_items_</a>.size()) {
<a name="l00321"></a>00321     <span class="comment">// As items are sorted by decreasing profit / weight ratio, and the current</span>
<a name="l00322"></a>00322     <span class="comment">// weight is non-zero, the next_weight is non-zero too.</span>
<a name="l00323"></a>00323     <span class="keyword">const</span> int64 next_weight = <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#1de321e0990ab397e692ffcaf9c12959">sorted_items_</a>[after_break_item_id]-&gt;weight;
<a name="l00324"></a>00324     <span class="keyword">const</span> int64 next_profit = <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#1de321e0990ab397e692ffcaf9c12959">sorted_items_</a>[after_break_item_id]-&gt;profit;
<a name="l00325"></a>00325     additional_profit_when_no_break_item = <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#25a300cd3966269a71a67c04f77fe0e3" title="Returns an upper bound of (numerator_1 * numerator_2) / denominator.">UpperBoundOfRatio</a>(
<a name="l00326"></a>00326         remaining_capacity, next_profit, next_weight);
<a name="l00327"></a>00327   }
<a name="l00328"></a>00328 
<a name="l00329"></a>00329   <span class="keyword">const</span> <span class="keywordtype">int</span> before_break_item_id = break_item_id - 1;
<a name="l00330"></a>00330   int64 additional_profit_when_break_item = 0;
<a name="l00331"></a>00331   <span class="keywordflow">if</span> (before_break_item_id &gt;= 0) {
<a name="l00332"></a>00332     <span class="keyword">const</span> int64 previous_weight = <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#1de321e0990ab397e692ffcaf9c12959">sorted_items_</a>[before_break_item_id]-&gt;weight;
<a name="l00333"></a>00333     <span class="comment">// Having previous_weight == 0 means the total capacity is smaller than</span>
<a name="l00334"></a>00334     <span class="comment">// the weight of the current item. In such a case the item cannot be part</span>
<a name="l00335"></a>00335     <span class="comment">// of a solution of the local one dimension problem.</span>
<a name="l00336"></a>00336     <span class="keywordflow">if</span> (previous_weight != 0) {
<a name="l00337"></a>00337       <span class="keyword">const</span> int64 previous_profit = <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#1de321e0990ab397e692ffcaf9c12959">sorted_items_</a>[before_break_item_id]-&gt;profit;
<a name="l00338"></a>00338       <span class="keyword">const</span> int64 overused_capacity = <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#1de321e0990ab397e692ffcaf9c12959">sorted_items_</a>[break_item_id]-&gt;weight
<a name="l00339"></a>00339           - remaining_capacity;
<a name="l00340"></a>00340       <span class="keyword">const</span> int64 ratio = <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#25a300cd3966269a71a67c04f77fe0e3" title="Returns an upper bound of (numerator_1 * numerator_2) / denominator.">UpperBoundOfRatio</a>(
<a name="l00341"></a>00341           overused_capacity, previous_profit, previous_weight);
<a name="l00342"></a>00342       additional_profit_when_break_item = <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html#1de321e0990ab397e692ffcaf9c12959">sorted_items_</a>[break_item_id]-&gt;profit
<a name="l00343"></a>00343           - ratio;
<a name="l00344"></a>00344     }
<a name="l00345"></a>00345   }
<a name="l00346"></a>00346 
<a name="l00347"></a>00347   <span class="keyword">const</span> int64 additional_profit = max(additional_profit_when_no_break_item,
<a name="l00348"></a>00348                                       additional_profit_when_break_item);
<a name="l00349"></a>00349   CHECK_GE(additional_profit, 0);
<a name="l00350"></a>00350   <span class="keywordflow">return</span> additional_profit;
<a name="l00351"></a>00351 }
<a name="l00352"></a>00352 
<a name="l00353"></a>00353 <span class="comment">// ----- KnapsackGenericSolver -----</span>
<a name="l00354"></a><a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#08f0eb6df81220e7cceb895cf96fb7da">00354</a> <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#08f0eb6df81220e7cceb895cf96fb7da" title="KnapsackGenericSolver.">KnapsackGenericSolver::KnapsackGenericSolver</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; solver_name)
<a name="l00355"></a>00355     : <a class="code" href="classoperations__research_1_1BaseKnapsackSolver.html" title="BaseKnapsackSolver This the base class for knapsack solvers.">BaseKnapsackSolver</a>(solver_name),
<a name="l00356"></a>00356       propagators_(),
<a name="l00357"></a>00357       master_propagator_id_(<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#f86c01f36d41a1f80f4b3dee143890a7">kMasterPropagatorId</a>),
<a name="l00358"></a>00358       search_nodes_(),
<a name="l00359"></a>00359       <a class="code" href="classoperations__research_1_1KnapsackPropagator.html#5f83226614c10f86fbb6a93f0e45699a">state_</a>(),
<a name="l00360"></a>00360       best_solution_profit_(0),
<a name="l00361"></a>00361       best_solution_() {
<a name="l00362"></a>00362 }
<a name="l00363"></a>00363 
<a name="l00364"></a><a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#50802b91b23a6b7b9f5b95b435d8f922">00364</a> <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#50802b91b23a6b7b9f5b95b435d8f922">KnapsackGenericSolver::~KnapsackGenericSolver</a>() {
<a name="l00365"></a>00365   <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#481aaf1a34e78ceb3a3ceb65afb8541b" title="Clears internal data structure.">Clear</a>();
<a name="l00366"></a>00366 }
<a name="l00367"></a>00367 
<a name="l00368"></a><a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#a8718c3d0ba9212d5d4c6f19693a7189">00368</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#a8718c3d0ba9212d5d4c6f19693a7189" title="Initializes the solver and enters the problem to be solved.">KnapsackGenericSolver::Init</a>(<span class="keyword">const</span> vector&lt;int64&gt;&amp; profits,
<a name="l00369"></a>00369                                  <span class="keyword">const</span> vector&lt;vector&lt;int64&gt; &gt;&amp; weights,
<a name="l00370"></a>00370                                  <span class="keyword">const</span> vector&lt;int64&gt;&amp; capacities) {
<a name="l00371"></a>00371   CHECK_EQ(capacities.size(), weights.size());
<a name="l00372"></a>00372 
<a name="l00373"></a>00373   <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#481aaf1a34e78ceb3a3ceb65afb8541b" title="Clears internal data structure.">Clear</a>();
<a name="l00374"></a>00374   <span class="keyword">const</span> <span class="keywordtype">int</span> number_of_items = profits.size();
<a name="l00375"></a>00375   <span class="keyword">const</span> <span class="keywordtype">int</span> number_of_dimensions = weights.size();
<a name="l00376"></a>00376   <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#dc7d018c69c9b70de4728bbc3387ac2b">state_</a>.<a class="code" href="classoperations__research_1_1KnapsackState.html#6b5c2748ef2668630c5bfdfa56093e95" title="Initializes vectors with number_of_items set to false (i.e. not bound yet).">Init</a>(number_of_items);
<a name="l00377"></a>00377   <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#8504617d84599d152d670a1ed57c7037">best_solution_</a>.assign(number_of_items, <span class="keyword">false</span>);
<a name="l00378"></a>00378   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; number_of_dimensions; ++i) {
<a name="l00379"></a>00379     CHECK_EQ(number_of_items, weights[i].size());
<a name="l00380"></a>00380 
<a name="l00381"></a>00381     <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html" title="KnapsackCapacityPropagator KnapsackCapacityPropagator is a KnapsackPropagator used...">KnapsackCapacityPropagator</a>* propagator =
<a name="l00382"></a>00382         <span class="keyword">new</span> <a class="code" href="classoperations__research_1_1KnapsackCapacityPropagator.html" title="KnapsackCapacityPropagator KnapsackCapacityPropagator is a KnapsackPropagator used...">KnapsackCapacityPropagator</a>(<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#dc7d018c69c9b70de4728bbc3387ac2b">state_</a>, capacities[i]);
<a name="l00383"></a>00383     propagator-&gt;<a class="code" href="classoperations__research_1_1KnapsackPropagator.html#996e50b37b39c1baee7286d0ced28176" title="Initializes data structure and then calls InitPropagator.">Init</a>(profits, weights[i]);
<a name="l00384"></a>00384     <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#adcee7209178f34c4a947c93c6f8fdf7">propagators_</a>.push_back(propagator);
<a name="l00385"></a>00385   }
<a name="l00386"></a>00386   <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#1e2ae770366945d25afc3f0bee0bf40f">master_propagator_id_</a> = <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#f86c01f36d41a1f80f4b3dee143890a7">kMasterPropagatorId</a>;
<a name="l00387"></a>00387 }
<a name="l00388"></a>00388 
<a name="l00389"></a><a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#441b23df1e5a6c3fb6ffecfeedae93f8">00389</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#441b23df1e5a6c3fb6ffecfeedae93f8" title="Gets the lower and upper bound when the item is in or out of the knapsack.">KnapsackGenericSolver::GetLowerAndUpperBoundWhenItem</a>(<span class="keywordtype">int</span> item_id,
<a name="l00390"></a>00390                                                           <span class="keywordtype">bool</span> is_item_in,
<a name="l00391"></a>00391                                                           int64* lower_bound,
<a name="l00392"></a>00392                                                           int64* upper_bound) {
<a name="l00393"></a>00393   CHECK_NOTNULL(lower_bound);
<a name="l00394"></a>00394   CHECK_NOTNULL(upper_bound);
<a name="l00395"></a>00395   <a class="code" href="structoperations__research_1_1KnapsackAssignment.html" title="The following code defines needed classes for the KnapsackGenericSolver class which...">KnapsackAssignment</a> assignment(item_id, is_item_in);
<a name="l00396"></a>00396   <span class="keyword">const</span> <span class="keywordtype">bool</span> fail = !<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#1e230480b30fea1f7f1ecfb44d449928" title="Updates all propagators reverting/applying one decision.">IncrementalUpdate</a>(<span class="keyword">false</span>, assignment);
<a name="l00397"></a>00397   <span class="keywordflow">if</span> (fail) {
<a name="l00398"></a>00398     *lower_bound = 0LL;
<a name="l00399"></a>00399     *upper_bound = 0LL;
<a name="l00400"></a>00400   } <span class="keywordflow">else</span> {
<a name="l00401"></a>00401     *lower_bound = (<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#8adfc6d980c92447c17e92e338d6631e">HasOnePropagator</a>()) ?
<a name="l00402"></a>00402         <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#adcee7209178f34c4a947c93c6f8fdf7">propagators_</a>[<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#1e2ae770366945d25afc3f0bee0bf40f">master_propagator_id_</a>]-&gt;profit_lower_bound() : 0LL;
<a name="l00403"></a>00403     *upper_bound = <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#0833e35c51b403b8a7454f40aa020c10" title="Gets the aggregated (min) profit upper bound among all propagators.">GetAggregatedProfitUpperBound</a>();
<a name="l00404"></a>00404   }
<a name="l00405"></a>00405 
<a name="l00406"></a>00406   <span class="keyword">const</span> <span class="keywordtype">bool</span> fail_revert = !<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#1e230480b30fea1f7f1ecfb44d449928" title="Updates all propagators reverting/applying one decision.">IncrementalUpdate</a>(<span class="keyword">true</span>, assignment);
<a name="l00407"></a>00407   <span class="keywordflow">if</span> (fail_revert) {
<a name="l00408"></a>00408     *lower_bound = 0LL;
<a name="l00409"></a>00409     *upper_bound = 0LL;
<a name="l00410"></a>00410   }
<a name="l00411"></a>00411 }
<a name="l00412"></a>00412 
<a name="l00413"></a><a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#4ba39d2b5b1573a4e0be0b35a8f7a958">00413</a> int64 <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#4ba39d2b5b1573a4e0be0b35a8f7a958" title="Solves the problem and returns the profit of the optimal solution.">KnapsackGenericSolver::Solve</a>() {
<a name="l00414"></a>00414   <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#1f5d2d4b35108ffe40776f6bbd27d413">best_solution_profit_</a> = 0LL;
<a name="l00415"></a>00415 
<a name="l00416"></a>00416   <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#a5182e510e461417468d407bf39d8d60">SearchQueue</a> search_queue;
<a name="l00417"></a>00417   <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1KnapsackAssignment.html" title="The following code defines needed classes for the KnapsackGenericSolver class which...">KnapsackAssignment</a> assignment(<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#5a2dab00159c2bbae70017a6ff34de31">kNoSelection</a>, <span class="keyword">true</span>);
<a name="l00418"></a>00418   <a class="code" href="classoperations__research_1_1KnapsackSearchNode.html" title="KnapsackSearchNode KnapsackSearchNode is a class used to describe a decision in the...">KnapsackSearchNode</a>* root_node = <span class="keyword">new</span> <a class="code" href="classoperations__research_1_1KnapsackSearchNode.html" title="KnapsackSearchNode KnapsackSearchNode is a class used to describe a decision in the...">KnapsackSearchNode</a>(NULL, assignment);
<a name="l00419"></a>00419   root_node-&gt;<a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#2be03bd371b69f335778de84dc7ae5a8">set_current_profit</a>(<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#3b02af3fba64e97ef9c83628e9903e6c">GetCurrentProfit</a>());
<a name="l00420"></a>00420   root_node-&gt;<a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#5af222fdaf626cb0e33d2191d90b806c">set_profit_upper_bound</a>(<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#0833e35c51b403b8a7454f40aa020c10" title="Gets the aggregated (min) profit upper bound among all propagators.">GetAggregatedProfitUpperBound</a>());
<a name="l00421"></a>00421   root_node-&gt;<a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#a09bf719c32bf8f662d3c609f3e72f19">set_next_item_id</a>(<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#40a9f882e301cffcb77bd6554d3de657">GetNextItemId</a>());
<a name="l00422"></a>00422   <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#0b53d33bea0052052bf750df18027481">search_nodes_</a>.push_back(root_node);
<a name="l00423"></a>00423 
<a name="l00424"></a>00424   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#61f56c6469a34d7bf4e516ab3b5455ba" title="Returns true if new relevant search node was added to the nodes array, that means...">MakeNewNode</a>(*root_node, <span class="keyword">false</span>)) {
<a name="l00425"></a>00425     search_queue.push(<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#0b53d33bea0052052bf750df18027481">search_nodes_</a>.back());
<a name="l00426"></a>00426   }
<a name="l00427"></a>00427   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#61f56c6469a34d7bf4e516ab3b5455ba" title="Returns true if new relevant search node was added to the nodes array, that means...">MakeNewNode</a>(*root_node, <span class="keyword">true</span>)) {
<a name="l00428"></a>00428     search_queue.push(<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#0b53d33bea0052052bf750df18027481">search_nodes_</a>.back());
<a name="l00429"></a>00429   }
<a name="l00430"></a>00430 
<a name="l00431"></a>00431   <a class="code" href="classoperations__research_1_1KnapsackSearchNode.html" title="KnapsackSearchNode KnapsackSearchNode is a class used to describe a decision in the...">KnapsackSearchNode</a>* current_node = root_node;
<a name="l00432"></a>00432   <span class="keywordflow">while</span> (!search_queue.empty() &amp;&amp;
<a name="l00433"></a>00433          search_queue.top()-&gt;profit_upper_bound() &gt; <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#1f5d2d4b35108ffe40776f6bbd27d413">best_solution_profit_</a>) {
<a name="l00434"></a>00434     <a class="code" href="classoperations__research_1_1KnapsackSearchNode.html" title="KnapsackSearchNode KnapsackSearchNode is a class used to describe a decision in the...">KnapsackSearchNode</a>* <span class="keyword">const</span> node = search_queue.top();
<a name="l00435"></a>00435     search_queue.pop();
<a name="l00436"></a>00436 
<a name="l00437"></a>00437     <span class="keywordflow">if</span> (node != current_node) {
<a name="l00438"></a>00438       <a class="code" href="classoperations__research_1_1KnapsackSearchPath.html" title="KnapsackSearchPath KnapsackSearchPath is a small class used to represent the path...">KnapsackSearchPath</a> path(*current_node, *node);
<a name="l00439"></a>00439       path.<a class="code" href="classoperations__research_1_1KnapsackSearchPath.html#91d3f4f27442d3ee1f748811d5d0d964">Init</a>();
<a name="l00440"></a>00440       <span class="keyword">const</span> <span class="keywordtype">bool</span> no_fail = <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#09b9896ac265b1ac4cc1b3f3937dab09" title="Updates all propagators reverting/applying all decision on the path.">UpdatePropagators</a>(path);
<a name="l00441"></a>00441       current_node = node;
<a name="l00442"></a>00442       CHECK_EQ(no_fail, <span class="keyword">true</span>);
<a name="l00443"></a>00443     }
<a name="l00444"></a>00444 
<a name="l00445"></a>00445     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#61f56c6469a34d7bf4e516ab3b5455ba" title="Returns true if new relevant search node was added to the nodes array, that means...">MakeNewNode</a>(*node, <span class="keyword">false</span>)) {
<a name="l00446"></a>00446       search_queue.push(<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#0b53d33bea0052052bf750df18027481">search_nodes_</a>.back());
<a name="l00447"></a>00447     }
<a name="l00448"></a>00448     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#61f56c6469a34d7bf4e516ab3b5455ba" title="Returns true if new relevant search node was added to the nodes array, that means...">MakeNewNode</a>(*node, <span class="keyword">true</span>)) {
<a name="l00449"></a>00449       search_queue.push(<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#0b53d33bea0052052bf750df18027481">search_nodes_</a>.back());
<a name="l00450"></a>00450     }
<a name="l00451"></a>00451   }
<a name="l00452"></a>00452   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#1f5d2d4b35108ffe40776f6bbd27d413">best_solution_profit_</a>;
<a name="l00453"></a>00453 }
<a name="l00454"></a>00454 
<a name="l00455"></a><a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#481aaf1a34e78ceb3a3ceb65afb8541b">00455</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#481aaf1a34e78ceb3a3ceb65afb8541b" title="Clears internal data structure.">KnapsackGenericSolver::Clear</a>() {
<a name="l00456"></a>00456   STLDeleteElements(&amp;<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#adcee7209178f34c4a947c93c6f8fdf7">propagators_</a>);
<a name="l00457"></a>00457   STLDeleteElements(&amp;<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#0b53d33bea0052052bf750df18027481">search_nodes_</a>);
<a name="l00458"></a>00458 }
<a name="l00459"></a>00459 
<a name="l00460"></a>00460 <span class="comment">// Returns false when at least one propagator fails.</span>
<a name="l00461"></a><a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#09b9896ac265b1ac4cc1b3f3937dab09">00461</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#09b9896ac265b1ac4cc1b3f3937dab09" title="Updates all propagators reverting/applying all decision on the path.">KnapsackGenericSolver::UpdatePropagators</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1KnapsackSearchPath.html" title="KnapsackSearchPath KnapsackSearchPath is a small class used to represent the path...">KnapsackSearchPath</a>&amp; path) {
<a name="l00462"></a>00462   <span class="keywordtype">bool</span> no_fail = <span class="keyword">true</span>;
<a name="l00463"></a>00463   <span class="comment">// Revert previous changes.</span>
<a name="l00464"></a>00464   <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1KnapsackSearchNode.html" title="KnapsackSearchNode KnapsackSearchNode is a class used to describe a decision in the...">KnapsackSearchNode</a>* node = &amp;path.<a class="code" href="classoperations__research_1_1KnapsackSearchPath.html#9aa1aecbcd2e05d1ab2cba6ce4bd43b6">from</a>();
<a name="l00465"></a>00465   <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1KnapsackSearchNode.html" title="KnapsackSearchNode KnapsackSearchNode is a class used to describe a decision in the...">KnapsackSearchNode</a>* via = &amp;path.<a class="code" href="classoperations__research_1_1KnapsackSearchPath.html#e7cf50e1f12045a7988109600513aaa8">via</a>();
<a name="l00466"></a>00466   <span class="keywordflow">while</span> (node != via) {
<a name="l00467"></a>00467     no_fail = <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#1e230480b30fea1f7f1ecfb44d449928" title="Updates all propagators reverting/applying one decision.">IncrementalUpdate</a>(<span class="keyword">true</span>, node-&gt;<a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#4375f29b7623a1a49907e636ff6e502b">assignment</a>()) &amp;&amp; no_fail;
<a name="l00468"></a>00468     node = node-&gt;<a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#caa1e816412b67a0cbe73c7a98e03888">parent</a>();
<a name="l00469"></a>00469   }
<a name="l00470"></a>00470   <span class="comment">// Apply current changes.</span>
<a name="l00471"></a>00471   node = &amp;path.<a class="code" href="classoperations__research_1_1KnapsackSearchPath.html#f5972d2416996053645764de26757cbb">to</a>();
<a name="l00472"></a>00472   <span class="keywordflow">while</span> (node != via) {
<a name="l00473"></a>00473     no_fail = <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#1e230480b30fea1f7f1ecfb44d449928" title="Updates all propagators reverting/applying one decision.">IncrementalUpdate</a>(<span class="keyword">false</span>, node-&gt;<a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#4375f29b7623a1a49907e636ff6e502b">assignment</a>()) &amp;&amp; no_fail;
<a name="l00474"></a>00474     node = node-&gt;<a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#caa1e816412b67a0cbe73c7a98e03888">parent</a>();
<a name="l00475"></a>00475   }
<a name="l00476"></a>00476   <span class="keywordflow">return</span> no_fail;
<a name="l00477"></a>00477 }
<a name="l00478"></a>00478 
<a name="l00479"></a><a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#0833e35c51b403b8a7454f40aa020c10">00479</a> int64 <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#0833e35c51b403b8a7454f40aa020c10" title="Gets the aggregated (min) profit upper bound among all propagators.">KnapsackGenericSolver::GetAggregatedProfitUpperBound</a>()<span class="keyword"> const </span>{
<a name="l00480"></a>00480   int64 upper_bound = kint64max;
<a name="l00481"></a>00481   <span class="keywordflow">for</span> (ConstIter&lt;vector&lt;KnapsackPropagator*&gt; &gt; it(<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#adcee7209178f34c4a947c93c6f8fdf7">propagators_</a>);
<a name="l00482"></a>00482        !it.at_end(); ++it) {
<a name="l00483"></a>00483     (*it)-&gt;ComputeProfitBounds();
<a name="l00484"></a>00484     <span class="keyword">const</span> int64 propagator_upper_bound = (*it)-&gt;profit_upper_bound();
<a name="l00485"></a>00485     upper_bound = min(upper_bound, propagator_upper_bound);
<a name="l00486"></a>00486   }
<a name="l00487"></a>00487   <span class="keywordflow">return</span> upper_bound;
<a name="l00488"></a>00488 }
<a name="l00489"></a>00489 
<a name="l00490"></a><a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#61f56c6469a34d7bf4e516ab3b5455ba">00490</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#61f56c6469a34d7bf4e516ab3b5455ba" title="Returns true if new relevant search node was added to the nodes array, that means...">KnapsackGenericSolver::MakeNewNode</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1KnapsackSearchNode.html" title="KnapsackSearchNode KnapsackSearchNode is a class used to describe a decision in the...">KnapsackSearchNode</a>&amp; node,
<a name="l00491"></a>00491                                         <span class="keywordtype">bool</span> is_in) {
<a name="l00492"></a>00492   <span class="keywordflow">if</span> (node.<a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#9d14808d2e0423c1d7988190070b9244">next_item_id</a>() == <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#5a2dab00159c2bbae70017a6ff34de31">kNoSelection</a>) {
<a name="l00493"></a>00493     <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00494"></a>00494   }
<a name="l00495"></a>00495   <a class="code" href="structoperations__research_1_1KnapsackAssignment.html" title="The following code defines needed classes for the KnapsackGenericSolver class which...">KnapsackAssignment</a> assignment(node.<a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#9d14808d2e0423c1d7988190070b9244">next_item_id</a>(), is_in);
<a name="l00496"></a>00496   <a class="code" href="classoperations__research_1_1KnapsackSearchNode.html" title="KnapsackSearchNode KnapsackSearchNode is a class used to describe a decision in the...">KnapsackSearchNode</a> new_node(&amp;node, assignment);
<a name="l00497"></a>00497 
<a name="l00498"></a>00498   <a class="code" href="classoperations__research_1_1KnapsackSearchPath.html" title="KnapsackSearchPath KnapsackSearchPath is a small class used to represent the path...">KnapsackSearchPath</a> path(node, new_node);
<a name="l00499"></a>00499   path.<a class="code" href="classoperations__research_1_1KnapsackSearchPath.html#91d3f4f27442d3ee1f748811d5d0d964">Init</a>();
<a name="l00500"></a>00500   <span class="keyword">const</span> <span class="keywordtype">bool</span> no_fail = <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#09b9896ac265b1ac4cc1b3f3937dab09" title="Updates all propagators reverting/applying all decision on the path.">UpdatePropagators</a>(path);
<a name="l00501"></a>00501   <span class="keywordflow">if</span> (no_fail) {
<a name="l00502"></a>00502     new_node.set_current_profit(<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#3b02af3fba64e97ef9c83628e9903e6c">GetCurrentProfit</a>());
<a name="l00503"></a>00503     new_node.set_profit_upper_bound(<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#0833e35c51b403b8a7454f40aa020c10" title="Gets the aggregated (min) profit upper bound among all propagators.">GetAggregatedProfitUpperBound</a>());
<a name="l00504"></a>00504     new_node.set_next_item_id(<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#40a9f882e301cffcb77bd6554d3de657">GetNextItemId</a>());
<a name="l00505"></a>00505     <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#47cc57e1e8043b03e919229e4eb72246" title="Updates the best solution if the current solution has a better profit.">UpdateBestSolution</a>();
<a name="l00506"></a>00506   }
<a name="l00507"></a>00507 
<a name="l00508"></a>00508   <span class="comment">// Revert to be able to create another node from parent.</span>
<a name="l00509"></a>00509   <a class="code" href="classoperations__research_1_1KnapsackSearchPath.html" title="KnapsackSearchPath KnapsackSearchPath is a small class used to represent the path...">KnapsackSearchPath</a> revert_path(new_node, node);
<a name="l00510"></a>00510   revert_path.<a class="code" href="classoperations__research_1_1KnapsackSearchPath.html#91d3f4f27442d3ee1f748811d5d0d964">Init</a>();
<a name="l00511"></a>00511   <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#09b9896ac265b1ac4cc1b3f3937dab09" title="Updates all propagators reverting/applying all decision on the path.">UpdatePropagators</a>(revert_path);
<a name="l00512"></a>00512 
<a name="l00513"></a>00513   <span class="keywordflow">if</span> (!no_fail || new_node.profit_upper_bound() &lt; <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#1f5d2d4b35108ffe40776f6bbd27d413">best_solution_profit_</a>) {
<a name="l00514"></a>00514     <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00515"></a>00515   }
<a name="l00516"></a>00516 
<a name="l00517"></a>00517   <span class="comment">// The node is relevant.</span>
<a name="l00518"></a>00518   <a class="code" href="classoperations__research_1_1KnapsackSearchNode.html" title="KnapsackSearchNode KnapsackSearchNode is a class used to describe a decision in the...">KnapsackSearchNode</a>* relevant_node = <span class="keyword">new</span> <a class="code" href="classoperations__research_1_1KnapsackSearchNode.html" title="KnapsackSearchNode KnapsackSearchNode is a class used to describe a decision in the...">KnapsackSearchNode</a>(&amp;node, assignment);
<a name="l00519"></a>00519   relevant_node-&gt;<a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#2be03bd371b69f335778de84dc7ae5a8">set_current_profit</a>(new_node.current_profit());
<a name="l00520"></a>00520   relevant_node-&gt;<a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#5af222fdaf626cb0e33d2191d90b806c">set_profit_upper_bound</a>(new_node.profit_upper_bound());
<a name="l00521"></a>00521   relevant_node-&gt;<a class="code" href="classoperations__research_1_1KnapsackSearchNode.html#a09bf719c32bf8f662d3c609f3e72f19">set_next_item_id</a>(new_node.next_item_id());
<a name="l00522"></a>00522   <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#0b53d33bea0052052bf750df18027481">search_nodes_</a>.push_back(relevant_node);
<a name="l00523"></a>00523 
<a name="l00524"></a>00524   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00525"></a>00525 }
<a name="l00526"></a>00526 
<a name="l00527"></a><a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#1e230480b30fea1f7f1ecfb44d449928">00527</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#1e230480b30fea1f7f1ecfb44d449928" title="Updates all propagators reverting/applying one decision.">KnapsackGenericSolver::IncrementalUpdate</a>(
<a name="l00528"></a>00528     <span class="keywordtype">bool</span> revert,
<a name="l00529"></a>00529     <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1KnapsackAssignment.html" title="The following code defines needed classes for the KnapsackGenericSolver class which...">KnapsackAssignment</a>&amp; assignment) {
<a name="l00530"></a>00530   <span class="comment">// Do not stop on a failure: To be able to be incremental on the update,</span>
<a name="l00531"></a>00531   <span class="comment">// partial solution (state) and propagators must all be in the same state.</span>
<a name="l00532"></a>00532   <span class="keywordtype">bool</span> no_fail = <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#dc7d018c69c9b70de4728bbc3387ac2b">state_</a>.<a class="code" href="classoperations__research_1_1KnapsackState.html#3fa5da9a819f219f4c51e410fe12c1a3" title="Updates the state by applying or reverting a decision.">UpdateState</a>(revert, assignment);
<a name="l00533"></a>00533   <span class="keywordflow">for</span> (ConstIter&lt;vector&lt;KnapsackPropagator*&gt; &gt; it(<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#adcee7209178f34c4a947c93c6f8fdf7">propagators_</a>);
<a name="l00534"></a>00534        !it.at_end(); ++it) {
<a name="l00535"></a>00535     no_fail = (*it)-&gt;Update(revert, assignment) &amp;&amp; no_fail;
<a name="l00536"></a>00536   }
<a name="l00537"></a>00537   <span class="keywordflow">return</span> no_fail;
<a name="l00538"></a>00538 }
<a name="l00539"></a>00539 
<a name="l00540"></a><a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#47cc57e1e8043b03e919229e4eb72246">00540</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#47cc57e1e8043b03e919229e4eb72246" title="Updates the best solution if the current solution has a better profit.">KnapsackGenericSolver::UpdateBestSolution</a>() {
<a name="l00541"></a>00541   <span class="keyword">const</span> int64 profit_lower_bound = (<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#8adfc6d980c92447c17e92e338d6631e">HasOnePropagator</a>()) ?
<a name="l00542"></a>00542       <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#adcee7209178f34c4a947c93c6f8fdf7">propagators_</a>[<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#1e2ae770366945d25afc3f0bee0bf40f">master_propagator_id_</a>]-&gt;profit_lower_bound() :
<a name="l00543"></a>00543       <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#adcee7209178f34c4a947c93c6f8fdf7">propagators_</a>[<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#1e2ae770366945d25afc3f0bee0bf40f">master_propagator_id_</a>]-&gt;current_profit();
<a name="l00544"></a>00544 
<a name="l00545"></a>00545   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#1f5d2d4b35108ffe40776f6bbd27d413">best_solution_profit_</a> &lt; profit_lower_bound) {
<a name="l00546"></a>00546     <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#1f5d2d4b35108ffe40776f6bbd27d413">best_solution_profit_</a> = profit_lower_bound;
<a name="l00547"></a>00547     <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#adcee7209178f34c4a947c93c6f8fdf7">propagators_</a>[<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#1e2ae770366945d25afc3f0bee0bf40f">master_propagator_id_</a>]-&gt;CopyCurrentStateToSolution(
<a name="l00548"></a>00548         <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#8adfc6d980c92447c17e92e338d6631e">HasOnePropagator</a>(),
<a name="l00549"></a>00549         &amp;<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#8504617d84599d152d670a1ed57c7037">best_solution_</a>);
<a name="l00550"></a>00550   }
<a name="l00551"></a>00551 }
<a name="l00552"></a>00552 
<a name="l00553"></a>00553 <span class="comment">// ----- KnapsackBruteForceSolver -----</span>
<a name="l00554"></a>00554 <span class="comment">// KnapsackBruteForceSolver solves the 0-1 knapsack problem when the number of</span>
<a name="l00555"></a>00555 <span class="comment">// items is less or equal to 30 with brute force, ie. explores all states.</span>
<a name="l00556"></a>00556 <span class="comment">// Experiments show better results than KnapsackGenericSolver when the</span>
<a name="l00557"></a>00557 <span class="comment">// number of items is less than 15.</span>
<a name="l00558"></a><a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html">00558</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html" title="KnapsackBruteForceSolver KnapsackBruteForceSolver solves the 0-1 knapsack problem...">KnapsackBruteForceSolver</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1BaseKnapsackSolver.html" title="BaseKnapsackSolver This the base class for knapsack solvers.">BaseKnapsackSolver</a> {
<a name="l00559"></a>00559  <span class="keyword">public</span>:
<a name="l00560"></a>00560   <span class="keyword">explicit</span> <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html" title="KnapsackBruteForceSolver KnapsackBruteForceSolver solves the 0-1 knapsack problem...">KnapsackBruteForceSolver</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; solver_name);
<a name="l00561"></a>00561 
<a name="l00562"></a>00562   <span class="comment">// Initializes the solver and enters the problem to be solved.</span>
<a name="l00563"></a>00563   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#a8718c3d0ba9212d5d4c6f19693a7189" title="Initializes the solver and enters the problem to be solved.">Init</a>(<span class="keyword">const</span> vector&lt;int64&gt;&amp; profits,
<a name="l00564"></a>00564             <span class="keyword">const</span> vector&lt;vector&lt;int64&gt; &gt;&amp; weights,
<a name="l00565"></a>00565             <span class="keyword">const</span> vector&lt;int64&gt;&amp; capacities);
<a name="l00566"></a>00566 
<a name="l00567"></a>00567   <span class="comment">// Solves the problem and returns the profit of the optimal solution.</span>
<a name="l00568"></a>00568   int64 <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#4ba39d2b5b1573a4e0be0b35a8f7a958" title="Solves the problem and returns the profit of the optimal solution.">Solve</a>();
<a name="l00569"></a>00569 
<a name="l00570"></a>00570   <span class="comment">// Returns true if the item 'item_id' is packed in the optimal knapsack.</span>
<a name="l00571"></a><a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#550e5f6b924862588371360d953a598c">00571</a>   <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#ed92b43d681724776fbb6d8a9f5e189a" title="Returns true if the item &amp;#39;item_id&amp;#39; is packed in the optimal knapsack.">best_solution</a>(<span class="keywordtype">int</span> item_id)<span class="keyword"> const </span>{
<a name="l00572"></a>00572     <span class="keywordflow">return</span> (<a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#8504617d84599d152d670a1ed57c7037">best_solution_</a> &amp; OneBit32(item_id)) != 0U;
<a name="l00573"></a>00573   }
<a name="l00574"></a>00574 
<a name="l00575"></a>00575  <span class="keyword">private</span>:
<a name="l00576"></a><a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#ce3ae0e5460ea450a5995fff4a1ca993">00576</a>   <span class="keywordtype">int</span> num_items_;
<a name="l00577"></a><a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#90cde3497b8ad98b6bf6a1358583f375">00577</a>   int64 profits_weights_[<a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#4bdf336ab51fb448ceea2303b1d716ba">kMaxNumberOfBruteForceItems</a> * 2];
<a name="l00578"></a><a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#b8b1c166221c1231a63c996c7610d2cb">00578</a>   int64 capacity_;
<a name="l00579"></a><a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#8236a8fdb1c83e7fbbf55d4d548f937e">00579</a>   int64 <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#1f5d2d4b35108ffe40776f6bbd27d413">best_solution_profit_</a>;
<a name="l00580"></a><a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#b37e422026e72f3d9c04cf0932221d8b">00580</a>   uint32 <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#8504617d84599d152d670a1ed57c7037">best_solution_</a>;
<a name="l00581"></a>00581 
<a name="l00582"></a>00582   <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#71deb7e1154317b74c3870609a7443ed">DISALLOW_COPY_AND_ASSIGN</a>(<a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html" title="KnapsackBruteForceSolver KnapsackBruteForceSolver solves the 0-1 knapsack problem...">KnapsackBruteForceSolver</a>);
<a name="l00583"></a>00583 };
<a name="l00584"></a>00584 
<a name="l00585"></a><a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#4c0c4423c174ff93f7916917760f746f">00585</a> <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#4c0c4423c174ff93f7916917760f746f">KnapsackBruteForceSolver::KnapsackBruteForceSolver</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; solver_name)
<a name="l00586"></a>00586     : <a class="code" href="classoperations__research_1_1BaseKnapsackSolver.html" title="BaseKnapsackSolver This the base class for knapsack solvers.">BaseKnapsackSolver</a>(solver_name),
<a name="l00587"></a>00587       num_items_(0),
<a name="l00588"></a>00588       capacity_(0LL),
<a name="l00589"></a>00589       <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#1f5d2d4b35108ffe40776f6bbd27d413">best_solution_profit_</a>(0LL),
<a name="l00590"></a>00590       <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html#8504617d84599d152d670a1ed57c7037">best_solution_</a>(0U) {
<a name="l00591"></a>00591 }
<a name="l00592"></a>00592 
<a name="l00593"></a><a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#2813898f5a74731a280baacaf3329a7f">00593</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#2813898f5a74731a280baacaf3329a7f" title="Initializes the solver and enters the problem to be solved.">KnapsackBruteForceSolver::Init</a>(<span class="keyword">const</span> vector&lt;int64&gt;&amp; profits,
<a name="l00594"></a>00594                                     <span class="keyword">const</span> vector&lt;vector&lt;int64&gt; &gt;&amp; weights,
<a name="l00595"></a>00595                                     <span class="keyword">const</span> vector&lt;int64&gt;&amp; capacities) {
<a name="l00596"></a>00596   <span class="comment">// TODO(user): Implement multi-dimensional brute force solver.</span>
<a name="l00597"></a>00597   CHECK_EQ(weights.size(), 1)
<a name="l00598"></a>00598       &lt;&lt; <span class="stringliteral">"Brute force solver only works with one dimension."</span>;
<a name="l00599"></a>00599   CHECK_EQ(capacities.size(), weights.size());
<a name="l00600"></a>00600 
<a name="l00601"></a>00601   <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#ce3ae0e5460ea450a5995fff4a1ca993">num_items_</a> = profits.size();
<a name="l00602"></a>00602   CHECK_EQ(num_items_, weights.at(0).size());
<a name="l00603"></a>00603   CHECK_LE(num_items_, <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#4bdf336ab51fb448ceea2303b1d716ba">kMaxNumberOfBruteForceItems</a>)
<a name="l00604"></a>00604       &lt;&lt; <span class="stringliteral">"To use KnapsackBruteForceSolver the number of items should be "</span>
<a name="l00605"></a>00605       &lt;&lt; <span class="stringliteral">"less than "</span> &lt;&lt;  <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#4bdf336ab51fb448ceea2303b1d716ba">kMaxNumberOfBruteForceItems</a>
<a name="l00606"></a>00606       &lt;&lt; <span class="stringliteral">". Current value: "</span> &lt;&lt; num_items_ &lt;&lt; <span class="stringliteral">"."</span>;
<a name="l00607"></a>00607 
<a name="l00608"></a>00608   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; num_items_; ++i) {
<a name="l00609"></a>00609     <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#90cde3497b8ad98b6bf6a1358583f375">profits_weights_</a>[i * 2] = profits.at(i);
<a name="l00610"></a>00610     <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#90cde3497b8ad98b6bf6a1358583f375">profits_weights_</a>[i * 2 + 1] = weights.at(0).at(i);
<a name="l00611"></a>00611   }
<a name="l00612"></a>00612   <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#b8b1c166221c1231a63c996c7610d2cb">capacity_</a> = capacities.at(0);
<a name="l00613"></a>00613 }
<a name="l00614"></a>00614 
<a name="l00615"></a><a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#c390135920d789276949f5fbdf0110fc">00615</a> int64 <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#c390135920d789276949f5fbdf0110fc" title="Solves the problem and returns the profit of the optimal solution.">KnapsackBruteForceSolver::Solve</a>() {
<a name="l00616"></a>00616   <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#8236a8fdb1c83e7fbbf55d4d548f937e">best_solution_profit_</a> = 0LL;
<a name="l00617"></a>00617   <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#b37e422026e72f3d9c04cf0932221d8b">best_solution_</a> = 0U;
<a name="l00618"></a>00618 
<a name="l00619"></a>00619   <span class="keyword">const</span> uint32 num_states = OneBit32(<a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#ce3ae0e5460ea450a5995fff4a1ca993">num_items_</a>);
<a name="l00620"></a>00620   uint32 prev_state = 0U;
<a name="l00621"></a>00621   uint64 sum_profit = 0ULL;
<a name="l00622"></a>00622   uint64 sum_weight = 0ULL;
<a name="l00623"></a>00623   uint32 diff_state = 0U;
<a name="l00624"></a>00624   uint32 local_state = 0U;
<a name="l00625"></a>00625   <span class="keywordtype">int</span> item_id = 0;
<a name="l00626"></a>00626   <span class="comment">// This loop starts at 1, because state = 0 was already considered previously,</span>
<a name="l00627"></a>00627   <span class="comment">// ie. when no items are in, sum_profit = 0.</span>
<a name="l00628"></a>00628   <span class="keywordflow">for</span> (uint32 state = 1U ; state &lt; num_states; ++state, ++prev_state) {
<a name="l00629"></a>00629     diff_state = state ^ prev_state;
<a name="l00630"></a>00630     local_state = state;
<a name="l00631"></a>00631     item_id = 0;
<a name="l00632"></a>00632     <span class="keywordflow">while</span> (diff_state) {
<a name="l00633"></a>00633       <span class="keywordflow">if</span> (diff_state &amp; 1U) {  <span class="comment">// There is a diff.</span>
<a name="l00634"></a>00634         <span class="keywordflow">if</span> (local_state &amp; 1U) {  <span class="comment">// This item is now in the knapsack.</span>
<a name="l00635"></a>00635           sum_profit += <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#90cde3497b8ad98b6bf6a1358583f375">profits_weights_</a>[item_id];
<a name="l00636"></a>00636           sum_weight += <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#90cde3497b8ad98b6bf6a1358583f375">profits_weights_</a>[item_id + 1];
<a name="l00637"></a>00637           CHECK_LT(item_id +1 , 2 * <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#ce3ae0e5460ea450a5995fff4a1ca993">num_items_</a>);
<a name="l00638"></a>00638         } <span class="keywordflow">else</span> {  <span class="comment">// This item has been removed of the knapsack.</span>
<a name="l00639"></a>00639           sum_profit -= <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#90cde3497b8ad98b6bf6a1358583f375">profits_weights_</a>[item_id];
<a name="l00640"></a>00640           sum_weight -= <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#90cde3497b8ad98b6bf6a1358583f375">profits_weights_</a>[item_id + 1];
<a name="l00641"></a>00641           CHECK_LT(item_id + 1 , 2 * <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#ce3ae0e5460ea450a5995fff4a1ca993">num_items_</a>);
<a name="l00642"></a>00642         }
<a name="l00643"></a>00643       }
<a name="l00644"></a>00644       item_id += 2;
<a name="l00645"></a>00645       local_state = local_state &gt;&gt; 1;
<a name="l00646"></a>00646       diff_state = diff_state &gt;&gt; 1;
<a name="l00647"></a>00647     }
<a name="l00648"></a>00648 
<a name="l00649"></a>00649     <span class="keywordflow">if</span> (sum_weight &lt;= <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#b8b1c166221c1231a63c996c7610d2cb">capacity_</a> &amp;&amp; <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#8236a8fdb1c83e7fbbf55d4d548f937e">best_solution_profit_</a> &lt; sum_profit) {
<a name="l00650"></a>00650       <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#8236a8fdb1c83e7fbbf55d4d548f937e">best_solution_profit_</a> = sum_profit;
<a name="l00651"></a>00651       <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#b37e422026e72f3d9c04cf0932221d8b">best_solution_</a> = state;
<a name="l00652"></a>00652     }
<a name="l00653"></a>00653   }
<a name="l00654"></a>00654 
<a name="l00655"></a>00655   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#8236a8fdb1c83e7fbbf55d4d548f937e">best_solution_profit_</a>;
<a name="l00656"></a>00656 }
<a name="l00657"></a>00657 
<a name="l00658"></a>00658 <span class="comment">// ----- KnapsackItemWithEfficiency -----</span>
<a name="l00659"></a>00659 <span class="comment">// KnapsackItem is a small struct to pair an item weight with its</span>
<a name="l00660"></a>00660 <span class="comment">// corresponding profit.</span>
<a name="l00661"></a>00661 <span class="comment">// This struct is used by Knapsack64ItemsSolver. As this solver deals only</span>
<a name="l00662"></a>00662 <span class="comment">// with one dimension, that's more efficient to store 'efficiency' than</span>
<a name="l00663"></a>00663 <span class="comment">// computing it on the fly.</span>
<a name="l00664"></a><a class="code" href="structoperations__research_1_1KnapsackItemWithEfficiency.html">00664</a> <span class="keyword">struct </span><a class="code" href="structoperations__research_1_1KnapsackItemWithEfficiency.html" title="KnapsackItemWithEfficiency KnapsackItem is a small struct to pair an item weight...">KnapsackItemWithEfficiency</a> {
<a name="l00665"></a><a class="code" href="structoperations__research_1_1KnapsackItemWithEfficiency.html#a913a152eac385937faee1815d796045">00665</a>   <a class="code" href="structoperations__research_1_1KnapsackItemWithEfficiency.html" title="KnapsackItemWithEfficiency KnapsackItem is a small struct to pair an item weight...">KnapsackItemWithEfficiency</a>(<span class="keywordtype">int</span> _id,
<a name="l00666"></a>00666                              int64 _profit,
<a name="l00667"></a>00667                              int64 _weight,
<a name="l00668"></a>00668                              int64 _profit_max)
<a name="l00669"></a>00669       : id(_id),
<a name="l00670"></a>00670         profit(_profit),
<a name="l00671"></a>00671         weight(_weight),
<a name="l00672"></a>00672         efficiency((weight &gt; 0) ?
<a name="l00673"></a>00673                    static_cast&lt;double&gt;(_profit) / static_cast&lt;double&gt;(_weight) :
<a name="l00674"></a>00674                    static_cast&lt;double&gt;(_profit_max)) {
<a name="l00675"></a>00675   }
<a name="l00676"></a>00676 
<a name="l00677"></a><a class="code" href="structoperations__research_1_1KnapsackItemWithEfficiency.html#1b1d9bf1016e9e5736f958228f302565">00677</a>   <span class="keywordtype">int</span> id;
<a name="l00678"></a><a class="code" href="structoperations__research_1_1KnapsackItemWithEfficiency.html#8ea4a6bd5cd65335fea39bf369c55a95">00678</a>   int64 profit;
<a name="l00679"></a><a class="code" href="structoperations__research_1_1KnapsackItemWithEfficiency.html#b7df375813bab790ce9811a0b001a82c">00679</a>   int64 weight;
<a name="l00680"></a><a class="code" href="structoperations__research_1_1KnapsackItemWithEfficiency.html#53cbbbdc82ff76e86433038edd1331b2">00680</a>   <span class="keywordtype">double</span> efficiency;
<a name="l00681"></a>00681 };
<a name="l00682"></a>00682 
<a name="l00683"></a>00683 <span class="comment">// ----- Knapsack64ItemsSolver -----</span>
<a name="l00684"></a>00684 <span class="comment">// Knapsack64ItemsSolver solves the 0-1 knapsack problem when the number of</span>
<a name="l00685"></a>00685 <span class="comment">// items is less or equal to 64. This implementation is about 4 times faster</span>
<a name="l00686"></a>00686 <span class="comment">// than KnapsackGenericSolver.</span>
<a name="l00687"></a><a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html">00687</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html" title="Knapsack64ItemsSolver Knapsack64ItemsSolver solves the 0-1 knapsack problem when...">Knapsack64ItemsSolver</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1BaseKnapsackSolver.html" title="BaseKnapsackSolver This the base class for knapsack solvers.">BaseKnapsackSolver</a> {
<a name="l00688"></a>00688  <span class="keyword">public</span>:
<a name="l00689"></a>00689   <span class="keyword">explicit</span> <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html" title="Knapsack64ItemsSolver Knapsack64ItemsSolver solves the 0-1 knapsack problem when...">Knapsack64ItemsSolver</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; solver_name);
<a name="l00690"></a>00690 
<a name="l00691"></a>00691   <span class="comment">// Initializes the solver and enters the problem to be solved.</span>
<a name="l00692"></a>00692   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#2813898f5a74731a280baacaf3329a7f" title="Initializes the solver and enters the problem to be solved.">Init</a>(<span class="keyword">const</span> vector&lt;int64&gt;&amp; profits,
<a name="l00693"></a>00693             <span class="keyword">const</span> vector&lt;vector&lt;int64&gt; &gt;&amp; weights,
<a name="l00694"></a>00694             <span class="keyword">const</span> vector&lt;int64&gt;&amp; capacities);
<a name="l00695"></a>00695 
<a name="l00696"></a>00696   <span class="comment">// Solves the problem and returns the profit of the optimal solution.</span>
<a name="l00697"></a>00697   int64 <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#c390135920d789276949f5fbdf0110fc" title="Solves the problem and returns the profit of the optimal solution.">Solve</a>();
<a name="l00698"></a>00698 
<a name="l00699"></a>00699   <span class="comment">// Returns true if the item 'item_id' is packed in the optimal knapsack.</span>
<a name="l00700"></a><a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#d796a45b0d86feceb38c0bd5393b34f1">00700</a>   <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#550e5f6b924862588371360d953a598c" title="Returns true if the item &amp;#39;item_id&amp;#39; is packed in the optimal knapsack.">best_solution</a>(<span class="keywordtype">int</span> item_id)<span class="keyword"> const </span>{
<a name="l00701"></a>00701     <span class="keywordflow">return</span> (<a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#b37e422026e72f3d9c04cf0932221d8b">best_solution_</a> &amp; OneBit64(item_id)) != 0ULL;
<a name="l00702"></a>00702   }
<a name="l00703"></a>00703 
<a name="l00704"></a>00704  <span class="keyword">private</span>:
<a name="l00705"></a>00705   <span class="keywordtype">int</span> GetBreakItemId(int64 capacity) <span class="keyword">const</span>;
<a name="l00706"></a>00706   <span class="keywordtype">void</span> GetLowerAndUpperBound(int64* lower_bound, int64* upper_bound) <span class="keyword">const</span>;
<a name="l00707"></a>00707   <span class="keywordtype">void</span> GoToNextState(<span class="keywordtype">bool</span> has_failed);
<a name="l00708"></a>00708   <span class="keywordtype">void</span> BuildBestSolution();
<a name="l00709"></a>00709 
<a name="l00710"></a><a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#0cbae86e17d9736866de577b040ab141">00710</a>   vector&lt;KnapsackItemWithEfficiency&gt; sorted_items_;
<a name="l00711"></a><a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#b7ff045b03fb52a0e0816153dd3eab52">00711</a>   vector&lt;int64&gt; sum_profits_;
<a name="l00712"></a><a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#96d82fa86dd355fc2a4551a76b3d6cb5">00712</a>   vector&lt;int64&gt; sum_weights_;
<a name="l00713"></a><a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#eef70f6060c9b807f855f725d7dcf8ad">00713</a>   int64 <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#b8b1c166221c1231a63c996c7610d2cb">capacity_</a>;
<a name="l00714"></a><a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#7590c7f5ae18a54940f3e6d49cb47365">00714</a>   uint64 state_;
<a name="l00715"></a><a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#c78678c34a494664733fd988eb7f7309">00715</a>   <span class="keywordtype">int</span> state_depth_;
<a name="l00716"></a>00716 
<a name="l00717"></a><a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#c05ef8ca3257012f6a5f17220dea8238">00717</a>   int64 <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#8236a8fdb1c83e7fbbf55d4d548f937e">best_solution_profit_</a>;
<a name="l00718"></a><a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#64f386772c74903d666d749ba419d4ce">00718</a>   uint64 <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#b37e422026e72f3d9c04cf0932221d8b">best_solution_</a>;
<a name="l00719"></a><a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#278fe5ce243d23d6a8f04a6258cc9f1b">00719</a>   <span class="keywordtype">int</span> best_solution_depth_;
<a name="l00720"></a>00720 
<a name="l00721"></a>00721   <span class="comment">// Sum of weights of included item in state.</span>
<a name="l00722"></a><a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#f76e607e22c1c9c9a75a40854b80d645">00722</a>   int64 state_weight_;
<a name="l00723"></a>00723   <span class="comment">// Sum of profits of non included items in state.</span>
<a name="l00724"></a><a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#784cab0f2cad4ddc00b3d7bd4679fe4a">00724</a>   int64 rejected_items_profit_;
<a name="l00725"></a>00725   <span class="comment">// Sum of weights of non included items in state.</span>
<a name="l00726"></a><a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#24c44ee117ac9ff8fde2bb391eec4623">00726</a>   int64 rejected_items_weight_;
<a name="l00727"></a>00727 };
<a name="l00728"></a>00728 
<a name="l00729"></a>00729 <span class="comment">// Comparator used to sort item in decreasing efficiency order</span>
<a name="l00730"></a><a class="code" href="namespaceoperations__research.html#627ab892a9c19c32b05c8f118e7660e0">00730</a> <span class="keywordtype">bool</span> <a class="code" href="namespaceoperations__research.html#627ab892a9c19c32b05c8f118e7660e0" title="Comparator used to sort item in decreasing efficiency order.">CompareKnapsackItemWithEfficiencyInDecreasingEfficiencyOrder</a>(
<a name="l00731"></a>00731     <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1KnapsackItemWithEfficiency.html" title="KnapsackItemWithEfficiency KnapsackItem is a small struct to pair an item weight...">KnapsackItemWithEfficiency</a>&amp; item1,
<a name="l00732"></a>00732     <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1KnapsackItemWithEfficiency.html" title="KnapsackItemWithEfficiency KnapsackItem is a small struct to pair an item weight...">KnapsackItemWithEfficiency</a>&amp; item2) {
<a name="l00733"></a>00733     <span class="keywordflow">return</span> item1.<a class="code" href="structoperations__research_1_1KnapsackItemWithEfficiency.html#53cbbbdc82ff76e86433038edd1331b2">efficiency</a> &gt; item2.<a class="code" href="structoperations__research_1_1KnapsackItemWithEfficiency.html#53cbbbdc82ff76e86433038edd1331b2">efficiency</a>;
<a name="l00734"></a>00734 }
<a name="l00735"></a>00735 
<a name="l00736"></a>00736 <span class="comment">// ----- Knapsack64ItemsSolver -----</span>
<a name="l00737"></a><a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#5a1a510e15398cf6f256f75bddb73ee7">00737</a> <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#5a1a510e15398cf6f256f75bddb73ee7" title="Knapsack64ItemsSolver.">Knapsack64ItemsSolver::Knapsack64ItemsSolver</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; solver_name)
<a name="l00738"></a>00738     : <a class="code" href="classoperations__research_1_1BaseKnapsackSolver.html" title="BaseKnapsackSolver This the base class for knapsack solvers.">BaseKnapsackSolver</a>(solver_name),
<a name="l00739"></a>00739       sorted_items_(),
<a name="l00740"></a>00740       sum_profits_(),
<a name="l00741"></a>00741       sum_weights_(),
<a name="l00742"></a>00742       <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#b8b1c166221c1231a63c996c7610d2cb">capacity_</a>(0LL),
<a name="l00743"></a>00743       state_(0ULL),
<a name="l00744"></a>00744       state_depth_(0),
<a name="l00745"></a>00745       <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#8236a8fdb1c83e7fbbf55d4d548f937e">best_solution_profit_</a>(0LL),
<a name="l00746"></a>00746       <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html#b37e422026e72f3d9c04cf0932221d8b">best_solution_</a>(0ULL),
<a name="l00747"></a>00747       best_solution_depth_(0),
<a name="l00748"></a>00748       state_weight_(0LL),
<a name="l00749"></a>00749       rejected_items_profit_(0LL),
<a name="l00750"></a>00750       rejected_items_weight_(0LL) {
<a name="l00751"></a>00751 }
<a name="l00752"></a>00752 
<a name="l00753"></a><a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#28d8275a2b97d4d219e4afe1a9c9100a">00753</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#28d8275a2b97d4d219e4afe1a9c9100a" title="Initializes the solver and enters the problem to be solved.">Knapsack64ItemsSolver::Init</a>(<span class="keyword">const</span> vector&lt;int64&gt;&amp; profits,
<a name="l00754"></a>00754                                  <span class="keyword">const</span> vector&lt;vector&lt;int64&gt; &gt;&amp; weights,
<a name="l00755"></a>00755                                  <span class="keyword">const</span> vector&lt;int64&gt;&amp; capacities) {
<a name="l00756"></a>00756   CHECK_EQ(weights.size(), 1)
<a name="l00757"></a>00757       &lt;&lt; <span class="stringliteral">"Brute force solver only works with one dimension."</span>;
<a name="l00758"></a>00758   CHECK_EQ(capacities.size(), weights.size());
<a name="l00759"></a>00759 
<a name="l00760"></a>00760   <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#0cbae86e17d9736866de577b040ab141">sorted_items_</a>.clear();
<a name="l00761"></a>00761   <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#b7ff045b03fb52a0e0816153dd3eab52">sum_profits_</a>.clear();
<a name="l00762"></a>00762   <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#96d82fa86dd355fc2a4551a76b3d6cb5">sum_weights_</a>.clear();
<a name="l00763"></a>00763 
<a name="l00764"></a>00764   <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#eef70f6060c9b807f855f725d7dcf8ad">capacity_</a> = capacities[0];
<a name="l00765"></a>00765   <span class="keyword">const</span> <span class="keywordtype">int</span> num_items = profits.size();
<a name="l00766"></a>00766   CHECK_LE(num_items, <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#4352af3b9a4bf487772e4f8aee52334b">kMaxNumberOf64Items</a>)
<a name="l00767"></a>00767       &lt;&lt; <span class="stringliteral">"To use Knapsack64ItemsSolver the number of items should be "</span>
<a name="l00768"></a>00768       &lt;&lt; <span class="stringliteral">"less than "</span> &lt;&lt;  <a class="code" href="namespaceoperations__research_1_1anonymous__namespace_02knapsack__solver_8cc_03.html#4352af3b9a4bf487772e4f8aee52334b">kMaxNumberOf64Items</a>
<a name="l00769"></a>00769       &lt;&lt; <span class="stringliteral">". Current value: "</span> &lt;&lt; num_items &lt;&lt; <span class="stringliteral">"."</span>;
<a name="l00770"></a>00770   int64 profit_max = *max_element(profits.begin(), profits.end());
<a name="l00771"></a>00771 
<a name="l00772"></a>00772   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; num_items; ++i) {
<a name="l00773"></a>00773     <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#0cbae86e17d9736866de577b040ab141">sorted_items_</a>.push_back(<a class="code" href="structoperations__research_1_1KnapsackItemWithEfficiency.html" title="KnapsackItemWithEfficiency KnapsackItem is a small struct to pair an item weight...">KnapsackItemWithEfficiency</a>(i,
<a name="l00774"></a>00774                                                        profits[i],
<a name="l00775"></a>00775                                                        weights[0][i],
<a name="l00776"></a>00776                                                        profit_max));
<a name="l00777"></a>00777   }
<a name="l00778"></a>00778 
<a name="l00779"></a>00779   sort(<a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#0cbae86e17d9736866de577b040ab141">sorted_items_</a>.begin(), <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#0cbae86e17d9736866de577b040ab141">sorted_items_</a>.end(),
<a name="l00780"></a>00780        <a class="code" href="namespaceoperations__research.html#627ab892a9c19c32b05c8f118e7660e0" title="Comparator used to sort item in decreasing efficiency order.">CompareKnapsackItemWithEfficiencyInDecreasingEfficiencyOrder</a>);
<a name="l00781"></a>00781 
<a name="l00782"></a>00782   int64 sum_profit = 0;
<a name="l00783"></a>00783   int64 sum_weight = 0;
<a name="l00784"></a>00784   <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#b7ff045b03fb52a0e0816153dd3eab52">sum_profits_</a>.push_back(sum_profit);
<a name="l00785"></a>00785   <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#96d82fa86dd355fc2a4551a76b3d6cb5">sum_weights_</a>.push_back(sum_weight);
<a name="l00786"></a>00786   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; num_items; ++i) {
<a name="l00787"></a>00787     sum_profit += <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#0cbae86e17d9736866de577b040ab141">sorted_items_</a>[i].profit;
<a name="l00788"></a>00788     sum_weight += <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#0cbae86e17d9736866de577b040ab141">sorted_items_</a>[i].weight;
<a name="l00789"></a>00789 
<a name="l00790"></a>00790     <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#b7ff045b03fb52a0e0816153dd3eab52">sum_profits_</a>.push_back(sum_profit);
<a name="l00791"></a>00791     <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#96d82fa86dd355fc2a4551a76b3d6cb5">sum_weights_</a>.push_back(sum_weight);
<a name="l00792"></a>00792   }
<a name="l00793"></a>00793 }
<a name="l00794"></a>00794 
<a name="l00795"></a><a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#27d3a37c6dadb690649f7c55ba1c22e4">00795</a> int64 <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#27d3a37c6dadb690649f7c55ba1c22e4" title="Solves the problem and returns the profit of the optimal solution.">Knapsack64ItemsSolver::Solve</a>() {
<a name="l00796"></a>00796   <span class="keyword">const</span> <span class="keywordtype">int</span> num_items = <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#0cbae86e17d9736866de577b040ab141">sorted_items_</a>.size();
<a name="l00797"></a>00797   <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#7590c7f5ae18a54940f3e6d49cb47365">state_</a> = 1ULL;
<a name="l00798"></a>00798   <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#c78678c34a494664733fd988eb7f7309">state_depth_</a> = 0;
<a name="l00799"></a>00799   <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#f76e607e22c1c9c9a75a40854b80d645" title="Sum of weights of included item in state.">state_weight_</a> = <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#0cbae86e17d9736866de577b040ab141">sorted_items_</a>[0].weight;
<a name="l00800"></a>00800   <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#784cab0f2cad4ddc00b3d7bd4679fe4a" title="Sum of profits of non included items in state.">rejected_items_profit_</a> = 0LL;
<a name="l00801"></a>00801   <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#24c44ee117ac9ff8fde2bb391eec4623" title="Sum of weights of non included items in state.">rejected_items_weight_</a> = 0LL;
<a name="l00802"></a>00802   <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#c05ef8ca3257012f6a5f17220dea8238">best_solution_profit_</a> = 0LL;
<a name="l00803"></a>00803   <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#64f386772c74903d666d749ba419d4ce">best_solution_</a> = 0ULL;
<a name="l00804"></a>00804   <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#278fe5ce243d23d6a8f04a6258cc9f1b">best_solution_depth_</a> = 0;
<a name="l00805"></a>00805 
<a name="l00806"></a>00806   int64 lower_bound = 0LL;
<a name="l00807"></a>00807   int64 upper_bound = 0LL;
<a name="l00808"></a>00808   <span class="keywordtype">bool</span> fail = <span class="keyword">false</span>;
<a name="l00809"></a>00809   <span class="keywordflow">while</span> (<a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#c78678c34a494664733fd988eb7f7309">state_depth_</a> &gt;= 0) {
<a name="l00810"></a>00810     fail = <span class="keyword">false</span>;
<a name="l00811"></a>00811     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#f76e607e22c1c9c9a75a40854b80d645" title="Sum of weights of included item in state.">state_weight_</a> &gt; <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#eef70f6060c9b807f855f725d7dcf8ad">capacity_</a> || <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#c78678c34a494664733fd988eb7f7309">state_depth_</a> &gt;= num_items) {
<a name="l00812"></a>00812       fail = <span class="keyword">true</span>;
<a name="l00813"></a>00813     } <span class="keywordflow">else</span> {
<a name="l00814"></a>00814       <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#19d17e6a18d7cdf5ae751b4582614891" title="This method is called for each possible state.">GetLowerAndUpperBound</a>(&amp;lower_bound, &amp;upper_bound);
<a name="l00815"></a>00815       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#c05ef8ca3257012f6a5f17220dea8238">best_solution_profit_</a> &lt; lower_bound) {
<a name="l00816"></a>00816         <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#c05ef8ca3257012f6a5f17220dea8238">best_solution_profit_</a> = lower_bound;
<a name="l00817"></a>00817         <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#64f386772c74903d666d749ba419d4ce">best_solution_</a> = <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#7590c7f5ae18a54940f3e6d49cb47365">state_</a>;
<a name="l00818"></a>00818         <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#278fe5ce243d23d6a8f04a6258cc9f1b">best_solution_depth_</a> = <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#c78678c34a494664733fd988eb7f7309">state_depth_</a>;
<a name="l00819"></a>00819       }
<a name="l00820"></a>00820     }
<a name="l00821"></a>00821     fail = fail || <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#c05ef8ca3257012f6a5f17220dea8238">best_solution_profit_</a> &gt;= upper_bound;
<a name="l00822"></a>00822     <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#2ecee0a7b30c89267dbc0ad1afd7bd5e" title="As state_depth_ is the position of the most significant bit on state_ it is possible...">GoToNextState</a>(fail);
<a name="l00823"></a>00823   }
<a name="l00824"></a>00824 
<a name="l00825"></a>00825   <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#70514917117cf8f5b3938ac51bb46f7e">BuildBestSolution</a>();
<a name="l00826"></a>00826   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#c05ef8ca3257012f6a5f17220dea8238">best_solution_profit_</a>;
<a name="l00827"></a>00827 }
<a name="l00828"></a>00828 
<a name="l00829"></a><a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#31c6b1882affd26260725cd5501bfd28">00829</a> <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#31c6b1882affd26260725cd5501bfd28">Knapsack64ItemsSolver::GetBreakItemId</a>(int64 capacity)<span class="keyword"> const </span>{
<a name="l00830"></a>00830   vector&lt;int64&gt;::const_iterator binary_search_iterator =
<a name="l00831"></a>00831       upper_bound(<a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#96d82fa86dd355fc2a4551a76b3d6cb5">sum_weights_</a>.begin(),
<a name="l00832"></a>00832                   <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#96d82fa86dd355fc2a4551a76b3d6cb5">sum_weights_</a>.end(),
<a name="l00833"></a>00833                   capacity);
<a name="l00834"></a>00834   <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(binary_search_iterator -
<a name="l00835"></a>00835                           <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#96d82fa86dd355fc2a4551a76b3d6cb5">sum_weights_</a>.begin()) -1;
<a name="l00836"></a>00836 }
<a name="l00837"></a>00837 
<a name="l00838"></a>00838 <span class="comment">// This method is called for each possible state.</span>
<a name="l00839"></a>00839 <span class="comment">// Lower and upper bounds can be equal from one state to another.</span>
<a name="l00840"></a>00840 <span class="comment">// For instance state 1010???? and state 101011?? have exactly the same</span>
<a name="l00841"></a>00841 <span class="comment">// bounds. So it sounds like a good idea to cache those bounds.</span>
<a name="l00842"></a>00842 <span class="comment">// Unfortunately, experiments show equivalent results with or without this</span>
<a name="l00843"></a>00843 <span class="comment">// code optimization (only 1/7 of calls can be reused).</span>
<a name="l00844"></a>00844 <span class="comment">// In order to simplify the code, this optimization is not implemented.</span>
<a name="l00845"></a><a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#19d17e6a18d7cdf5ae751b4582614891">00845</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#19d17e6a18d7cdf5ae751b4582614891" title="This method is called for each possible state.">Knapsack64ItemsSolver::GetLowerAndUpperBound</a>(int64* lower_bound,
<a name="l00846"></a>00846                                                   int64* upper_bound)<span class="keyword"> const </span>{
<a name="l00847"></a>00847   <span class="keyword">const</span> int64 available_capacity = <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#eef70f6060c9b807f855f725d7dcf8ad">capacity_</a> + <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#24c44ee117ac9ff8fde2bb391eec4623" title="Sum of weights of non included items in state.">rejected_items_weight_</a>;
<a name="l00848"></a>00848   <span class="keyword">const</span> <span class="keywordtype">int</span> break_item_id = <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#31c6b1882affd26260725cd5501bfd28">GetBreakItemId</a>(available_capacity);
<a name="l00849"></a>00849   <span class="keyword">const</span> <span class="keywordtype">int</span> num_items = <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#0cbae86e17d9736866de577b040ab141">sorted_items_</a>.size();
<a name="l00850"></a>00850   <span class="keywordflow">if</span> (break_item_id &gt;= num_items) {
<a name="l00851"></a>00851     *lower_bound = <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#b7ff045b03fb52a0e0816153dd3eab52">sum_profits_</a>[num_items] - <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#784cab0f2cad4ddc00b3d7bd4679fe4a" title="Sum of profits of non included items in state.">rejected_items_profit_</a>;
<a name="l00852"></a>00852     *upper_bound = *lower_bound;
<a name="l00853"></a>00853     <span class="keywordflow">return</span>;
<a name="l00854"></a>00854   }
<a name="l00855"></a>00855 
<a name="l00856"></a>00856   *lower_bound = <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#b7ff045b03fb52a0e0816153dd3eab52">sum_profits_</a>[break_item_id] - <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#784cab0f2cad4ddc00b3d7bd4679fe4a" title="Sum of profits of non included items in state.">rejected_items_profit_</a>;
<a name="l00857"></a>00857   *upper_bound = *lower_bound;
<a name="l00858"></a>00858   <span class="keyword">const</span> int64 consumed_capacity = <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#96d82fa86dd355fc2a4551a76b3d6cb5">sum_weights_</a>[break_item_id];
<a name="l00859"></a>00859   <span class="keyword">const</span> int64 remaining_capacity = available_capacity - consumed_capacity;
<a name="l00860"></a>00860   <span class="keyword">const</span> <span class="keywordtype">double</span> efficiency = <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#0cbae86e17d9736866de577b040ab141">sorted_items_</a>[break_item_id].efficiency;
<a name="l00861"></a>00861   <span class="keyword">const</span> int64 additional_profit =
<a name="l00862"></a>00862       <span class="keyword">static_cast&lt;</span>int64<span class="keyword">&gt;</span>(remaining_capacity * efficiency);
<a name="l00863"></a>00863   *upper_bound += additional_profit;
<a name="l00864"></a>00864 }
<a name="l00865"></a>00865 
<a name="l00866"></a>00866 <span class="comment">// As state_depth_ is the position of the most significant bit on state_</span>
<a name="l00867"></a>00867 <span class="comment">// it is possible to remove the loop and so be in O(1) instead of O(depth).</span>
<a name="l00868"></a>00868 <span class="comment">// In such a case rejected_items_profit_ is computed using sum_profits_ array.</span>
<a name="l00869"></a>00869 <span class="comment">// Unfortunately experiments show smaller computation time using the 'while'</span>
<a name="l00870"></a>00870 <span class="comment">// (10% speed-up). That's the reason why the loop version is implemented.</span>
<a name="l00871"></a><a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#2ecee0a7b30c89267dbc0ad1afd7bd5e">00871</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#2ecee0a7b30c89267dbc0ad1afd7bd5e" title="As state_depth_ is the position of the most significant bit on state_ it is possible...">Knapsack64ItemsSolver::GoToNextState</a>(<span class="keywordtype">bool</span> has_failed) {
<a name="l00872"></a>00872   uint64 mask = OneBit64(<a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#c78678c34a494664733fd988eb7f7309">state_depth_</a>);
<a name="l00873"></a>00873   <span class="keywordflow">if</span> (!has_failed) {  <span class="comment">// Go to next item.</span>
<a name="l00874"></a>00874     ++<a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#c78678c34a494664733fd988eb7f7309">state_depth_</a>;
<a name="l00875"></a>00875     <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#7590c7f5ae18a54940f3e6d49cb47365">state_</a> = <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#7590c7f5ae18a54940f3e6d49cb47365">state_</a> | (mask &lt;&lt; 1);
<a name="l00876"></a>00876     <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#f76e607e22c1c9c9a75a40854b80d645" title="Sum of weights of included item in state.">state_weight_</a> += <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#0cbae86e17d9736866de577b040ab141">sorted_items_</a>[<a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#c78678c34a494664733fd988eb7f7309">state_depth_</a>].weight;
<a name="l00877"></a>00877   } <span class="keywordflow">else</span> {
<a name="l00878"></a>00878     <span class="comment">// Backtrack to last item in.</span>
<a name="l00879"></a>00879     <span class="keywordflow">while</span> ((<a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#7590c7f5ae18a54940f3e6d49cb47365">state_</a> &amp; mask) == 0ULL &amp;&amp; <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#c78678c34a494664733fd988eb7f7309">state_depth_</a> &gt;= 0) {
<a name="l00880"></a>00880       <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1KnapsackItemWithEfficiency.html" title="KnapsackItemWithEfficiency KnapsackItem is a small struct to pair an item weight...">KnapsackItemWithEfficiency</a>&amp; item = <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#0cbae86e17d9736866de577b040ab141">sorted_items_</a>[state_depth_];
<a name="l00881"></a>00881       <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#784cab0f2cad4ddc00b3d7bd4679fe4a" title="Sum of profits of non included items in state.">rejected_items_profit_</a> -= item.<a class="code" href="structoperations__research_1_1KnapsackItemWithEfficiency.html#8ea4a6bd5cd65335fea39bf369c55a95">profit</a>;
<a name="l00882"></a>00882       <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#24c44ee117ac9ff8fde2bb391eec4623" title="Sum of weights of non included items in state.">rejected_items_weight_</a> -= item.<a class="code" href="structoperations__research_1_1KnapsackItemWithEfficiency.html#b7df375813bab790ce9811a0b001a82c">weight</a>;
<a name="l00883"></a>00883       --state_depth_;
<a name="l00884"></a>00884       mask = mask &gt;&gt; 1ULL;
<a name="l00885"></a>00885     }
<a name="l00886"></a>00886 
<a name="l00887"></a>00887     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#7590c7f5ae18a54940f3e6d49cb47365">state_</a> &amp; mask) {  <span class="comment">// Item was in, remove it.</span>
<a name="l00888"></a>00888       <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#7590c7f5ae18a54940f3e6d49cb47365">state_</a> = <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#7590c7f5ae18a54940f3e6d49cb47365">state_</a> &amp; ~mask;
<a name="l00889"></a>00889       <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1KnapsackItemWithEfficiency.html" title="KnapsackItemWithEfficiency KnapsackItem is a small struct to pair an item weight...">KnapsackItemWithEfficiency</a>&amp; item = <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#0cbae86e17d9736866de577b040ab141">sorted_items_</a>[state_depth_];
<a name="l00890"></a>00890       <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#784cab0f2cad4ddc00b3d7bd4679fe4a" title="Sum of profits of non included items in state.">rejected_items_profit_</a> += item.<a class="code" href="structoperations__research_1_1KnapsackItemWithEfficiency.html#8ea4a6bd5cd65335fea39bf369c55a95">profit</a>;
<a name="l00891"></a>00891       <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#24c44ee117ac9ff8fde2bb391eec4623" title="Sum of weights of non included items in state.">rejected_items_weight_</a> += item.<a class="code" href="structoperations__research_1_1KnapsackItemWithEfficiency.html#b7df375813bab790ce9811a0b001a82c">weight</a>;
<a name="l00892"></a>00892       <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#f76e607e22c1c9c9a75a40854b80d645" title="Sum of weights of included item in state.">state_weight_</a> -= item.<a class="code" href="structoperations__research_1_1KnapsackItemWithEfficiency.html#b7df375813bab790ce9811a0b001a82c">weight</a>;
<a name="l00893"></a>00893     }
<a name="l00894"></a>00894   }
<a name="l00895"></a>00895 }
<a name="l00896"></a>00896 
<a name="l00897"></a><a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#70514917117cf8f5b3938ac51bb46f7e">00897</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#70514917117cf8f5b3938ac51bb46f7e">Knapsack64ItemsSolver::BuildBestSolution</a>() {
<a name="l00898"></a>00898   int64 remaining_capacity = <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#eef70f6060c9b807f855f725d7dcf8ad">capacity_</a>;
<a name="l00899"></a>00899   int64 check_profit = 0LL;
<a name="l00900"></a>00900 
<a name="l00901"></a>00901   <span class="comment">// Compute remaining capacity at best_solution_depth_ to be able to redo</span>
<a name="l00902"></a>00902   <span class="comment">// the GetLowerAndUpperBound computation.</span>
<a name="l00903"></a>00903   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt;= <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#278fe5ce243d23d6a8f04a6258cc9f1b">best_solution_depth_</a>; ++i) {
<a name="l00904"></a>00904     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#64f386772c74903d666d749ba419d4ce">best_solution_</a> &amp; OneBit64(i)) {
<a name="l00905"></a>00905       remaining_capacity -= <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#0cbae86e17d9736866de577b040ab141">sorted_items_</a>[i].weight;
<a name="l00906"></a>00906       check_profit += <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#0cbae86e17d9736866de577b040ab141">sorted_items_</a>[i].profit;
<a name="l00907"></a>00907     }
<a name="l00908"></a>00908   }
<a name="l00909"></a>00909 
<a name="l00910"></a>00910   <span class="comment">// Add all items till the break item.</span>
<a name="l00911"></a>00911   <span class="keyword">const</span> <span class="keywordtype">int</span> num_items = <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#0cbae86e17d9736866de577b040ab141">sorted_items_</a>.size();
<a name="l00912"></a>00912   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#278fe5ce243d23d6a8f04a6258cc9f1b">best_solution_depth_</a> + 1; i &lt; num_items; ++i) {
<a name="l00913"></a>00913     int64 weight = <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#0cbae86e17d9736866de577b040ab141">sorted_items_</a>[i].weight;
<a name="l00914"></a>00914     <span class="keywordflow">if</span> (remaining_capacity &gt;= weight) {
<a name="l00915"></a>00915       remaining_capacity -= weight;
<a name="l00916"></a>00916       check_profit += <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#0cbae86e17d9736866de577b040ab141">sorted_items_</a>[i].profit;
<a name="l00917"></a>00917       <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#64f386772c74903d666d749ba419d4ce">best_solution_</a> = <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#64f386772c74903d666d749ba419d4ce">best_solution_</a> | OneBit64(i);
<a name="l00918"></a>00918     } <span class="keywordflow">else</span> {
<a name="l00919"></a>00919       <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#64f386772c74903d666d749ba419d4ce">best_solution_</a> = <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#64f386772c74903d666d749ba419d4ce">best_solution_</a> &amp; ~OneBit64(i);
<a name="l00920"></a>00920     }
<a name="l00921"></a>00921   }
<a name="l00922"></a>00922   CHECK_EQ(<a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#c05ef8ca3257012f6a5f17220dea8238">best_solution_profit_</a>, check_profit);
<a name="l00923"></a>00923 
<a name="l00924"></a>00924   <span class="comment">// Items were sorted by efficiency, solution should be unsorted to be</span>
<a name="l00925"></a>00925   <span class="comment">// in user order.</span>
<a name="l00926"></a>00926   <span class="comment">// Note that best_solution_ will not be in the same order than other data</span>
<a name="l00927"></a>00927   <span class="comment">// structures anymore.</span>
<a name="l00928"></a>00928   uint64 tmp_solution = 0ULL;
<a name="l00929"></a>00929   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; num_items; ++i) {
<a name="l00930"></a>00930     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#64f386772c74903d666d749ba419d4ce">best_solution_</a> &amp; OneBit64(i)) {
<a name="l00931"></a>00931       <span class="keyword">const</span> <span class="keywordtype">int</span> original_id = <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#0cbae86e17d9736866de577b040ab141">sorted_items_</a>[i].id;
<a name="l00932"></a>00932       tmp_solution = tmp_solution | OneBit64(original_id);
<a name="l00933"></a>00933     }
<a name="l00934"></a>00934   }
<a name="l00935"></a>00935 
<a name="l00936"></a>00936   <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#64f386772c74903d666d749ba419d4ce">best_solution_</a> = tmp_solution;
<a name="l00937"></a>00937 }
<a name="l00938"></a>00938 
<a name="l00939"></a>00939 <span class="comment">// ----- KnapsackDynamicProgrammingSolver -----</span>
<a name="l00940"></a>00940 <span class="comment">// KnapsackDynamicProgrammingSolver solves the 0-1 knapsack problem</span>
<a name="l00941"></a>00941 <span class="comment">// using dynamic programming. This algorithm is pseudo-polynomial because it</span>
<a name="l00942"></a>00942 <span class="comment">// depends on capacity, ie. the time and space complexity is</span>
<a name="l00943"></a>00943 <span class="comment">// O(capacity * number_of_items).</span>
<a name="l00944"></a>00944 <span class="comment">// The implemented algorithm is 'DP-3' in "Knapsack problems", Hans Kellerer,</span>
<a name="l00945"></a>00945 <span class="comment">// Ulrich Pferschy and David Pisinger, Springer book (ISBN 978-3540402862).</span>
<a name="l00946"></a><a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html">00946</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html" title="KnapsackDynamicProgrammingSolver KnapsackDynamicProgrammingSolver solves the 0-1...">KnapsackDynamicProgrammingSolver</a> : <span class="keyword">public</span> <a class="code" href="classoperations__research_1_1BaseKnapsackSolver.html" title="BaseKnapsackSolver This the base class for knapsack solvers.">BaseKnapsackSolver</a> {
<a name="l00947"></a>00947  <span class="keyword">public</span>:
<a name="l00948"></a>00948   <span class="keyword">explicit</span> <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html" title="KnapsackDynamicProgrammingSolver KnapsackDynamicProgrammingSolver solves the 0-1...">KnapsackDynamicProgrammingSolver</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; solver_name);
<a name="l00949"></a>00949 
<a name="l00950"></a>00950   <span class="comment">// Initializes the solver and enters the problem to be solved.</span>
<a name="l00951"></a>00951   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#28d8275a2b97d4d219e4afe1a9c9100a" title="Initializes the solver and enters the problem to be solved.">Init</a>(<span class="keyword">const</span> vector&lt;int64&gt;&amp; profits,
<a name="l00952"></a>00952             <span class="keyword">const</span> vector&lt;vector&lt;int64&gt; &gt;&amp; weights,
<a name="l00953"></a>00953             <span class="keyword">const</span> vector&lt;int64&gt;&amp; capacities);
<a name="l00954"></a>00954 
<a name="l00955"></a>00955   <span class="comment">// Solves the problem and returns the profit of the optimal solution.</span>
<a name="l00956"></a>00956   int64 <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#27d3a37c6dadb690649f7c55ba1c22e4" title="Solves the problem and returns the profit of the optimal solution.">Solve</a>();
<a name="l00957"></a>00957 
<a name="l00958"></a>00958   <span class="comment">// Returns true if the item 'item_id' is packed in the optimal knapsack.</span>
<a name="l00959"></a><a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#cf8702e36303f60715fd1ecc10ecd87c">00959</a>   <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#d796a45b0d86feceb38c0bd5393b34f1" title="Returns true if the item &amp;#39;item_id&amp;#39; is packed in the optimal knapsack.">best_solution</a>(<span class="keywordtype">int</span> item_id)<span class="keyword"> const </span>{
<a name="l00960"></a>00960     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#64f386772c74903d666d749ba419d4ce">best_solution_</a>.at(item_id);
<a name="l00961"></a>00961   }
<a name="l00962"></a>00962 
<a name="l00963"></a>00963  <span class="keyword">private</span>:
<a name="l00964"></a>00964   int64 SolveSubProblem(int64 capacity, <span class="keywordtype">int</span> num_items);
<a name="l00965"></a>00965 
<a name="l00966"></a><a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#74c6d074a6b972c9988a3231111aaa80">00966</a>   vector&lt;int64&gt; profits_;
<a name="l00967"></a><a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#c903c7975833f7afa83f5a7fb10435c2">00967</a>   vector&lt;int64&gt; weights_;
<a name="l00968"></a><a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#39f45845e58b8b8c3e3deec70e425f79">00968</a>   int64 <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#eef70f6060c9b807f855f725d7dcf8ad">capacity_</a>;
<a name="l00969"></a><a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#2929b2d45b111f2b774351a71a1d406a">00969</a>   vector&lt;int64&gt; computed_profits_;
<a name="l00970"></a><a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#6a8e60e50597eaf23405a344e40552e5">00970</a>   vector&lt;int&gt; selected_item_ids_;
<a name="l00971"></a><a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#3709502d3eb85b066d05199fcd9e4135">00971</a>   vector&lt;bool&gt; <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#64f386772c74903d666d749ba419d4ce">best_solution_</a>;
<a name="l00972"></a>00972 };
<a name="l00973"></a>00973 
<a name="l00974"></a>00974 <span class="comment">// ----- KnapsackDynamicProgrammingSolver -----</span>
<a name="l00975"></a><a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#3e07e8c8daa07ba8baa02352600a51e8">00975</a> <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#3e07e8c8daa07ba8baa02352600a51e8" title="KnapsackDynamicProgrammingSolver.">KnapsackDynamicProgrammingSolver::KnapsackDynamicProgrammingSolver</a>(
<a name="l00976"></a>00976     <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; solver_name) : <a class="code" href="classoperations__research_1_1BaseKnapsackSolver.html" title="BaseKnapsackSolver This the base class for knapsack solvers.">BaseKnapsackSolver</a>(solver_name),
<a name="l00977"></a>00977                                  profits_(),
<a name="l00978"></a>00978                                  weights_(),
<a name="l00979"></a>00979                                  <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#eef70f6060c9b807f855f725d7dcf8ad">capacity_</a>(0),
<a name="l00980"></a>00980                                  computed_profits_(),
<a name="l00981"></a>00981                                  selected_item_ids_(),
<a name="l00982"></a>00982                                  <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html#64f386772c74903d666d749ba419d4ce">best_solution_</a>() {
<a name="l00983"></a>00983 }
<a name="l00984"></a>00984 
<a name="l00985"></a><a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#169eab3c42f89570dcb915f8a0623849">00985</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#169eab3c42f89570dcb915f8a0623849" title="Initializes the solver and enters the problem to be solved.">KnapsackDynamicProgrammingSolver::Init</a>(
<a name="l00986"></a>00986     <span class="keyword">const</span> vector&lt;int64&gt;&amp; profits,
<a name="l00987"></a>00987     <span class="keyword">const</span> vector&lt;vector&lt;int64&gt; &gt;&amp; weights,
<a name="l00988"></a>00988     <span class="keyword">const</span> vector&lt;int64&gt;&amp; capacities) {
<a name="l00989"></a>00989   CHECK_EQ(weights.size(), 1)
<a name="l00990"></a>00990       &lt;&lt; <span class="stringliteral">"Current implementation of the dynamic programming solver only deals"</span>
<a name="l00991"></a>00991       &lt;&lt; <span class="stringliteral">" with one dimension."</span>;
<a name="l00992"></a>00992   CHECK_EQ(capacities.size(), weights.size());
<a name="l00993"></a>00993 
<a name="l00994"></a>00994   <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#74c6d074a6b972c9988a3231111aaa80">profits_</a> = profits;
<a name="l00995"></a>00995   <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#c903c7975833f7afa83f5a7fb10435c2">weights_</a> = weights[0];
<a name="l00996"></a>00996   <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#39f45845e58b8b8c3e3deec70e425f79">capacity_</a> = capacities[0];
<a name="l00997"></a>00997 }
<a name="l00998"></a>00998 
<a name="l00999"></a><a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#d37ff0fc93f998bb3a00bb33b4ec3571">00999</a> int64 <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#d37ff0fc93f998bb3a00bb33b4ec3571">KnapsackDynamicProgrammingSolver::SolveSubProblem</a>(int64 capacity,
<a name="l01000"></a>01000                                                         <span class="keywordtype">int</span> num_items) {
<a name="l01001"></a>01001   <span class="keyword">const</span> int64 capacity_plus_1 = capacity + 1;
<a name="l01002"></a>01002   fill_n(<a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#6a8e60e50597eaf23405a344e40552e5">selected_item_ids_</a>.begin(), capacity_plus_1, 0);
<a name="l01003"></a>01003   fill_n(<a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#2929b2d45b111f2b774351a71a1d406a">computed_profits_</a>.begin(), capacity_plus_1, 0LL);
<a name="l01004"></a>01004   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> item_id = 0; item_id &lt; num_items; ++item_id) {
<a name="l01005"></a>01005     <span class="keyword">const</span> int64 item_weight = <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#c903c7975833f7afa83f5a7fb10435c2">weights_</a>[item_id];
<a name="l01006"></a>01006     <span class="keyword">const</span> int64 item_profit = <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#74c6d074a6b972c9988a3231111aaa80">profits_</a>[item_id];
<a name="l01007"></a>01007     <span class="keywordflow">for</span> (int64 used_capacity = capacity;
<a name="l01008"></a>01008          used_capacity &gt;= item_weight;
<a name="l01009"></a>01009          --used_capacity) {
<a name="l01010"></a>01010       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#2929b2d45b111f2b774351a71a1d406a">computed_profits_</a>[used_capacity - item_weight] + item_profit &gt;
<a name="l01011"></a>01011           <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#2929b2d45b111f2b774351a71a1d406a">computed_profits_</a>[used_capacity]) {
<a name="l01012"></a>01012         <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#2929b2d45b111f2b774351a71a1d406a">computed_profits_</a>[used_capacity] =
<a name="l01013"></a>01013             <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#2929b2d45b111f2b774351a71a1d406a">computed_profits_</a>[used_capacity - item_weight] + item_profit;
<a name="l01014"></a>01014         <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#6a8e60e50597eaf23405a344e40552e5">selected_item_ids_</a>[used_capacity] = item_id;
<a name="l01015"></a>01015       }
<a name="l01016"></a>01016     }
<a name="l01017"></a>01017   }
<a name="l01018"></a>01018   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#6a8e60e50597eaf23405a344e40552e5">selected_item_ids_</a>.at(capacity);
<a name="l01019"></a>01019 }
<a name="l01020"></a>01020 
<a name="l01021"></a><a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#4db6dbe5231b2860170373100cf4d86d">01021</a> int64 <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#4db6dbe5231b2860170373100cf4d86d" title="Solves the problem and returns the profit of the optimal solution.">KnapsackDynamicProgrammingSolver::Solve</a>() {
<a name="l01022"></a>01022   <span class="keyword">const</span> int64 capacity_plus_1 = <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#39f45845e58b8b8c3e3deec70e425f79">capacity_</a> + 1;
<a name="l01023"></a>01023   <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#6a8e60e50597eaf23405a344e40552e5">selected_item_ids_</a>.assign(capacity_plus_1, 0);
<a name="l01024"></a>01024   <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#2929b2d45b111f2b774351a71a1d406a">computed_profits_</a>.assign(capacity_plus_1, 0LL);
<a name="l01025"></a>01025 
<a name="l01026"></a>01026   int64 remaining_capacity = <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#39f45845e58b8b8c3e3deec70e425f79">capacity_</a>;
<a name="l01027"></a>01027   <span class="keywordtype">int</span> num_items = <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#74c6d074a6b972c9988a3231111aaa80">profits_</a>.size();
<a name="l01028"></a>01028   <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#3709502d3eb85b066d05199fcd9e4135">best_solution_</a>.assign(num_items, <span class="keyword">false</span>);
<a name="l01029"></a>01029 
<a name="l01030"></a>01030   <span class="keywordflow">while</span> (remaining_capacity &gt; 0 &amp;&amp; num_items &gt; 0) {
<a name="l01031"></a>01031     <span class="keyword">const</span> <span class="keywordtype">int</span> selected_item_id = <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#d37ff0fc93f998bb3a00bb33b4ec3571">SolveSubProblem</a>(remaining_capacity, num_items);
<a name="l01032"></a>01032     remaining_capacity -= <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#c903c7975833f7afa83f5a7fb10435c2">weights_</a>[selected_item_id];
<a name="l01033"></a>01033     num_items = selected_item_id;
<a name="l01034"></a>01034     <span class="keywordflow">if</span> (remaining_capacity &gt;= 0) {
<a name="l01035"></a>01035       <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#3709502d3eb85b066d05199fcd9e4135">best_solution_</a>[selected_item_id] = <span class="keyword">true</span>;
<a name="l01036"></a>01036     }
<a name="l01037"></a>01037   }
<a name="l01038"></a>01038 
<a name="l01039"></a>01039   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#2929b2d45b111f2b774351a71a1d406a">computed_profits_</a>[<a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#39f45845e58b8b8c3e3deec70e425f79">capacity_</a>];
<a name="l01040"></a>01040 }
<a name="l01041"></a>01041 
<a name="l01042"></a>01042 
<a name="l01043"></a>01043 <span class="comment">// ----- KnapsackSolver -----</span>
<a name="l01044"></a><a class="code" href="classoperations__research_1_1KnapsackSolver.html#c014e63b27600bc0a02b2e0d65fb6e06">01044</a> <a class="code" href="classoperations__research_1_1KnapsackSolver.html#c014e63b27600bc0a02b2e0d65fb6e06" title="KnapsackSolver.">KnapsackSolver::KnapsackSolver</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; solver_name)
<a name="l01045"></a>01045     : solver_(new <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html" title="KnapsackGenericSolver KnapsackGenericSolver is the multi-dimensional knapsack solver...">KnapsackGenericSolver</a>(solver_name)),
<a name="l01046"></a>01046       known_value_(),
<a name="l01047"></a>01047       <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html#3709502d3eb85b066d05199fcd9e4135">best_solution_</a>(),
<a name="l01048"></a>01048       mapping_reduced_item_id_(),
<a name="l01049"></a>01049       is_problem_solved_(false),
<a name="l01050"></a>01050       additional_profit_(0LL),
<a name="l01051"></a>01051       use_reduction_(true) {
<a name="l01052"></a>01052 }
<a name="l01053"></a>01053 
<a name="l01054"></a><a class="code" href="classoperations__research_1_1KnapsackSolver.html#385ab568403e8bf4a01ea884f846327d">01054</a> <a class="code" href="classoperations__research_1_1KnapsackSolver.html#c014e63b27600bc0a02b2e0d65fb6e06" title="KnapsackSolver.">KnapsackSolver::KnapsackSolver</a>(<a class="code" href="classoperations__research_1_1KnapsackSolver.html#81ce17438663c39f7793e8db92ff1893">SolverType</a> solver_type,
<a name="l01055"></a>01055                                <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; solver_name)
<a name="l01056"></a>01056     : <a class="code" href="classoperations__research_1_1KnapsackSolver.html#622364f0fb7e9bb0c4009eb8b1bc15fa">solver_</a>(),
<a name="l01057"></a>01057       <a class="code" href="classoperations__research_1_1KnapsackSolver.html#635ea1ed53ca7d496586720b672b1cd8">known_value_</a>(),
<a name="l01058"></a>01058       <a class="code" href="classoperations__research_1_1KnapsackSolver.html#b019bdb1b05a894e61dc75ccde76ca38">best_solution_</a>(),
<a name="l01059"></a>01059       <a class="code" href="classoperations__research_1_1KnapsackSolver.html#efbf8262809fb33b954782d279e3d28e">mapping_reduced_item_id_</a>(),
<a name="l01060"></a>01060       <a class="code" href="classoperations__research_1_1KnapsackSolver.html#285aaad422e814a6fcd261e577a288d5">is_problem_solved_</a>(false),
<a name="l01061"></a>01061       <a class="code" href="classoperations__research_1_1KnapsackSolver.html#f1f2828f9f8fa20fa8ee76330c9cb748">additional_profit_</a>(0LL),
<a name="l01062"></a>01062       <a class="code" href="classoperations__research_1_1KnapsackSolver.html#32687fa99414979f99b3b5ee66456e56">use_reduction_</a>(true) {
<a name="l01063"></a>01063   <span class="keywordflow">switch</span> (solver_type) {
<a name="l01064"></a>01064     <span class="keywordflow">case</span> <a class="code" href="classoperations__research_1_1KnapsackSolver.html#81ce17438663c39f7793e8db92ff18934d72c45990d1a81e3f5bcdaf6de72096">KNAPSACK_BRUTE_FORCE_SOLVER</a>:
<a name="l01065"></a>01065       <a class="code" href="classoperations__research_1_1KnapsackSolver.html#622364f0fb7e9bb0c4009eb8b1bc15fa">solver_</a>.reset(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1KnapsackBruteForceSolver.html" title="KnapsackBruteForceSolver KnapsackBruteForceSolver solves the 0-1 knapsack problem...">KnapsackBruteForceSolver</a>(solver_name));
<a name="l01066"></a>01066       <span class="keywordflow">break</span>;
<a name="l01067"></a>01067     <span class="keywordflow">case</span> <a class="code" href="classoperations__research_1_1KnapsackSolver.html#81ce17438663c39f7793e8db92ff1893a6c3b9157b2506f5a53b0c73165c8f9b">KNAPSACK_64ITEMS_SOLVER</a>:
<a name="l01068"></a>01068       <a class="code" href="classoperations__research_1_1KnapsackSolver.html#622364f0fb7e9bb0c4009eb8b1bc15fa">solver_</a>.reset(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1Knapsack64ItemsSolver.html" title="Knapsack64ItemsSolver Knapsack64ItemsSolver solves the 0-1 knapsack problem when...">Knapsack64ItemsSolver</a>(solver_name));
<a name="l01069"></a>01069       <span class="keywordflow">break</span>;
<a name="l01070"></a>01070     <span class="keywordflow">case</span> <a class="code" href="classoperations__research_1_1KnapsackSolver.html#81ce17438663c39f7793e8db92ff18939c02fa29c925bc1d37cba92490998132">KNAPSACK_DYNAMIC_PROGRAMMING_SOLVER</a>:
<a name="l01071"></a>01071       <a class="code" href="classoperations__research_1_1KnapsackSolver.html#622364f0fb7e9bb0c4009eb8b1bc15fa">solver_</a>.reset(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1KnapsackDynamicProgrammingSolver.html" title="KnapsackDynamicProgrammingSolver KnapsackDynamicProgrammingSolver solves the 0-1...">KnapsackDynamicProgrammingSolver</a>(solver_name));
<a name="l01072"></a>01072       <span class="keywordflow">break</span>;
<a name="l01073"></a>01073     <span class="keywordflow">case</span> <a class="code" href="classoperations__research_1_1KnapsackSolver.html#81ce17438663c39f7793e8db92ff1893e8c15c25eaf606f5f853821aaabba164">KNAPSACK_MULTIDIMENSION_BRANCH_AND_BOUND_SOLVER</a>:
<a name="l01074"></a>01074       <a class="code" href="classoperations__research_1_1KnapsackSolver.html#622364f0fb7e9bb0c4009eb8b1bc15fa">solver_</a>.reset(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1KnapsackGenericSolver.html" title="KnapsackGenericSolver KnapsackGenericSolver is the multi-dimensional knapsack solver...">KnapsackGenericSolver</a>(solver_name));
<a name="l01075"></a>01075       <span class="keywordflow">break</span>;
<a name="l01076"></a>01076     <span class="keywordflow">default</span>:
<a name="l01077"></a>01077       LOG(FATAL) &lt;&lt; <span class="stringliteral">"Unknown knapsack solver type."</span>;
<a name="l01078"></a>01078   }
<a name="l01079"></a>01079 }
<a name="l01080"></a>01080 
<a name="l01081"></a><a class="code" href="classoperations__research_1_1KnapsackSolver.html#aeeff511cc3aeb44ccdf29535e84f272">01081</a> <a class="code" href="classoperations__research_1_1KnapsackSolver.html#aeeff511cc3aeb44ccdf29535e84f272">KnapsackSolver::~KnapsackSolver</a>() {
<a name="l01082"></a>01082 }
<a name="l01083"></a>01083 
<a name="l01084"></a><a class="code" href="classoperations__research_1_1KnapsackSolver.html#bb538cad8f78a5c29d6947732f6f9482">01084</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1KnapsackSolver.html#bb538cad8f78a5c29d6947732f6f9482" title="Initializes the solver and enters the problem to be solved.">KnapsackSolver::Init</a>(<span class="keyword">const</span> vector&lt;int64&gt;&amp; profits,
<a name="l01085"></a>01085                           <span class="keyword">const</span> vector&lt;vector&lt;int64&gt; &gt;&amp; weights,
<a name="l01086"></a>01086                           <span class="keyword">const</span> vector&lt;int64&gt;&amp; capacities) {
<a name="l01087"></a>01087   <a class="code" href="classoperations__research_1_1KnapsackSolver.html#f1f2828f9f8fa20fa8ee76330c9cb748">additional_profit_</a> = 0LL;
<a name="l01088"></a>01088   <a class="code" href="classoperations__research_1_1KnapsackSolver.html#285aaad422e814a6fcd261e577a288d5">is_problem_solved_</a> = <span class="keyword">false</span>;
<a name="l01089"></a>01089 
<a name="l01090"></a>01090   <a class="code" href="classoperations__research_1_1KnapsackSolver.html#622364f0fb7e9bb0c4009eb8b1bc15fa">solver_</a>-&gt;Init(profits, weights, capacities);
<a name="l01091"></a>01091   <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1KnapsackSolver.html#32687fa99414979f99b3b5ee66456e56">use_reduction_</a>) {
<a name="l01092"></a>01092     <span class="keyword">const</span> <span class="keywordtype">int</span> num_items = profits.size();
<a name="l01093"></a>01093     <span class="keyword">const</span> <span class="keywordtype">int</span> num_reduced_items = <a class="code" href="classoperations__research_1_1KnapsackSolver.html#6342d27a7d5e88142dc0ba4aa5c67875">ReduceProblem</a>(num_items);
<a name="l01094"></a>01094 
<a name="l01095"></a>01095     <span class="keywordflow">if</span> (num_reduced_items &gt; 0) {
<a name="l01096"></a>01096       <a class="code" href="classoperations__research_1_1KnapsackSolver.html#cab0fbbe072c71bdd44218e07fd99fe9">ComputeAdditionalProfit</a>(profits);
<a name="l01097"></a>01097     }
<a name="l01098"></a>01098 
<a name="l01099"></a>01099     <span class="keywordflow">if</span> (num_reduced_items &gt; 0 &amp;&amp; num_reduced_items &lt; num_items) {
<a name="l01100"></a>01100       <a class="code" href="classoperations__research_1_1KnapsackSolver.html#84ed89107db6f02d4dae1854cbe4e6ba">InitReducedProblem</a>(profits, weights, capacities);
<a name="l01101"></a>01101     }
<a name="l01102"></a>01102   }
<a name="l01103"></a>01103 }
<a name="l01104"></a>01104 
<a name="l01105"></a><a class="code" href="classoperations__research_1_1KnapsackSolver.html#6342d27a7d5e88142dc0ba4aa5c67875">01105</a> <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1KnapsackSolver.html#6342d27a7d5e88142dc0ba4aa5c67875">KnapsackSolver::ReduceProblem</a>(<span class="keywordtype">int</span> num_items) {
<a name="l01106"></a>01106   <a class="code" href="classoperations__research_1_1KnapsackSolver.html#635ea1ed53ca7d496586720b672b1cd8">known_value_</a>.assign(num_items, <span class="keyword">false</span>);
<a name="l01107"></a>01107   <a class="code" href="classoperations__research_1_1KnapsackSolver.html#b019bdb1b05a894e61dc75ccde76ca38">best_solution_</a>.assign(num_items, <span class="keyword">false</span>);
<a name="l01108"></a>01108   <a class="code" href="classoperations__research_1_1KnapsackSolver.html#efbf8262809fb33b954782d279e3d28e">mapping_reduced_item_id_</a>.assign(num_items, 0);
<a name="l01109"></a>01109   <a class="code" href="classoperations__research_1_1KnapsackSolver.html#f1f2828f9f8fa20fa8ee76330c9cb748">additional_profit_</a> = 0LL;
<a name="l01110"></a>01110 
<a name="l01111"></a>01111   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> item_id = 0; item_id &lt; num_items; ++item_id) {
<a name="l01112"></a>01112     <a class="code" href="classoperations__research_1_1KnapsackSolver.html#efbf8262809fb33b954782d279e3d28e">mapping_reduced_item_id_</a>[item_id] = item_id;
<a name="l01113"></a>01113   }
<a name="l01114"></a>01114 
<a name="l01115"></a>01115   int64 best_lower_bound = 0LL;
<a name="l01116"></a>01116   vector&lt;int64&gt; J0_upper_bounds(num_items, kint64max);
<a name="l01117"></a>01117   vector&lt;int64&gt; J1_upper_bounds(num_items, kint64max);
<a name="l01118"></a>01118   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> item_id = 0; item_id &lt; num_items; ++item_id) {
<a name="l01119"></a>01119     int64 lower_bound = 0LL;
<a name="l01120"></a>01120     int64 upper_bound = kint64max;
<a name="l01121"></a>01121     <a class="code" href="classoperations__research_1_1KnapsackSolver.html#622364f0fb7e9bb0c4009eb8b1bc15fa">solver_</a>-&gt;GetLowerAndUpperBoundWhenItem(item_id,
<a name="l01122"></a>01122                                            <span class="keyword">false</span>,
<a name="l01123"></a>01123                                            &amp;lower_bound,
<a name="l01124"></a>01124                                            &amp;upper_bound);
<a name="l01125"></a>01125     J1_upper_bounds.at(item_id) = upper_bound;
<a name="l01126"></a>01126     best_lower_bound = max(best_lower_bound, lower_bound);
<a name="l01127"></a>01127 
<a name="l01128"></a>01128     <a class="code" href="classoperations__research_1_1KnapsackSolver.html#622364f0fb7e9bb0c4009eb8b1bc15fa">solver_</a>-&gt;GetLowerAndUpperBoundWhenItem(item_id,
<a name="l01129"></a>01129                                            <span class="keyword">true</span>,
<a name="l01130"></a>01130                                            &amp;lower_bound,
<a name="l01131"></a>01131                                            &amp;upper_bound);
<a name="l01132"></a>01132     J0_upper_bounds.at(item_id) = upper_bound;
<a name="l01133"></a>01133     best_lower_bound = max(best_lower_bound, lower_bound);
<a name="l01134"></a>01134   }
<a name="l01135"></a>01135 
<a name="l01136"></a>01136   <span class="keywordtype">int</span> num_reduced_items = 0;
<a name="l01137"></a>01137   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> item_id = 0; item_id &lt; num_items; ++item_id) {
<a name="l01138"></a>01138     <span class="keywordflow">if</span> (best_lower_bound &gt; J0_upper_bounds[item_id]) {
<a name="l01139"></a>01139       <a class="code" href="classoperations__research_1_1KnapsackSolver.html#635ea1ed53ca7d496586720b672b1cd8">known_value_</a>[item_id] = <span class="keyword">true</span>;
<a name="l01140"></a>01140       <a class="code" href="classoperations__research_1_1KnapsackSolver.html#b019bdb1b05a894e61dc75ccde76ca38">best_solution_</a>[item_id] = <span class="keyword">false</span>;
<a name="l01141"></a>01141       ++num_reduced_items;
<a name="l01142"></a>01142     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (best_lower_bound &gt; J1_upper_bounds[item_id]) {
<a name="l01143"></a>01143       <a class="code" href="classoperations__research_1_1KnapsackSolver.html#635ea1ed53ca7d496586720b672b1cd8">known_value_</a>[item_id] = <span class="keyword">true</span>;
<a name="l01144"></a>01144       <a class="code" href="classoperations__research_1_1KnapsackSolver.html#b019bdb1b05a894e61dc75ccde76ca38">best_solution_</a>[item_id] = <span class="keyword">true</span>;
<a name="l01145"></a>01145       ++num_reduced_items;
<a name="l01146"></a>01146     }
<a name="l01147"></a>01147   }
<a name="l01148"></a>01148 
<a name="l01149"></a>01149   <a class="code" href="classoperations__research_1_1KnapsackSolver.html#285aaad422e814a6fcd261e577a288d5">is_problem_solved_</a> = num_reduced_items == num_items;
<a name="l01150"></a>01150   <span class="keywordflow">return</span> num_reduced_items;
<a name="l01151"></a>01151 }
<a name="l01152"></a>01152 
<a name="l01153"></a><a class="code" href="classoperations__research_1_1KnapsackSolver.html#cab0fbbe072c71bdd44218e07fd99fe9">01153</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1KnapsackSolver.html#cab0fbbe072c71bdd44218e07fd99fe9">KnapsackSolver::ComputeAdditionalProfit</a>(<span class="keyword">const</span> vector&lt;int64&gt;&amp; profits) {
<a name="l01154"></a>01154   <span class="keyword">const</span> <span class="keywordtype">int</span> num_items = profits.size();
<a name="l01155"></a>01155   <a class="code" href="classoperations__research_1_1KnapsackSolver.html#f1f2828f9f8fa20fa8ee76330c9cb748">additional_profit_</a> = 0LL;
<a name="l01156"></a>01156   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> item_id = 0; item_id &lt; num_items; ++item_id) {
<a name="l01157"></a>01157     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1KnapsackSolver.html#635ea1ed53ca7d496586720b672b1cd8">known_value_</a>[item_id] &amp;&amp; <a class="code" href="classoperations__research_1_1KnapsackSolver.html#b019bdb1b05a894e61dc75ccde76ca38">best_solution_</a>[item_id]) {
<a name="l01158"></a>01158       <a class="code" href="classoperations__research_1_1KnapsackSolver.html#f1f2828f9f8fa20fa8ee76330c9cb748">additional_profit_</a> += profits[item_id];
<a name="l01159"></a>01159     }
<a name="l01160"></a>01160   }
<a name="l01161"></a>01161 }
<a name="l01162"></a>01162 
<a name="l01163"></a><a class="code" href="classoperations__research_1_1KnapsackSolver.html#84ed89107db6f02d4dae1854cbe4e6ba">01163</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1KnapsackSolver.html#84ed89107db6f02d4dae1854cbe4e6ba">KnapsackSolver::InitReducedProblem</a>(<span class="keyword">const</span> vector&lt;int64&gt;&amp; profits,
<a name="l01164"></a>01164                                         <span class="keyword">const</span> vector&lt;vector&lt;int64&gt; &gt;&amp; weights,
<a name="l01165"></a>01165                                         <span class="keyword">const</span> vector&lt;int64&gt;&amp; capacities) {
<a name="l01166"></a>01166   <span class="keyword">const</span> <span class="keywordtype">int</span> num_items = profits.size();
<a name="l01167"></a>01167   <span class="keyword">const</span> <span class="keywordtype">int</span> num_dimensions = capacities.size();
<a name="l01168"></a>01168 
<a name="l01169"></a>01169   vector&lt;int64&gt; reduced_profits;
<a name="l01170"></a>01170   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> item_id = 0; item_id &lt; num_items; ++item_id) {
<a name="l01171"></a>01171     <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1KnapsackSolver.html#635ea1ed53ca7d496586720b672b1cd8">known_value_</a>[item_id]) {
<a name="l01172"></a>01172       <a class="code" href="classoperations__research_1_1KnapsackSolver.html#efbf8262809fb33b954782d279e3d28e">mapping_reduced_item_id_</a>[item_id] = reduced_profits.size();
<a name="l01173"></a>01173       reduced_profits.push_back(profits[item_id]);
<a name="l01174"></a>01174     }
<a name="l01175"></a>01175   }
<a name="l01176"></a>01176 
<a name="l01177"></a>01177   vector&lt;vector&lt;int64&gt; &gt; reduced_weights;
<a name="l01178"></a>01178   vector&lt;int64&gt; reduced_capacities = capacities;
<a name="l01179"></a>01179   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> dim = 0; dim &lt; num_dimensions; ++dim) {
<a name="l01180"></a>01180     <span class="keyword">const</span> vector&lt;int64&gt;&amp; one_dimension_weights = weights[dim];
<a name="l01181"></a>01181     vector&lt;int64&gt; one_dimension_reduced_weights;
<a name="l01182"></a>01182     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> item_id = 0; item_id &lt; num_items; ++item_id) {
<a name="l01183"></a>01183       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1KnapsackSolver.html#635ea1ed53ca7d496586720b672b1cd8">known_value_</a>[item_id]) {
<a name="l01184"></a>01184         <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1KnapsackSolver.html#b019bdb1b05a894e61dc75ccde76ca38">best_solution_</a>[item_id]) {
<a name="l01185"></a>01185           reduced_capacities[dim] -= one_dimension_weights[item_id];
<a name="l01186"></a>01186         }
<a name="l01187"></a>01187       } <span class="keywordflow">else</span> {
<a name="l01188"></a>01188         one_dimension_reduced_weights.push_back(
<a name="l01189"></a>01189             one_dimension_weights[item_id]);
<a name="l01190"></a>01190       }
<a name="l01191"></a>01191     }
<a name="l01192"></a>01192     reduced_weights.push_back(one_dimension_reduced_weights);
<a name="l01193"></a>01193   }
<a name="l01194"></a>01194   <a class="code" href="classoperations__research_1_1KnapsackSolver.html#622364f0fb7e9bb0c4009eb8b1bc15fa">solver_</a>-&gt;Init(reduced_profits, reduced_weights, reduced_capacities);
<a name="l01195"></a>01195 }
<a name="l01196"></a>01196 
<a name="l01197"></a><a class="code" href="classoperations__research_1_1KnapsackSolver.html#7c3b5825c8effd86de03a610d1a38ed7">01197</a> int64 <a class="code" href="classoperations__research_1_1KnapsackSolver.html#7c3b5825c8effd86de03a610d1a38ed7" title="Solves the problem and returns the profit of the optimal solution.">KnapsackSolver::Solve</a>() {
<a name="l01198"></a>01198   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1KnapsackSolver.html#f1f2828f9f8fa20fa8ee76330c9cb748">additional_profit_</a> + ((<a class="code" href="classoperations__research_1_1KnapsackSolver.html#285aaad422e814a6fcd261e577a288d5">is_problem_solved_</a>) ? 0 : <a class="code" href="classoperations__research_1_1KnapsackSolver.html#622364f0fb7e9bb0c4009eb8b1bc15fa">solver_</a>-&gt;Solve());
<a name="l01199"></a>01199 }
<a name="l01200"></a>01200 
<a name="l01201"></a><a class="code" href="classoperations__research_1_1KnapsackSolver.html#e6b8187ab90d8a65b26e20c5a1dd622b">01201</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1KnapsackSolver.html#e6b8187ab90d8a65b26e20c5a1dd622b" title="Returns true if the item &amp;#39;item_id&amp;#39; is packed in the optimal knapsack.">KnapsackSolver::BestSolutionContains</a>(<span class="keywordtype">int</span> item_id)<span class="keyword"> const </span>{
<a name="l01202"></a>01202   <span class="keyword">const</span> <span class="keywordtype">int</span> mapped_item_id = (<a class="code" href="classoperations__research_1_1KnapsackSolver.html#32687fa99414979f99b3b5ee66456e56">use_reduction_</a>) ?
<a name="l01203"></a>01203       <a class="code" href="classoperations__research_1_1KnapsackSolver.html#efbf8262809fb33b954782d279e3d28e">mapping_reduced_item_id_</a>[item_id] : item_id;
<a name="l01204"></a>01204   <span class="keywordflow">return</span> (<a class="code" href="classoperations__research_1_1KnapsackSolver.html#32687fa99414979f99b3b5ee66456e56">use_reduction_</a> &amp;&amp; <a class="code" href="classoperations__research_1_1KnapsackSolver.html#635ea1ed53ca7d496586720b672b1cd8">known_value_</a>[item_id]) ? <a class="code" href="classoperations__research_1_1KnapsackSolver.html#b019bdb1b05a894e61dc75ccde76ca38">best_solution_</a>[item_id]
<a name="l01205"></a>01205       : <a class="code" href="classoperations__research_1_1KnapsackSolver.html#622364f0fb7e9bb0c4009eb8b1bc15fa">solver_</a>-&gt;best_solution(mapped_item_id);
<a name="l01206"></a>01206 }
<a name="l01207"></a>01207 
<a name="l01208"></a><a class="code" href="classoperations__research_1_1KnapsackSolver.html#19eaef1275acf0929635043f4071b824">01208</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1KnapsackSolver.html#19eaef1275acf0929635043f4071b824">KnapsackSolver::GetName</a>()<span class="keyword"> const </span>{
<a name="l01209"></a>01209   <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1KnapsackSolver.html#622364f0fb7e9bb0c4009eb8b1bc15fa">solver_</a>-&gt;GetName();
<a name="l01210"></a>01210 }
<a name="l01211"></a>01211 
<a name="l01212"></a>01212 <span class="comment">// ----- BaseKnapsackSolver -----</span>
<a name="l01213"></a><a class="code" href="classoperations__research_1_1BaseKnapsackSolver.html#90dd983345e541ebf565236a5bc9cc2e">01213</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1BaseKnapsackSolver.html#90dd983345e541ebf565236a5bc9cc2e" title="Gets the lower and upper bound when the item is in or out of the knapsack.">BaseKnapsackSolver::GetLowerAndUpperBoundWhenItem</a>(<span class="keywordtype">int</span> item_id,
<a name="l01214"></a>01214                                                        <span class="keywordtype">bool</span> is_item_in,
<a name="l01215"></a>01215                                                        int64* lower_bound,
<a name="l01216"></a>01216                                                        int64* upper_bound) {
<a name="l01217"></a>01217   CHECK_NOTNULL(lower_bound);
<a name="l01218"></a>01218   CHECK_NOTNULL(upper_bound);
<a name="l01219"></a>01219   *lower_bound = 0LL;
<a name="l01220"></a>01220   *upper_bound = kint64max;
<a name="l01221"></a>01221 }
<a name="l01222"></a>01222 
<a name="l01223"></a>01223 }  <span class="comment">// namespace operations_research</span>
</pre></div></div>

  <!-- Start of footer. -->
  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <tr valign=top>
      <td colspan=2 height=10></td>
    </tr>
    <tr valign=top>
      <td colspan=2 bgcolor=#389613 height=3></td>
    </tr>
  </table>

  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br />

  
  </body>
</html>
