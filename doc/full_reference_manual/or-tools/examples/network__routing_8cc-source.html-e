<!-- Good morning, Mr. Phelps. -->
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
    <title>google3/examples/network_routing.cc Source File - Doxy</title>
    <link rel="shortcut icon" href="../../favicon.ico">
    <!-- Both stylesheets are supplied by Doxygen, with maybe minor tweaks from Google. -->
    <link href="../../doxygen.css" rel="stylesheet" type="text/css">
    <link href="../../tabs.css" rel="stylesheet" type="text/css">
  </head>

  <body topmargin=0 leftmargin=20 bottommargin=0 rightmargin=20 marginwidth=20 marginheight=0>
  <!-- Second part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
  <style>
    a.doxy_logo:hover {
      background-color: #389613
    }
  </style>

  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <!-- Top horizontal line with the color of the day. -->
    <tr valign=top>
      <td colspan=3 bgcolor=#389613 height=3></td>
    </tr>

    <!-- Header row with the links at the right. -->
    <tr valign=top>
      <td colspan=3 align=right>
        <font size=-1>
          Generated on: <font color=#389613><b>Fri Apr  1 14:13:18 PDT 2011</b></font>
            for <b>custom file set</b>
        </font>
      </td>
    </tr>

    <!-- Header row with the logo and the search form. -->
    <tr valign=top>
      <!-- Logo. -->
      <td align=left width=150>
        <table width=150 height=54 cellpadding=0 cellspacing=0 border=0>
          <tr valign=top>
            <!-- First part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
            <td bgcolor=#389613>
              <a class="doxy_logo" href="../../index.html"><img src="../../doxy_logo.png" alt="Doxy" border=0></a>
            </td>
          </tr>
        </table>
      </td>
    </tr>

    <!-- Tiny vertical space below the form. -->
    <tr valign=top>
      <td colspan=3 height=3></td>
    </tr>
  </table>

  <!-- Header navigation row. -->
  <div class="memproto">
    <table width=100% cellpadding=0 cellspacing=0 border=0>
      <tr>
        <td align=left style="padding-left: 20px"><font size=+1><b><tt><font color=#333333>//
            <a href="../../index.html"><font color=#389613>doxy</font></a>/</font>
            <a href="../../google3/index.html">google3</a>/
            <a href="../../google3/examples/index.html">examples</a>/
            </tt></b></font>
        </td>
      </tr>
    </table>
  </div>
  <br />
    <!-- No subdirs found. -->
  <!-- End of header. -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>google3/examples/network_routing.cc</h1><a href="network__routing_8cc.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright 2010 Google</span>
<a name="l00002"></a>00002 <span class="comment">// Licensed under the Apache License, Version 2.0 (the "License");</span>
<a name="l00003"></a>00003 <span class="comment">// you may not use this file except in compliance with the License.</span>
<a name="l00004"></a>00004 <span class="comment">// You may obtain a copy of the License at</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">//     http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Unless required by applicable law or agreed to in writing, software</span>
<a name="l00009"></a>00009 <span class="comment">// distributed under the License is distributed on an "AS IS" BASIS,</span>
<a name="l00010"></a>00010 <span class="comment">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00011"></a>00011 <span class="comment">// See the License for the specific language governing permissions and</span>
<a name="l00012"></a>00012 <span class="comment">// limitations under the License.</span>
<a name="l00013"></a>00013 
<a name="l00014"></a>00014 <span class="comment">// This model solves a multicommodity mono-routing problem with</span>
<a name="l00015"></a>00015 <span class="comment">// capacity constraints and a max usage cost structure.  This means</span>
<a name="l00016"></a>00016 <span class="comment">// that given a graph with capacity on edges, and a set of demands</span>
<a name="l00017"></a>00017 <span class="comment">// (source, destination, traffic), the goal is to assign one unique</span>
<a name="l00018"></a>00018 <span class="comment">// path for each demand such that the cost is minimized.  The cost is</span>
<a name="l00019"></a>00019 <span class="comment">// defined by the maximum ratio utilization (traffic/capacity) for all</span>
<a name="l00020"></a>00020 <span class="comment">// arcs.  There is also a penalty associated with an traffic of an arc</span>
<a name="l00021"></a>00021 <span class="comment">// being above the comfort zone, 85% of the capacity by default.</span>
<a name="l00022"></a>00022 <span class="comment">// Please note that constraint programming is well suited here because</span>
<a name="l00023"></a>00023 <span class="comment">// we cannot have multiple active paths for a single demand.</span>
<a name="l00024"></a>00024 <span class="comment">// Otherwise, a approach based on a linear solver is a better match.</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="comment">// A random problem generator is also included.</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;queue&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;utility&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="preprocessor">#include "base/callback.h"</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include "base/commandlineflags.h"</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include "base/commandlineflags.h"</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include "base/integral_types.h"</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include "base/logging.h"</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include "base/scoped_ptr.h"</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include "base/stringprintf.h"</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include "base/concise_iterator.h"</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include "base/map-util.h"</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include "constraint_solver/constraint_solveri.h"</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include "graph/shortestpaths.h"</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include "base/random.h"</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="comment">// ----- Data Generator -----</span>
<a name="l00047"></a>00047 <a class="code" href="costas__array_8cc.html#af677423bc95ff6ddd8928486064c9c1" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_int32</a>(clients, 0, <span class="stringliteral">"Number of network clients nodes. If equal to zero, "</span>
<a name="l00048"></a>00048              <span class="stringliteral">"then all backbones nodes are also client nodes."</span>);
<a name="l00049"></a>00049 <a class="code" href="costas__array_8cc.html#af677423bc95ff6ddd8928486064c9c1" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_int32</a>(backbones, 0, <span class="stringliteral">"Number of backbone nodes"</span>);
<a name="l00050"></a>00050 <a class="code" href="costas__array_8cc.html#af677423bc95ff6ddd8928486064c9c1" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_int32</a>(demands, 0, <span class="stringliteral">"Number of network demands."</span>);
<a name="l00051"></a>00051 <a class="code" href="costas__array_8cc.html#af677423bc95ff6ddd8928486064c9c1" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_int32</a>(traffic_min, 0, <span class="stringliteral">"Min traffic of a demand."</span>);
<a name="l00052"></a>00052 <a class="code" href="costas__array_8cc.html#af677423bc95ff6ddd8928486064c9c1" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_int32</a>(traffic_max, 0, <span class="stringliteral">"Max traffic of a demand."</span>);
<a name="l00053"></a>00053 <a class="code" href="costas__array_8cc.html#af677423bc95ff6ddd8928486064c9c1" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_int32</a>(min_client_degree, 0,
<a name="l00054"></a>00054              <span class="stringliteral">"Min number of connections from a client to the backbone."</span>);
<a name="l00055"></a>00055 <a class="code" href="costas__array_8cc.html#af677423bc95ff6ddd8928486064c9c1" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_int32</a>(max_client_degree, 0,
<a name="l00056"></a>00056              <span class="stringliteral">"Max number of connections from a client to the backbone."</span>);
<a name="l00057"></a>00057 <a class="code" href="costas__array_8cc.html#af677423bc95ff6ddd8928486064c9c1" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_int32</a>(min_backbone_degree, 0,
<a name="l00058"></a>00058              <span class="stringliteral">"Min number of connections from a backbone node to the rest of "</span>
<a name="l00059"></a>00059              <span class="stringliteral">"the backbone nodes."</span>);
<a name="l00060"></a>00060 <a class="code" href="costas__array_8cc.html#af677423bc95ff6ddd8928486064c9c1" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_int32</a>(max_backbone_degree, 0,
<a name="l00061"></a>00061              <span class="stringliteral">"Max number of connections from a backbone node to the rest of "</span>
<a name="l00062"></a>00062              <span class="stringliteral">"the backbone nodes."</span>);
<a name="l00063"></a>00063 <a class="code" href="costas__array_8cc.html#af677423bc95ff6ddd8928486064c9c1" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_int32</a>(max_capacity, 0, <span class="stringliteral">"Max traffic on any arc."</span>);
<a name="l00064"></a>00064 <a class="code" href="costas__array_8cc.html#af677423bc95ff6ddd8928486064c9c1" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_int32</a>(fixed_charge_cost, 0, <span class="stringliteral">"Fixed charged cost when using an arc."</span>);
<a name="l00065"></a>00065 <a class="code" href="costas__array_8cc.html#af677423bc95ff6ddd8928486064c9c1" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_int32</a>(seed, 0, <span class="stringliteral">"Random seed"</span>);
<a name="l00066"></a>00066 
<a name="l00067"></a>00067 <span class="comment">// ----- Reporting -----</span>
<a name="l00068"></a>00068 <a class="code" href="costas__array_8cc.html#481252203d46207b482271a18f5b5399">DEFINE_bool</a>(print_model, <span class="keyword">false</span>, <span class="stringliteral">"Print model."</span>);
<a name="l00069"></a>00069 <a class="code" href="costas__array_8cc.html#af677423bc95ff6ddd8928486064c9c1" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_int32</a>(report, 1, <span class="stringliteral">"Report which links and which demands are "</span>
<a name="l00070"></a>00070              <span class="stringliteral">"responsible for the congestion."</span>);
<a name="l00071"></a>00071 <a class="code" href="costas__array_8cc.html#af677423bc95ff6ddd8928486064c9c1" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_int32</a>(log_period, 100000, <span class="stringliteral">"Period for the search log"</span>);
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 <span class="comment">// ----- External constants for shortest paths computation -----</span>
<a name="l00074"></a>00074 DECLARE_int32(shortestpaths_disconnected_distance);
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 <span class="comment">// ----- CP Model -----</span>
<a name="l00077"></a>00077 <a class="code" href="network__routing_8cc.html#731eabb4519222e095cd4638e5dbc944" title="CP Model.">DEFINE_int64</a>(comfort_zone, 850,
<a name="l00078"></a>00078              <span class="stringliteral">"Above this limit in 1/1000th, the link is said to be "</span>
<a name="l00079"></a>00079              <span class="stringliteral">"congestioned."</span>);
<a name="l00080"></a>00080 <a class="code" href="costas__array_8cc.html#af677423bc95ff6ddd8928486064c9c1" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_int32</a>(extra_hops, 6,
<a name="l00081"></a>00081              <span class="stringliteral">"When creating all paths for a demand, we look at paths with "</span>
<a name="l00082"></a>00082              <span class="stringliteral">"maximum length 'shortest path + extra_hops'"</span>);
<a name="l00083"></a>00083 <a class="code" href="costas__array_8cc.html#af677423bc95ff6ddd8928486064c9c1" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_int32</a>(max_paths, 1200, <span class="stringliteral">"Max number of possible paths for a demand."</span>);
<a name="l00084"></a>00084 
<a name="l00085"></a>00085 <span class="comment">// ----- CP LNS -----</span>
<a name="l00086"></a>00086 <a class="code" href="costas__array_8cc.html#af677423bc95ff6ddd8928486064c9c1" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_int32</a>(time_limit, 60000,
<a name="l00087"></a>00087              <span class="stringliteral">"Time limit for search in ms, 0 = no time limit."</span>);
<a name="l00088"></a>00088 <a class="code" href="costas__array_8cc.html#af677423bc95ff6ddd8928486064c9c1" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_int32</a>(fail_limit, 0, <span class="stringliteral">"Failure limit for search, 0 = no limit."</span>);
<a name="l00089"></a>00089 <a class="code" href="costas__array_8cc.html#af677423bc95ff6ddd8928486064c9c1" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_int32</a>(lns_size, 6, <span class="stringliteral">"Number of vars to relax in a lns loop."</span>);
<a name="l00090"></a>00090 <a class="code" href="costas__array_8cc.html#af677423bc95ff6ddd8928486064c9c1" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_int32</a>(lns_seed, 1, <span class="stringliteral">"Seed for the LNS random number generator."</span>);
<a name="l00091"></a>00091 <a class="code" href="costas__array_8cc.html#af677423bc95ff6ddd8928486064c9c1" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_int32</a>(lns_limit, 30, <span class="stringliteral">"Limit the number of failures of the lns loop."</span>);
<a name="l00092"></a>00092 <a class="code" href="costas__array_8cc.html#481252203d46207b482271a18f5b5399">DEFINE_bool</a>(focus_lns, <span class="keyword">true</span>, <span class="stringliteral">"Focus LNS on highest cost arcs."</span>);
<a name="l00093"></a>00093 
<a name="l00094"></a>00094 <span class="keyword">namespace </span>operations_research {
<a name="l00095"></a>00095 <span class="comment">// ---------- Data and Data Generation ----------</span>
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 <span class="comment">// ----- Data -----</span>
<a name="l00098"></a>00098 <span class="comment">// Contains problem data. It assumes capacities are symmetrical:</span>
<a name="l00099"></a>00099 <span class="comment">//   (capacity(i-&gt;j) == capacity(j-&gt;i)).</span>
<a name="l00100"></a>00100 <span class="comment">// Demands are not symmetrical.</span>
<a name="l00101"></a><a class="code" href="classoperations__research_1_1NetworkRoutingData.html">00101</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1NetworkRoutingData.html" title="Data and Data Generation.">NetworkRoutingData</a> {
<a name="l00102"></a>00102  <span class="keyword">public</span>:
<a name="l00103"></a><a class="code" href="classoperations__research_1_1NetworkRoutingData.html#421fb376b9a30261e7a9241bf318f7f7">00103</a>   <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#421fb376b9a30261e7a9241bf318f7f7">NetworkRoutingData</a>()
<a name="l00104"></a>00104       : <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#b50379e9e9db8d88ea601af8c4bea049">name_</a>(<span class="stringliteral">""</span>),
<a name="l00105"></a>00105         <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#bd43aa646578eca36026680145d609ba">num_nodes_</a>(-1),
<a name="l00106"></a>00106         <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#26430ec3e1766c173e8573df68501686">max_capacity_</a>(-1),
<a name="l00107"></a>00107         <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#cf472d2d51bf086ae0ba0457da0401e1">fixed_charge_cost_</a>(-1) {}
<a name="l00108"></a>00108 
<a name="l00109"></a>00109   <span class="comment">// Name of the problem.</span>
<a name="l00110"></a><a class="code" href="classoperations__research_1_1NetworkRoutingData.html#1036db8ebcf5351fc8c27f5d01e006a6">00110</a>   <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#1036db8ebcf5351fc8c27f5d01e006a6" title="Name of the problem.">name</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#b50379e9e9db8d88ea601af8c4bea049">name_</a>; }
<a name="l00111"></a>00111 
<a name="l00112"></a>00112   <span class="comment">// Properties of the model.</span>
<a name="l00113"></a><a class="code" href="classoperations__research_1_1NetworkRoutingData.html#a76bdae606f88e2356869edb8e9a2fcc">00113</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#a76bdae606f88e2356869edb8e9a2fcc" title="Properties of the model.">num_nodes</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#bd43aa646578eca36026680145d609ba">num_nodes_</a>; }
<a name="l00114"></a>00114 
<a name="l00115"></a><a class="code" href="classoperations__research_1_1NetworkRoutingData.html#9bda7178c6c83bc9350e5dd366889e3e">00115</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#9bda7178c6c83bc9350e5dd366889e3e">num_arcs</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#5e9f096e8716c1e97f7aca6b07052137">all_arcs_</a>.size(); }
<a name="l00116"></a>00116 
<a name="l00117"></a><a class="code" href="classoperations__research_1_1NetworkRoutingData.html#62c7afe1b7f19718a678d11b0f65a354">00117</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#62c7afe1b7f19718a678d11b0f65a354">num_demands</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#c7f68f61efd71b0366f45c671c909e33">all_demands_</a>.size(); }
<a name="l00118"></a>00118 
<a name="l00119"></a>00119   <span class="comment">// Returns the capacity of an arc, and 0 if the arc is not defined.</span>
<a name="l00120"></a><a class="code" href="classoperations__research_1_1NetworkRoutingData.html#f2aae283494802990ac9bdcd510efd97">00120</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#f2aae283494802990ac9bdcd510efd97" title="Returns the capacity of an arc, and 0 if the arc is not defined.">Capacity</a>(<span class="keywordtype">int</span> node1, <span class="keywordtype">int</span> node2)<span class="keyword"> const </span>{
<a name="l00121"></a>00121     <span class="keywordflow">return</span> FindWithDefault(<a class="code" href="classoperations__research_1_1NetworkRoutingData.html#5e9f096e8716c1e97f7aca6b07052137">all_arcs_</a>,
<a name="l00122"></a>00122                            make_pair(min(node1, node2), max(node1, node2)),
<a name="l00123"></a>00123                            0);
<a name="l00124"></a>00124   }
<a name="l00125"></a>00125 
<a name="l00126"></a>00126   <span class="comment">// Returns the demand between the source and the destination, and 0 if</span>
<a name="l00127"></a>00127   <span class="comment">// there are no demands between the source and the destination.</span>
<a name="l00128"></a><a class="code" href="classoperations__research_1_1NetworkRoutingData.html#ea57cb718024afbba2c52f92e97d3b93">00128</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#ea57cb718024afbba2c52f92e97d3b93" title="Returns the demand between the source and the destination, and 0 if there are no...">Demand</a>(<span class="keywordtype">int</span> source, <span class="keywordtype">int</span> destination)<span class="keyword"> const </span>{
<a name="l00129"></a>00129     <span class="keywordflow">return</span> FindWithDefault(<a class="code" href="classoperations__research_1_1NetworkRoutingData.html#c7f68f61efd71b0366f45c671c909e33">all_demands_</a>, make_pair(source, destination), 0);
<a name="l00130"></a>00130   }
<a name="l00131"></a>00131 
<a name="l00132"></a>00132   <span class="comment">// External building API.</span>
<a name="l00133"></a><a class="code" href="classoperations__research_1_1NetworkRoutingData.html#c94a07570636e1f15631f10ff4d67d58">00133</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#c94a07570636e1f15631f10ff4d67d58" title="External building API.">set_num_nodes</a>(<span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#a76bdae606f88e2356869edb8e9a2fcc" title="Properties of the model.">num_nodes</a>) { <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#bd43aa646578eca36026680145d609ba">num_nodes_</a> = num_nodes; }
<a name="l00134"></a><a class="code" href="classoperations__research_1_1NetworkRoutingData.html#e73ea1ec05ddaed9259340263dfb856b">00134</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#e73ea1ec05ddaed9259340263dfb856b">AddArc</a>(<span class="keywordtype">int</span> node1, <span class="keywordtype">int</span> node2, <span class="keywordtype">int</span> capacity) {
<a name="l00135"></a>00135     <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#5e9f096e8716c1e97f7aca6b07052137">all_arcs_</a>[make_pair(min(node1, node2), max(node1, node2))] = capacity;
<a name="l00136"></a>00136   }
<a name="l00137"></a><a class="code" href="classoperations__research_1_1NetworkRoutingData.html#80ca262b745fd20d678874a8bee300ee">00137</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#80ca262b745fd20d678874a8bee300ee">AddDemand</a>(<span class="keywordtype">int</span> source, <span class="keywordtype">int</span> destination, <span class="keywordtype">int</span> traffic) {
<a name="l00138"></a>00138     <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#c7f68f61efd71b0366f45c671c909e33">all_demands_</a>[make_pair(source, destination)] = traffic;
<a name="l00139"></a>00139   }
<a name="l00140"></a><a class="code" href="classoperations__research_1_1NetworkRoutingData.html#e1a432783754c198ede4c9e65acff985">00140</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#e1a432783754c198ede4c9e65acff985">set_name</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#1036db8ebcf5351fc8c27f5d01e006a6" title="Name of the problem.">name</a>) { <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#b50379e9e9db8d88ea601af8c4bea049">name_</a> = name; }
<a name="l00141"></a><a class="code" href="classoperations__research_1_1NetworkRoutingData.html#9e73a3027a9631c76b08b308f515dedc">00141</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#9e73a3027a9631c76b08b308f515dedc">set_max_capacity</a>(<span class="keywordtype">int</span> max_capacity) { <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#26430ec3e1766c173e8573df68501686">max_capacity_</a> = max_capacity; }
<a name="l00142"></a><a class="code" href="classoperations__research_1_1NetworkRoutingData.html#fec266555a245794fa945b1c626235b3">00142</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#fec266555a245794fa945b1c626235b3">set_fixed_charge_cost</a>(<span class="keywordtype">int</span> cost) { <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#cf472d2d51bf086ae0ba0457da0401e1">fixed_charge_cost_</a> = cost; }
<a name="l00143"></a>00143  <span class="keyword">private</span>:
<a name="l00144"></a><a class="code" href="classoperations__research_1_1NetworkRoutingData.html#b50379e9e9db8d88ea601af8c4bea049">00144</a>   <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#b50379e9e9db8d88ea601af8c4bea049">name_</a>;
<a name="l00145"></a><a class="code" href="classoperations__research_1_1NetworkRoutingData.html#bd43aa646578eca36026680145d609ba">00145</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#bd43aa646578eca36026680145d609ba">num_nodes_</a>;
<a name="l00146"></a><a class="code" href="classoperations__research_1_1NetworkRoutingData.html#26430ec3e1766c173e8573df68501686">00146</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#26430ec3e1766c173e8573df68501686">max_capacity_</a>;
<a name="l00147"></a><a class="code" href="classoperations__research_1_1NetworkRoutingData.html#cf472d2d51bf086ae0ba0457da0401e1">00147</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#cf472d2d51bf086ae0ba0457da0401e1">fixed_charge_cost_</a>;
<a name="l00148"></a><a class="code" href="classoperations__research_1_1NetworkRoutingData.html#5e9f096e8716c1e97f7aca6b07052137">00148</a>   hash_map&lt;pair&lt;int, int&gt;, <span class="keywordtype">int</span>&gt; <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#5e9f096e8716c1e97f7aca6b07052137">all_arcs_</a>;
<a name="l00149"></a><a class="code" href="classoperations__research_1_1NetworkRoutingData.html#c7f68f61efd71b0366f45c671c909e33">00149</a>   hash_map&lt;pair&lt;int, int&gt;, <span class="keywordtype">int</span>&gt; <a class="code" href="classoperations__research_1_1NetworkRoutingData.html#c7f68f61efd71b0366f45c671c909e33">all_demands_</a>;
<a name="l00150"></a>00150 };
<a name="l00151"></a>00151 
<a name="l00152"></a>00152 <span class="comment">// ----- Data Generation -----</span>
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 <span class="comment">// Random generator of problem. This generator creates a random</span>
<a name="l00155"></a>00155 <span class="comment">// problem. This problem uses a special topology. There are</span>
<a name="l00156"></a>00156 <span class="comment">// 'num_backbones' nodes and 'num_clients' nodes. if 'num_clients' is</span>
<a name="l00157"></a>00157 <span class="comment">// null, then all backbones nodes are also client nodes. All traffic</span>
<a name="l00158"></a>00158 <span class="comment">// originates and terminates in client nodes. Each client node is</span>
<a name="l00159"></a>00159 <span class="comment">// connected to 'min_client_degree' - 'max_client_degree' backbone</span>
<a name="l00160"></a>00160 <span class="comment">// nodes. Each backbone node is connected to 'min_backbone_degree' -</span>
<a name="l00161"></a>00161 <span class="comment">// 'max_backbone_degree' other backbone nodes. There are 'num_demands'</span>
<a name="l00162"></a>00162 <span class="comment">// demands, with a traffic between 'traffic_min' and 'traffic_max'.</span>
<a name="l00163"></a>00163 <span class="comment">// Each arc has a capacity of 'max_capacity'. Using an arc incurs a</span>
<a name="l00164"></a>00164 <span class="comment">// fixed cost of 'fixed_charge_cost'.</span>
<a name="l00165"></a><a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html">00165</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html" title="Data Generation.">NetworkRoutingDataBuilder</a> {
<a name="l00166"></a>00166  <span class="keyword">public</span>:
<a name="l00167"></a><a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#0bc2109f4288c9815cf9ee38520c3f5a">00167</a>   <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#0bc2109f4288c9815cf9ee38520c3f5a">NetworkRoutingDataBuilder</a>() : <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#badf65a726a0241c1cbe3056f385fb7d">random_</a>(0) {}
<a name="l00168"></a>00168 
<a name="l00169"></a><a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#f01dbf2eba792ba03be9441f4d4e38d0">00169</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#f01dbf2eba792ba03be9441f4d4e38d0">BuildModelFromParameters</a>(<span class="keywordtype">int</span> num_clients,
<a name="l00170"></a>00170                                 <span class="keywordtype">int</span> num_backbones,
<a name="l00171"></a>00171                                 <span class="keywordtype">int</span> num_demands,
<a name="l00172"></a>00172                                 <span class="keywordtype">int</span> traffic_min,
<a name="l00173"></a>00173                                 <span class="keywordtype">int</span> traffic_max,
<a name="l00174"></a>00174                                 <span class="keywordtype">int</span> min_client_degree,
<a name="l00175"></a>00175                                 <span class="keywordtype">int</span> max_client_degree,
<a name="l00176"></a>00176                                 <span class="keywordtype">int</span> min_backbone_degree,
<a name="l00177"></a>00177                                 <span class="keywordtype">int</span> max_backbone_degree,
<a name="l00178"></a>00178                                 <span class="keywordtype">int</span> max_capacity,
<a name="l00179"></a>00179                                 <span class="keywordtype">int</span> fixed_charge_cost,
<a name="l00180"></a>00180                                 <span class="keywordtype">int</span> seed,
<a name="l00181"></a>00181                                 <a class="code" href="classoperations__research_1_1NetworkRoutingData.html" title="Data and Data Generation.">NetworkRoutingData</a>* <span class="keyword">const</span> data) {
<a name="l00182"></a>00182     CHECK_GE(num_backbones, 1);
<a name="l00183"></a>00183     CHECK_GE(num_clients, 0);
<a name="l00184"></a>00184     CHECK_GE(num_demands, 1);
<a name="l00185"></a>00185     CHECK_LE(num_demands, num_clients == 0
<a name="l00186"></a>00186              ? num_backbones * num_backbones :
<a name="l00187"></a>00187              num_clients * num_backbones);
<a name="l00188"></a>00188     CHECK_GE(max_client_degree, min_client_degree);
<a name="l00189"></a>00189     CHECK_GE(max_backbone_degree, min_backbone_degree);
<a name="l00190"></a>00190     CHECK_GE(traffic_max, 1);
<a name="l00191"></a>00191     CHECK_GE(traffic_max, traffic_min);
<a name="l00192"></a>00192     CHECK_GE(traffic_min, 1);
<a name="l00193"></a>00193     CHECK_GE(max_backbone_degree, 2);
<a name="l00194"></a>00194     CHECK_GE(max_client_degree, 2);
<a name="l00195"></a>00195     CHECK_LE(max_client_degree, num_backbones);
<a name="l00196"></a>00196     CHECK_LE(max_backbone_degree, num_backbones);
<a name="l00197"></a>00197     CHECK_GE(max_capacity, 1);
<a name="l00198"></a>00198 
<a name="l00199"></a>00199     <span class="keyword">const</span> <span class="keywordtype">int</span> size = num_backbones + num_clients;
<a name="l00200"></a>00200     <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#19db1f1f8d4bea60019656afecda275b">InitData</a>(size, seed);
<a name="l00201"></a>00201     <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#2acb0d26adf424a35284a1ff6db6c73d">BuildGraph</a>(num_clients,
<a name="l00202"></a>00202                num_backbones,
<a name="l00203"></a>00203                min_client_degree,
<a name="l00204"></a>00204                max_client_degree,
<a name="l00205"></a>00205                min_backbone_degree,
<a name="l00206"></a>00206                max_backbone_degree);
<a name="l00207"></a>00207     <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#46c3510a3aae534e864f7255a8293bfc">CreateDemands</a>(num_clients,
<a name="l00208"></a>00208                   num_backbones,
<a name="l00209"></a>00209                   num_demands,
<a name="l00210"></a>00210                   traffic_min,
<a name="l00211"></a>00211                   traffic_max,
<a name="l00212"></a>00212                   data);
<a name="l00213"></a>00213     <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#ca9704435531aaa6f180fee943d8306f">FillData</a>(num_clients,
<a name="l00214"></a>00214              num_backbones,
<a name="l00215"></a>00215              num_demands,
<a name="l00216"></a>00216              traffic_min,
<a name="l00217"></a>00217              traffic_max,
<a name="l00218"></a>00218              min_client_degree,
<a name="l00219"></a>00219              max_client_degree,
<a name="l00220"></a>00220              min_backbone_degree,
<a name="l00221"></a>00221              max_backbone_degree,
<a name="l00222"></a>00222              max_capacity,
<a name="l00223"></a>00223              fixed_charge_cost,
<a name="l00224"></a>00224              seed,
<a name="l00225"></a>00225              data);
<a name="l00226"></a>00226   }
<a name="l00227"></a>00227  <span class="keyword">private</span>:
<a name="l00228"></a><a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#19db1f1f8d4bea60019656afecda275b">00228</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#19db1f1f8d4bea60019656afecda275b">InitData</a>(<span class="keywordtype">int</span> size, <span class="keywordtype">int</span> seed) {
<a name="l00229"></a>00229     <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#cb2dba1fd790470109ab08b0d24cfbf2">network_</a>.clear();
<a name="l00230"></a>00230     <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#cb2dba1fd790470109ab08b0d24cfbf2">network_</a>.resize(size);
<a name="l00231"></a>00231     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {
<a name="l00232"></a>00232       <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#cb2dba1fd790470109ab08b0d24cfbf2">network_</a>[i].resize(size, <span class="keyword">false</span>);
<a name="l00233"></a>00233     }
<a name="l00234"></a>00234     <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#506f9ae138a06049d774d3997ff8c0ec">degrees_</a>.clear();
<a name="l00235"></a>00235     <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#506f9ae138a06049d774d3997ff8c0ec">degrees_</a>.resize(size, 0);
<a name="l00236"></a>00236     <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#badf65a726a0241c1cbe3056f385fb7d">random_</a>.Reset(seed);
<a name="l00237"></a>00237   }
<a name="l00238"></a>00238 
<a name="l00239"></a><a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#2acb0d26adf424a35284a1ff6db6c73d">00239</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#2acb0d26adf424a35284a1ff6db6c73d">BuildGraph</a>(<span class="keywordtype">int</span> num_clients,
<a name="l00240"></a>00240                   <span class="keywordtype">int</span> num_backbones,
<a name="l00241"></a>00241                   <span class="keywordtype">int</span> min_client_degree,
<a name="l00242"></a>00242                   <span class="keywordtype">int</span> max_client_degree,
<a name="l00243"></a>00243                   <span class="keywordtype">int</span> min_backbone_degree,
<a name="l00244"></a>00244                   <span class="keywordtype">int</span> max_backbone_degree) {
<a name="l00245"></a>00245     <span class="keyword">const</span> <span class="keywordtype">int</span> size = num_backbones + num_clients;
<a name="l00246"></a>00246 
<a name="l00247"></a>00247     <span class="comment">// First we create the backbone nodes.</span>
<a name="l00248"></a>00248     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt; num_backbones; ++i) {
<a name="l00249"></a>00249       <span class="keywordtype">int</span> j = <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#badf65a726a0241c1cbe3056f385fb7d">random_</a>.Uniform(i);
<a name="l00250"></a>00250       CHECK_LT(j, i);
<a name="l00251"></a>00251       <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#a3202dda1859692b9acbf5974b071ce0">AddEdge</a>(i, j);
<a name="l00252"></a>00252     }
<a name="l00253"></a>00253 
<a name="l00254"></a>00254     hash_set&lt;int&gt; to_complete;
<a name="l00255"></a>00255     <span class="keywordtype">int</span> not_full = 0;
<a name="l00256"></a>00256     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; num_backbones; ++i) {
<a name="l00257"></a>00257       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#506f9ae138a06049d774d3997ff8c0ec">degrees_</a>[i] &lt; min_backbone_degree) {
<a name="l00258"></a>00258         to_complete.insert(i);
<a name="l00259"></a>00259       }
<a name="l00260"></a>00260       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#506f9ae138a06049d774d3997ff8c0ec">degrees_</a>[i] &lt; max_backbone_degree) {
<a name="l00261"></a>00261         not_full++;
<a name="l00262"></a>00262       }
<a name="l00263"></a>00263     }
<a name="l00264"></a>00264     <span class="keywordflow">while</span> (!to_complete.empty() &amp;&amp; not_full &gt; 0) {
<a name="l00265"></a>00265       <span class="keyword">const</span> <span class="keywordtype">int</span> node1 = *(to_complete.begin());
<a name="l00266"></a>00266       <span class="keywordtype">int</span> node2 = node1;
<a name="l00267"></a>00267       <span class="keywordflow">while</span> (node2 == node1 || <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#506f9ae138a06049d774d3997ff8c0ec">degrees_</a>[node2] &gt;= max_backbone_degree) {
<a name="l00268"></a>00268         node2 = <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#badf65a726a0241c1cbe3056f385fb7d">random_</a>.Uniform(num_backbones);
<a name="l00269"></a>00269       }
<a name="l00270"></a>00270       <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#a3202dda1859692b9acbf5974b071ce0">AddEdge</a>(node1, node2);
<a name="l00271"></a>00271       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#506f9ae138a06049d774d3997ff8c0ec">degrees_</a>[node1] &gt;= min_backbone_degree) {
<a name="l00272"></a>00272         to_complete.erase(node1);
<a name="l00273"></a>00273       }
<a name="l00274"></a>00274       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#506f9ae138a06049d774d3997ff8c0ec">degrees_</a>[node2] &gt;= min_backbone_degree) {
<a name="l00275"></a>00275         to_complete.erase(node2);
<a name="l00276"></a>00276       }
<a name="l00277"></a>00277       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#506f9ae138a06049d774d3997ff8c0ec">degrees_</a>[node1] &gt;= max_backbone_degree) {
<a name="l00278"></a>00278         not_full--;
<a name="l00279"></a>00279       }
<a name="l00280"></a>00280       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#506f9ae138a06049d774d3997ff8c0ec">degrees_</a>[node2] &gt;= max_backbone_degree) {
<a name="l00281"></a>00281         not_full--;
<a name="l00282"></a>00282       }
<a name="l00283"></a>00283     }
<a name="l00284"></a>00284 
<a name="l00285"></a>00285     <span class="comment">// Then create the client nodes connected to the backbone nodes.</span>
<a name="l00286"></a>00286     <span class="comment">// If num_client is 0, then backbone nodes are also client nodes.</span>
<a name="l00287"></a>00287     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = num_backbones; i &lt; size; ++i) {
<a name="l00288"></a>00288       <span class="keyword">const</span> <span class="keywordtype">int</span> degree = <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#710930de131db2b2193fdc8c99cb0da6">RandomInInterval</a>(min_client_degree, max_client_degree);
<a name="l00289"></a>00289       <span class="keywordflow">while</span> (<a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#506f9ae138a06049d774d3997ff8c0ec">degrees_</a>[i] &lt; degree) {
<a name="l00290"></a>00290         <span class="keyword">const</span> <span class="keywordtype">int</span> j = <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#badf65a726a0241c1cbe3056f385fb7d">random_</a>.Uniform(num_backbones);
<a name="l00291"></a>00291         <span class="keywordflow">if</span> (!<a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#cb2dba1fd790470109ab08b0d24cfbf2">network_</a>[i][j]) {
<a name="l00292"></a>00292           <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#a3202dda1859692b9acbf5974b071ce0">AddEdge</a>(i, j);
<a name="l00293"></a>00293         }
<a name="l00294"></a>00294       }
<a name="l00295"></a>00295     }
<a name="l00296"></a>00296   }
<a name="l00297"></a>00297 
<a name="l00298"></a><a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#46c3510a3aae534e864f7255a8293bfc">00298</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#46c3510a3aae534e864f7255a8293bfc">CreateDemands</a>(<span class="keywordtype">int</span> num_clients,
<a name="l00299"></a>00299                      <span class="keywordtype">int</span> num_backbones,
<a name="l00300"></a>00300                      <span class="keywordtype">int</span> num_demands,
<a name="l00301"></a>00301                      <span class="keywordtype">int</span> traffic_min,
<a name="l00302"></a>00302                      <span class="keywordtype">int</span> traffic_max,
<a name="l00303"></a>00303                      <a class="code" href="classoperations__research_1_1NetworkRoutingData.html" title="Data and Data Generation.">NetworkRoutingData</a>* <span class="keyword">const</span> data) {
<a name="l00304"></a>00304     <span class="keywordflow">while</span> (data-&gt;<a class="code" href="classoperations__research_1_1NetworkRoutingData.html#62c7afe1b7f19718a678d11b0f65a354">num_demands</a>() &lt; num_demands) {
<a name="l00305"></a>00305       <span class="keyword">const</span> <span class="keywordtype">int</span> source = <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#2e5ad82aa47f5817dd819b031d0670fe">RandomClient</a>(num_clients, num_backbones);
<a name="l00306"></a>00306       <span class="keywordtype">int</span> dest = source;
<a name="l00307"></a>00307       <span class="keywordflow">while</span> (dest == source) {
<a name="l00308"></a>00308         dest = <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#2e5ad82aa47f5817dd819b031d0670fe">RandomClient</a>(num_clients, num_backbones);
<a name="l00309"></a>00309       }
<a name="l00310"></a>00310       <span class="keyword">const</span> <span class="keywordtype">int</span> traffic = <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#710930de131db2b2193fdc8c99cb0da6">RandomInInterval</a>(traffic_min, traffic_max);
<a name="l00311"></a>00311       data-&gt;<a class="code" href="classoperations__research_1_1NetworkRoutingData.html#80ca262b745fd20d678874a8bee300ee">AddDemand</a>(source, dest, traffic);
<a name="l00312"></a>00312     }
<a name="l00313"></a>00313   }
<a name="l00314"></a>00314 
<a name="l00315"></a><a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#ca9704435531aaa6f180fee943d8306f">00315</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#ca9704435531aaa6f180fee943d8306f">FillData</a>(<span class="keywordtype">int</span> num_clients,
<a name="l00316"></a>00316                 <span class="keywordtype">int</span> num_backbones,
<a name="l00317"></a>00317                 <span class="keywordtype">int</span> num_demands,
<a name="l00318"></a>00318                 <span class="keywordtype">int</span> traffic_min,
<a name="l00319"></a>00319                 <span class="keywordtype">int</span> traffic_max,
<a name="l00320"></a>00320                 <span class="keywordtype">int</span> min_client_degree,
<a name="l00321"></a>00321                 <span class="keywordtype">int</span> max_client_degree,
<a name="l00322"></a>00322                 <span class="keywordtype">int</span> min_backbone_degree,
<a name="l00323"></a>00323                 <span class="keywordtype">int</span> max_backbone_degree,
<a name="l00324"></a>00324                 <span class="keywordtype">int</span> max_capacity,
<a name="l00325"></a>00325                 <span class="keywordtype">int</span> fixed_charge_cost,
<a name="l00326"></a>00326                 <span class="keywordtype">int</span> seed,
<a name="l00327"></a>00327                 <a class="code" href="classoperations__research_1_1NetworkRoutingData.html" title="Data and Data Generation.">NetworkRoutingData</a>* <span class="keyword">const</span> data) {
<a name="l00328"></a>00328     <span class="keyword">const</span> <span class="keywordtype">int</span> size = num_backbones + num_clients;
<a name="l00329"></a>00329 
<a name="l00330"></a>00330     <span class="keyword">const</span> <span class="keywordtype">string</span> name =
<a name="l00331"></a>00331         StringPrintf(<span class="stringliteral">"mp_c%i_b%i_d%i.t%i-%i.cd%i-%i.bd%i-%i.mc%i.fc%i.s%i"</span>,
<a name="l00332"></a>00332                      num_clients,
<a name="l00333"></a>00333                      num_backbones,
<a name="l00334"></a>00334                      num_demands,
<a name="l00335"></a>00335                      traffic_min,
<a name="l00336"></a>00336                      traffic_max,
<a name="l00337"></a>00337                      min_client_degree,
<a name="l00338"></a>00338                      max_client_degree,
<a name="l00339"></a>00339                      min_backbone_degree,
<a name="l00340"></a>00340                      max_backbone_degree,
<a name="l00341"></a>00341                      max_capacity,
<a name="l00342"></a>00342                      fixed_charge_cost,
<a name="l00343"></a>00343                      seed);
<a name="l00344"></a>00344     data-&gt;<a class="code" href="classoperations__research_1_1NetworkRoutingData.html#e1a432783754c198ede4c9e65acff985">set_name</a>(name);
<a name="l00345"></a>00345 
<a name="l00346"></a>00346     data-&gt;<a class="code" href="classoperations__research_1_1NetworkRoutingData.html#c94a07570636e1f15631f10ff4d67d58" title="External building API.">set_num_nodes</a>(size);
<a name="l00347"></a>00347     <span class="keywordtype">int</span> num_arcs = 0;
<a name="l00348"></a>00348     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size - 1; ++i) {
<a name="l00349"></a>00349       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = i + 1; j &lt; size; ++j) {
<a name="l00350"></a>00350         <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#cb2dba1fd790470109ab08b0d24cfbf2">network_</a>[i][j]) {
<a name="l00351"></a>00351           data-&gt;<a class="code" href="classoperations__research_1_1NetworkRoutingData.html#e73ea1ec05ddaed9259340263dfb856b">AddArc</a>(i, j, max_capacity);
<a name="l00352"></a>00352           num_arcs++;
<a name="l00353"></a>00353         }
<a name="l00354"></a>00354       }
<a name="l00355"></a>00355     }
<a name="l00356"></a>00356     data-&gt;<a class="code" href="classoperations__research_1_1NetworkRoutingData.html#9e73a3027a9631c76b08b308f515dedc">set_max_capacity</a>(max_capacity);
<a name="l00357"></a>00357     data-&gt;<a class="code" href="classoperations__research_1_1NetworkRoutingData.html#fec266555a245794fa945b1c626235b3">set_fixed_charge_cost</a>(fixed_charge_cost);
<a name="l00358"></a>00358 
<a name="l00359"></a>00359   }
<a name="l00360"></a>00360 
<a name="l00361"></a><a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#a3202dda1859692b9acbf5974b071ce0">00361</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#a3202dda1859692b9acbf5974b071ce0">AddEdge</a>(<span class="keywordtype">int</span> i, <span class="keywordtype">int</span> j) {
<a name="l00362"></a>00362     <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#506f9ae138a06049d774d3997ff8c0ec">degrees_</a>[i]++;
<a name="l00363"></a>00363     <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#506f9ae138a06049d774d3997ff8c0ec">degrees_</a>[j]++;
<a name="l00364"></a>00364     <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#cb2dba1fd790470109ab08b0d24cfbf2">network_</a>[i][j] = <span class="keyword">true</span>;
<a name="l00365"></a>00365     <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#cb2dba1fd790470109ab08b0d24cfbf2">network_</a>[j][i] = <span class="keyword">true</span>;
<a name="l00366"></a>00366   }
<a name="l00367"></a>00367 
<a name="l00368"></a><a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#710930de131db2b2193fdc8c99cb0da6">00368</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#710930de131db2b2193fdc8c99cb0da6">RandomInInterval</a>(<span class="keywordtype">int</span> interval_min, <span class="keywordtype">int</span> interval_max) {
<a name="l00369"></a>00369     CHECK_LE(interval_min, interval_max);
<a name="l00370"></a>00370     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#badf65a726a0241c1cbe3056f385fb7d">random_</a>.Uniform(interval_max - interval_min + 1) + interval_min;
<a name="l00371"></a>00371   }
<a name="l00372"></a>00372 
<a name="l00373"></a><a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#2e5ad82aa47f5817dd819b031d0670fe">00373</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#2e5ad82aa47f5817dd819b031d0670fe">RandomClient</a>(<span class="keywordtype">int</span> num_clients, <span class="keywordtype">int</span> num_backbones) {
<a name="l00374"></a>00374     <span class="keywordflow">return</span> (num_clients == 0) ?
<a name="l00375"></a>00375         <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#badf65a726a0241c1cbe3056f385fb7d">random_</a>.Uniform(num_backbones) :
<a name="l00376"></a>00376         <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#badf65a726a0241c1cbe3056f385fb7d">random_</a>.Uniform(num_clients) + num_backbones;
<a name="l00377"></a>00377   }
<a name="l00378"></a>00378 
<a name="l00379"></a><a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#cb2dba1fd790470109ab08b0d24cfbf2">00379</a>   vector&lt;vector&lt;bool&gt; &gt; <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#cb2dba1fd790470109ab08b0d24cfbf2">network_</a>;
<a name="l00380"></a><a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#506f9ae138a06049d774d3997ff8c0ec">00380</a>   vector&lt;int&gt; <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#506f9ae138a06049d774d3997ff8c0ec">degrees_</a>;
<a name="l00381"></a><a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#badf65a726a0241c1cbe3056f385fb7d">00381</a>   ACMRandom <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#badf65a726a0241c1cbe3056f385fb7d">random_</a>;
<a name="l00382"></a>00382 };
<a name="l00383"></a>00383 
<a name="l00384"></a>00384 <span class="comment">// ---------- Solving the Problem ----------</span>
<a name="l00385"></a>00385 
<a name="l00386"></a>00386 <span class="comment">// Useful data struct to hold demands.</span>
<a name="l00387"></a><a class="code" href="structoperations__research_1_1Demand.html">00387</a> <span class="keyword">struct </span><a class="code" href="structoperations__research_1_1Demand.html" title="Solving the Problem.">Demand</a> {
<a name="l00388"></a>00388  <span class="keyword">public</span>:
<a name="l00389"></a><a class="code" href="structoperations__research_1_1Demand.html#0b28f3d2c5529f1c8e560823d9178fee">00389</a>   <a class="code" href="structoperations__research_1_1Demand.html#0b28f3d2c5529f1c8e560823d9178fee">Demand</a>(<span class="keywordtype">int</span> the_source, <span class="keywordtype">int</span> the_destination, <span class="keywordtype">int</span> the_traffic)
<a name="l00390"></a>00390       : <a class="code" href="structoperations__research_1_1Demand.html#1b84a67d4baab7bd14cbf25ffebdc46f">source</a>(the_source),
<a name="l00391"></a>00391         <a class="code" href="structoperations__research_1_1Demand.html#aba16f19db248e6ee92fb72e86920303">destination</a>(the_destination),
<a name="l00392"></a>00392         <a class="code" href="structoperations__research_1_1Demand.html#31b9ff7eee7c149aecc27cceb01af819">traffic</a>(the_traffic) {}
<a name="l00393"></a><a class="code" href="structoperations__research_1_1Demand.html#1b84a67d4baab7bd14cbf25ffebdc46f">00393</a>   <span class="keywordtype">int</span> <a class="code" href="structoperations__research_1_1Demand.html#1b84a67d4baab7bd14cbf25ffebdc46f">source</a>;
<a name="l00394"></a><a class="code" href="structoperations__research_1_1Demand.html#aba16f19db248e6ee92fb72e86920303">00394</a>   <span class="keywordtype">int</span> <a class="code" href="structoperations__research_1_1Demand.html#aba16f19db248e6ee92fb72e86920303">destination</a>;
<a name="l00395"></a><a class="code" href="structoperations__research_1_1Demand.html#31b9ff7eee7c149aecc27cceb01af819">00395</a>   <span class="keywordtype">int</span> <a class="code" href="structoperations__research_1_1Demand.html#31b9ff7eee7c149aecc27cceb01af819">traffic</a>;
<a name="l00396"></a>00396 };
<a name="l00397"></a>00397 
<a name="l00398"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html">00398</a> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html">NetworkRoutingSolver</a> {
<a name="l00399"></a>00399  <span class="keyword">public</span>:
<a name="l00400"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#2f1334aa9813f7e7066520aed8fa474e">00400</a>   <span class="keyword">typedef</span> hash_set&lt;int&gt; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#2f1334aa9813f7e7066520aed8fa474e">OnePath</a>;
<a name="l00401"></a>00401 
<a name="l00402"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#1973530bad9b9e52447a7e2e15f7a19e">00402</a>   <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#1973530bad9b9e52447a7e2e15f7a19e">NetworkRoutingSolver</a>() : <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#2291a882b3190cc7970bcc3910bf4133">num_nodes_</a>(-1) {}
<a name="l00403"></a>00403 
<a name="l00404"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#c833a1be4fee9798c5f5fc7cb94d54f2">00404</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#c833a1be4fee9798c5f5fc7cb94d54f2">ComputeAllPathsForOneDemandAndOnePathLength</a>(<span class="keywordtype">int</span> demand_index,
<a name="l00405"></a>00405                                                    <span class="keywordtype">int</span> max_length,
<a name="l00406"></a>00406                                                    <span class="keywordtype">int</span> max_paths) {
<a name="l00407"></a>00407     <span class="comment">// We search for paths of length exactly 'max_length'.</span>
<a name="l00408"></a>00408     Solver solver(<span class="stringliteral">"Counting"</span>);
<a name="l00409"></a>00409     vector&lt;IntVar*&gt; arc_vars;
<a name="l00410"></a>00410     vector&lt;IntVar*&gt; node_vars;
<a name="l00411"></a>00411     solver.MakeIntVarArray(max_length, 0, <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#2291a882b3190cc7970bcc3910bf4133">num_nodes_</a> - 1, &amp;node_vars);
<a name="l00412"></a>00412     solver.MakeIntVarArray(max_length - 1, -1, <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#46b2a4779c784f54d96aff6873ef1115">count_arcs</a>() - 1, &amp;arc_vars);
<a name="l00413"></a>00413 
<a name="l00414"></a>00414     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; max_length - 1; ++i) {
<a name="l00415"></a>00415       vector&lt;IntVar*&gt; tmp_vars;
<a name="l00416"></a>00416       tmp_vars.push_back(node_vars[i]);
<a name="l00417"></a>00417       tmp_vars.push_back(node_vars[i + 1]);
<a name="l00418"></a>00418       tmp_vars.push_back(arc_vars[i]);
<a name="l00419"></a>00419       solver.AddConstraint(solver.MakeAllowedAssignments(tmp_vars, <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#7c9be3a5aad472cbc74f3d04dc7a8802">arcs_data_</a>));
<a name="l00420"></a>00420     }
<a name="l00421"></a>00421 
<a name="l00422"></a>00422     <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1Demand.html" title="Solving the Problem.">Demand</a>&amp; demand = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#d7009080bdb4b4bf868a6d947796b0cb">demands_array_</a>[demand_index];
<a name="l00423"></a>00423     solver.AddConstraint(solver.MakeEquality(node_vars[0], demand.<a class="code" href="structoperations__research_1_1Demand.html#1b84a67d4baab7bd14cbf25ffebdc46f">source</a>));
<a name="l00424"></a>00424     solver.AddConstraint(solver.MakeEquality(node_vars[max_length - 1],
<a name="l00425"></a>00425                                              demand.<a class="code" href="structoperations__research_1_1Demand.html#aba16f19db248e6ee92fb72e86920303">destination</a>));
<a name="l00426"></a>00426     solver.AddConstraint(solver.MakeAllDifferent(arc_vars, <span class="keyword">true</span>));
<a name="l00427"></a>00427     solver.AddConstraint(solver.MakeAllDifferent(node_vars, <span class="keyword">true</span>));
<a name="l00428"></a>00428     <a class="code" href="classDecisionBuilder.html">DecisionBuilder</a>* <span class="keyword">const</span> db = solver.MakePhase(node_vars,
<a name="l00429"></a>00429                                                  Solver::CHOOSE_FIRST_UNBOUND,
<a name="l00430"></a>00430                                                  Solver::ASSIGN_MIN_VALUE);
<a name="l00431"></a>00431     solver.NewSearch(db);
<a name="l00432"></a>00432     <span class="keywordflow">while</span> (solver.NextSolution()) {
<a name="l00433"></a>00433       <span class="keyword">const</span> <span class="keywordtype">int</span> path_id = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#1dfbbfc8d0cef98cf60ff98ea99d5816">all_paths_</a>[demand_index].size();
<a name="l00434"></a>00434       <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#1dfbbfc8d0cef98cf60ff98ea99d5816">all_paths_</a>[demand_index].resize(path_id + 1);
<a name="l00435"></a>00435       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> arc_index = 0; arc_index &lt; max_length - 1; ++arc_index) {
<a name="l00436"></a>00436         <span class="keyword">const</span> <span class="keywordtype">int</span> arc = arc_vars[arc_index]-&gt;Value();
<a name="l00437"></a>00437         <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#1dfbbfc8d0cef98cf60ff98ea99d5816">all_paths_</a>[demand_index].back().insert(arc);
<a name="l00438"></a>00438       }
<a name="l00439"></a>00439       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#1dfbbfc8d0cef98cf60ff98ea99d5816">all_paths_</a>[demand_index].size() &gt; max_paths) {
<a name="l00440"></a>00440         <span class="keywordflow">break</span>;
<a name="l00441"></a>00441       }
<a name="l00442"></a>00442     }
<a name="l00443"></a>00443     solver.EndSearch();
<a name="l00444"></a>00444   }
<a name="l00445"></a>00445 
<a name="l00446"></a>00446   <span class="comment">// This method will fill the all_paths_ data structure. all_paths</span>
<a name="l00447"></a>00447   <span class="comment">// contains, for each demand, a vector of possible paths, stored as</span>
<a name="l00448"></a>00448   <span class="comment">// a hash_set of arc indices.</span>
<a name="l00449"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#f4e2f8430ed862e4f57226f8fd601ec6">00449</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#f4e2f8430ed862e4f57226f8fd601ec6" title="This method will fill the all_paths_ data structure.">ComputeAllPaths</a>(<span class="keywordtype">int</span> extra_hops, <span class="keywordtype">int</span> max_paths) {
<a name="l00450"></a>00450     <span class="keywordtype">int</span> num_paths = 0;
<a name="l00451"></a>00451     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> demand_index = 0;
<a name="l00452"></a>00452          demand_index &lt; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#d7009080bdb4b4bf868a6d947796b0cb">demands_array_</a>.size();
<a name="l00453"></a>00453          ++demand_index) {
<a name="l00454"></a>00454       <span class="keyword">const</span> <span class="keywordtype">int</span> min_path_length = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#f64135f083ecf31e3960e5878415a1bb">all_min_path_lengths_</a>[demand_index];
<a name="l00455"></a>00455       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> max_length = min_path_length + 1;
<a name="l00456"></a>00456            max_length &lt;= min_path_length + extra_hops + 1;
<a name="l00457"></a>00457            ++max_length) {
<a name="l00458"></a>00458         <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#c833a1be4fee9798c5f5fc7cb94d54f2">ComputeAllPathsForOneDemandAndOnePathLength</a>(demand_index,
<a name="l00459"></a>00459                                                     max_length,
<a name="l00460"></a>00460                                                     max_paths);
<a name="l00461"></a>00461         <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#1dfbbfc8d0cef98cf60ff98ea99d5816">all_paths_</a>[demand_index].size() &gt; max_paths) {
<a name="l00462"></a>00462           <span class="keywordflow">break</span>;
<a name="l00463"></a>00463         }
<a name="l00464"></a>00464       }
<a name="l00465"></a>00465       num_paths += <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#1dfbbfc8d0cef98cf60ff98ea99d5816">all_paths_</a>[demand_index].size();
<a name="l00466"></a>00466     }
<a name="l00467"></a>00467     <span class="keywordflow">return</span> num_paths;
<a name="l00468"></a>00468   }
<a name="l00469"></a>00469 
<a name="l00470"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#00048b30f7f26138d89be3279980596a">00470</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#00048b30f7f26138d89be3279980596a">AddArcData</a>(<span class="keywordtype">int</span> index, <span class="keywordtype">int</span> source, <span class="keywordtype">int</span> destination, <span class="keywordtype">int</span> arc_id) {
<a name="l00471"></a>00471     <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#7c9be3a5aad472cbc74f3d04dc7a8802">arcs_data_</a>[index].resize(3);
<a name="l00472"></a>00472     <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#7c9be3a5aad472cbc74f3d04dc7a8802">arcs_data_</a>[index][0] = source;
<a name="l00473"></a>00473     <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#7c9be3a5aad472cbc74f3d04dc7a8802">arcs_data_</a>[index][1] = destination;
<a name="l00474"></a>00474     <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#7c9be3a5aad472cbc74f3d04dc7a8802">arcs_data_</a>[index][2] = arc_id;
<a name="l00475"></a>00475   }
<a name="l00476"></a>00476 
<a name="l00477"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#055c2222a7115570d58d0fe616b66d5d">00477</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#055c2222a7115570d58d0fe616b66d5d">InitArcInfo</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html" title="Data and Data Generation.">NetworkRoutingData</a>&amp; data) {
<a name="l00478"></a>00478     <span class="keyword">const</span> <span class="keywordtype">int</span> num_arcs = data.<a class="code" href="classoperations__research_1_1NetworkRoutingData.html#9bda7178c6c83bc9350e5dd366889e3e">num_arcs</a>();
<a name="l00479"></a>00479     <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#7c9be3a5aad472cbc74f3d04dc7a8802">arcs_data_</a>.resize(2 * num_arcs);
<a name="l00480"></a>00480     <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#8e017c78e289bb9b35a765b964be7b0e">capacity_</a>.clear();
<a name="l00481"></a>00481     <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#8e017c78e289bb9b35a765b964be7b0e">capacity_</a>.resize(<a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#2291a882b3190cc7970bcc3910bf4133">num_nodes_</a>);
<a name="l00482"></a>00482     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> node_index = 0; node_index &lt; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#2291a882b3190cc7970bcc3910bf4133">num_nodes_</a>; ++node_index) {
<a name="l00483"></a>00483       <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#8e017c78e289bb9b35a765b964be7b0e">capacity_</a>[node_index].resize(num_nodes_, 0);
<a name="l00484"></a>00484     }
<a name="l00485"></a>00485     <span class="keywordtype">int</span> arc_id = 0;
<a name="l00486"></a>00486     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; num_nodes_ - 1; ++i) {
<a name="l00487"></a>00487       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = i + 1; j &lt; num_nodes_; ++j) {
<a name="l00488"></a>00488         <span class="keyword">const</span> <span class="keywordtype">int</span> capacity = data.<a class="code" href="classoperations__research_1_1NetworkRoutingData.html#f2aae283494802990ac9bdcd510efd97" title="Returns the capacity of an arc, and 0 if the arc is not defined.">Capacity</a>(i, j);
<a name="l00489"></a>00489         <span class="keywordflow">if</span> (capacity &gt; 0) {
<a name="l00490"></a>00490           <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#00048b30f7f26138d89be3279980596a">AddArcData</a>(2 * arc_id, i, j, arc_id);
<a name="l00491"></a>00491           <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#00048b30f7f26138d89be3279980596a">AddArcData</a>(2 * arc_id + 1, j, i, arc_id);
<a name="l00492"></a>00492           arc_id++;
<a name="l00493"></a>00493           <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#29e2c4fc3d5ed93c5d5b0e562ea34344">arc_capacity_</a>.push_back(capacity);
<a name="l00494"></a>00494           <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#8e017c78e289bb9b35a765b964be7b0e">capacity_</a>[i][j] = capacity;
<a name="l00495"></a>00495           <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#8e017c78e289bb9b35a765b964be7b0e">capacity_</a>[j][i] = capacity;
<a name="l00496"></a>00496           <span class="keywordflow">if</span> (FLAGS_print_model) {
<a name="l00497"></a>00497             LOG(INFO) &lt;&lt; <span class="stringliteral">"Arc "</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">" &lt;-&gt; "</span> &lt;&lt; j
<a name="l00498"></a>00498                       &lt;&lt; <span class="stringliteral">" with capacity "</span> &lt;&lt; capacity;
<a name="l00499"></a>00499           }
<a name="l00500"></a>00500         }
<a name="l00501"></a>00501       }
<a name="l00502"></a>00502     }
<a name="l00503"></a>00503     CHECK_EQ(arc_id, num_arcs);
<a name="l00504"></a>00504   }
<a name="l00505"></a>00505 
<a name="l00506"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#4cb4dc017c35a3278fc945610dca5c25">00506</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#4cb4dc017c35a3278fc945610dca5c25">InitDemandInfo</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html" title="Data and Data Generation.">NetworkRoutingData</a>&amp; data) {
<a name="l00507"></a>00507     <span class="keyword">const</span> <span class="keywordtype">int</span> num_demands = data.<a class="code" href="classoperations__research_1_1NetworkRoutingData.html#62c7afe1b7f19718a678d11b0f65a354">num_demands</a>();
<a name="l00508"></a>00508     <span class="keywordtype">int</span> total_demand = 0;
<a name="l00509"></a>00509     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#2291a882b3190cc7970bcc3910bf4133">num_nodes_</a>; ++i) {
<a name="l00510"></a>00510       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; num_nodes_; ++j) {
<a name="l00511"></a>00511         <span class="keyword">const</span> <span class="keywordtype">int</span> traffic = data.<a class="code" href="classoperations__research_1_1NetworkRoutingData.html#ea57cb718024afbba2c52f92e97d3b93" title="Returns the demand between the source and the destination, and 0 if there are no...">Demand</a>(i, j);
<a name="l00512"></a>00512         <span class="keywordflow">if</span> (traffic &gt; 0) {
<a name="l00513"></a>00513           <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#d7009080bdb4b4bf868a6d947796b0cb">demands_array_</a>.push_back(<a class="code" href="structoperations__research_1_1Demand.html" title="Solving the Problem.">Demand</a>(i, j, traffic));
<a name="l00514"></a>00514           total_demand += traffic;
<a name="l00515"></a>00515         }
<a name="l00516"></a>00516       }
<a name="l00517"></a>00517     }
<a name="l00518"></a>00518     CHECK_EQ(num_demands, <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#d7009080bdb4b4bf868a6d947796b0cb">demands_array_</a>.size());
<a name="l00519"></a>00519     <span class="keywordflow">return</span> total_demand;
<a name="l00520"></a>00520   }
<a name="l00521"></a>00521 
<a name="l00522"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#07bd2d98a3e23d7017ee71a4c788ea95">00522</a>   int64 <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#07bd2d98a3e23d7017ee71a4c788ea95">InitShortestPaths</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html" title="Data and Data Generation.">NetworkRoutingData</a>&amp; data) {
<a name="l00523"></a>00523     <span class="keyword">const</span> <span class="keywordtype">int</span> num_demands = data.<a class="code" href="classoperations__research_1_1NetworkRoutingData.html#62c7afe1b7f19718a678d11b0f65a354">num_demands</a>();
<a name="l00524"></a>00524     int64 total_cumulated_traffic = 0;
<a name="l00525"></a>00525     <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#f64135f083ecf31e3960e5878415a1bb">all_min_path_lengths_</a>.clear();
<a name="l00526"></a>00526     vector&lt;int&gt; paths;
<a name="l00527"></a>00527     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> demand_index = 0; demand_index &lt; num_demands; ++demand_index) {
<a name="l00528"></a>00528       paths.clear();
<a name="l00529"></a>00529       <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1Demand.html" title="Solving the Problem.">Demand</a>&amp; demand = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#d7009080bdb4b4bf868a6d947796b0cb">demands_array_</a>[demand_index];
<a name="l00530"></a>00530       ResultCallback2&lt;int64, int, int&gt;* <span class="keyword">const</span> graph_callback =
<a name="l00531"></a>00531           NewPermanentCallback(<span class="keyword">this</span>, &amp;<a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#7c83d3759892284fb36724c9f9fa2197" title="Callback for Dijkstra Shortest Path.">NetworkRoutingSolver::HasArc</a>);
<a name="l00532"></a>00532       CHECK(DijkstraShortestPath(<a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#2291a882b3190cc7970bcc3910bf4133">num_nodes_</a>,
<a name="l00533"></a>00533                                  demand.<a class="code" href="structoperations__research_1_1Demand.html#1b84a67d4baab7bd14cbf25ffebdc46f">source</a>,
<a name="l00534"></a>00534                                  demand.<a class="code" href="structoperations__research_1_1Demand.html#aba16f19db248e6ee92fb72e86920303">destination</a>,
<a name="l00535"></a>00535                                  graph_callback,
<a name="l00536"></a>00536                                  &amp;paths));
<a name="l00537"></a>00537       <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#f64135f083ecf31e3960e5878415a1bb">all_min_path_lengths_</a>.push_back(paths.size() - 1);
<a name="l00538"></a>00538     }
<a name="l00539"></a>00539 
<a name="l00540"></a>00540     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; num_demands; ++i) {
<a name="l00541"></a>00541       <span class="keyword">const</span> <span class="keywordtype">int</span> min_path_length = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#f64135f083ecf31e3960e5878415a1bb">all_min_path_lengths_</a>[i];
<a name="l00542"></a>00542       total_cumulated_traffic += min_path_length * <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#d7009080bdb4b4bf868a6d947796b0cb">demands_array_</a>[i].traffic;
<a name="l00543"></a>00543     }
<a name="l00544"></a>00544     <span class="keywordflow">return</span> total_cumulated_traffic;
<a name="l00545"></a>00545   }
<a name="l00546"></a>00546 
<a name="l00547"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#c1f940105b2fa3f18e9d349d0dbfb9b1">00547</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#c1f940105b2fa3f18e9d349d0dbfb9b1">InitPaths</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html" title="Data and Data Generation.">NetworkRoutingData</a>&amp; data,
<a name="l00548"></a>00548                  <span class="keywordtype">int</span> extra_hops,
<a name="l00549"></a>00549                  <span class="keywordtype">int</span> max_paths) {
<a name="l00550"></a>00550     <span class="keyword">const</span> <span class="keywordtype">int</span> num_demands = data.<a class="code" href="classoperations__research_1_1NetworkRoutingData.html#62c7afe1b7f19718a678d11b0f65a354">num_demands</a>();
<a name="l00551"></a>00551     LOG(INFO) &lt;&lt; <span class="stringliteral">"Computing all possible paths "</span>;
<a name="l00552"></a>00552     LOG(INFO) &lt;&lt; <span class="stringliteral">"  - extra hops = "</span> &lt;&lt; extra_hops;
<a name="l00553"></a>00553     LOG(INFO) &lt;&lt; <span class="stringliteral">"  - max paths per demand = "</span> &lt;&lt; max_paths;
<a name="l00554"></a>00554     <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#1dfbbfc8d0cef98cf60ff98ea99d5816">all_paths_</a>.clear();
<a name="l00555"></a>00555     <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#1dfbbfc8d0cef98cf60ff98ea99d5816">all_paths_</a>.resize(num_demands);
<a name="l00556"></a>00556     <span class="keyword">const</span> <span class="keywordtype">int</span> num_paths = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#f4e2f8430ed862e4f57226f8fd601ec6" title="This method will fill the all_paths_ data structure.">ComputeAllPaths</a>(extra_hops, max_paths);
<a name="l00557"></a>00557 
<a name="l00558"></a>00558     <span class="keywordflow">if</span> (FLAGS_print_model) {
<a name="l00559"></a>00559       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> demand_index = 0; demand_index &lt; num_demands; ++demand_index) {
<a name="l00560"></a>00560         <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1Demand.html" title="Solving the Problem.">Demand</a>&amp; demand = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#d7009080bdb4b4bf868a6d947796b0cb">demands_array_</a>[demand_index];
<a name="l00561"></a>00561         LOG(INFO) &lt;&lt; <span class="stringliteral">"Demand from "</span> &lt;&lt; demand.<a class="code" href="structoperations__research_1_1Demand.html#1b84a67d4baab7bd14cbf25ffebdc46f">source</a>
<a name="l00562"></a>00562                   &lt;&lt; <span class="stringliteral">" to "</span> &lt;&lt; demand.<a class="code" href="structoperations__research_1_1Demand.html#aba16f19db248e6ee92fb72e86920303">destination</a>
<a name="l00563"></a>00563                   &lt;&lt; <span class="stringliteral">" with traffic "</span> &lt;&lt; demand.<a class="code" href="structoperations__research_1_1Demand.html#31b9ff7eee7c149aecc27cceb01af819">traffic</a>
<a name="l00564"></a>00564                   &lt;&lt; <span class="stringliteral">", and "</span> &lt;&lt; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#1dfbbfc8d0cef98cf60ff98ea99d5816">all_paths_</a>[demand_index].size()
<a name="l00565"></a>00565                   &lt;&lt; <span class="stringliteral">" possible paths."</span>;
<a name="l00566"></a>00566       }
<a name="l00567"></a>00567     }
<a name="l00568"></a>00568     <span class="keywordflow">return</span> num_paths;
<a name="l00569"></a>00569   }
<a name="l00570"></a>00570 
<a name="l00571"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#a1789ee9b6f3e6630ad454868f3e0926">00571</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#a1789ee9b6f3e6630ad454868f3e0926">Init</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1NetworkRoutingData.html" title="Data and Data Generation.">NetworkRoutingData</a>&amp; data, <span class="keywordtype">int</span> extra_hops, <span class="keywordtype">int</span> max_paths) {
<a name="l00572"></a>00572     LOG(INFO) &lt;&lt; <span class="stringliteral">"Model "</span> &lt;&lt; data.<a class="code" href="classoperations__research_1_1NetworkRoutingData.html#1036db8ebcf5351fc8c27f5d01e006a6" title="Name of the problem.">name</a>();
<a name="l00573"></a>00573     <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#2291a882b3190cc7970bcc3910bf4133">num_nodes_</a> = data.<a class="code" href="classoperations__research_1_1NetworkRoutingData.html#a76bdae606f88e2356869edb8e9a2fcc" title="Properties of the model.">num_nodes</a>();
<a name="l00574"></a>00574     <span class="keyword">const</span> <span class="keywordtype">int</span> num_arcs = data.<a class="code" href="classoperations__research_1_1NetworkRoutingData.html#9bda7178c6c83bc9350e5dd366889e3e">num_arcs</a>();
<a name="l00575"></a>00575     <span class="keyword">const</span> <span class="keywordtype">int</span> num_demands = data.<a class="code" href="classoperations__research_1_1NetworkRoutingData.html#62c7afe1b7f19718a678d11b0f65a354">num_demands</a>();
<a name="l00576"></a>00576 
<a name="l00577"></a>00577     <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#055c2222a7115570d58d0fe616b66d5d">InitArcInfo</a>(data);
<a name="l00578"></a>00578     <span class="keyword">const</span> <span class="keywordtype">int</span> total_demand = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#4cb4dc017c35a3278fc945610dca5c25">InitDemandInfo</a>(data);
<a name="l00579"></a>00579     <span class="keyword">const</span> int64 total_cumulated_traffic = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#07bd2d98a3e23d7017ee71a4c788ea95">InitShortestPaths</a>(data);
<a name="l00580"></a>00580     <span class="keyword">const</span> <span class="keywordtype">int</span> num_paths = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#c1f940105b2fa3f18e9d349d0dbfb9b1">InitPaths</a>(data, extra_hops, max_paths);
<a name="l00581"></a>00581 
<a name="l00582"></a>00582     <span class="comment">// ----- Report Problem Sizes -----</span>
<a name="l00583"></a>00583 
<a name="l00584"></a>00584     LOG(INFO) &lt;&lt; <span class="stringliteral">"Model created:"</span>;
<a name="l00585"></a>00585     LOG(INFO) &lt;&lt; <span class="stringliteral">"  - "</span> &lt;&lt; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#2291a882b3190cc7970bcc3910bf4133">num_nodes_</a> &lt;&lt; <span class="stringliteral">" nodes"</span>;
<a name="l00586"></a>00586     LOG(INFO) &lt;&lt; <span class="stringliteral">"  - "</span> &lt;&lt; num_arcs &lt;&lt; <span class="stringliteral">" arcs"</span>;
<a name="l00587"></a>00587     LOG(INFO) &lt;&lt; <span class="stringliteral">"  - "</span> &lt;&lt; num_demands &lt;&lt; <span class="stringliteral">" demands"</span>;
<a name="l00588"></a>00588     LOG(INFO) &lt;&lt; <span class="stringliteral">"  - a total traffic of "</span> &lt;&lt; total_demand;
<a name="l00589"></a>00589     LOG(INFO) &lt;&lt; <span class="stringliteral">"  - a minimum cumulated traffic of "</span>
<a name="l00590"></a>00590               &lt;&lt; total_cumulated_traffic;
<a name="l00591"></a>00591     LOG(INFO) &lt;&lt; <span class="stringliteral">"  - "</span> &lt;&lt; num_paths &lt;&lt; <span class="stringliteral">" possible paths for all demands"</span>;
<a name="l00592"></a>00592   }
<a name="l00593"></a>00593 
<a name="l00594"></a>00594   <span class="comment">// Build the AllowedAssignment constraint with one tuple per path</span>
<a name="l00595"></a>00595   <span class="comment">// for a given demand.</span>
<a name="l00596"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#2650e7244e04eb89eb513c5b22699aa1">00596</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#2650e7244e04eb89eb513c5b22699aa1" title="Build the AllowedAssignment constraint with one tuple per path for a given demand...">BuildNodePathConstraint</a>(Solver* <span class="keyword">const</span> solver,
<a name="l00597"></a>00597                                <span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; path_vars,
<a name="l00598"></a>00598                                <span class="keywordtype">int</span> demand_index,
<a name="l00599"></a>00599                                vector&lt;IntVar*&gt;* decision_vars) {
<a name="l00600"></a>00600     <span class="comment">// Fill Tuple Set for AllowedAssignment constraint.</span>
<a name="l00601"></a>00601     <span class="keyword">const</span> vector&lt;OnePath&gt; paths = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#1dfbbfc8d0cef98cf60ff98ea99d5816">all_paths_</a>[demand_index];
<a name="l00602"></a>00602     vector&lt;vector&lt;int64&gt; &gt; tuple_set;
<a name="l00603"></a>00603     tuple_set.resize(paths.size());
<a name="l00604"></a>00604     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> path_id = 0; path_id &lt; paths.size(); ++path_id) {
<a name="l00605"></a>00605       tuple_set[path_id].resize(<a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#46b2a4779c784f54d96aff6873ef1115">count_arcs</a>() + 1, <span class="keyword">false</span>);
<a name="l00606"></a>00606       tuple_set[path_id][0] = path_id;
<a name="l00607"></a>00607       <span class="keywordflow">for</span> (ConstIter&lt;OnePath&gt; it(paths[path_id]); !it.at_end(); ++it) {
<a name="l00608"></a>00608         <span class="keyword">const</span> <span class="keywordtype">int</span> arc = *it;
<a name="l00609"></a>00609         <span class="comment">// + 1 because tuple_set.back()[0] contains path_id.</span>
<a name="l00610"></a>00610         tuple_set[path_id][arc + 1] = <span class="keyword">true</span>;
<a name="l00611"></a>00611       }
<a name="l00612"></a>00612     }
<a name="l00613"></a>00613 
<a name="l00614"></a>00614     <span class="keyword">const</span> <span class="keywordtype">string</span> name = StringPrintf(<span class="stringliteral">"PathDecision_%i"</span>, demand_index);
<a name="l00615"></a>00615     IntVar* <span class="keyword">const</span> var = solver-&gt;MakeIntVar(0, tuple_set.size() - 1, name);
<a name="l00616"></a>00616     vector&lt;IntVar*&gt; tmp_vars;
<a name="l00617"></a>00617     tmp_vars.push_back(var);
<a name="l00618"></a>00618     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#46b2a4779c784f54d96aff6873ef1115">count_arcs</a>(); ++i) {
<a name="l00619"></a>00619       tmp_vars.push_back(path_vars[i]);
<a name="l00620"></a>00620     }
<a name="l00621"></a>00621     solver-&gt;AddConstraint(solver-&gt;MakeAllowedAssignments(tmp_vars, tuple_set));
<a name="l00622"></a>00622     decision_vars-&gt;push_back(var);
<a name="l00623"></a>00623   }
<a name="l00624"></a>00624 
<a name="l00625"></a>00625   <span class="comment">// Build traffic variable summing all traffic from all demands</span>
<a name="l00626"></a>00626   <span class="comment">// going through a single arc.</span>
<a name="l00627"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#1406f883204699b0bb27a731218ba7da">00627</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#1406f883204699b0bb27a731218ba7da" title="Build traffic variable summing all traffic from all demands going through a single...">BuildTrafficVariable</a>(Solver* <span class="keyword">const</span> solver,
<a name="l00628"></a>00628                             <span class="keywordtype">int</span> arc_index,
<a name="l00629"></a>00629                             <span class="keyword">const</span> vector&lt;vector&lt;IntVar*&gt; &gt;&amp; path_vars,
<a name="l00630"></a>00630                             IntVar** <span class="keyword">const</span> traffic) {
<a name="l00631"></a>00631     vector&lt;IntVar*&gt; terms;
<a name="l00632"></a>00632     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; path_vars.size(); ++i) {
<a name="l00633"></a>00633       terms.push_back(solver-&gt;MakeProd(path_vars[i][arc_index],
<a name="l00634"></a>00634                                        <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#d7009080bdb4b4bf868a6d947796b0cb">demands_array_</a>[i].traffic)-&gt;Var());
<a name="l00635"></a>00635     }
<a name="l00636"></a>00636     *traffic = solver-&gt;MakeSum(terms)-&gt;Var();
<a name="l00637"></a>00637   }
<a name="l00638"></a>00638 
<a name="l00639"></a>00639   <span class="comment">// ----- Implement 'clever' Large Neighborhood Search -----</span>
<a name="l00640"></a>00640 
<a name="l00641"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html">00641</a>   <span class="keyword">class </span><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html" title="Implement &amp;#39;clever&amp;#39; Large Neighborhood Search.">PathBasedLns</a> : <span class="keyword">public</span> <a class="code" href="classBaseLNS.html">BaseLNS</a> {
<a name="l00642"></a>00642    <span class="keyword">public</span>:
<a name="l00643"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#604da20d4dfd04419cd80c0a04f00eeb">00643</a>     <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#604da20d4dfd04419cd80c0a04f00eeb">PathBasedLns</a>(<span class="keyword">const</span> IntVar* <span class="keyword">const</span>* vars,
<a name="l00644"></a>00644                  <span class="keywordtype">int</span> size,
<a name="l00645"></a>00645                  <span class="keywordtype">int</span> fragment_size,
<a name="l00646"></a>00646                  <span class="keyword">const</span> vector&lt;vector&lt;OnePath&gt; &gt;&amp; all_paths,
<a name="l00647"></a>00647                  <span class="keywordtype">int</span> num_arcs,
<a name="l00648"></a>00648                  <span class="keyword">const</span> vector&lt;int64&gt;&amp; actual_usage_costs)
<a name="l00649"></a>00649         : <a class="code" href="classBaseLNS.html">BaseLNS</a>(vars, size),
<a name="l00650"></a>00650           <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#45a3ae8e6ceec65f3a69741e0d61612c">rand_</a>(FLAGS_lns_seed),
<a name="l00651"></a>00651           <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#de9b0f3d4cf10132fce1cf161dc7f636">fragment_size_</a>(fragment_size),
<a name="l00652"></a>00652           <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#2ed1697c280a78cbd124ea577aa2edd2">all_paths_</a>(all_paths),
<a name="l00653"></a>00653           <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#d7636415fd3bd0434f0e2f2ff265008d">num_arcs_</a>(num_arcs),
<a name="l00654"></a>00654           <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#d2d8a11592eca4a8e0536a6c5ec3d35f">actual_usage_costs_</a>(actual_usage_costs) {
<a name="l00655"></a>00655       CHECK_GT(<a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#de9b0f3d4cf10132fce1cf161dc7f636">fragment_size_</a>, 0);
<a name="l00656"></a>00656     }
<a name="l00657"></a>00657 
<a name="l00658"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#e68159f282b2c1f0bdacea80f4595e6e">00658</a>     <span class="keyword">virtual</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#e68159f282b2c1f0bdacea80f4595e6e">~PathBasedLns</a>() {}
<a name="l00659"></a>00659 
<a name="l00660"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#0fd70e1d4ec21763b926fc8f349a0232">00660</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#0fd70e1d4ec21763b926fc8f349a0232">InitFragments</a>() {
<a name="l00661"></a>00661       <span class="comment">// We factorize computations that need to be updated only when</span>
<a name="l00662"></a>00662       <span class="comment">// we have a new solution and not at each fragment.</span>
<a name="l00663"></a>00663       <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#b9f7784e4dc7d61a63a271509fd547ab">arc_wrappers_</a>.clear();
<a name="l00664"></a>00664       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#d2d8a11592eca4a8e0536a6c5ec3d35f">actual_usage_costs_</a>.size(); ++i) {
<a name="l00665"></a>00665         <span class="keyword">const</span> int64 cost = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#d2d8a11592eca4a8e0536a6c5ec3d35f">actual_usage_costs_</a>[i];
<a name="l00666"></a>00666         <span class="keywordflow">if</span> (cost != 0) {
<a name="l00667"></a>00667           <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#b9f7784e4dc7d61a63a271509fd547ab">arc_wrappers_</a>.push_back(<a class="code" href="structoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns_1_1ArcWrapper.html">ArcWrapper</a>(i, cost));
<a name="l00668"></a>00668         }
<a name="l00669"></a>00669       }
<a name="l00670"></a>00670       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#b9f7784e4dc7d61a63a271509fd547ab">arc_wrappers_</a>.size() &gt; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#de9b0f3d4cf10132fce1cf161dc7f636">fragment_size_</a>) {
<a name="l00671"></a>00671         sort(<a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#b9f7784e4dc7d61a63a271509fd547ab">arc_wrappers_</a>.begin(), <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#b9f7784e4dc7d61a63a271509fd547ab">arc_wrappers_</a>.end());
<a name="l00672"></a>00672       }
<a name="l00673"></a>00673     }
<a name="l00674"></a>00674 
<a name="l00675"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#3d38c477c9ae55cee150e1c38dd5b303">00675</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#3d38c477c9ae55cee150e1c38dd5b303">NextFragment</a>(vector&lt;int&gt;* fragment) {
<a name="l00676"></a>00676       <span class="comment">// First we select a set of arcs to release.</span>
<a name="l00677"></a>00677       hash_set&lt;int&gt; arcs_to_release;
<a name="l00678"></a>00678       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#b9f7784e4dc7d61a63a271509fd547ab">arc_wrappers_</a>.size() &lt;= <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#de9b0f3d4cf10132fce1cf161dc7f636">fragment_size_</a>) {
<a name="l00679"></a>00679         <span class="comment">// There are not enough used arcs, we will release all of them.</span>
<a name="l00680"></a>00680         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index = 0; index &lt; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#b9f7784e4dc7d61a63a271509fd547ab">arc_wrappers_</a>.size(); ++index) {
<a name="l00681"></a>00681           arcs_to_release.insert(<a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#b9f7784e4dc7d61a63a271509fd547ab">arc_wrappers_</a>[index].arc_id);
<a name="l00682"></a>00682         }
<a name="l00683"></a>00683       } <span class="keywordflow">else</span> {
<a name="l00684"></a>00684         <span class="keywordflow">if</span> (FLAGS_focus_lns) {
<a name="l00685"></a>00685           <span class="comment">// We select 'fragment_size / 2' most costly arcs.</span>
<a name="l00686"></a>00686           <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index = 0; index &lt; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#de9b0f3d4cf10132fce1cf161dc7f636">fragment_size_</a> / 2; ++index) {
<a name="l00687"></a>00687             arcs_to_release.insert(<a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#b9f7784e4dc7d61a63a271509fd547ab">arc_wrappers_</a>[index].arc_id);
<a name="l00688"></a>00688           }
<a name="l00689"></a>00689         }
<a name="l00690"></a>00690 
<a name="l00691"></a>00691         <span class="comment">// We fill 'arcs_to_release' until we have chosen 'fragment_size_' arcs</span>
<a name="l00692"></a>00692         <span class="comment">// to release.</span>
<a name="l00693"></a>00693         <span class="keywordflow">while</span> (arcs_to_release.size() &lt; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#de9b0f3d4cf10132fce1cf161dc7f636">fragment_size_</a>) {
<a name="l00694"></a>00694           <span class="keyword">const</span> <span class="keywordtype">int</span> candidate = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#45a3ae8e6ceec65f3a69741e0d61612c">rand_</a>.Uniform(<a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#b9f7784e4dc7d61a63a271509fd547ab">arc_wrappers_</a>.size());
<a name="l00695"></a>00695           arcs_to_release.insert(<a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#b9f7784e4dc7d61a63a271509fd547ab">arc_wrappers_</a>[candidate].arc_id);
<a name="l00696"></a>00696         }
<a name="l00697"></a>00697       }
<a name="l00698"></a>00698 
<a name="l00699"></a>00699       <span class="comment">// We actually free all paths going through any of the selected arcs.</span>
<a name="l00700"></a>00700       <span class="keyword">const</span> <span class="keywordtype">int</span> demands = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#2ed1697c280a78cbd124ea577aa2edd2">all_paths_</a>.size();
<a name="l00701"></a>00701       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; demands; ++i) {
<a name="l00702"></a>00702         <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#2f1334aa9813f7e7066520aed8fa474e">OnePath</a>&amp; path = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#2ed1697c280a78cbd124ea577aa2edd2">all_paths_</a>[i][Value(i)];
<a name="l00703"></a>00703         <span class="keywordflow">for</span> (ConstIter&lt;hash_set&lt;int&gt; &gt; it(arcs_to_release);
<a name="l00704"></a>00704              !it.at_end();
<a name="l00705"></a>00705              ++it) {
<a name="l00706"></a>00706           <span class="keywordflow">if</span> (ContainsKey(path, *it)) {
<a name="l00707"></a>00707             fragment-&gt;push_back(i);
<a name="l00708"></a>00708             <span class="keywordflow">break</span>;
<a name="l00709"></a>00709           }
<a name="l00710"></a>00710         }
<a name="l00711"></a>00711       }
<a name="l00712"></a>00712       <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00713"></a>00713     }
<a name="l00714"></a>00714    <span class="keyword">private</span>:
<a name="l00715"></a><a class="code" href="structoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns_1_1ArcWrapper.html">00715</a>     <span class="keyword">struct </span><a class="code" href="structoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns_1_1ArcWrapper.html">ArcWrapper</a> {
<a name="l00716"></a>00716      <span class="keyword">public</span>:
<a name="l00717"></a><a class="code" href="structoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns_1_1ArcWrapper.html#bb73ef822e89838579943326a7cc6d69">00717</a>       <a class="code" href="structoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns_1_1ArcWrapper.html#bb73ef822e89838579943326a7cc6d69">ArcWrapper</a>(<span class="keywordtype">int</span> i, int64 c) : <a class="code" href="structoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns_1_1ArcWrapper.html#b546c1316d682283ac80c60e424bdac7">arc_id</a>(i), <a class="code" href="structoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns_1_1ArcWrapper.html#db123f0d1b1410a7016df3074b86ebc6">cost</a>(c) {}
<a name="l00718"></a><a class="code" href="structoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns_1_1ArcWrapper.html#b546c1316d682283ac80c60e424bdac7">00718</a>       <span class="keywordtype">int</span> <a class="code" href="structoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns_1_1ArcWrapper.html#b546c1316d682283ac80c60e424bdac7">arc_id</a>;
<a name="l00719"></a><a class="code" href="structoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns_1_1ArcWrapper.html#db123f0d1b1410a7016df3074b86ebc6">00719</a>       int64 <a class="code" href="structoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns_1_1ArcWrapper.html#db123f0d1b1410a7016df3074b86ebc6">cost</a>;
<a name="l00720"></a><a class="code" href="structoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns_1_1ArcWrapper.html#e09d21ba53b3cc6f33aa40c36192055c">00720</a>       <span class="keywordtype">bool</span> <a class="code" href="structoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns_1_1ArcWrapper.html#e09d21ba53b3cc6f33aa40c36192055c">operator&lt;</a>(<span class="keyword">const</span> <a class="code" href="structoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns_1_1ArcWrapper.html">ArcWrapper</a>&amp; other_arc_wrapper)<span class="keyword"> const </span>{
<a name="l00721"></a>00721         <span class="keywordflow">return</span> <a class="code" href="structoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns_1_1ArcWrapper.html#db123f0d1b1410a7016df3074b86ebc6">cost</a> &gt; other_arc_wrapper.<a class="code" href="structoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns_1_1ArcWrapper.html#db123f0d1b1410a7016df3074b86ebc6">cost</a>;
<a name="l00722"></a>00722       }
<a name="l00723"></a>00723     };
<a name="l00724"></a>00724 
<a name="l00725"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#45a3ae8e6ceec65f3a69741e0d61612c">00725</a>     ACMRandom <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#45a3ae8e6ceec65f3a69741e0d61612c">rand_</a>;
<a name="l00726"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#de9b0f3d4cf10132fce1cf161dc7f636">00726</a>     <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#de9b0f3d4cf10132fce1cf161dc7f636">fragment_size_</a>;
<a name="l00727"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#2ed1697c280a78cbd124ea577aa2edd2">00727</a>     <span class="keyword">const</span> vector&lt;vector&lt;OnePath&gt; &gt;&amp; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#2ed1697c280a78cbd124ea577aa2edd2">all_paths_</a>;
<a name="l00728"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#d7636415fd3bd0434f0e2f2ff265008d">00728</a>     <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#d7636415fd3bd0434f0e2f2ff265008d">num_arcs_</a>;
<a name="l00729"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#d2d8a11592eca4a8e0536a6c5ec3d35f">00729</a>     <span class="keyword">const</span> vector&lt;int64&gt;&amp; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#d2d8a11592eca4a8e0536a6c5ec3d35f">actual_usage_costs_</a>;
<a name="l00730"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#b9f7784e4dc7d61a63a271509fd547ab">00730</a>     vector&lt;ArcWrapper&gt; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html#b9f7784e4dc7d61a63a271509fd547ab">arc_wrappers_</a>;
<a name="l00731"></a>00731   };
<a name="l00732"></a>00732 
<a name="l00733"></a>00733   <span class="comment">// ----- Evaluator for the Decision Builder -----</span>
<a name="l00734"></a>00734 
<a name="l00735"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#3fd53398a2aaa977f5c28cb80bbea73e">00735</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#3fd53398a2aaa977f5c28cb80bbea73e" title="Evaluator for the Decision Builder.">kOneThousand</a> = 1000;
<a name="l00736"></a>00736 
<a name="l00737"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#9876d04b80d0266cd66edcd557d8ceba">00737</a>   int64 <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#9876d04b80d0266cd66edcd557d8ceba">EvaluateMarginalCost</a>(vector&lt;IntVar*&gt;* path_costs,
<a name="l00738"></a>00738                              int64 var,
<a name="l00739"></a>00739                              int64 val) {
<a name="l00740"></a>00740     int64 best_cost = 0;
<a name="l00741"></a>00741     <span class="keyword">const</span> int64 traffic = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#d7009080bdb4b4bf868a6d947796b0cb">demands_array_</a>[var].traffic;
<a name="l00742"></a>00742     <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#2f1334aa9813f7e7066520aed8fa474e">OnePath</a>&amp; path = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#1dfbbfc8d0cef98cf60ff98ea99d5816">all_paths_</a>[var][val];
<a name="l00743"></a>00743     <span class="keywordflow">for</span> (ConstIter&lt;OnePath&gt; it(path); !it.at_end(); ++it) {
<a name="l00744"></a>00744       <span class="keyword">const</span> int64 current_percent = (*path_costs)[*it]-&gt;Min();
<a name="l00745"></a>00745       <span class="keyword">const</span> int64 current_capacity = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#29e2c4fc3d5ed93c5d5b0e562ea34344">arc_capacity_</a>[*it];
<a name="l00746"></a>00746       <span class="keyword">const</span> int64 expected_percent =
<a name="l00747"></a>00747           current_percent + traffic * <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#3fd53398a2aaa977f5c28cb80bbea73e" title="Evaluator for the Decision Builder.">kOneThousand</a> / current_capacity;
<a name="l00748"></a>00748       <span class="keywordflow">if</span> (expected_percent &gt; best_cost) {
<a name="l00749"></a>00749         best_cost = expected_percent;
<a name="l00750"></a>00750       }
<a name="l00751"></a>00751     }
<a name="l00752"></a>00752     <span class="keywordflow">return</span> best_cost;
<a name="l00753"></a>00753   }
<a name="l00754"></a>00754 
<a name="l00755"></a>00755   <span class="comment">// ----- Limit the Maximum Number of Discrepancies in the Sub-Search -----</span>
<a name="l00756"></a>00756 
<a name="l00757"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#59d5c77afee738c9a4553aac635013af">00757</a>   <span class="keyword">static</span> Solver::DecisionModification <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#59d5c77afee738c9a4553aac635013af" title="Limit the Maximum Number of Discrepancies in the Sub-Search.">MaxDiscrepancy1</a>(Solver* <span class="keyword">const</span> solver) {
<a name="l00758"></a>00758     <span class="keywordflow">if</span> (solver-&gt;SearchDepth() - solver-&gt;SearchLeftDepth() &gt; 1) {
<a name="l00759"></a>00759       <span class="keywordflow">return</span> Solver::KEEP_LEFT;
<a name="l00760"></a>00760     }
<a name="l00761"></a>00761     <span class="keywordflow">return</span> Solver::NO_CHANGE;
<a name="l00762"></a>00762   }
<a name="l00763"></a>00763 
<a name="l00764"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1ApplyMaxDiscrepancy.html">00764</a>   <span class="keyword">class </span><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1ApplyMaxDiscrepancy.html">ApplyMaxDiscrepancy</a> : <span class="keyword">public</span> <a class="code" href="classDecisionBuilder.html">DecisionBuilder</a> {
<a name="l00765"></a>00765    <span class="keyword">public</span>:
<a name="l00766"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1ApplyMaxDiscrepancy.html#0861a9a4f56348dc48795647985483ca">00766</a>     <span class="keyword">virtual</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1ApplyMaxDiscrepancy.html#0861a9a4f56348dc48795647985483ca">~ApplyMaxDiscrepancy</a>() {}
<a name="l00767"></a>00767 
<a name="l00768"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1ApplyMaxDiscrepancy.html#ce336dd05a2180eabf3eb380c8e128b3">00768</a>     <span class="keyword">virtual</span> Decision* <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1ApplyMaxDiscrepancy.html#ce336dd05a2180eabf3eb380c8e128b3">Next</a>(Solver* <span class="keyword">const</span> solver) {
<a name="l00769"></a>00769       solver-&gt;SetBranchSelector(
<a name="l00770"></a>00770           NewPermanentCallback(&amp;<a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#59d5c77afee738c9a4553aac635013af" title="Limit the Maximum Number of Discrepancies in the Sub-Search.">NetworkRoutingSolver::MaxDiscrepancy1</a>));
<a name="l00771"></a>00771       <span class="keywordflow">return</span> NULL;
<a name="l00772"></a>00772     }
<a name="l00773"></a>00773 
<a name="l00774"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1ApplyMaxDiscrepancy.html#57b793d6ce16723313ae6b14dcd43b83">00774</a>     <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1ApplyMaxDiscrepancy.html#57b793d6ce16723313ae6b14dcd43b83">DebugString</a>()<span class="keyword"> const </span>{
<a name="l00775"></a>00775       <span class="keywordflow">return</span> <span class="stringliteral">"ApplyMaxDiscrepancy"</span>;
<a name="l00776"></a>00776     }
<a name="l00777"></a>00777   };
<a name="l00778"></a>00778 
<a name="l00779"></a>00779   <span class="comment">// ----- Auxilliary Decision Builder to Store the Cost of a Solution -----</span>
<a name="l00780"></a>00780 
<a name="l00781"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1StoreUsageCosts.html">00781</a>   <span class="keyword">class </span><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1StoreUsageCosts.html" title="Auxilliary Decision Builder to Store the Cost of a Solution.">StoreUsageCosts</a> : <span class="keyword">public</span> <a class="code" href="classDecisionBuilder.html">DecisionBuilder</a>  {
<a name="l00782"></a>00782    <span class="keyword">public</span>:
<a name="l00783"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1StoreUsageCosts.html#a2bd9481f032581f2843ea8651d0bf3e">00783</a>     <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1StoreUsageCosts.html#a2bd9481f032581f2843ea8651d0bf3e">StoreUsageCosts</a>(<span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; vars, vector&lt;int64&gt;* values)
<a name="l00784"></a>00784         : <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1StoreUsageCosts.html#85edcd29bcf8c32e8fd029f63bc94d6c">vars_</a>(vars), <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1StoreUsageCosts.html#03bb5f6c9875b6b8f1262493a6565d3e">values_</a>(values) {}
<a name="l00785"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1StoreUsageCosts.html#f14e579d2368fcdca97731320b1f13a9">00785</a>     <span class="keyword">virtual</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1StoreUsageCosts.html#f14e579d2368fcdca97731320b1f13a9">~StoreUsageCosts</a>() {}
<a name="l00786"></a>00786 
<a name="l00787"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1StoreUsageCosts.html#5a6fd1ee85f07c96bc48fb2f3f37d1a2">00787</a>     <span class="keyword">virtual</span> Decision* <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1StoreUsageCosts.html#5a6fd1ee85f07c96bc48fb2f3f37d1a2">Next</a>(Solver* <span class="keyword">const</span> s) {
<a name="l00788"></a>00788       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1StoreUsageCosts.html#85edcd29bcf8c32e8fd029f63bc94d6c">vars_</a>.size(); ++i) {
<a name="l00789"></a>00789         (*values_)[i] = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1StoreUsageCosts.html#85edcd29bcf8c32e8fd029f63bc94d6c">vars_</a>[i]-&gt;Value();
<a name="l00790"></a>00790       }
<a name="l00791"></a>00791       <span class="keywordflow">return</span> NULL;
<a name="l00792"></a>00792     }
<a name="l00793"></a>00793    <span class="keyword">private</span>:
<a name="l00794"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1StoreUsageCosts.html#85edcd29bcf8c32e8fd029f63bc94d6c">00794</a>     <span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1StoreUsageCosts.html#85edcd29bcf8c32e8fd029f63bc94d6c">vars_</a>;
<a name="l00795"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1StoreUsageCosts.html#03bb5f6c9875b6b8f1262493a6565d3e">00795</a>     vector&lt;int64&gt;* <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1StoreUsageCosts.html#03bb5f6c9875b6b8f1262493a6565d3e">values_</a>;
<a name="l00796"></a>00796   };
<a name="l00797"></a>00797 
<a name="l00798"></a>00798   <span class="comment">// ----- Callback for Dijkstra Shortest Path -----</span>
<a name="l00799"></a>00799 
<a name="l00800"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#7c83d3759892284fb36724c9f9fa2197">00800</a>   int64 <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#7c83d3759892284fb36724c9f9fa2197" title="Callback for Dijkstra Shortest Path.">HasArc</a>(<span class="keywordtype">int</span> i, <span class="keywordtype">int</span> j) {
<a name="l00801"></a>00801     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#8e017c78e289bb9b35a765b964be7b0e">capacity_</a>[i][j] &gt; 0) {
<a name="l00802"></a>00802       <span class="keywordflow">return</span> 1;
<a name="l00803"></a>00803     } <span class="keywordflow">else</span> {
<a name="l00804"></a>00804       <span class="keywordflow">return</span> FLAGS_shortestpaths_disconnected_distance;
<a name="l00805"></a>00805     }
<a name="l00806"></a>00806   }
<a name="l00807"></a>00807 
<a name="l00808"></a>00808   <span class="comment">// ----- Main Solve routine -----</span>
<a name="l00809"></a>00809 
<a name="l00810"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#f53c0d7901314b50a7999c07fe1aae92">00810</a>   int64 <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#f53c0d7901314b50a7999c07fe1aae92" title="Main Solve routine.">LnsSolve</a>(<span class="keywordtype">int</span> time_limit, <span class="keywordtype">int</span> fail_limit) {
<a name="l00811"></a>00811     LOG(INFO) &lt;&lt; <span class="stringliteral">"Solving model"</span>;
<a name="l00812"></a>00812     <span class="keyword">const</span> <span class="keywordtype">int</span> num_demands = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#d7009080bdb4b4bf868a6d947796b0cb">demands_array_</a>.size();
<a name="l00813"></a>00813     <span class="keyword">const</span> <span class="keywordtype">int</span> num_arcs = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#46b2a4779c784f54d96aff6873ef1115">count_arcs</a>();
<a name="l00814"></a>00814     <span class="comment">// ----- Build Model -----</span>
<a name="l00815"></a>00815     Solver solver(<span class="stringliteral">"MultiPathSolver"</span>);
<a name="l00816"></a>00816     vector&lt;vector&lt;IntVar*&gt; &gt; path_vars(num_demands);
<a name="l00817"></a>00817     vector&lt;IntVar*&gt; decision_vars;
<a name="l00818"></a>00818 
<a name="l00819"></a>00819     <span class="comment">// Node - Graph Constraint.</span>
<a name="l00820"></a>00820     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> demand_index = 0; demand_index &lt; num_demands; ++demand_index) {
<a name="l00821"></a>00821       solver.MakeBoolVarArray(num_arcs,
<a name="l00822"></a>00822                               StringPrintf(<span class="stringliteral">"path_vars_%i_"</span>, demand_index),
<a name="l00823"></a>00823                               &amp;path_vars[demand_index]);
<a name="l00824"></a>00824       <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#2650e7244e04eb89eb513c5b22699aa1" title="Build the AllowedAssignment constraint with one tuple per path for a given demand...">BuildNodePathConstraint</a>(&amp;solver,
<a name="l00825"></a>00825                               path_vars[demand_index],
<a name="l00826"></a>00826                               demand_index,
<a name="l00827"></a>00827                               &amp;decision_vars);
<a name="l00828"></a>00828     }
<a name="l00829"></a>00829     <span class="comment">// Traffic variables.</span>
<a name="l00830"></a>00830     vector&lt;IntVar*&gt; vtraffic(num_arcs);
<a name="l00831"></a>00831     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> arc_index = 0; arc_index &lt; num_arcs; ++arc_index) {
<a name="l00832"></a>00832       <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#1406f883204699b0bb27a731218ba7da" title="Build traffic variable summing all traffic from all demands going through a single...">BuildTrafficVariable</a>(&amp;solver,
<a name="l00833"></a>00833                            arc_index,
<a name="l00834"></a>00834                            path_vars,
<a name="l00835"></a>00835                            &amp;vtraffic[arc_index]);
<a name="l00836"></a>00836     }
<a name="l00837"></a>00837 
<a name="l00838"></a>00838     <span class="comment">// Objective Function.</span>
<a name="l00839"></a>00839     vector&lt;IntVar*&gt; costs;
<a name="l00840"></a>00840     vector&lt;IntVar*&gt; usage_costs;
<a name="l00841"></a>00841     vector&lt;IntVar*&gt; comfort_costs;
<a name="l00842"></a>00842     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> arc_index = 0; arc_index &lt; num_arcs; ++arc_index) {
<a name="l00843"></a>00843       <span class="keyword">const</span> <span class="keywordtype">int</span> capacity =
<a name="l00844"></a>00844           <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#8e017c78e289bb9b35a765b964be7b0e">capacity_</a>[<a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#7c9be3a5aad472cbc74f3d04dc7a8802">arcs_data_</a>[2 * arc_index][0]][<a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#7c9be3a5aad472cbc74f3d04dc7a8802">arcs_data_</a>[2 * arc_index][1]];
<a name="l00845"></a>00845       IntVar* <span class="keyword">const</span> usage_cost =
<a name="l00846"></a>00846           solver.MakeDiv(solver.MakeProd(vtraffic[arc_index], <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#3fd53398a2aaa977f5c28cb80bbea73e" title="Evaluator for the Decision Builder.">kOneThousand</a>),
<a name="l00847"></a>00847                          capacity)-&gt;Var();
<a name="l00848"></a>00848       usage_costs.push_back(usage_cost);
<a name="l00849"></a>00849       IntVar* <span class="keyword">const</span> comfort_cost =
<a name="l00850"></a>00850           solver.MakeIsGreaterCstVar(
<a name="l00851"></a>00851               vtraffic[arc_index],
<a name="l00852"></a>00852               capacity * FLAGS_comfort_zone / <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#3fd53398a2aaa977f5c28cb80bbea73e" title="Evaluator for the Decision Builder.">kOneThousand</a>);
<a name="l00853"></a>00853       comfort_costs.push_back(comfort_cost);
<a name="l00854"></a>00854     }
<a name="l00855"></a>00855     IntVar* <span class="keyword">const</span> max_usage_cost = solver.MakeMax(usage_costs)-&gt;Var();
<a name="l00856"></a>00856     IntVar* <span class="keyword">const</span> sum_comfort_cost = solver.MakeSum(comfort_costs)-&gt;Var();
<a name="l00857"></a>00857     IntVar* <span class="keyword">const</span> objective_var =
<a name="l00858"></a>00858         solver.MakeSum(max_usage_cost, sum_comfort_cost)-&gt;Var();
<a name="l00859"></a>00859     vector&lt;SearchMonitor*&gt; monitors;
<a name="l00860"></a>00860     OptimizeVar* <span class="keyword">const</span> objective = solver.MakeMinimize(objective_var, 1);
<a name="l00861"></a>00861     monitors.push_back(objective);
<a name="l00862"></a>00862 
<a name="l00863"></a>00863     <span class="comment">// Search Log.</span>
<a name="l00864"></a>00864     <span class="keywordflow">if</span> (FLAGS_report == 0) {
<a name="l00865"></a>00865       SearchMonitor* <span class="keyword">const</span> search_log =
<a name="l00866"></a>00866           solver.MakeSearchLog(FLAGS_log_period, objective);
<a name="l00867"></a>00867       monitors.push_back(search_log);
<a name="l00868"></a>00868     }
<a name="l00869"></a>00869 
<a name="l00870"></a>00870     <span class="comment">// DecisionBuilder.</span>
<a name="l00871"></a>00871     <a class="code" href="classDecisionBuilder.html">DecisionBuilder</a>* <span class="keyword">const</span> db =
<a name="l00872"></a>00872         solver.MakePhase(decision_vars,
<a name="l00873"></a>00873                          Solver::CHOOSE_RANDOM,
<a name="l00874"></a>00874                          NewPermanentCallback(
<a name="l00875"></a>00875                              <span class="keyword">this</span>,
<a name="l00876"></a>00876                              &amp;<a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#9876d04b80d0266cd66edcd557d8ceba">NetworkRoutingSolver::EvaluateMarginalCost</a>,
<a name="l00877"></a>00877                              &amp;usage_costs));
<a name="l00878"></a>00878 
<a name="l00879"></a>00879     <span class="comment">// Limits.</span>
<a name="l00880"></a>00880     <span class="keywordflow">if</span> (time_limit != 0 || fail_limit != 0) {
<a name="l00881"></a>00881       <span class="keywordflow">if</span> (time_limit != 0) {
<a name="l00882"></a>00882         LOG(INFO) &lt;&lt; <span class="stringliteral">"adding time limit of "</span> &lt;&lt; time_limit
<a name="l00883"></a>00883                   &lt;&lt; <span class="stringliteral">" ms"</span>;
<a name="l00884"></a>00884       }
<a name="l00885"></a>00885       <span class="keywordflow">if</span> (fail_limit != 0) {
<a name="l00886"></a>00886         LOG(INFO) &lt;&lt; <span class="stringliteral">"adding fail limit of "</span> &lt;&lt; fail_limit;
<a name="l00887"></a>00887       }
<a name="l00888"></a>00888       monitors.push_back(
<a name="l00889"></a>00889           solver.MakeLimit(time_limit != 0 ?
<a name="l00890"></a>00890                            time_limit : kint64max,
<a name="l00891"></a>00891                            kint64max,
<a name="l00892"></a>00892                            fail_limit != 0 ?
<a name="l00893"></a>00893                            fail_limit : kint64max,
<a name="l00894"></a>00894                            kint64max));
<a name="l00895"></a>00895     }
<a name="l00896"></a>00896 
<a name="l00897"></a>00897     <span class="comment">// Lns Decision Builder.</span>
<a name="l00898"></a>00898     LOG(INFO) &lt;&lt; <span class="stringliteral">"Using Lns with a fragment size of "</span> &lt;&lt; FLAGS_lns_size
<a name="l00899"></a>00899               &lt;&lt; <span class="stringliteral">", and fail limit of "</span> &lt;&lt; FLAGS_lns_limit;
<a name="l00900"></a>00900     vector&lt;int64&gt; actual_usage_costs(num_arcs);
<a name="l00901"></a>00901     <a class="code" href="classDecisionBuilder.html">DecisionBuilder</a>* <span class="keyword">const</span> store_info =
<a name="l00902"></a>00902         solver.RevAlloc(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1StoreUsageCosts.html" title="Auxilliary Decision Builder to Store the Cost of a Solution.">StoreUsageCosts</a>(usage_costs, &amp;actual_usage_costs));
<a name="l00903"></a>00903 
<a name="l00904"></a>00904     LocalSearchOperator* <span class="keyword">const</span> local_search_operator =
<a name="l00905"></a>00905         solver.RevAlloc(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1PathBasedLns.html" title="Implement &amp;#39;clever&amp;#39; Large Neighborhood Search.">PathBasedLns</a>(decision_vars.data(),
<a name="l00906"></a>00906                                          decision_vars.size(),
<a name="l00907"></a>00907                                          FLAGS_lns_size,
<a name="l00908"></a>00908                                          <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#1dfbbfc8d0cef98cf60ff98ea99d5816">all_paths_</a>,
<a name="l00909"></a>00909                                          num_arcs,
<a name="l00910"></a>00910                                          actual_usage_costs));
<a name="l00911"></a>00911     SearchLimit* <span class="keyword">const</span> lns_limit =
<a name="l00912"></a>00912         solver.MakeLimit(kint64max, kint64max, FLAGS_lns_limit, kint64max);
<a name="l00913"></a>00913     <a class="code" href="classDecisionBuilder.html">DecisionBuilder</a>* <span class="keyword">const</span> inner_db =
<a name="l00914"></a>00914         solver.MakePhase(decision_vars,
<a name="l00915"></a>00915                          Solver::CHOOSE_RANDOM,
<a name="l00916"></a>00916                          NewPermanentCallback(
<a name="l00917"></a>00917                              <span class="keyword">this</span>,
<a name="l00918"></a>00918                              &amp;<a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#9876d04b80d0266cd66edcd557d8ceba">NetworkRoutingSolver::EvaluateMarginalCost</a>,
<a name="l00919"></a>00919                              &amp;usage_costs));
<a name="l00920"></a>00920 
<a name="l00921"></a>00921 
<a name="l00922"></a>00922     <a class="code" href="classDecisionBuilder.html">DecisionBuilder</a>* <span class="keyword">const</span> apply = solver.RevAlloc(<span class="keyword">new</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver_1_1ApplyMaxDiscrepancy.html">ApplyMaxDiscrepancy</a>);
<a name="l00923"></a>00923     <a class="code" href="classDecisionBuilder.html">DecisionBuilder</a>* <span class="keyword">const</span> max_discrepency_db = solver.Compose(apply, inner_db);
<a name="l00924"></a>00924     <a class="code" href="classDecisionBuilder.html">DecisionBuilder</a>* <span class="keyword">const</span> ls_db = solver.MakeSolveOnce(max_discrepency_db,
<a name="l00925"></a>00925                                                         lns_limit);
<a name="l00926"></a>00926     LocalSearchPhaseParameters* <span class="keyword">const</span> parameters =
<a name="l00927"></a>00927         solver.MakeLocalSearchPhaseParameters(local_search_operator,
<a name="l00928"></a>00928                                               solver.Compose(ls_db,
<a name="l00929"></a>00929                                                              store_info));
<a name="l00930"></a>00930     <a class="code" href="classDecisionBuilder.html">DecisionBuilder</a>* <span class="keyword">const</span> final_db =
<a name="l00931"></a>00931         solver.Compose(solver.MakeLocalSearchPhase(decision_vars,
<a name="l00932"></a>00932                                                    db,
<a name="l00933"></a>00933                                                    parameters),
<a name="l00934"></a>00934                        store_info);
<a name="l00935"></a>00935 
<a name="l00936"></a>00936     <span class="comment">// And Now Solve.</span>
<a name="l00937"></a>00937     int64 best_cost = kint64max;
<a name="l00938"></a>00938     solver.NewSearch(final_db, monitors);
<a name="l00939"></a>00939     <span class="keywordflow">while</span> (solver.NextSolution()) {
<a name="l00940"></a>00940       <span class="comment">// Solution Found: Report it.</span>
<a name="l00941"></a>00941       <span class="keyword">const</span> <span class="keywordtype">double</span> percent = max_usage_cost-&gt;Value() / 10.0;
<a name="l00942"></a>00942       <span class="keyword">const</span> int64 non_comfort = sum_comfort_cost-&gt;Value();
<a name="l00943"></a>00943       <span class="keywordflow">if</span> (non_comfort &gt; 0) {
<a name="l00944"></a>00944         LOG(INFO) &lt;&lt; <span class="stringliteral">"*** Found a solution with a max usage of "</span> &lt;&lt; percent
<a name="l00945"></a>00945                   &lt;&lt; <span class="stringliteral">"%, and "</span> &lt;&lt; non_comfort
<a name="l00946"></a>00946                   &lt;&lt; <span class="stringliteral">" links above the comfort zone"</span>;
<a name="l00947"></a>00947       } <span class="keywordflow">else</span> {
<a name="l00948"></a>00948         LOG(INFO) &lt;&lt; <span class="stringliteral">"*** Found a solution with a max usage of "</span> &lt;&lt; percent
<a name="l00949"></a>00949                   &lt;&lt; <span class="stringliteral">"%"</span>;
<a name="l00950"></a>00950       }
<a name="l00951"></a>00951       best_cost = objective_var-&gt;Value();
<a name="l00952"></a>00952       <span class="keywordflow">if</span> (FLAGS_report &gt; 1) {
<a name="l00953"></a>00953         <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#25466f42f3907407a5343c3eadf0eecb">DisplaySolution</a>(num_arcs,
<a name="l00954"></a>00954                         max_usage_cost-&gt;Value(),
<a name="l00955"></a>00955                         usage_costs,
<a name="l00956"></a>00956                         path_vars,
<a name="l00957"></a>00957                         FLAGS_report &gt; 2,
<a name="l00958"></a>00958                         FLAGS_comfort_zone);
<a name="l00959"></a>00959       }
<a name="l00960"></a>00960     }
<a name="l00961"></a>00961     solver.EndSearch();
<a name="l00962"></a>00962 
<a name="l00963"></a>00963     <span class="keywordflow">return</span> best_cost;
<a name="l00964"></a>00964   }
<a name="l00965"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#25466f42f3907407a5343c3eadf0eecb">00965</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#25466f42f3907407a5343c3eadf0eecb">DisplaySolution</a>(<span class="keywordtype">int</span> num_arcs,
<a name="l00966"></a>00966                        int64 max_usage_cost,
<a name="l00967"></a>00967                        <span class="keyword">const</span> vector&lt;IntVar*&gt;&amp; usage_costs,
<a name="l00968"></a>00968                        <span class="keyword">const</span> vector&lt;vector&lt;IntVar*&gt; &gt;&amp; path_vars,
<a name="l00969"></a>00969                        <span class="keywordtype">bool</span> precise,
<a name="l00970"></a>00970                        int64 comfort_zone) {
<a name="l00971"></a>00971     <span class="comment">// We will show paths above the comfort zone, or above the max</span>
<a name="l00972"></a>00972     <span class="comment">// utilization minus 5%.</span>
<a name="l00973"></a>00973     <span class="keyword">const</span> int64 kFivePercentInThousandth = 50;
<a name="l00974"></a>00974     <span class="keyword">const</span> int64 cutoff =
<a name="l00975"></a>00975         min(max_usage_cost - kFivePercentInThousandth, comfort_zone);
<a name="l00976"></a>00976     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; num_arcs; ++i) {
<a name="l00977"></a>00977       <span class="keyword">const</span> int64 arc_usage = usage_costs[i]-&gt;Value();
<a name="l00978"></a>00978       <span class="keywordflow">if</span> (arc_usage &gt;= cutoff) {
<a name="l00979"></a>00979         <span class="keyword">const</span> <span class="keywordtype">int</span> source_index = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#7c9be3a5aad472cbc74f3d04dc7a8802">arcs_data_</a>[2 * i][0];
<a name="l00980"></a>00980         <span class="keyword">const</span> <span class="keywordtype">int</span> destination_index = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#7c9be3a5aad472cbc74f3d04dc7a8802">arcs_data_</a>[2 * i][1];
<a name="l00981"></a>00981         LOG(INFO) &lt;&lt; <span class="stringliteral">" + Arc "</span> &lt;&lt; source_index
<a name="l00982"></a>00982                   &lt;&lt; <span class="stringliteral">" &lt;-&gt; "</span> &lt;&lt; destination_index
<a name="l00983"></a>00983                   &lt;&lt; <span class="stringliteral">" has a usage = "</span> &lt;&lt; arc_usage / 10.0
<a name="l00984"></a>00984                   &lt;&lt; <span class="stringliteral">"%, capacity = "</span>
<a name="l00985"></a>00985                   &lt;&lt; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#8e017c78e289bb9b35a765b964be7b0e">capacity_</a>[source_index][destination_index];
<a name="l00986"></a>00986         <span class="keywordflow">if</span> (precise) {
<a name="l00987"></a>00987           <span class="keyword">const</span> <span class="keywordtype">int</span> num_demands = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#d7009080bdb4b4bf868a6d947796b0cb">demands_array_</a>.size();
<a name="l00988"></a>00988           <span class="keywordflow">for</span> (<span class="keywordtype">int</span> demand_index = 0;
<a name="l00989"></a>00989                demand_index &lt; num_demands;
<a name="l00990"></a>00990                ++demand_index) {
<a name="l00991"></a>00991             <span class="keywordflow">if</span> (path_vars[demand_index][i]-&gt;Value() == 1) {
<a name="l00992"></a>00992               <span class="keyword">const</span> <a class="code" href="structoperations__research_1_1Demand.html" title="Solving the Problem.">Demand</a>&amp; demand = <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#d7009080bdb4b4bf868a6d947796b0cb">demands_array_</a>[demand_index];
<a name="l00993"></a>00993               LOG(INFO) &lt;&lt; <span class="stringliteral">"   - "</span>
<a name="l00994"></a>00994                         &lt;&lt; StringPrintf(<span class="stringliteral">"%i -&gt; %i (%i)"</span>,
<a name="l00995"></a>00995                                         demand.<a class="code" href="structoperations__research_1_1Demand.html#1b84a67d4baab7bd14cbf25ffebdc46f">source</a>,
<a name="l00996"></a>00996                                         demand.<a class="code" href="structoperations__research_1_1Demand.html#aba16f19db248e6ee92fb72e86920303">destination</a>,
<a name="l00997"></a>00997                                         demand.<a class="code" href="structoperations__research_1_1Demand.html#31b9ff7eee7c149aecc27cceb01af819">traffic</a>);
<a name="l00998"></a>00998             }
<a name="l00999"></a>00999           }
<a name="l01000"></a>01000         }
<a name="l01001"></a>01001       }
<a name="l01002"></a>01002     }
<a name="l01003"></a>01003   }
<a name="l01004"></a>01004 
<a name="l01005"></a>01005  <span class="keyword">private</span>:
<a name="l01006"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#46b2a4779c784f54d96aff6873ef1115">01006</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#46b2a4779c784f54d96aff6873ef1115">count_arcs</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#7c9be3a5aad472cbc74f3d04dc7a8802">arcs_data_</a>.size() / 2; }
<a name="l01007"></a>01007 
<a name="l01008"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#7c9be3a5aad472cbc74f3d04dc7a8802">01008</a>   vector&lt;vector&lt;int64&gt; &gt; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#7c9be3a5aad472cbc74f3d04dc7a8802">arcs_data_</a>;
<a name="l01009"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#29e2c4fc3d5ed93c5d5b0e562ea34344">01009</a>   vector&lt;int&gt; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#29e2c4fc3d5ed93c5d5b0e562ea34344">arc_capacity_</a>;
<a name="l01010"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#d7009080bdb4b4bf868a6d947796b0cb">01010</a>   vector&lt;Demand&gt; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#d7009080bdb4b4bf868a6d947796b0cb">demands_array_</a>;
<a name="l01011"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#2291a882b3190cc7970bcc3910bf4133">01011</a>   <span class="keywordtype">int</span> <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#2291a882b3190cc7970bcc3910bf4133">num_nodes_</a>;
<a name="l01012"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#f64135f083ecf31e3960e5878415a1bb">01012</a>   vector&lt;int64&gt; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#f64135f083ecf31e3960e5878415a1bb">all_min_path_lengths_</a>;
<a name="l01013"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#8e017c78e289bb9b35a765b964be7b0e">01013</a>   vector&lt;vector&lt;int&gt; &gt; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#8e017c78e289bb9b35a765b964be7b0e">capacity_</a>;
<a name="l01014"></a><a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#1dfbbfc8d0cef98cf60ff98ea99d5816">01014</a>   vector&lt;vector&lt;OnePath&gt; &gt; <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#1dfbbfc8d0cef98cf60ff98ea99d5816">all_paths_</a>;
<a name="l01015"></a>01015 };
<a name="l01016"></a>01016 
<a name="l01017"></a>01017 }  <span class="comment">// namespace operations_research</span>
<a name="l01018"></a>01018 
<a name="l01019"></a><a class="code" href="network__routing_8cc.html#3c04138a5bfe5d72780bb7e82a18e627">01019</a> <span class="keywordtype">int</span> <a class="code" href="costas__array_8cc.html#3c04138a5bfe5d72780bb7e82a18e627" title="namespace operations_research">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv) {
<a name="l01020"></a>01020   google::ParseCommandLineFlags(&amp;argc, &amp;argv, <span class="keyword">true</span>);
<a name="l01021"></a>01021   <a class="code" href="classoperations__research_1_1NetworkRoutingData.html" title="Data and Data Generation.">operations_research::NetworkRoutingData</a> data;
<a name="l01022"></a>01022   <a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html" title="Data Generation.">operations_research::NetworkRoutingDataBuilder</a> builder;
<a name="l01023"></a>01023   builder.<a class="code" href="classoperations__research_1_1NetworkRoutingDataBuilder.html#f01dbf2eba792ba03be9441f4d4e38d0">BuildModelFromParameters</a>(FLAGS_clients,
<a name="l01024"></a>01024                                    FLAGS_backbones,
<a name="l01025"></a>01025                                    FLAGS_demands,
<a name="l01026"></a>01026                                    FLAGS_traffic_min,
<a name="l01027"></a>01027                                    FLAGS_traffic_max,
<a name="l01028"></a>01028                                    FLAGS_min_client_degree,
<a name="l01029"></a>01029                                    FLAGS_max_client_degree,
<a name="l01030"></a>01030                                    FLAGS_min_backbone_degree,
<a name="l01031"></a>01031                                    FLAGS_max_backbone_degree,
<a name="l01032"></a>01032                                    FLAGS_max_capacity,
<a name="l01033"></a>01033                                    FLAGS_fixed_charge_cost,
<a name="l01034"></a>01034                                    FLAGS_seed,
<a name="l01035"></a>01035                                    &amp;data);
<a name="l01036"></a>01036   <a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html">operations_research::NetworkRoutingSolver</a> solver;
<a name="l01037"></a>01037   solver.<a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#a1789ee9b6f3e6630ad454868f3e0926">Init</a>(data, FLAGS_extra_hops, FLAGS_max_paths);
<a name="l01038"></a>01038   LOG(INFO) &lt;&lt; <span class="stringliteral">"Final cost = "</span>
<a name="l01039"></a>01039             &lt;&lt; solver.<a class="code" href="classoperations__research_1_1NetworkRoutingSolver.html#f53c0d7901314b50a7999c07fe1aae92" title="Main Solve routine.">LnsSolve</a>(FLAGS_time_limit, FLAGS_fail_limit);
<a name="l01040"></a>01040   <span class="keywordflow">return</span> 0;
<a name="l01041"></a>01041 }
</pre></div></div>

  <!-- Start of footer. -->
  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <tr valign=top>
      <td colspan=2 height=10></td>
    </tr>
    <tr valign=top>
      <td colspan=2 bgcolor=#389613 height=3></td>
    </tr>
  </table>

  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br />

  
  </body>
</html>
