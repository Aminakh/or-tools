<!-- Good morning, Mr. Phelps. -->
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
    <title>google3/graph/min_cost_flow.cc Source File - Doxy</title>
    <link rel="shortcut icon" href="../../favicon.ico">
    <!-- Both stylesheets are supplied by Doxygen, with maybe minor tweaks from Google. -->
    <link href="../../doxygen.css" rel="stylesheet" type="text/css">
    <link href="../../tabs.css" rel="stylesheet" type="text/css">
  </head>

  <body topmargin=0 leftmargin=20 bottommargin=0 rightmargin=20 marginwidth=20 marginheight=0>
  <!-- Second part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
  <style>
    a.doxy_logo:hover {
      background-color: #389613
    }
  </style>

  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <!-- Top horizontal line with the color of the day. -->
    <tr valign=top>
      <td colspan=3 bgcolor=#389613 height=3></td>
    </tr>

    <!-- Header row with the links at the right. -->
    <tr valign=top>
      <td colspan=3 align=right>
        <font size=-1>
          Generated on: <font color=#389613><b>Fri Apr  1 14:13:18 PDT 2011</b></font>
            for <b>custom file set</b>
        </font>
      </td>
    </tr>

    <!-- Header row with the logo and the search form. -->
    <tr valign=top>
      <!-- Logo. -->
      <td align=left width=150>
        <table width=150 height=54 cellpadding=0 cellspacing=0 border=0>
          <tr valign=top>
            <!-- First part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
            <td bgcolor=#389613>
              <a class="doxy_logo" href="../../index.html"><img src="../../doxy_logo.png" alt="Doxy" border=0></a>
            </td>
          </tr>
        </table>
      </td>
    </tr>

    <!-- Tiny vertical space below the form. -->
    <tr valign=top>
      <td colspan=3 height=3></td>
    </tr>
  </table>

  <!-- Header navigation row. -->
  <div class="memproto">
    <table width=100% cellpadding=0 cellspacing=0 border=0>
      <tr>
        <td align=left style="padding-left: 20px"><font size=+1><b><tt><font color=#333333>//
            <a href="../../index.html"><font color=#389613>doxy</font></a>/</font>
            <a href="../../google3/index.html">google3</a>/
            <a href="../../google3/graph/index.html">graph</a>/
            </tt></b></font>
        </td>
      </tr>
    </table>
  </div>
  <br />
    <!-- No subdirs found. -->
  <!-- End of header. -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>google3/graph/min_cost_flow.cc</h1><a href="min__cost__flow_8cc.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright 2010 Google</span>
<a name="l00002"></a>00002 <span class="comment">// Licensed under the Apache License, Version 2.0 (the "License");</span>
<a name="l00003"></a>00003 <span class="comment">// you may not use this file except in compliance with the License.</span>
<a name="l00004"></a>00004 <span class="comment">// You may obtain a copy of the License at</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">//     http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Unless required by applicable law or agreed to in writing, software</span>
<a name="l00009"></a>00009 <span class="comment">// distributed under the License is distributed on an "AS IS" BASIS,</span>
<a name="l00010"></a>00010 <span class="comment">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00011"></a>00011 <span class="comment">// See the License for the specific language governing permissions and</span>
<a name="l00012"></a>00012 <span class="comment">// limitations under the License.</span>
<a name="l00013"></a>00013 
<a name="l00014"></a>00014 <span class="preprocessor">#include "<a class="code" href="min__cost__flow_8h.html">graph/min_cost_flow.h</a>"</span>
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include &lt;limits&gt;</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include "base/commandlineflags.h"</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <a class="code" href="min__cost__flow_8cc.html#cde8c35032581b083b7f418f4e51ffae" title="Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may...">DEFINE_int64</a>(min_cost_flow_alpha, 5,
<a name="l00021"></a>00021              <span class="stringliteral">"Divide factor for epsilon at each refine step."</span>);
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="keyword">namespace </span>operations_research {
<a name="l00024"></a>00024 
<a name="l00025"></a><a class="code" href="classoperations__research_1_1MinCostFlow.html#0d22b4c8d94deb5a4d4a7976a956d8f5">00025</a> <a class="code" href="classoperations__research_1_1MinCostFlow.html#0d22b4c8d94deb5a4d4a7976a956d8f5">MinCostFlow::MinCostFlow</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1EbertGraph.html">StarGraph</a>&amp; graph)
<a name="l00026"></a>00026     : graph_(graph),
<a name="l00027"></a>00027       node_excess_(),
<a name="l00028"></a>00028       node_potential_(),
<a name="l00029"></a>00029       residual_arc_capacity_(),
<a name="l00030"></a>00030       first_admissible_arc_(),
<a name="l00031"></a>00031       active_nodes_(),
<a name="l00032"></a>00032       epsilon_(0),
<a name="l00033"></a>00033       alpha_(FLAGS_min_cost_flow_alpha),
<a name="l00034"></a>00034       cost_scaling_factor_(1),
<a name="l00035"></a>00035       scaled_arc_unit_cost_() {
<a name="l00036"></a>00036   <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> max_num_arcs = <a class="code" href="classoperations__research_1_1MinCostFlow.html#929b0fc48ad26837e13c01c19e3c63bd" title="A pointer to the graph passed as argument.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#db57706bbd6f5dd2199cdb425db06abe" title="Returns the maximum possible number of original arcs in the graph.">max_num_arcs</a>();
<a name="l00037"></a>00037   CHECK_GE(max_num_arcs, 1);
<a name="l00038"></a>00038   <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> max_num_nodes = <a class="code" href="classoperations__research_1_1MinCostFlow.html#929b0fc48ad26837e13c01c19e3c63bd" title="A pointer to the graph passed as argument.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#443f465c65383c578a5116d1e3af9f38" title="Returns the maximum possible number of nodes in the graph.">max_num_nodes</a>();
<a name="l00039"></a>00039   CHECK_GE(max_num_nodes, 1);
<a name="l00040"></a>00040   <a class="code" href="classoperations__research_1_1MinCostFlow.html#c3da3cb1d8ac4a4cee1f53aefb31b885" title="A packed array representing the supply (if &amp;gt; 0) or the demand (if &amp;lt; 0) for...">node_excess_</a>.Reserve(1, max_num_nodes);
<a name="l00041"></a>00041   <a class="code" href="classoperations__research_1_1MinCostFlow.html#c3da3cb1d8ac4a4cee1f53aefb31b885" title="A packed array representing the supply (if &amp;gt; 0) or the demand (if &amp;lt; 0) for...">node_excess_</a>.Assign(0);
<a name="l00042"></a>00042   <a class="code" href="classoperations__research_1_1MinCostFlow.html#a1bbe325ad84ebfa86c0aa8e3c59c969" title="A packed array representing the potential (or price function) for each node in graph_...">node_potential_</a>.Reserve(1, max_num_nodes);
<a name="l00043"></a>00043   <a class="code" href="classoperations__research_1_1MinCostFlow.html#a1bbe325ad84ebfa86c0aa8e3c59c969" title="A packed array representing the potential (or price function) for each node in graph_...">node_potential_</a>.Assign(0);
<a name="l00044"></a>00044   <a class="code" href="classoperations__research_1_1MinCostFlow.html#f77d2b57e2e5a3bc20e9b4258fcac2a9" title="A packed array representing the residual_capacity for each arc in graph_.">residual_arc_capacity_</a>.Reserve(-max_num_arcs, max_num_arcs);
<a name="l00045"></a>00045   <a class="code" href="classoperations__research_1_1MinCostFlow.html#f77d2b57e2e5a3bc20e9b4258fcac2a9" title="A packed array representing the residual_capacity for each arc in graph_.">residual_arc_capacity_</a>.Assign(0);
<a name="l00046"></a>00046   <a class="code" href="classoperations__research_1_1MinCostFlow.html#c506600355b32d5fd8133fe92675fca3" title="A packed array representing the first admissible arc for each node in graph_.">first_admissible_arc_</a>.Reserve(1, max_num_nodes);
<a name="l00047"></a>00047   <a class="code" href="classoperations__research_1_1MinCostFlow.html#3a5a7a130fbfef01583004b8cf04dbd5" title="A packed array representing the scaled unit cost for each arc in graph_.">scaled_arc_unit_cost_</a>.Reserve(-max_num_arcs, max_num_arcs);
<a name="l00048"></a>00048   <a class="code" href="classoperations__research_1_1MinCostFlow.html#3a5a7a130fbfef01583004b8cf04dbd5" title="A packed array representing the scaled unit cost for each arc in graph_.">scaled_arc_unit_cost_</a>.Assign(0);
<a name="l00049"></a>00049 }
<a name="l00050"></a>00050 
<a name="l00051"></a><a class="code" href="classoperations__research_1_1MinCostFlow.html#3ad570360c43ac6d537fc728ce114203">00051</a> <span class="keywordtype">bool</span> MinCostFlow::CheckInputConsistency()<span class="keyword"> const </span>{
<a name="l00052"></a>00052   <a class="code" href="namespaceoperations__research.html#5841ff601ab08548afb15c45b2245de7">FlowQuantity</a> total_supply = 0;
<a name="l00053"></a>00053   <span class="keywordflow">for</span> (<a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html" title="Iterator class for traversing the nodes in the graph.">StarGraph::NodeIterator</a> node_it(<a class="code" href="classoperations__research_1_1MinCostFlow.html#929b0fc48ad26837e13c01c19e3c63bd" title="A pointer to the graph passed as argument.">graph_</a>); node_it.Ok(); node_it.Next()) {
<a name="l00054"></a>00054     total_supply += <a class="code" href="classoperations__research_1_1MinCostFlow.html#c3da3cb1d8ac4a4cee1f53aefb31b885" title="A packed array representing the supply (if &amp;gt; 0) or the demand (if &amp;lt; 0) for...">node_excess_</a>[node_it.Index()];
<a name="l00055"></a>00055   }
<a name="l00056"></a>00056   CHECK_EQ(0, total_supply);
<a name="l00057"></a>00057   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00058"></a>00058 }
<a name="l00059"></a>00059 
<a name="l00060"></a><a class="code" href="classoperations__research_1_1MinCostFlow.html#c6ed5240041f6765c525aa7bcee2f4b2">00060</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1MinCostFlow.html#c6ed5240041f6765c525aa7bcee2f4b2" title="Checks whether the result is valid, i.e.">MinCostFlow::CheckResult</a>()<span class="keyword"> const </span>{
<a name="l00061"></a>00061   <span class="keywordflow">for</span> (<a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html" title="Iterator class for traversing the nodes in the graph.">StarGraph::NodeIterator</a> it(<a class="code" href="classoperations__research_1_1MinCostFlow.html#929b0fc48ad26837e13c01c19e3c63bd" title="A pointer to the graph passed as argument.">graph_</a>); it.Ok(); it.Next()) {
<a name="l00062"></a>00062     <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node = it.Index();
<a name="l00063"></a>00063     CHECK_EQ(0, <a class="code" href="classoperations__research_1_1MinCostFlow.html#c3da3cb1d8ac4a4cee1f53aefb31b885" title="A packed array representing the supply (if &amp;gt; 0) or the demand (if &amp;lt; 0) for...">node_excess_</a>[node]);
<a name="l00064"></a>00064     <span class="keywordflow">for</span> (<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html" title="Iterator class for traversing the arcs incident to a given node in the graph.">StarGraph::IncidentArcIterator</a>
<a name="l00065"></a>00065         arc_it(<a class="code" href="classoperations__research_1_1MinCostFlow.html#929b0fc48ad26837e13c01c19e3c63bd" title="A pointer to the graph passed as argument.">graph_</a>, node); arc_it.Ok(); arc_it.Next()) {
<a name="l00066"></a>00066       <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc = arc_it.Index();
<a name="l00067"></a>00067       CHECK_LE(0, <a class="code" href="classoperations__research_1_1MinCostFlow.html#f77d2b57e2e5a3bc20e9b4258fcac2a9" title="A packed array representing the residual_capacity for each arc in graph_.">residual_arc_capacity_</a>[arc]);
<a name="l00068"></a>00068       CHECK(<a class="code" href="classoperations__research_1_1MinCostFlow.html#f77d2b57e2e5a3bc20e9b4258fcac2a9" title="A packed array representing the residual_capacity for each arc in graph_.">residual_arc_capacity_</a>[arc] == 0 || <a class="code" href="classoperations__research_1_1MinCostFlow.html#b9217666fc99fc58c853c0d0380f4cda" title="Returns the reduced cost for an arc.">ReducedCost</a>(arc) &gt;= -<a class="code" href="classoperations__research_1_1MinCostFlow.html#9085d084e1b75f58504968a470a04417" title="epsilon_ is the tolerance for optimality.">epsilon_</a>)
<a name="l00069"></a>00069           &lt;&lt; <a class="code" href="classoperations__research_1_1MinCostFlow.html#f77d2b57e2e5a3bc20e9b4258fcac2a9" title="A packed array representing the residual_capacity for each arc in graph_.">residual_arc_capacity_</a>[arc] &lt;&lt; <span class="stringliteral">" "</span> &lt;&lt; <a class="code" href="classoperations__research_1_1MinCostFlow.html#b9217666fc99fc58c853c0d0380f4cda" title="Returns the reduced cost for an arc.">ReducedCost</a>(arc);
<a name="l00070"></a>00070     }
<a name="l00071"></a>00071   }
<a name="l00072"></a>00072   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00073"></a>00073 }
<a name="l00074"></a>00074 
<a name="l00075"></a><a class="code" href="classoperations__research_1_1MinCostFlow.html#68da26dad4c512d8db43b451a0cbc2d6">00075</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1MinCostFlow.html#68da26dad4c512d8db43b451a0cbc2d6" title="Checks that the cost range fits in the range of int64&amp;#39;s.">MinCostFlow::CheckCostRange</a>()<span class="keyword"> const </span>{
<a name="l00076"></a>00076   <a class="code" href="namespaceoperations__research.html#a7950685633ee869aa9471b2ec5fbcfa">CostValue</a> min_cost_magnitude = std::numeric_limits&lt;CostValue&gt;::max();
<a name="l00077"></a>00077   <a class="code" href="namespaceoperations__research.html#a7950685633ee869aa9471b2ec5fbcfa">CostValue</a> max_cost_magnitude = 0;
<a name="l00078"></a>00078   <span class="comment">// Traverse the initial arcs of the graph:</span>
<a name="l00079"></a>00079   <span class="keywordflow">for</span> (<a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html" title="Iterator class for traversing the arcs in the graph.">StarGraph::ArcIterator</a> arc_it(<a class="code" href="classoperations__research_1_1MinCostFlow.html#929b0fc48ad26837e13c01c19e3c63bd" title="A pointer to the graph passed as argument.">graph_</a>); arc_it.Ok(); arc_it.Next()) {
<a name="l00080"></a>00080     <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc = arc_it.Index();
<a name="l00081"></a>00081     <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#a7950685633ee869aa9471b2ec5fbcfa">CostValue</a> cost_magnitude = <a class="code" href="classoperations__research_1_1MinCostFlow.html#3a5a7a130fbfef01583004b8cf04dbd5" title="A packed array representing the scaled unit cost for each arc in graph_.">scaled_arc_unit_cost_</a>[arc] &gt; 0 ?
<a name="l00082"></a>00082         <a class="code" href="classoperations__research_1_1MinCostFlow.html#3a5a7a130fbfef01583004b8cf04dbd5" title="A packed array representing the scaled unit cost for each arc in graph_.">scaled_arc_unit_cost_</a>[arc] :
<a name="l00083"></a>00083         -<a class="code" href="classoperations__research_1_1MinCostFlow.html#3a5a7a130fbfef01583004b8cf04dbd5" title="A packed array representing the scaled unit cost for each arc in graph_.">scaled_arc_unit_cost_</a>[arc];
<a name="l00084"></a>00084     max_cost_magnitude = max(max_cost_magnitude, cost_magnitude);
<a name="l00085"></a>00085     <span class="keywordflow">if</span> (cost_magnitude != 0.0) {
<a name="l00086"></a>00086       min_cost_magnitude = min(min_cost_magnitude, cost_magnitude);
<a name="l00087"></a>00087     }
<a name="l00088"></a>00088   }
<a name="l00089"></a>00089   VLOG(1) &lt;&lt; <span class="stringliteral">"Min cost magnitude = "</span> &lt;&lt; min_cost_magnitude
<a name="l00090"></a>00090           &lt;&lt; <span class="stringliteral">", Max cost magnitude = "</span> &lt;&lt; max_cost_magnitude;
<a name="l00091"></a>00091   CHECK_GE(log(std::numeric_limits&lt;CostValue&gt;::max()),
<a name="l00092"></a>00092            log(max_cost_magnitude) + log(<a class="code" href="classoperations__research_1_1MinCostFlow.html#929b0fc48ad26837e13c01c19e3c63bd" title="A pointer to the graph passed as argument.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#9913def68b3deecb203994b8fa6340a3" title="Returns the number of nodes in the graph.">num_nodes</a>() + 1))
<a name="l00093"></a>00093       &lt;&lt; <span class="stringliteral">"Maximum cost is too high for the number of nodes. "</span>
<a name="l00094"></a>00094       &lt;&lt; <span class="stringliteral">"Try changing the data."</span>;
<a name="l00095"></a>00095   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00096"></a>00096 }
<a name="l00097"></a>00097 
<a name="l00098"></a><a class="code" href="classoperations__research_1_1MinCostFlow.html#9bb7ac7903223d1b6bdcde79489075cc">00098</a> <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1MinCostFlow.html#9bb7ac7903223d1b6bdcde79489075cc" title="Checks the relabel precondition, i.e.">MinCostFlow::CheckRelabelPrecondition</a>(<a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node)<span class="keyword"> const </span>{
<a name="l00099"></a>00099   CHECK(<a class="code" href="classoperations__research_1_1MinCostFlow.html#239228dc8ea0067f519d3715d554256f" title="Returns true if node is active, i.e. if its supply is positive.">IsActive</a>(node));
<a name="l00100"></a>00100   <span class="keywordflow">for</span> (<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html" title="Iterator class for traversing the arcs incident to a given node in the graph.">StarGraph::IncidentArcIterator</a> arc_it(<a class="code" href="classoperations__research_1_1MinCostFlow.html#929b0fc48ad26837e13c01c19e3c63bd" title="A pointer to the graph passed as argument.">graph_</a>, node);
<a name="l00101"></a>00101        arc_it.Ok();
<a name="l00102"></a>00102        arc_it.Next()) {
<a name="l00103"></a>00103     <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc = arc_it.Index();
<a name="l00104"></a>00104     CHECK(!<a class="code" href="classoperations__research_1_1MinCostFlow.html#3023410b790705a89b5b091e2dd5403b" title="Returns true if arc is admissible i.e.">IsAdmissible</a>(arc)) &lt;&lt; <a class="code" href="classoperations__research_1_1MinCostFlow.html#99984d96eeb01f3d710292ca60c0f481" title="Returns context concatenated with information about arc in a human-friendly way.">DebugString</a>(<span class="stringliteral">"CheckRelabelPrecondition:"</span>, arc);
<a name="l00105"></a>00105   }
<a name="l00106"></a>00106   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00107"></a>00107 }
<a name="l00108"></a>00108 
<a name="l00109"></a><a class="code" href="classoperations__research_1_1MinCostFlow.html#99984d96eeb01f3d710292ca60c0f481">00109</a> <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1MinCostFlow.html#99984d96eeb01f3d710292ca60c0f481" title="Returns context concatenated with information about arc in a human-friendly way.">MinCostFlow::DebugString</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; context, <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc)<span class="keyword"> const </span>{
<a name="l00110"></a>00110   <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> tail = <a class="code" href="classoperations__research_1_1MinCostFlow.html#5084c093250a56e492a0dcceb4dcede7">Tail</a>(arc);
<a name="l00111"></a>00111   <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> head = <a class="code" href="classoperations__research_1_1MinCostFlow.html#9d39f07a72c87d996e67fc79b6c6a3d4" title="Handy member functions to make the code more compact.">Head</a>(arc);
<a name="l00112"></a>00112   <span class="keywordflow">return</span> StringPrintf(<span class="stringliteral">"%s Arc %lld, from %lld to %lld, "</span>
<a name="l00113"></a>00113                       <span class="stringliteral">"Capacity = %lld, Residual capacity = %lld, "</span>
<a name="l00114"></a>00114                       <span class="stringliteral">"Flow = residual capacity for reverse arc = %lld, "</span>
<a name="l00115"></a>00115                       <span class="stringliteral">"Height(tail) = %lld, Height(head) = %lld, "</span>
<a name="l00116"></a>00116                       <span class="stringliteral">"Excess(tail) = %lld, Excess(head) = %lld, "</span>
<a name="l00117"></a>00117                       <span class="stringliteral">"Cost = %lld, Reduced cost = %lld, "</span>,
<a name="l00118"></a>00118                       context.c_str(), arc, tail, head, <a class="code" href="classoperations__research_1_1MinCostFlow.html#b1f45c1e61ac147362e22f0511720905" title="Returns the capacity of arc using the equations given in the comment on residual_arc_capacity_...">Capacity</a>(arc),
<a name="l00119"></a>00119                       <a class="code" href="classoperations__research_1_1MinCostFlow.html#f77d2b57e2e5a3bc20e9b4258fcac2a9" title="A packed array representing the residual_capacity for each arc in graph_.">residual_arc_capacity_</a>[arc], residual_arc_capacity_[-arc],
<a name="l00120"></a>00120                       <a class="code" href="classoperations__research_1_1MinCostFlow.html#a1bbe325ad84ebfa86c0aa8e3c59c969" title="A packed array representing the potential (or price function) for each node in graph_...">node_potential_</a>[tail], node_potential_[head],
<a name="l00121"></a>00121                       <a class="code" href="classoperations__research_1_1MinCostFlow.html#c3da3cb1d8ac4a4cee1f53aefb31b885" title="A packed array representing the supply (if &amp;gt; 0) or the demand (if &amp;lt; 0) for...">node_excess_</a>[tail], node_excess_[head],
<a name="l00122"></a>00122                       <a class="code" href="classoperations__research_1_1MinCostFlow.html#3a5a7a130fbfef01583004b8cf04dbd5" title="A packed array representing the scaled unit cost for each arc in graph_.">scaled_arc_unit_cost_</a>[arc], <a class="code" href="classoperations__research_1_1MinCostFlow.html#b9217666fc99fc58c853c0d0380f4cda" title="Returns the reduced cost for an arc.">ReducedCost</a>(arc));
<a name="l00123"></a>00123 }
<a name="l00124"></a>00124 
<a name="l00125"></a><a class="code" href="classoperations__research_1_1MinCostFlow.html#bd6b76a75c0b0f1ba8a5c79c15d0cf39">00125</a> <a class="code" href="namespaceoperations__research.html#a7950685633ee869aa9471b2ec5fbcfa">CostValue</a> <a class="code" href="classoperations__research_1_1MinCostFlow.html#bd6b76a75c0b0f1ba8a5c79c15d0cf39" title="Runs the algorithm and computes the min-cost flow.">MinCostFlow::ComputeMinCostFlow</a>() {
<a name="l00126"></a>00126   DCHECK(<a class="code" href="classoperations__research_1_1MinCostFlow.html#3ad570360c43ac6d537fc728ce114203" title="Checks the consistency of the input, i.e.">CheckInputConsistency</a>());
<a name="l00127"></a>00127   DCHECK(<a class="code" href="classoperations__research_1_1MinCostFlow.html#68da26dad4c512d8db43b451a0cbc2d6" title="Checks that the cost range fits in the range of int64&amp;#39;s.">CheckCostRange</a>());
<a name="l00128"></a>00128   <a class="code" href="classoperations__research_1_1MinCostFlow.html#344c9fbacb5295630129cad6ced203c1" title="Completes the graph by setting the capacity of reverse arcs to zero, and their unit...">CompleteGraph</a>();
<a name="l00129"></a>00129   <a class="code" href="classoperations__research_1_1MinCostFlow.html#14b282b9dc77a923d72a1da8cd82a8e7" title="Resets the first_admissible_arc_ array to the first incident arc of each node.">ResetFirstAdmissibleArcs</a>();
<a name="l00130"></a>00130   <a class="code" href="classoperations__research_1_1MinCostFlow.html#7a9dd65b92965d2ba88976ce5da29924" title="Scales the costs, by multiplying them by (graph_.num_nodes() + 1).">ScaleCosts</a>();
<a name="l00131"></a>00131   <a class="code" href="classoperations__research_1_1MinCostFlow.html#a4040323b6ec417909260d6420fd01f5" title="Optimizes the cost by dividing epsilon_ by alpha_ and calling Refine().">Optimize</a>();
<a name="l00132"></a>00132   <a class="code" href="classoperations__research_1_1MinCostFlow.html#351b2e81d031e312a00df9001175147d" title="Unscales the costs, by dividing them by (graph_.num_nodes() + 1).">UnscaleCosts</a>();
<a name="l00133"></a>00133   <a class="code" href="namespaceoperations__research.html#a7950685633ee869aa9471b2ec5fbcfa">CostValue</a> total_flow_cost = 0;
<a name="l00134"></a>00134   <span class="keywordflow">for</span> (<a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html" title="Iterator class for traversing the arcs in the graph.">StarGraph::ArcIterator</a> it(<a class="code" href="classoperations__research_1_1MinCostFlow.html#929b0fc48ad26837e13c01c19e3c63bd" title="A pointer to the graph passed as argument.">graph_</a>); it.Ok(); it.Next()) {
<a name="l00135"></a>00135     <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc = it.Index();
<a name="l00136"></a>00136     <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#5841ff601ab08548afb15c45b2245de7">FlowQuantity</a> flow_on_arc = <a class="code" href="classoperations__research_1_1MinCostFlow.html#f77d2b57e2e5a3bc20e9b4258fcac2a9" title="A packed array representing the residual_capacity for each arc in graph_.">residual_arc_capacity_</a>[-arc];
<a name="l00137"></a>00137     VLOG(1) &lt;&lt; <span class="stringliteral">"Flow for arc "</span> &lt;&lt; arc &lt;&lt; <span class="stringliteral">" = "</span> &lt;&lt; flow_on_arc
<a name="l00138"></a>00138             &lt;&lt; <span class="stringliteral">", scaled cost = "</span> &lt;&lt; <a class="code" href="classoperations__research_1_1MinCostFlow.html#3a5a7a130fbfef01583004b8cf04dbd5" title="A packed array representing the scaled unit cost for each arc in graph_.">scaled_arc_unit_cost_</a>[arc];
<a name="l00139"></a>00139     total_flow_cost += scaled_arc_unit_cost_[arc] * flow_on_arc;
<a name="l00140"></a>00140   }
<a name="l00141"></a>00141   <span class="keywordflow">return</span> total_flow_cost;
<a name="l00142"></a>00142 }
<a name="l00143"></a>00143 
<a name="l00144"></a><a class="code" href="classoperations__research_1_1MinCostFlow.html#344c9fbacb5295630129cad6ced203c1">00144</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinCostFlow.html#344c9fbacb5295630129cad6ced203c1" title="Completes the graph by setting the capacity of reverse arcs to zero, and their unit...">MinCostFlow::CompleteGraph</a>() {
<a name="l00145"></a>00145   <span class="comment">// Set the capacities of reverse arcs to zero, and the unit costs of reverse</span>
<a name="l00146"></a>00146   <span class="comment">// arcs equal to the opposite of the cost for the corresponding direct arc.</span>
<a name="l00147"></a>00147   <span class="keywordflow">for</span> (<a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html" title="Iterator class for traversing the arcs in the graph.">StarGraph::ArcIterator</a> arc_it(<a class="code" href="classoperations__research_1_1MinCostFlow.html#929b0fc48ad26837e13c01c19e3c63bd" title="A pointer to the graph passed as argument.">graph_</a>); arc_it.Ok(); arc_it.Next()) {
<a name="l00148"></a>00148     <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc = arc_it.Index();
<a name="l00149"></a>00149     <a class="code" href="classoperations__research_1_1MinCostFlow.html#f77d2b57e2e5a3bc20e9b4258fcac2a9" title="A packed array representing the residual_capacity for each arc in graph_.">residual_arc_capacity_</a>.Set(<a class="code" href="classoperations__research_1_1MinCostFlow.html#74c014fa5bfc657a3bb1f9b44c28686d">Opposite</a>(arc), 0);
<a name="l00150"></a>00150     <a class="code" href="classoperations__research_1_1MinCostFlow.html#3a5a7a130fbfef01583004b8cf04dbd5" title="A packed array representing the scaled unit cost for each arc in graph_.">scaled_arc_unit_cost_</a>.Set(<a class="code" href="classoperations__research_1_1MinCostFlow.html#74c014fa5bfc657a3bb1f9b44c28686d">Opposite</a>(arc), -<a class="code" href="classoperations__research_1_1MinCostFlow.html#3a5a7a130fbfef01583004b8cf04dbd5" title="A packed array representing the scaled unit cost for each arc in graph_.">scaled_arc_unit_cost_</a>[arc]);
<a name="l00151"></a>00151   }
<a name="l00152"></a>00152 }
<a name="l00153"></a>00153 
<a name="l00154"></a><a class="code" href="classoperations__research_1_1MinCostFlow.html#14b282b9dc77a923d72a1da8cd82a8e7">00154</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinCostFlow.html#14b282b9dc77a923d72a1da8cd82a8e7" title="Resets the first_admissible_arc_ array to the first incident arc of each node.">MinCostFlow::ResetFirstAdmissibleArcs</a>() {
<a name="l00155"></a>00155   <span class="keywordflow">for</span> (<a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html" title="Iterator class for traversing the nodes in the graph.">StarGraph::NodeIterator</a> node_it(<a class="code" href="classoperations__research_1_1MinCostFlow.html#929b0fc48ad26837e13c01c19e3c63bd" title="A pointer to the graph passed as argument.">graph_</a>); node_it.Ok(); node_it.Next()) {
<a name="l00156"></a>00156     <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node = node_it.Index();
<a name="l00157"></a>00157     <a class="code" href="classoperations__research_1_1MinCostFlow.html#c506600355b32d5fd8133fe92675fca3" title="A packed array representing the first admissible arc for each node in graph_.">first_admissible_arc_</a>.Set(node, <a class="code" href="classoperations__research_1_1MinCostFlow.html#e33f84219c12b15a7d312b8801a7ee06" title="Returns the first incident arc of node.">GetFirstIncidentArc</a>(node));
<a name="l00158"></a>00158   }
<a name="l00159"></a>00159 }
<a name="l00160"></a>00160 
<a name="l00161"></a><a class="code" href="classoperations__research_1_1MinCostFlow.html#7a9dd65b92965d2ba88976ce5da29924">00161</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinCostFlow.html#7a9dd65b92965d2ba88976ce5da29924" title="Scales the costs, by multiplying them by (graph_.num_nodes() + 1).">MinCostFlow::ScaleCosts</a>() {
<a name="l00162"></a>00162   <a class="code" href="classoperations__research_1_1MinCostFlow.html#000c3e5c64795cbcdc0620481efc4a6a" title="cost_scaling_factor_ is the scaling factor for cost.">cost_scaling_factor_</a> = <a class="code" href="classoperations__research_1_1MinCostFlow.html#929b0fc48ad26837e13c01c19e3c63bd" title="A pointer to the graph passed as argument.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#9913def68b3deecb203994b8fa6340a3" title="Returns the number of nodes in the graph.">num_nodes</a>() + 1;
<a name="l00163"></a>00163   <a class="code" href="classoperations__research_1_1MinCostFlow.html#9085d084e1b75f58504968a470a04417" title="epsilon_ is the tolerance for optimality.">epsilon_</a> = 1LL;
<a name="l00164"></a>00164   VLOG(1) &lt;&lt; <span class="stringliteral">"Number of arcs in the graph = "</span> &lt;&lt; <a class="code" href="classoperations__research_1_1MinCostFlow.html#929b0fc48ad26837e13c01c19e3c63bd" title="A pointer to the graph passed as argument.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#24c9d43ac345d5b95a52ebec6eb68380" title="Returns the number of original arcs in the graph (The ones with positive indices...">num_arcs</a>();
<a name="l00165"></a>00165   <span class="keywordflow">for</span> (<a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html" title="Iterator class for traversing the arcs in the graph.">StarGraph::ArcIterator</a> arc_it(<a class="code" href="classoperations__research_1_1MinCostFlow.html#929b0fc48ad26837e13c01c19e3c63bd" title="A pointer to the graph passed as argument.">graph_</a>); arc_it.Ok(); arc_it.Next()) {
<a name="l00166"></a>00166     <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc = arc_it.Index();
<a name="l00167"></a>00167     <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#a7950685633ee869aa9471b2ec5fbcfa">CostValue</a> cost = <a class="code" href="classoperations__research_1_1MinCostFlow.html#3a5a7a130fbfef01583004b8cf04dbd5" title="A packed array representing the scaled unit cost for each arc in graph_.">scaled_arc_unit_cost_</a>[arc] * <a class="code" href="classoperations__research_1_1MinCostFlow.html#000c3e5c64795cbcdc0620481efc4a6a" title="cost_scaling_factor_ is the scaling factor for cost.">cost_scaling_factor_</a>;
<a name="l00168"></a>00168     <a class="code" href="classoperations__research_1_1MinCostFlow.html#3a5a7a130fbfef01583004b8cf04dbd5" title="A packed array representing the scaled unit cost for each arc in graph_.">scaled_arc_unit_cost_</a>.Set(arc, cost);
<a name="l00169"></a>00169     <a class="code" href="classoperations__research_1_1MinCostFlow.html#3a5a7a130fbfef01583004b8cf04dbd5" title="A packed array representing the scaled unit cost for each arc in graph_.">scaled_arc_unit_cost_</a>.Set(<a class="code" href="classoperations__research_1_1MinCostFlow.html#74c014fa5bfc657a3bb1f9b44c28686d">Opposite</a>(arc), -cost);
<a name="l00170"></a>00170     <a class="code" href="classoperations__research_1_1MinCostFlow.html#9085d084e1b75f58504968a470a04417" title="epsilon_ is the tolerance for optimality.">epsilon_</a> = max(<a class="code" href="classoperations__research_1_1MinCostFlow.html#9085d084e1b75f58504968a470a04417" title="epsilon_ is the tolerance for optimality.">epsilon_</a>, cost &gt;= 0 ? cost : -cost);
<a name="l00171"></a>00171   }
<a name="l00172"></a>00172   VLOG(1) &lt;&lt; <span class="stringliteral">"Initial epsilon = "</span> &lt;&lt; <a class="code" href="classoperations__research_1_1MinCostFlow.html#9085d084e1b75f58504968a470a04417" title="epsilon_ is the tolerance for optimality.">epsilon_</a>;
<a name="l00173"></a>00173   VLOG(1) &lt;&lt; <span class="stringliteral">"Cost scaling factor = "</span> &lt;&lt; <a class="code" href="classoperations__research_1_1MinCostFlow.html#000c3e5c64795cbcdc0620481efc4a6a" title="cost_scaling_factor_ is the scaling factor for cost.">cost_scaling_factor_</a>;
<a name="l00174"></a>00174 }
<a name="l00175"></a>00175 
<a name="l00176"></a><a class="code" href="classoperations__research_1_1MinCostFlow.html#351b2e81d031e312a00df9001175147d">00176</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinCostFlow.html#351b2e81d031e312a00df9001175147d" title="Unscales the costs, by dividing them by (graph_.num_nodes() + 1).">MinCostFlow::UnscaleCosts</a>() {
<a name="l00177"></a>00177   <span class="keywordflow">for</span> (<a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html" title="Iterator class for traversing the arcs in the graph.">StarGraph::ArcIterator</a> arc_it(<a class="code" href="classoperations__research_1_1MinCostFlow.html#929b0fc48ad26837e13c01c19e3c63bd" title="A pointer to the graph passed as argument.">graph_</a>); arc_it.Ok(); arc_it.Next()) {
<a name="l00178"></a>00178     <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc = arc_it.Index();
<a name="l00179"></a>00179     <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#a7950685633ee869aa9471b2ec5fbcfa">CostValue</a> cost = <a class="code" href="classoperations__research_1_1MinCostFlow.html#3a5a7a130fbfef01583004b8cf04dbd5" title="A packed array representing the scaled unit cost for each arc in graph_.">scaled_arc_unit_cost_</a>[arc] / <a class="code" href="classoperations__research_1_1MinCostFlow.html#000c3e5c64795cbcdc0620481efc4a6a" title="cost_scaling_factor_ is the scaling factor for cost.">cost_scaling_factor_</a>;
<a name="l00180"></a>00180     <a class="code" href="classoperations__research_1_1MinCostFlow.html#3a5a7a130fbfef01583004b8cf04dbd5" title="A packed array representing the scaled unit cost for each arc in graph_.">scaled_arc_unit_cost_</a>.Set(arc, cost);
<a name="l00181"></a>00181     <a class="code" href="classoperations__research_1_1MinCostFlow.html#3a5a7a130fbfef01583004b8cf04dbd5" title="A packed array representing the scaled unit cost for each arc in graph_.">scaled_arc_unit_cost_</a>.Set(<a class="code" href="classoperations__research_1_1MinCostFlow.html#74c014fa5bfc657a3bb1f9b44c28686d">Opposite</a>(arc), -cost);
<a name="l00182"></a>00182   }
<a name="l00183"></a>00183   <a class="code" href="classoperations__research_1_1MinCostFlow.html#000c3e5c64795cbcdc0620481efc4a6a" title="cost_scaling_factor_ is the scaling factor for cost.">cost_scaling_factor_</a> = 1;
<a name="l00184"></a>00184 }
<a name="l00185"></a>00185 
<a name="l00186"></a><a class="code" href="classoperations__research_1_1MinCostFlow.html#a4040323b6ec417909260d6420fd01f5">00186</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinCostFlow.html#a4040323b6ec417909260d6420fd01f5" title="Optimizes the cost by dividing epsilon_ by alpha_ and calling Refine().">MinCostFlow::Optimize</a>() {
<a name="l00187"></a>00187   <span class="keywordflow">while</span> (<a class="code" href="classoperations__research_1_1MinCostFlow.html#9085d084e1b75f58504968a470a04417" title="epsilon_ is the tolerance for optimality.">epsilon_</a> &gt; 1) {
<a name="l00188"></a>00188     <a class="code" href="classoperations__research_1_1MinCostFlow.html#9085d084e1b75f58504968a470a04417" title="epsilon_ is the tolerance for optimality.">epsilon_</a> = max(<a class="code" href="classoperations__research_1_1MinCostFlow.html#9085d084e1b75f58504968a470a04417" title="epsilon_ is the tolerance for optimality.">epsilon_</a> / <a class="code" href="classoperations__research_1_1MinCostFlow.html#ed13a7c6bc0cf526b66d2048c4dcb3a6" title="alpha_ is the factor by which epsilon_ is divided at each iteration of Refine().">alpha_</a>, 1LL);  <span class="comment">// avoid epsilon_ == 0.</span>
<a name="l00189"></a>00189     VLOG(1) &lt;&lt; <span class="stringliteral">"Epsilon changed to: "</span> &lt;&lt; <a class="code" href="classoperations__research_1_1MinCostFlow.html#9085d084e1b75f58504968a470a04417" title="epsilon_ is the tolerance for optimality.">epsilon_</a>;
<a name="l00190"></a>00190     <a class="code" href="classoperations__research_1_1MinCostFlow.html#ded90d207beae640b77b99d1038eb21f" title="Performs an epsilon-optimization step by saturating admissible arcs and discharging...">Refine</a>();
<a name="l00191"></a>00191   }
<a name="l00192"></a>00192   DCHECK(<a class="code" href="classoperations__research_1_1MinCostFlow.html#c6ed5240041f6765c525aa7bcee2f4b2" title="Checks whether the result is valid, i.e.">CheckResult</a>());
<a name="l00193"></a>00193 }
<a name="l00194"></a>00194 
<a name="l00195"></a><a class="code" href="classoperations__research_1_1MinCostFlow.html#8e952e2b2456abee80510ee865f4d725">00195</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinCostFlow.html#8e952e2b2456abee80510ee865f4d725" title="Saturates the admissible arcs, i.e. push as much flow as possible.">MinCostFlow::SaturateAdmissibleArcs</a>() {
<a name="l00196"></a>00196   <span class="keywordflow">for</span> (<a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html" title="Iterator class for traversing the nodes in the graph.">StarGraph::NodeIterator</a> node_it(<a class="code" href="classoperations__research_1_1MinCostFlow.html#929b0fc48ad26837e13c01c19e3c63bd" title="A pointer to the graph passed as argument.">graph_</a>); node_it.Ok(); node_it.Next()) {
<a name="l00197"></a>00197     <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node = node_it.Index();
<a name="l00198"></a>00198     <span class="keywordflow">for</span> (<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html" title="Iterator class for traversing the arcs incident to a given node in the graph.">StarGraph::IncidentArcIterator</a>
<a name="l00199"></a>00199              arc_it(<a class="code" href="classoperations__research_1_1MinCostFlow.html#929b0fc48ad26837e13c01c19e3c63bd" title="A pointer to the graph passed as argument.">graph_</a>, node, <a class="code" href="classoperations__research_1_1MinCostFlow.html#c506600355b32d5fd8133fe92675fca3" title="A packed array representing the first admissible arc for each node in graph_.">first_admissible_arc_</a>[node]);
<a name="l00200"></a>00200          arc_it.Ok();
<a name="l00201"></a>00201          arc_it.Next()) {
<a name="l00202"></a>00202       <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc = arc_it.Index();
<a name="l00203"></a>00203       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1MinCostFlow.html#3023410b790705a89b5b091e2dd5403b" title="Returns true if arc is admissible i.e.">IsAdmissible</a>(arc)) {
<a name="l00204"></a>00204         VLOG(1) &lt;&lt; <a class="code" href="classoperations__research_1_1MinCostFlow.html#99984d96eeb01f3d710292ca60c0f481" title="Returns context concatenated with information about arc in a human-friendly way.">DebugString</a>(<span class="stringliteral">"SaturateAdmissibleArcs: calling PushFlow"</span>, arc);
<a name="l00205"></a>00205         <a class="code" href="classoperations__research_1_1MinCostFlow.html#12c8e6570cdddca62156fee32e08095e" title="Pushes flow on arc, i.e.">PushFlow</a>(<a class="code" href="classoperations__research_1_1MinCostFlow.html#f77d2b57e2e5a3bc20e9b4258fcac2a9" title="A packed array representing the residual_capacity for each arc in graph_.">residual_arc_capacity_</a>[arc], arc);
<a name="l00206"></a>00206       }
<a name="l00207"></a>00207     }
<a name="l00208"></a>00208   }
<a name="l00209"></a>00209 }
<a name="l00210"></a>00210 
<a name="l00211"></a><a class="code" href="classoperations__research_1_1MinCostFlow.html#12c8e6570cdddca62156fee32e08095e">00211</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinCostFlow.html#12c8e6570cdddca62156fee32e08095e" title="Pushes flow on arc, i.e.">MinCostFlow::PushFlow</a>(<a class="code" href="namespaceoperations__research.html#5841ff601ab08548afb15c45b2245de7">FlowQuantity</a> flow, <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc) {
<a name="l00212"></a>00212   DCHECK_GT(<a class="code" href="classoperations__research_1_1MinCostFlow.html#f77d2b57e2e5a3bc20e9b4258fcac2a9" title="A packed array representing the residual_capacity for each arc in graph_.">residual_arc_capacity_</a>[arc], 0);
<a name="l00213"></a>00213   VLOG(1) &lt;&lt; <span class="stringliteral">"PushFlow: pushing "</span> &lt;&lt; flow &lt;&lt; <span class="stringliteral">" on arc "</span> &lt;&lt; arc
<a name="l00214"></a>00214           &lt;&lt; <span class="stringliteral">" from node "</span> &lt;&lt; <a class="code" href="classoperations__research_1_1MinCostFlow.html#5084c093250a56e492a0dcceb4dcede7">Tail</a>(arc) &lt;&lt; <span class="stringliteral">" to node "</span> &lt;&lt; <a class="code" href="classoperations__research_1_1MinCostFlow.html#9d39f07a72c87d996e67fc79b6c6a3d4" title="Handy member functions to make the code more compact.">Head</a>(arc);
<a name="l00215"></a>00215   <span class="comment">// Reduce the residual capacity on arc by flow.</span>
<a name="l00216"></a>00216   <a class="code" href="classoperations__research_1_1MinCostFlow.html#f77d2b57e2e5a3bc20e9b4258fcac2a9" title="A packed array representing the residual_capacity for each arc in graph_.">residual_arc_capacity_</a>.Set(arc, <a class="code" href="classoperations__research_1_1MinCostFlow.html#f77d2b57e2e5a3bc20e9b4258fcac2a9" title="A packed array representing the residual_capacity for each arc in graph_.">residual_arc_capacity_</a>[arc] - flow);
<a name="l00217"></a>00217   <span class="comment">// Increase the residual capacity on opposite arc by flow.</span>
<a name="l00218"></a>00218   <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> opposite = <a class="code" href="classoperations__research_1_1MinCostFlow.html#74c014fa5bfc657a3bb1f9b44c28686d">Opposite</a>(arc);
<a name="l00219"></a>00219   <a class="code" href="classoperations__research_1_1MinCostFlow.html#f77d2b57e2e5a3bc20e9b4258fcac2a9" title="A packed array representing the residual_capacity for each arc in graph_.">residual_arc_capacity_</a>.Set(opposite, <a class="code" href="classoperations__research_1_1MinCostFlow.html#f77d2b57e2e5a3bc20e9b4258fcac2a9" title="A packed array representing the residual_capacity for each arc in graph_.">residual_arc_capacity_</a>[opposite] + flow);
<a name="l00220"></a>00220   <span class="comment">// Update the excesses at the tail and head of the arc.</span>
<a name="l00221"></a>00221   <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> tail = <a class="code" href="classoperations__research_1_1MinCostFlow.html#5084c093250a56e492a0dcceb4dcede7">Tail</a>(arc);
<a name="l00222"></a>00222   <a class="code" href="classoperations__research_1_1MinCostFlow.html#c3da3cb1d8ac4a4cee1f53aefb31b885" title="A packed array representing the supply (if &amp;gt; 0) or the demand (if &amp;lt; 0) for...">node_excess_</a>.Set(tail, <a class="code" href="classoperations__research_1_1MinCostFlow.html#c3da3cb1d8ac4a4cee1f53aefb31b885" title="A packed array representing the supply (if &amp;gt; 0) or the demand (if &amp;lt; 0) for...">node_excess_</a>[tail] - flow);
<a name="l00223"></a>00223   <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> head = <a class="code" href="classoperations__research_1_1MinCostFlow.html#9d39f07a72c87d996e67fc79b6c6a3d4" title="Handy member functions to make the code more compact.">Head</a>(arc);
<a name="l00224"></a>00224   <a class="code" href="classoperations__research_1_1MinCostFlow.html#c3da3cb1d8ac4a4cee1f53aefb31b885" title="A packed array representing the supply (if &amp;gt; 0) or the demand (if &amp;lt; 0) for...">node_excess_</a>.Set(head, <a class="code" href="classoperations__research_1_1MinCostFlow.html#c3da3cb1d8ac4a4cee1f53aefb31b885" title="A packed array representing the supply (if &amp;gt; 0) or the demand (if &amp;lt; 0) for...">node_excess_</a>[head] + flow);
<a name="l00225"></a>00225   VLOG(2) &lt;&lt; <a class="code" href="classoperations__research_1_1MinCostFlow.html#99984d96eeb01f3d710292ca60c0f481" title="Returns context concatenated with information about arc in a human-friendly way.">DebugString</a>(<span class="stringliteral">"PushFlow: "</span>, arc);
<a name="l00226"></a>00226 }
<a name="l00227"></a>00227 
<a name="l00228"></a><a class="code" href="classoperations__research_1_1MinCostFlow.html#f1a63ef951d833070d46b2613f2bb423">00228</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinCostFlow.html#f1a63ef951d833070d46b2613f2bb423" title="Initializes the stack active_nodes_.">MinCostFlow::InitializeActiveNodeStack</a>() {
<a name="l00229"></a>00229   CHECK(<a class="code" href="classoperations__research_1_1MinCostFlow.html#04c5427ff6da7decdea1a6e3e295fef8" title="A stack used for managing active nodes in the algorithm.">active_nodes_</a>.empty());
<a name="l00230"></a>00230   <span class="keywordflow">for</span> (<a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html" title="Iterator class for traversing the nodes in the graph.">StarGraph::NodeIterator</a> node_it(<a class="code" href="classoperations__research_1_1MinCostFlow.html#929b0fc48ad26837e13c01c19e3c63bd" title="A pointer to the graph passed as argument.">graph_</a>); node_it.Ok(); node_it.Next()) {
<a name="l00231"></a>00231     <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node = node_it.Index();
<a name="l00232"></a>00232     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1MinCostFlow.html#239228dc8ea0067f519d3715d554256f" title="Returns true if node is active, i.e. if its supply is positive.">IsActive</a>(node)) {
<a name="l00233"></a>00233       <a class="code" href="classoperations__research_1_1MinCostFlow.html#04c5427ff6da7decdea1a6e3e295fef8" title="A stack used for managing active nodes in the algorithm.">active_nodes_</a>.push(node);
<a name="l00234"></a>00234       VLOG(1) &lt;&lt; <span class="stringliteral">"InitializeActiveNodeStack: node "</span> &lt;&lt; node &lt;&lt; <span class="stringliteral">" added."</span>;
<a name="l00235"></a>00235     }
<a name="l00236"></a>00236   }
<a name="l00237"></a>00237 }
<a name="l00238"></a>00238 
<a name="l00239"></a><a class="code" href="classoperations__research_1_1MinCostFlow.html#ded90d207beae640b77b99d1038eb21f">00239</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinCostFlow.html#ded90d207beae640b77b99d1038eb21f" title="Performs an epsilon-optimization step by saturating admissible arcs and discharging...">MinCostFlow::Refine</a>() {
<a name="l00240"></a>00240   <a class="code" href="classoperations__research_1_1MinCostFlow.html#8e952e2b2456abee80510ee865f4d725" title="Saturates the admissible arcs, i.e. push as much flow as possible.">SaturateAdmissibleArcs</a>();
<a name="l00241"></a>00241   <a class="code" href="classoperations__research_1_1MinCostFlow.html#f1a63ef951d833070d46b2613f2bb423" title="Initializes the stack active_nodes_.">InitializeActiveNodeStack</a>();
<a name="l00242"></a>00242   <span class="keywordflow">while</span> (!<a class="code" href="classoperations__research_1_1MinCostFlow.html#04c5427ff6da7decdea1a6e3e295fef8" title="A stack used for managing active nodes in the algorithm.">active_nodes_</a>.empty()) {
<a name="l00243"></a>00243     <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node = <a class="code" href="classoperations__research_1_1MinCostFlow.html#04c5427ff6da7decdea1a6e3e295fef8" title="A stack used for managing active nodes in the algorithm.">active_nodes_</a>.top();
<a name="l00244"></a>00244     <a class="code" href="classoperations__research_1_1MinCostFlow.html#04c5427ff6da7decdea1a6e3e295fef8" title="A stack used for managing active nodes in the algorithm.">active_nodes_</a>.pop();
<a name="l00245"></a>00245     <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1MinCostFlow.html#239228dc8ea0067f519d3715d554256f" title="Returns true if node is active, i.e. if its supply is positive.">IsActive</a>(node)) {
<a name="l00246"></a>00246       VLOG(1) &lt;&lt; <span class="stringliteral">"Refine: calling Discharge for node "</span> &lt;&lt; node;
<a name="l00247"></a>00247       <a class="code" href="classoperations__research_1_1MinCostFlow.html#7ba2d2020bd8ed17b5378c10daee5184" title="Discharges an active node node by saturating its admissible adjacent arcs, if any...">Discharge</a>(node);
<a name="l00248"></a>00248     }
<a name="l00249"></a>00249   }
<a name="l00250"></a>00250 }
<a name="l00251"></a>00251 
<a name="l00252"></a><a class="code" href="classoperations__research_1_1MinCostFlow.html#7ba2d2020bd8ed17b5378c10daee5184">00252</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinCostFlow.html#7ba2d2020bd8ed17b5378c10daee5184" title="Discharges an active node node by saturating its admissible adjacent arcs, if any...">MinCostFlow::Discharge</a>(<a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node) {
<a name="l00253"></a>00253   DCHECK(<a class="code" href="classoperations__research_1_1MinCostFlow.html#239228dc8ea0067f519d3715d554256f" title="Returns true if node is active, i.e. if its supply is positive.">IsActive</a>(node));
<a name="l00254"></a>00254   VLOG(1) &lt;&lt; <span class="stringliteral">"Discharging node "</span> &lt;&lt; node &lt;&lt; <span class="stringliteral">", excess = "</span> &lt;&lt; <a class="code" href="classoperations__research_1_1MinCostFlow.html#c3da3cb1d8ac4a4cee1f53aefb31b885" title="A packed array representing the supply (if &amp;gt; 0) or the demand (if &amp;lt; 0) for...">node_excess_</a>[node];
<a name="l00255"></a>00255   <span class="keywordflow">while</span> (<a class="code" href="classoperations__research_1_1MinCostFlow.html#239228dc8ea0067f519d3715d554256f" title="Returns true if node is active, i.e. if its supply is positive.">IsActive</a>(node)) {
<a name="l00256"></a>00256     <span class="keywordflow">for</span> (<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html" title="Iterator class for traversing the arcs incident to a given node in the graph.">StarGraph::IncidentArcIterator</a> arc_it(<a class="code" href="classoperations__research_1_1MinCostFlow.html#929b0fc48ad26837e13c01c19e3c63bd" title="A pointer to the graph passed as argument.">graph_</a>, node,
<a name="l00257"></a>00257                                                <a class="code" href="classoperations__research_1_1MinCostFlow.html#c506600355b32d5fd8133fe92675fca3" title="A packed array representing the first admissible arc for each node in graph_.">first_admissible_arc_</a>[node]);
<a name="l00258"></a>00258          arc_it.Ok();
<a name="l00259"></a>00259          arc_it.Next()) {
<a name="l00260"></a>00260       <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc = arc_it.Index();
<a name="l00261"></a>00261       VLOG(2) &lt;&lt; <a class="code" href="classoperations__research_1_1MinCostFlow.html#99984d96eeb01f3d710292ca60c0f481" title="Returns context concatenated with information about arc in a human-friendly way.">DebugString</a>(<span class="stringliteral">"Discharge: considering"</span>, arc);
<a name="l00262"></a>00262       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1MinCostFlow.html#3023410b790705a89b5b091e2dd5403b" title="Returns true if arc is admissible i.e.">IsAdmissible</a>(arc)) {
<a name="l00263"></a>00263         <span class="keywordflow">if</span> (node_excess_[node] != 0) {
<a name="l00264"></a>00264           VLOG(1) &lt;&lt; <span class="stringliteral">"Discharge: calling PushFlow."</span>;
<a name="l00265"></a>00265           <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> head = <a class="code" href="classoperations__research_1_1MinCostFlow.html#9d39f07a72c87d996e67fc79b6c6a3d4" title="Handy member functions to make the code more compact.">Head</a>(arc);
<a name="l00266"></a>00266           <span class="keyword">const</span> <span class="keywordtype">bool</span> head_active_before_push = <a class="code" href="classoperations__research_1_1MinCostFlow.html#239228dc8ea0067f519d3715d554256f" title="Returns true if node is active, i.e. if its supply is positive.">IsActive</a>(head);
<a name="l00267"></a>00267           <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#5841ff601ab08548afb15c45b2245de7">FlowQuantity</a> delta = min(node_excess_[node],
<a name="l00268"></a>00268                                          <a class="code" href="classoperations__research_1_1MinCostFlow.html#f77d2b57e2e5a3bc20e9b4258fcac2a9" title="A packed array representing the residual_capacity for each arc in graph_.">residual_arc_capacity_</a>[arc]);
<a name="l00269"></a>00269           <a class="code" href="classoperations__research_1_1MinCostFlow.html#12c8e6570cdddca62156fee32e08095e" title="Pushes flow on arc, i.e.">PushFlow</a>(delta, arc);
<a name="l00270"></a>00270           <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1MinCostFlow.html#239228dc8ea0067f519d3715d554256f" title="Returns true if node is active, i.e. if its supply is positive.">IsActive</a>(head) &amp;&amp; !head_active_before_push) {
<a name="l00271"></a>00271             <a class="code" href="classoperations__research_1_1MinCostFlow.html#04c5427ff6da7decdea1a6e3e295fef8" title="A stack used for managing active nodes in the algorithm.">active_nodes_</a>.push(<a class="code" href="classoperations__research_1_1MinCostFlow.html#9d39f07a72c87d996e67fc79b6c6a3d4" title="Handy member functions to make the code more compact.">Head</a>(arc));
<a name="l00272"></a>00272           }
<a name="l00273"></a>00273         }
<a name="l00274"></a>00274         <span class="keywordflow">if</span> (node_excess_[node] == 0) {
<a name="l00275"></a>00275           <a class="code" href="classoperations__research_1_1MinCostFlow.html#c506600355b32d5fd8133fe92675fca3" title="A packed array representing the first admissible arc for each node in graph_.">first_admissible_arc_</a>.Set(node, arc);  <span class="comment">// arc may still be admissible.</span>
<a name="l00276"></a>00276           <span class="keywordflow">return</span>;
<a name="l00277"></a>00277         }
<a name="l00278"></a>00278       }
<a name="l00279"></a>00279     }
<a name="l00280"></a>00280     <a class="code" href="classoperations__research_1_1MinCostFlow.html#811c81434ca970a71e67d3362b93170e" title="Relabels node, i.e.">Relabel</a>(node);
<a name="l00281"></a>00281   }
<a name="l00282"></a>00282 }
<a name="l00283"></a>00283 
<a name="l00284"></a><a class="code" href="classoperations__research_1_1MinCostFlow.html#811c81434ca970a71e67d3362b93170e">00284</a> <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1MinCostFlow.html#811c81434ca970a71e67d3362b93170e" title="Relabels node, i.e.">MinCostFlow::Relabel</a>(<a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node) {
<a name="l00285"></a>00285   DCHECK(<a class="code" href="classoperations__research_1_1MinCostFlow.html#9bb7ac7903223d1b6bdcde79489075cc" title="Checks the relabel precondition, i.e.">CheckRelabelPrecondition</a>(node));
<a name="l00286"></a>00286   <a class="code" href="namespaceoperations__research.html#a7950685633ee869aa9471b2ec5fbcfa">CostValue</a> new_potential = <a class="code" href="classoperations__research_1_1MinCostFlow.html#a1bbe325ad84ebfa86c0aa8e3c59c969" title="A packed array representing the potential (or price function) for each node in graph_...">node_potential_</a>[node] - <a class="code" href="classoperations__research_1_1MinCostFlow.html#9085d084e1b75f58504968a470a04417" title="epsilon_ is the tolerance for optimality.">epsilon_</a>;
<a name="l00287"></a>00287   VLOG(1) &lt;&lt; <span class="stringliteral">"Relabel: node "</span> &lt;&lt; node &lt;&lt; <span class="stringliteral">" from "</span> &lt;&lt; <a class="code" href="classoperations__research_1_1MinCostFlow.html#a1bbe325ad84ebfa86c0aa8e3c59c969" title="A packed array representing the potential (or price function) for each node in graph_...">node_potential_</a>[node]
<a name="l00288"></a>00288           &lt;&lt; <span class="stringliteral">" to "</span> &lt;&lt; new_potential;
<a name="l00289"></a>00289   <a class="code" href="classoperations__research_1_1MinCostFlow.html#a1bbe325ad84ebfa86c0aa8e3c59c969" title="A packed array representing the potential (or price function) for each node in graph_...">node_potential_</a>.Set(node, new_potential);
<a name="l00290"></a>00290   <a class="code" href="classoperations__research_1_1MinCostFlow.html#c506600355b32d5fd8133fe92675fca3" title="A packed array representing the first admissible arc for each node in graph_.">first_admissible_arc_</a>.Set(node, <a class="code" href="classoperations__research_1_1MinCostFlow.html#e33f84219c12b15a7d312b8801a7ee06" title="Returns the first incident arc of node.">GetFirstIncidentArc</a>(node));
<a name="l00291"></a>00291 }
<a name="l00292"></a>00292 }  <span class="comment">// namespace operations_research</span>
</pre></div></div>

  <!-- Start of footer. -->
  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <tr valign=top>
      <td colspan=2 height=10></td>
    </tr>
    <tr valign=top>
      <td colspan=2 bgcolor=#389613 height=3></td>
    </tr>
  </table>

  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br />

  
  </body>
</html>
