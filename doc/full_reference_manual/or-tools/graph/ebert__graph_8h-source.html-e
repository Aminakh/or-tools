<!-- Good morning, Mr. Phelps. -->
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
    <title>google3/graph/ebert_graph.h Source File - Doxy</title>
    <link rel="shortcut icon" href="../../favicon.ico">
    <!-- Both stylesheets are supplied by Doxygen, with maybe minor tweaks from Google. -->
    <link href="../../doxygen.css" rel="stylesheet" type="text/css">
    <link href="../../tabs.css" rel="stylesheet" type="text/css">
  </head>

  <body topmargin=0 leftmargin=20 bottommargin=0 rightmargin=20 marginwidth=20 marginheight=0>
  <!-- Second part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
  <style>
    a.doxy_logo:hover {
      background-color: #389613
    }
  </style>

  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <!-- Top horizontal line with the color of the day. -->
    <tr valign=top>
      <td colspan=3 bgcolor=#389613 height=3></td>
    </tr>

    <!-- Header row with the links at the right. -->
    <tr valign=top>
      <td colspan=3 align=right>
        <font size=-1>
          Generated on: <font color=#389613><b>Fri Apr  1 14:13:18 PDT 2011</b></font>
            for <b>custom file set</b>
        </font>
      </td>
    </tr>

    <!-- Header row with the logo and the search form. -->
    <tr valign=top>
      <!-- Logo. -->
      <td align=left width=150>
        <table width=150 height=54 cellpadding=0 cellspacing=0 border=0>
          <tr valign=top>
            <!-- First part of the secret behind Doxy logo always having the word "Doxy" with the color of the day. -->
            <td bgcolor=#389613>
              <a class="doxy_logo" href="../../index.html"><img src="../../doxy_logo.png" alt="Doxy" border=0></a>
            </td>
          </tr>
        </table>
      </td>
    </tr>

    <!-- Tiny vertical space below the form. -->
    <tr valign=top>
      <td colspan=3 height=3></td>
    </tr>
  </table>

  <!-- Header navigation row. -->
  <div class="memproto">
    <table width=100% cellpadding=0 cellspacing=0 border=0>
      <tr>
        <td align=left style="padding-left: 20px"><font size=+1><b><tt><font color=#333333>//
            <a href="../../index.html"><font color=#389613>doxy</font></a>/</font>
            <a href="../../google3/index.html">google3</a>/
            <a href="../../google3/graph/index.html">graph</a>/
            </tt></b></font>
        </td>
      </tr>
    </table>
  </div>
  <br />
    <!-- No subdirs found. -->
  <!-- End of header. -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>google3/graph/ebert_graph.h</h1><a href="ebert__graph_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright 2010 Google</span>
<a name="l00002"></a>00002 <span class="comment">// Licensed under the Apache License, Version 2.0 (the "License");</span>
<a name="l00003"></a>00003 <span class="comment">// you may not use this file except in compliance with the License.</span>
<a name="l00004"></a>00004 <span class="comment">// You may obtain a copy of the License at</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">//     http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Unless required by applicable law or agreed to in writing, software</span>
<a name="l00009"></a>00009 <span class="comment">// distributed under the License is distributed on an "AS IS" BASIS,</span>
<a name="l00010"></a>00010 <span class="comment">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00011"></a>00011 <span class="comment">// See the License for the specific language governing permissions and</span>
<a name="l00012"></a>00012 <span class="comment">// limitations under the License.</span>
<a name="l00013"></a>00013 
<a name="l00014"></a>00014 <span class="preprocessor">#ifndef GRAPH_EBERT_GRAPH_H_</span>
<a name="l00015"></a>00015 <span class="preprocessor"></span><span class="preprocessor">#define GRAPH_EBERT_GRAPH_H_</span>
<a name="l00016"></a>00016 <span class="preprocessor"></span>
<a name="l00017"></a>00017 <span class="comment">// An implementation (with some improvements) of the star-representation of a</span>
<a name="l00018"></a>00018 <span class="comment">// graph as described in J. Ebert, "A versatile data structure for</span>
<a name="l00019"></a>00019 <span class="comment">// arc-oriented graph algorithms." Communications of the ACM 30(6):513-519</span>
<a name="l00020"></a>00020 <span class="comment">// (June 1987).</span>
<a name="l00021"></a>00021 <span class="comment">// Both forward- and backward-star representations are contained in this</span>
<a name="l00022"></a>00022 <span class="comment">// representation.</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="comment">// The graph is represented with three arrays.</span>
<a name="l00025"></a>00025 <span class="comment">// Let n be the number of nodes and m be the number of arcs.</span>
<a name="l00026"></a>00026 <span class="comment">// Let i be an integer in [1..m], denoting the index of an arc.</span>
<a name="l00027"></a>00027 <span class="comment">//  * node_[i] contains the end-node of arc i,</span>
<a name="l00028"></a>00028 <span class="comment">//  * node_[-i] contains the start-node of arc i.</span>
<a name="l00029"></a>00029 <span class="comment">// Consequently:</span>
<a name="l00030"></a>00030 <span class="comment">//  * node_[-i] contains the start-node of the arc reverse to arc i,</span>
<a name="l00031"></a>00031 <span class="comment">//  * node_[i] contains the end-node of the arc reverse to arc i.</span>
<a name="l00032"></a>00032 <span class="comment">//  Note that if arc (u,v) is defined, then the data structure also stores</span>
<a name="l00033"></a>00033 <span class="comment">//  (v, u).</span>
<a name="l00034"></a>00034 <span class="comment">//  Arc -i thus denotes the arc reverse to arc i.</span>
<a name="l00035"></a>00035 <span class="comment">//  This is what makes this representation useful for undirected graphs,</span>
<a name="l00036"></a>00036 <span class="comment">//  and for implementing algorithms like two-directions shortest-path.</span>
<a name="l00037"></a>00037 <span class="comment">//</span>
<a name="l00038"></a>00038 <span class="comment">// Now, for an integer u in [1..n] denoting the index of a node:</span>
<a name="l00039"></a>00039 <span class="comment">//  * first_incident_arc_[u] denotes the first arc in the adjacency list of u.</span>
<a name="l00040"></a>00040 <span class="comment">//  * going from an arc i, the adjacency list can be traversed using</span>
<a name="l00041"></a>00041 <span class="comment">//    j = next_adjacent_arc_[i].</span>
<a name="l00042"></a>00042 <span class="comment">//</span>
<a name="l00043"></a>00043 <span class="comment">// Note that arc index 0 is not used (because negative indices denote reverse</span>
<a name="l00044"></a>00044 <span class="comment">// arcs.) Therefore care must be taken about the fact that arc indices (and</span>
<a name="l00045"></a>00045 <span class="comment">// for consistency, node indices) start at 1.</span>
<a name="l00046"></a>00046 <span class="comment">//</span>
<a name="l00047"></a>00047 <span class="comment">// This implementation has the following benefits:</span>
<a name="l00048"></a>00048 <span class="comment">//  * It is able to handle both directed or undirected graphs.</span>
<a name="l00049"></a>00049 <span class="comment">//  * Being based on indices, it is easily serializable. Only the contents</span>
<a name="l00050"></a>00050 <span class="comment">//    of the node_ array needs to be stored.</span>
<a name="l00051"></a>00051 <span class="comment">//  * The sizes of node indices and arc indices can be specified in number of</span>
<a name="l00052"></a>00052 <span class="comment">//    bytes. For example, it is possible to store indices on 5 bytes or 40 bits,</span>
<a name="l00053"></a>00053 <span class="comment">//    which seems like a good compromise for the architectures of 2010. This</span>
<a name="l00054"></a>00054 <span class="comment">//    represents a 37.5% savings compared to a pointer-based implementation.</span>
<a name="l00055"></a>00055 <span class="comment">//    Taking into account the fact that no extra pointer to the reverse arc is</span>
<a name="l00056"></a>00056 <span class="comment">//    needed, only 80 bits are needed to store an arc instead of 192 bits if a</span>
<a name="l00057"></a>00057 <span class="comment">//    pointer-based representation were used.</span>
<a name="l00058"></a>00058 <span class="comment">//  * The representation can be recomputed if edges have been loaded from</span>
<a name="l00059"></a>00059 <span class="comment">//    external memory or if edges have been re-ordered.</span>
<a name="l00060"></a>00060 <span class="comment">//  * The memory consumption is: (2 * m + 1) * NodeIndexSize</span>
<a name="l00061"></a>00061 <span class="comment">//                             + (2 * m + 1) * ArcIndexSize</span>
<a name="l00062"></a>00062 <span class="comment">//                             + (n + 1) * ArcIndexSize</span>
<a name="l00063"></a>00063 <span class="comment">//</span>
<a name="l00064"></a>00064 <span class="comment">// The main drawback of this implementation is that the node and arc indices</span>
<a name="l00065"></a>00065 <span class="comment">// start at 1 instead of the usual 0 in C/C++.</span>
<a name="l00066"></a>00066 <span class="comment">//</span>
<a name="l00067"></a>00067 <span class="comment">// This implementation differs from the implementation described in [Ebert 1987]</span>
<a name="l00068"></a>00068 <span class="comment">// in the following respects:</span>
<a name="l00069"></a>00069 <span class="comment">//  * it is possible to add arcs to the graph, with AddArc, in a much simpler</span>
<a name="l00070"></a>00070 <span class="comment">//    way than described by Ebert.</span>
<a name="l00071"></a>00071 <span class="comment">//  * TODO(user) it is possible to group all the outgoing (resp. incoming) arcs</span>
<a name="l00072"></a>00072 <span class="comment">//    of a node to allow to traverse the outgoing (resp. incoming) arcs in</span>
<a name="l00073"></a>00073 <span class="comment">//    O(out_degree(node)) (resp. O(in_degree(node))) instead of O(degree(node)).</span>
<a name="l00074"></a>00074 <span class="comment">//  * TODO(user) it is possible to implement arc deletion and garbage collection</span>
<a name="l00075"></a>00075 <span class="comment">//    in an efficient (relatively) manner. For the time being we haven't seen an</span>
<a name="l00076"></a>00076 <span class="comment">//    application to this.</span>
<a name="l00077"></a>00077 <span class="comment">//  * TODO(user) implement "interleaved" version of this, with direct arcs having</span>
<a name="l00078"></a>00078 <span class="comment">//    even indices (2*i), and reverse arcs having odd indices (2*i+1). As</span>
<a name="l00079"></a>00079 <span class="comment">//    suggested by lhm this could have better cache properties. This has to be</span>
<a name="l00080"></a>00080 <span class="comment">//    validated on algorithms running with real data.</span>
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00083"></a>00083 <span class="preprocessor">#include &lt;limits&gt;</span>
<a name="l00084"></a>00084 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00085"></a>00085 <span class="preprocessor">#include "base/integral_types.h"</span>
<a name="l00086"></a>00086 <span class="preprocessor">#include "base/logging.h"</span>
<a name="l00087"></a>00087 <span class="preprocessor">#include "base/scoped_ptr.h"</span>
<a name="l00088"></a>00088 <span class="preprocessor">#include "base/stringprintf.h"</span>
<a name="l00089"></a>00089 <span class="preprocessor">#include "util/packed_array.h"</span>
<a name="l00090"></a>00090 
<a name="l00091"></a>00091 <span class="keyword">namespace </span>operations_research {
<a name="l00092"></a><a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">00092</a> <span class="keyword">typedef</span> int64 <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a>;
<a name="l00093"></a><a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">00093</a> <span class="keyword">typedef</span> int64 <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a>;
<a name="l00094"></a><a class="code" href="namespaceoperations__research.html#5841ff601ab08548afb15c45b2245de7">00094</a> <span class="keyword">typedef</span> int64 <a class="code" href="namespaceoperations__research.html#5841ff601ab08548afb15c45b2245de7">FlowQuantity</a>;
<a name="l00095"></a><a class="code" href="namespaceoperations__research.html#a7950685633ee869aa9471b2ec5fbcfa">00095</a> <span class="keyword">typedef</span> int64 <a class="code" href="namespaceoperations__research.html#a7950685633ee869aa9471b2ec5fbcfa">CostValue</a>;
<a name="l00096"></a>00096 
<a name="l00097"></a><a class="code" href="classoperations__research_1_1EbertGraph.html">00097</a> <span class="keyword">template</span>&lt;<span class="keywordtype">int</span> NodeIndexSize, <span class="keywordtype">int</span> ArcIndexSize&gt; <span class="keyword">class </span><a class="code" href="classoperations__research_1_1EbertGraph.html">EbertGraph</a> {
<a name="l00098"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#c5a1d2c6036b7ba1894a7c3b8d96a312">00098</a>   <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html" title="Iterator class for traversing the nodes in the graph.">NodeIterator</a>;
<a name="l00099"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#4eedbb511263e331cffe0fd241f4c349">00099</a>   <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html" title="Iterator class for traversing the arcs in the graph.">ArcIterator</a>;
<a name="l00100"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#400436e7b9782d8c2d395cd297805e9e">00100</a>   <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html" title="Iterator class for traversing the arcs incident to a given node in the graph.">IncidentArcIterator</a>;
<a name="l00101"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#4fedc2038f76b53b800106daba0c0a2d">00101</a>   <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html" title="Iterator class for traversing the outgoing arcs associated to a given node.">OutgoingArcIterator</a>;
<a name="l00102"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#da14d77ef95a739510ad81f4cf8db5fe">00102</a>   <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html" title="Iterator class for traversing the incoming arcs associated to a given node.">IncomingArcIterator</a>;
<a name="l00103"></a>00103  <span class="keyword">public</span>:
<a name="l00104"></a>00104   <span class="comment">// The index of the 'nil' node in the graph.</span>
<a name="l00105"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#719bc0f1c611924f2a295e6d13906190">00105</a>   <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#719bc0f1c611924f2a295e6d13906190" title="The index of the &amp;#39;nil&amp;#39; node in the graph.">kNilNode</a>;
<a name="l00106"></a>00106 
<a name="l00107"></a>00107   <span class="comment">// The index of the 'nil' arc in the graph.</span>
<a name="l00108"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#2cf0a089f017042eef0262e2ae0ef9a4">00108</a>   <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#2cf0a089f017042eef0262e2ae0ef9a4" title="The index of the &amp;#39;nil&amp;#39; arc in the graph.">kNilArc</a>;
<a name="l00109"></a>00109 
<a name="l00110"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#28194e1849ef2e47f7d2111716725a78">00110</a>   <a class="code" href="classoperations__research_1_1EbertGraph.html#28194e1849ef2e47f7d2111716725a78">EbertGraph</a>(<a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#443f465c65383c578a5116d1e3af9f38" title="Returns the maximum possible number of nodes in the graph.">max_num_nodes</a>, <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#db57706bbd6f5dd2199cdb425db06abe" title="Returns the maximum possible number of original arcs in the graph.">max_num_arcs</a>)
<a name="l00111"></a>00111       : <a class="code" href="classoperations__research_1_1EbertGraph.html#7f1010c890d39db72bb5f9e66d0c4de1" title="The maximum number of nodes that the graph can hold.">max_num_nodes_</a>(0),
<a name="l00112"></a>00112         <a class="code" href="classoperations__research_1_1EbertGraph.html#fe61810391f03e206808f69a58fe7cf8" title="The maximum number of arcs that the graph can hold.">max_num_arcs_</a>(0),
<a name="l00113"></a>00113         <a class="code" href="classoperations__research_1_1EbertGraph.html#2090056b33518cb093678d881e80062a" title="The maximum index of the node currently held by the graph.">num_nodes_</a>(0),
<a name="l00114"></a>00114         <a class="code" href="classoperations__research_1_1EbertGraph.html#c6aa41f3d68e44b807ed078401a68b8f" title="The current number of arcs held by the graph.">num_arcs_</a>(0),
<a name="l00115"></a>00115         <a class="code" href="classoperations__research_1_1EbertGraph.html#cf38430d9d1c654d14649edf210ee63a" title="Array of node indices. node_[i] contains the tail node of arc i.">node_</a>(),
<a name="l00116"></a>00116         <a class="code" href="classoperations__research_1_1EbertGraph.html#6704d5c5af83afe2a704a1293ede71db" title="Array of next indices.">next_adjacent_arc_</a>(),
<a name="l00117"></a>00117         <a class="code" href="classoperations__research_1_1EbertGraph.html#31b3b4a27154937a171d8e38c1cfd94c" title="Array of arc indices.">first_incident_arc_</a>() {
<a name="l00118"></a>00118     <a class="code" href="classoperations__research_1_1EbertGraph.html#2acf3de64a7dd003f86fb1fb8f1519b3" title="Reserve memory neeeded for max_num_nodes nodes and max_num_arcs arcs.">Reserve</a>(max_num_nodes, max_num_arcs);
<a name="l00119"></a>00119     <a class="code" href="classoperations__research_1_1EbertGraph.html#6704d5c5af83afe2a704a1293ede71db" title="Array of next indices.">next_adjacent_arc_</a>.Set(0, 0);
<a name="l00120"></a>00120     <a class="code" href="classoperations__research_1_1EbertGraph.html#cf38430d9d1c654d14649edf210ee63a" title="Array of node indices. node_[i] contains the tail node of arc i.">node_</a>.Set(0, 0);
<a name="l00121"></a>00121   }
<a name="l00122"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#44b1463a5b82395b80bf6a9d08f4d82a">00122</a>   <a class="code" href="classoperations__research_1_1EbertGraph.html#44b1463a5b82395b80bf6a9d08f4d82a">~EbertGraph</a>() {}
<a name="l00123"></a>00123 
<a name="l00124"></a>00124   <span class="comment">// Reserve memory neeeded for max_num_nodes nodes and max_num_arcs arcs.</span>
<a name="l00125"></a>00125   <span class="comment">// It can be used to enlarge the graph, but does not shrink memory</span>
<a name="l00126"></a>00126   <span class="comment">// if called with smaller values.</span>
<a name="l00127"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#2acf3de64a7dd003f86fb1fb8f1519b3">00127</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#2acf3de64a7dd003f86fb1fb8f1519b3" title="Reserve memory neeeded for max_num_nodes nodes and max_num_arcs arcs.">Reserve</a>(<a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> new_max_num_nodes, <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> new_max_num_arcs) {
<a name="l00128"></a>00128     CHECK_LE(1, new_max_num_nodes);
<a name="l00129"></a>00129     CHECK_LE(1, new_max_num_arcs);
<a name="l00130"></a>00130     <a class="code" href="classoperations__research_1_1EbertGraph.html#cf38430d9d1c654d14649edf210ee63a" title="Array of node indices. node_[i] contains the tail node of arc i.">node_</a>.Reserve(-new_max_num_arcs, new_max_num_arcs);
<a name="l00131"></a>00131     <a class="code" href="classoperations__research_1_1EbertGraph.html#6704d5c5af83afe2a704a1293ede71db" title="Array of next indices.">next_adjacent_arc_</a>.Reserve(-new_max_num_arcs, new_max_num_arcs);
<a name="l00132"></a>00132     <a class="code" href="classoperations__research_1_1EbertGraph.html#31b3b4a27154937a171d8e38c1cfd94c" title="Array of arc indices.">first_incident_arc_</a>.Reserve(<a class="code" href="classoperations__research_1_1EbertGraph.html#9004d9c1fbac4c326f21f90bdc3e3434" title="The index of the first node in the graph.">kFirstNode</a>, new_max_num_nodes);
<a name="l00133"></a>00133     <span class="keywordflow">for</span> (<a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node = <a class="code" href="classoperations__research_1_1EbertGraph.html#7f1010c890d39db72bb5f9e66d0c4de1" title="The maximum number of nodes that the graph can hold.">max_num_nodes_</a> + 1;
<a name="l00134"></a>00134          node &lt;= new_max_num_nodes;
<a name="l00135"></a>00135          ++node) {
<a name="l00136"></a>00136       <a class="code" href="classoperations__research_1_1EbertGraph.html#31b3b4a27154937a171d8e38c1cfd94c" title="Array of arc indices.">first_incident_arc_</a>.Set(node, 0);
<a name="l00137"></a>00137     }
<a name="l00138"></a>00138     <a class="code" href="classoperations__research_1_1EbertGraph.html#7f1010c890d39db72bb5f9e66d0c4de1" title="The maximum number of nodes that the graph can hold.">max_num_nodes_</a> = new_max_num_nodes;
<a name="l00139"></a>00139     <a class="code" href="classoperations__research_1_1EbertGraph.html#fe61810391f03e206808f69a58fe7cf8" title="The maximum number of arcs that the graph can hold.">max_num_arcs_</a> = new_max_num_arcs;
<a name="l00140"></a>00140   }
<a name="l00141"></a>00141 
<a name="l00142"></a>00142   <span class="comment">// Returns the number of nodes in the graph.</span>
<a name="l00143"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#9913def68b3deecb203994b8fa6340a3">00143</a>   <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#9913def68b3deecb203994b8fa6340a3" title="Returns the number of nodes in the graph.">num_nodes</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#2090056b33518cb093678d881e80062a" title="The maximum index of the node currently held by the graph.">num_nodes_</a>; }
<a name="l00144"></a>00144 
<a name="l00145"></a>00145   <span class="comment">// Returns the number of original arcs in the graph</span>
<a name="l00146"></a>00146   <span class="comment">// (The ones with positive indices.)</span>
<a name="l00147"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#24c9d43ac345d5b95a52ebec6eb68380">00147</a>   <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#24c9d43ac345d5b95a52ebec6eb68380" title="Returns the number of original arcs in the graph (The ones with positive indices...">num_arcs</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#c6aa41f3d68e44b807ed078401a68b8f" title="The current number of arcs held by the graph.">num_arcs_</a>; }
<a name="l00148"></a>00148 
<a name="l00149"></a>00149   <span class="comment">// Returns the maximum possible number of nodes in the graph.</span>
<a name="l00150"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#443f465c65383c578a5116d1e3af9f38">00150</a>   <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#443f465c65383c578a5116d1e3af9f38" title="Returns the maximum possible number of nodes in the graph.">max_num_nodes</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#7f1010c890d39db72bb5f9e66d0c4de1" title="The maximum number of nodes that the graph can hold.">max_num_nodes_</a>; }
<a name="l00151"></a>00151 
<a name="l00152"></a>00152   <span class="comment">// Returns the maximum possible number of original arcs in the graph.</span>
<a name="l00153"></a>00153   <span class="comment">// (The ones with positive indices.)</span>
<a name="l00154"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#db57706bbd6f5dd2199cdb425db06abe">00154</a>   <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#db57706bbd6f5dd2199cdb425db06abe" title="Returns the maximum possible number of original arcs in the graph.">max_num_arcs</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#fe61810391f03e206808f69a58fe7cf8" title="The maximum number of arcs that the graph can hold.">max_num_arcs_</a>; }
<a name="l00155"></a>00155 
<a name="l00156"></a>00156   <span class="comment">// Adds an arc to the graph and returns its index.</span>
<a name="l00157"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#c826a731614e0a1e2c4450dfaf02c543">00157</a>   <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#c826a731614e0a1e2c4450dfaf02c543" title="Adds an arc to the graph and returns its index.">AddArc</a>(<a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> tail, <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> head) {
<a name="l00158"></a>00158     CHECK_LE(<a class="code" href="classoperations__research_1_1EbertGraph.html#9004d9c1fbac4c326f21f90bdc3e3434" title="The index of the first node in the graph.">kFirstNode</a>, tail);
<a name="l00159"></a>00159     CHECK_GE(<a class="code" href="classoperations__research_1_1EbertGraph.html#7f1010c890d39db72bb5f9e66d0c4de1" title="The maximum number of nodes that the graph can hold.">max_num_nodes_</a>, tail);
<a name="l00160"></a>00160     CHECK_LE(<a class="code" href="classoperations__research_1_1EbertGraph.html#9004d9c1fbac4c326f21f90bdc3e3434" title="The index of the first node in the graph.">kFirstNode</a>, head);
<a name="l00161"></a>00161     CHECK_GE(<a class="code" href="classoperations__research_1_1EbertGraph.html#7f1010c890d39db72bb5f9e66d0c4de1" title="The maximum number of nodes that the graph can hold.">max_num_nodes_</a>, head);
<a name="l00162"></a>00162     CHECK_GT(<a class="code" href="classoperations__research_1_1EbertGraph.html#fe61810391f03e206808f69a58fe7cf8" title="The maximum number of arcs that the graph can hold.">max_num_arcs_</a>, <a class="code" href="classoperations__research_1_1EbertGraph.html#c6aa41f3d68e44b807ed078401a68b8f" title="The current number of arcs held by the graph.">num_arcs_</a>);
<a name="l00163"></a>00163     <a class="code" href="classoperations__research_1_1EbertGraph.html#2090056b33518cb093678d881e80062a" title="The maximum index of the node currently held by the graph.">num_nodes_</a> = std::max(<a class="code" href="classoperations__research_1_1EbertGraph.html#2090056b33518cb093678d881e80062a" title="The maximum index of the node currently held by the graph.">num_nodes_</a>, tail);
<a name="l00164"></a>00164     <a class="code" href="classoperations__research_1_1EbertGraph.html#2090056b33518cb093678d881e80062a" title="The maximum index of the node currently held by the graph.">num_nodes_</a> = std::max(<a class="code" href="classoperations__research_1_1EbertGraph.html#2090056b33518cb093678d881e80062a" title="The maximum index of the node currently held by the graph.">num_nodes_</a>, head);
<a name="l00165"></a>00165     ++<a class="code" href="classoperations__research_1_1EbertGraph.html#c6aa41f3d68e44b807ed078401a68b8f" title="The current number of arcs held by the graph.">num_arcs_</a>;
<a name="l00166"></a>00166     <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc = <a class="code" href="classoperations__research_1_1EbertGraph.html#c6aa41f3d68e44b807ed078401a68b8f" title="The current number of arcs held by the graph.">num_arcs_</a>;
<a name="l00167"></a>00167     <a class="code" href="classoperations__research_1_1EbertGraph.html#cf38430d9d1c654d14649edf210ee63a" title="Array of node indices. node_[i] contains the tail node of arc i.">node_</a>.Set(<a class="code" href="classoperations__research_1_1EbertGraph.html#9bc601f3ee5f7ab92cf17716f35f19a5" title="Returns the opposite arc, i.e the direct arc is the arc is in reverse direction,...">Opposite</a>(arc), tail);
<a name="l00168"></a>00168     <a class="code" href="classoperations__research_1_1EbertGraph.html#cf38430d9d1c654d14649edf210ee63a" title="Array of node indices. node_[i] contains the tail node of arc i.">node_</a>.Set(arc, head);
<a name="l00169"></a>00169     <a class="code" href="classoperations__research_1_1EbertGraph.html#8fd6178befb631f3bcf5175f0264d447" title="Utility method to attach a new arc.">Attach</a>(arc);
<a name="l00170"></a>00170     <span class="keywordflow">return</span> arc;
<a name="l00171"></a>00171   }
<a name="l00172"></a>00172 
<a name="l00173"></a>00173   <span class="comment">// Iterator class for traversing the nodes in the graph.</span>
<a name="l00174"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html">00174</a>   <span class="keyword">class </span><a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html" title="Iterator class for traversing the nodes in the graph.">NodeIterator</a> {
<a name="l00175"></a>00175    <span class="keyword">public</span>:
<a name="l00176"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html#4e4dbd5f84c2650ce44d3ae00024746e">00176</a>     <span class="keyword">explicit</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html#4e4dbd5f84c2650ce44d3ae00024746e">NodeIterator</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1EbertGraph.html">EbertGraph</a>&amp; graph)
<a name="l00177"></a>00177         : <a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html#1afd067abe4ef9cc5f373bf4951067b7" title="A reference to the current EbertGraph considered.">graph_</a>(graph), <a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html#510e62a1d87104c38b3489a0587b6434" title="The index of the current node considered.">node_</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html#1afd067abe4ef9cc5f373bf4951067b7" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#25f0ee816a76a3438adee2621d40a07a" title="Returns kNilNode if the graph has no nodes or node if it has at least one node.">StartNode</a>(<a class="code" href="classoperations__research_1_1EbertGraph.html#9004d9c1fbac4c326f21f90bdc3e3434" title="The index of the first node in the graph.">kFirstNode</a>)) {}
<a name="l00178"></a>00178 
<a name="l00179"></a>00179     <span class="comment">// Returns true unless all the nodes have been traversed.</span>
<a name="l00180"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html#c43cf5bfcd309bdc40c57832a0746dae">00180</a>     <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html#c43cf5bfcd309bdc40c57832a0746dae" title="Returns true unless all the nodes have been traversed.">Ok</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html#510e62a1d87104c38b3489a0587b6434" title="The index of the current node considered.">node_</a> != <a class="code" href="classoperations__research_1_1EbertGraph.html#719bc0f1c611924f2a295e6d13906190" title="The index of the &amp;#39;nil&amp;#39; node in the graph.">kNilNode</a>; }
<a name="l00181"></a>00181 
<a name="l00182"></a>00182     <span class="comment">// Advances the current node index.</span>
<a name="l00183"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html#f1edec6de2905b6d2319550c1c4adde1">00183</a>     <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html#f1edec6de2905b6d2319550c1c4adde1" title="Advances the current node index.">Next</a>() { <a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html#510e62a1d87104c38b3489a0587b6434" title="The index of the current node considered.">node_</a> = <a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html#1afd067abe4ef9cc5f373bf4951067b7" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#9cfc4062b49eb3757818e487683eb06d" title="Returns the node following the argument in the graph.">NextNode</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html#510e62a1d87104c38b3489a0587b6434" title="The index of the current node considered.">node_</a>); }
<a name="l00184"></a>00184 
<a name="l00185"></a>00185     <span class="comment">// Returns the index of the node currently pointed to by the iterator.</span>
<a name="l00186"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html#58593d5968133b84669aa1292f3e4e8d">00186</a>     <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html#58593d5968133b84669aa1292f3e4e8d" title="Returns the index of the node currently pointed to by the iterator.">Index</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html#510e62a1d87104c38b3489a0587b6434" title="The index of the current node considered.">node_</a>; }
<a name="l00187"></a>00187    <span class="keyword">private</span>:
<a name="l00188"></a>00188     <span class="comment">// A reference to the current EbertGraph considered.</span>
<a name="l00189"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html#1afd067abe4ef9cc5f373bf4951067b7">00189</a>     <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1EbertGraph.html">EbertGraph</a>&amp; <a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html#1afd067abe4ef9cc5f373bf4951067b7" title="A reference to the current EbertGraph considered.">graph_</a>;
<a name="l00190"></a>00190 
<a name="l00191"></a>00191     <span class="comment">// The index of the current node considered.</span>
<a name="l00192"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html#510e62a1d87104c38b3489a0587b6434">00192</a>     <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a>         <a class="code" href="classoperations__research_1_1EbertGraph_1_1NodeIterator.html#510e62a1d87104c38b3489a0587b6434" title="The index of the current node considered.">node_</a>;
<a name="l00193"></a>00193   };
<a name="l00194"></a>00194 
<a name="l00195"></a>00195   <span class="comment">// Iterator class for traversing the arcs in the graph.</span>
<a name="l00196"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html">00196</a>   <span class="keyword">class </span><a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html" title="Iterator class for traversing the arcs in the graph.">ArcIterator</a> {
<a name="l00197"></a>00197    <span class="keyword">public</span>:
<a name="l00198"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html#5136f5fcdfb4e3f6ffaaf73c10c74bed">00198</a>     <span class="keyword">explicit</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html#5136f5fcdfb4e3f6ffaaf73c10c74bed">ArcIterator</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1EbertGraph.html">EbertGraph</a>&amp; graph)
<a name="l00199"></a>00199         : <a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html#45659185b4dee1a25a4a322ecd092e70" title="A reference to the current EbertGraph considered.">graph_</a>(graph), <a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html#6f70ce0db2fd89499bdbc00168414bdf" title="The index of the current arc considered.">arc_</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html#45659185b4dee1a25a4a322ecd092e70" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#e4492415fdc63edb1d091a6921a7d9a7" title="Returns kNilArc if the graph has no arcs arc if it has at least one arc.">StartArc</a>(<a class="code" href="classoperations__research_1_1EbertGraph.html#d9d4850075f504fd32254b980aaaf2f4" title="The index of the first arc in the graph.">kFirstArc</a>)) {}
<a name="l00200"></a>00200 
<a name="l00201"></a>00201     <span class="comment">// Returns true unless all the arcs have been traversed.</span>
<a name="l00202"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html#0138f3847870b2591e8e0ef5133facec">00202</a>     <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html#0138f3847870b2591e8e0ef5133facec" title="Returns true unless all the arcs have been traversed.">Ok</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html#6f70ce0db2fd89499bdbc00168414bdf" title="The index of the current arc considered.">arc_</a> != <a class="code" href="classoperations__research_1_1EbertGraph.html#2cf0a089f017042eef0262e2ae0ef9a4" title="The index of the &amp;#39;nil&amp;#39; arc in the graph.">kNilArc</a>; }
<a name="l00203"></a>00203 
<a name="l00204"></a>00204     <span class="comment">// Advances the current arc index.</span>
<a name="l00205"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html#65d2e288f22baff16e2bd319fc9d36db">00205</a>     <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html#65d2e288f22baff16e2bd319fc9d36db" title="Advances the current arc index.">Next</a>() { <a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html#6f70ce0db2fd89499bdbc00168414bdf" title="The index of the current arc considered.">arc_</a> = <a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html#45659185b4dee1a25a4a322ecd092e70" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#2ba4161520deaf8d59b4a99baae5df69" title="Returns the arc following the argument in the graph.">NextArc</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html#6f70ce0db2fd89499bdbc00168414bdf" title="The index of the current arc considered.">arc_</a>); }
<a name="l00206"></a>00206 
<a name="l00207"></a>00207     <span class="comment">// Returns the index of the arc currently pointed to by the iterator.</span>
<a name="l00208"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html#bc8ad24be65a6e39cd879b05be40fcf0">00208</a>     <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html#bc8ad24be65a6e39cd879b05be40fcf0" title="Returns the index of the arc currently pointed to by the iterator.">Index</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html#6f70ce0db2fd89499bdbc00168414bdf" title="The index of the current arc considered.">arc_</a>; }
<a name="l00209"></a>00209    <span class="keyword">private</span>:
<a name="l00210"></a>00210     <span class="comment">// A reference to the current EbertGraph considered.</span>
<a name="l00211"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html#45659185b4dee1a25a4a322ecd092e70">00211</a>     <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1EbertGraph.html">EbertGraph</a>&amp; <a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html#45659185b4dee1a25a4a322ecd092e70" title="A reference to the current EbertGraph considered.">graph_</a>;
<a name="l00212"></a>00212 
<a name="l00213"></a>00213     <span class="comment">// The index of the current arc considered.</span>
<a name="l00214"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html#6f70ce0db2fd89499bdbc00168414bdf">00214</a>     <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a>          <a class="code" href="classoperations__research_1_1EbertGraph_1_1ArcIterator.html#6f70ce0db2fd89499bdbc00168414bdf" title="The index of the current arc considered.">arc_</a>;
<a name="l00215"></a>00215   };
<a name="l00216"></a>00216 
<a name="l00217"></a>00217   <span class="comment">// Iterator class for traversing the arcs incident to a given node in the</span>
<a name="l00218"></a>00218   <span class="comment">// graph.</span>
<a name="l00219"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html">00219</a>   <span class="keyword">class </span><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html" title="Iterator class for traversing the arcs incident to a given node in the graph.">IncidentArcIterator</a> {
<a name="l00220"></a>00220    <span class="keyword">public</span>:
<a name="l00221"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#cdda0cb7bd331fda9985f1ca17f4b12f">00221</a>     <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#cdda0cb7bd331fda9985f1ca17f4b12f">IncidentArcIterator</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1EbertGraph.html">EbertGraph</a>&amp; graph, <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node)
<a name="l00222"></a>00222         : <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#8563b19372560431aec10123f40c16c6" title="A reference to the current EbertGraph considered.">graph_</a>(graph),
<a name="l00223"></a>00223           <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#e10f49ae474a5abcbda51aa932c4cf7c" title="The index of the node on which arcs are iterated.">node_</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#8563b19372560431aec10123f40c16c6" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#25f0ee816a76a3438adee2621d40a07a" title="Returns kNilNode if the graph has no nodes or node if it has at least one node.">StartNode</a>(node)),
<a name="l00224"></a>00224           <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#0db6336d84c484ce695df868182ba96a" title="The index of the current arc considered.">arc_</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#8563b19372560431aec10123f40c16c6" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#e4492415fdc63edb1d091a6921a7d9a7" title="Returns kNilArc if the graph has no arcs arc if it has at least one arc.">StartArc</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#8563b19372560431aec10123f40c16c6" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#d706c6970f41577e4bea98d5d04678fc" title="Returns the first arc in node&amp;#39;s incidence list.">FirstIncidentArc</a>(node))) {
<a name="l00225"></a>00225       DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#c69f817994126e56d602eb9cec30fc21" title="Returns true if the invariant for the iterator is verified.">CheckInvariant</a>());
<a name="l00226"></a>00226     }
<a name="l00227"></a>00227 
<a name="l00228"></a>00228     <span class="comment">// This constructor takes an arc as extra argument and makes the iterator</span>
<a name="l00229"></a>00229     <span class="comment">// start at arc.</span>
<a name="l00230"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#7bd349bd67b8bb355ab735c15efb675a">00230</a>     <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#cdda0cb7bd331fda9985f1ca17f4b12f">IncidentArcIterator</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1EbertGraph.html">EbertGraph</a>&amp; graph, <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node, <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc)
<a name="l00231"></a>00231         : <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#8563b19372560431aec10123f40c16c6" title="A reference to the current EbertGraph considered.">graph_</a>(graph),
<a name="l00232"></a>00232           <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#e10f49ae474a5abcbda51aa932c4cf7c" title="The index of the node on which arcs are iterated.">node_</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#8563b19372560431aec10123f40c16c6" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#25f0ee816a76a3438adee2621d40a07a" title="Returns kNilNode if the graph has no nodes or node if it has at least one node.">StartNode</a>(node)),
<a name="l00233"></a>00233           <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#0db6336d84c484ce695df868182ba96a" title="The index of the current arc considered.">arc_</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#8563b19372560431aec10123f40c16c6" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#e4492415fdc63edb1d091a6921a7d9a7" title="Returns kNilArc if the graph has no arcs arc if it has at least one arc.">StartArc</a>(arc)) {
<a name="l00234"></a>00234       DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#c69f817994126e56d602eb9cec30fc21" title="Returns true if the invariant for the iterator is verified.">CheckInvariant</a>());
<a name="l00235"></a>00235     }
<a name="l00236"></a>00236 
<a name="l00237"></a>00237     <span class="comment">// Returns true unless all the adjancent arcs have been traversed.</span>
<a name="l00238"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#357a9c32cb0bb9f1d850f4244059ba5e">00238</a>     <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#357a9c32cb0bb9f1d850f4244059ba5e" title="Returns true unless all the adjancent arcs have been traversed.">Ok</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#0db6336d84c484ce695df868182ba96a" title="The index of the current arc considered.">arc_</a> != <a class="code" href="classoperations__research_1_1EbertGraph.html#2cf0a089f017042eef0262e2ae0ef9a4" title="The index of the &amp;#39;nil&amp;#39; arc in the graph.">kNilArc</a>; }
<a name="l00239"></a>00239 
<a name="l00240"></a>00240     <span class="comment">// Advances the current adjacent arc index.</span>
<a name="l00241"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#1272fe6bb9d33d2305380c968f46c2f1">00241</a>     <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#1272fe6bb9d33d2305380c968f46c2f1" title="Advances the current adjacent arc index.">Next</a>() {
<a name="l00242"></a>00242       <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#0db6336d84c484ce695df868182ba96a" title="The index of the current arc considered.">arc_</a> = <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#8563b19372560431aec10123f40c16c6" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#0f821f30efa8b6b4c5f9d1bcf32c11ca" title="Returns the next arc following the passed argument in its adjacency list.">NextAdjacentArc</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#0db6336d84c484ce695df868182ba96a" title="The index of the current arc considered.">arc_</a>);
<a name="l00243"></a>00243       DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#c69f817994126e56d602eb9cec30fc21" title="Returns true if the invariant for the iterator is verified.">CheckInvariant</a>());
<a name="l00244"></a>00244     }
<a name="l00245"></a>00245 
<a name="l00246"></a>00246     <span class="comment">// Returns the index of the arc currently pointed to by the iterator.</span>
<a name="l00247"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#d1282bd4fd6f77b0bceb9384bfce341c">00247</a>     <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#d1282bd4fd6f77b0bceb9384bfce341c" title="Returns the index of the arc currently pointed to by the iterator.">Index</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#0db6336d84c484ce695df868182ba96a" title="The index of the current arc considered.">arc_</a>; }
<a name="l00248"></a>00248    <span class="keyword">private</span>:
<a name="l00249"></a>00249     <span class="comment">// Returns true if the invariant for the iterator is verified.</span>
<a name="l00250"></a>00250     <span class="comment">// To be used in a DCHECK.</span>
<a name="l00251"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#c69f817994126e56d602eb9cec30fc21">00251</a>     <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#c69f817994126e56d602eb9cec30fc21" title="Returns true if the invariant for the iterator is verified.">CheckInvariant</a>()<span class="keyword"> const </span>{
<a name="l00252"></a>00252       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#0db6336d84c484ce695df868182ba96a" title="The index of the current arc considered.">arc_</a> == <a class="code" href="classoperations__research_1_1EbertGraph.html#2cf0a089f017042eef0262e2ae0ef9a4" title="The index of the &amp;#39;nil&amp;#39; arc in the graph.">kNilArc</a>) {
<a name="l00253"></a>00253         <span class="keywordflow">return</span> <span class="keyword">true</span>;  <span class="comment">// This occurs when the iterator has reached the end.</span>
<a name="l00254"></a>00254       }
<a name="l00255"></a>00255       CHECK(<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#8563b19372560431aec10123f40c16c6" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#010008ecaf23112b48b2ea1cb10bcc38" title="Returns true if arc is incident to node.">IsIncident</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#0db6336d84c484ce695df868182ba96a" title="The index of the current arc considered.">arc_</a>, <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#e10f49ae474a5abcbda51aa932c4cf7c" title="The index of the node on which arcs are iterated.">node_</a>));
<a name="l00256"></a>00256       <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00257"></a>00257     }
<a name="l00258"></a>00258     <span class="comment">// A reference to the current EbertGraph considered.</span>
<a name="l00259"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#8563b19372560431aec10123f40c16c6">00259</a>     <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1EbertGraph.html">EbertGraph</a>&amp; <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#8563b19372560431aec10123f40c16c6" title="A reference to the current EbertGraph considered.">graph_</a>;
<a name="l00260"></a>00260 
<a name="l00261"></a>00261       <span class="comment">// The index of the node on which arcs are iterated.</span>
<a name="l00262"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#e10f49ae474a5abcbda51aa932c4cf7c">00262</a>     <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a>         <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#e10f49ae474a5abcbda51aa932c4cf7c" title="The index of the node on which arcs are iterated.">node_</a>;
<a name="l00263"></a>00263 
<a name="l00264"></a>00264     <span class="comment">// The index of the current arc considered.</span>
<a name="l00265"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#0db6336d84c484ce695df868182ba96a">00265</a>     <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a>          <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncidentArcIterator.html#0db6336d84c484ce695df868182ba96a" title="The index of the current arc considered.">arc_</a>;
<a name="l00266"></a>00266   };
<a name="l00267"></a>00267 
<a name="l00268"></a>00268   <span class="comment">// Iterator class for traversing the incoming arcs associated to a given node.</span>
<a name="l00269"></a>00269   <span class="comment">// Note that the indices of these arc are negative, i.e. it's actually</span>
<a name="l00270"></a>00270   <span class="comment">// their corresponding direct arcs that are incoming to the node.</span>
<a name="l00271"></a>00271   <span class="comment">// The API has been designed in this way to have the set of arcs iterated</span>
<a name="l00272"></a>00272   <span class="comment">// by IncidentArcIterator to be the union of the sets of arcs iterated by</span>
<a name="l00273"></a>00273   <span class="comment">// IncomingArcIterator and OutgoingArcIterator.</span>
<a name="l00274"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html">00274</a>   <span class="keyword">class </span><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html" title="Iterator class for traversing the incoming arcs associated to a given node.">IncomingArcIterator</a> {
<a name="l00275"></a>00275    <span class="keyword">public</span>:
<a name="l00276"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#05d0de5f459abaab314d1f542dcf7d42">00276</a>     <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#05d0de5f459abaab314d1f542dcf7d42">IncomingArcIterator</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1EbertGraph.html">EbertGraph</a>&amp; graph, <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node)
<a name="l00277"></a>00277         : <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#0cb2bb210dc8794af575fa04cfc9edae" title="A reference to the current EbertGraph considered.">graph_</a>(graph),
<a name="l00278"></a>00278           <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#88cdcf106362d9ea55136db55b260f6b" title="The index of the node on which arcs are iterated.">node_</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#0cb2bb210dc8794af575fa04cfc9edae" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#25f0ee816a76a3438adee2621d40a07a" title="Returns kNilNode if the graph has no nodes or node if it has at least one node.">StartNode</a>(node)),
<a name="l00279"></a>00279           <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#215f7861c1898160c972c09283e95a88" title="The index of the current arc considered.">arc_</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#0cb2bb210dc8794af575fa04cfc9edae" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#e4492415fdc63edb1d091a6921a7d9a7" title="Returns kNilArc if the graph has no arcs arc if it has at least one arc.">StartArc</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#0cb2bb210dc8794af575fa04cfc9edae" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#8314f0f15a93eb16adbeee93602545ab" title="Returns the first incoming arc for node.">FirstIncomingArc</a>(node))) {
<a name="l00280"></a>00280       DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#73b439d221abc894dfecb3332280f9e3" title="Returns true if the invariant for the iterator is verified.">CheckInvariant</a>());
<a name="l00281"></a>00281     }
<a name="l00282"></a>00282 
<a name="l00283"></a>00283     <span class="comment">// This constructor takes an arc as extra argument and makes the iterator</span>
<a name="l00284"></a>00284     <span class="comment">// start at arc.</span>
<a name="l00285"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#d41c58f430ae6bca4587597868b96e50">00285</a>     <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#05d0de5f459abaab314d1f542dcf7d42">IncomingArcIterator</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1EbertGraph.html">EbertGraph</a>&amp; graph, <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node, <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc)
<a name="l00286"></a>00286         : <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#0cb2bb210dc8794af575fa04cfc9edae" title="A reference to the current EbertGraph considered.">graph_</a>(graph),
<a name="l00287"></a>00287           <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#88cdcf106362d9ea55136db55b260f6b" title="The index of the node on which arcs are iterated.">node_</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#0cb2bb210dc8794af575fa04cfc9edae" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#25f0ee816a76a3438adee2621d40a07a" title="Returns kNilNode if the graph has no nodes or node if it has at least one node.">StartNode</a>(node)),
<a name="l00288"></a>00288           <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#215f7861c1898160c972c09283e95a88" title="The index of the current arc considered.">arc_</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#0cb2bb210dc8794af575fa04cfc9edae" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#e4492415fdc63edb1d091a6921a7d9a7" title="Returns kNilArc if the graph has no arcs arc if it has at least one arc.">StartArc</a>(arc)) {
<a name="l00289"></a>00289       DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#73b439d221abc894dfecb3332280f9e3" title="Returns true if the invariant for the iterator is verified.">CheckInvariant</a>());
<a name="l00290"></a>00290     }
<a name="l00291"></a>00291 
<a name="l00292"></a>00292     <span class="comment">// Returns true unless all the incoming arcs have been traversed.</span>
<a name="l00293"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#a989521e52c59ac1ec29199874f0f037">00293</a>     <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#a989521e52c59ac1ec29199874f0f037" title="Returns true unless all the incoming arcs have been traversed.">Ok</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#215f7861c1898160c972c09283e95a88" title="The index of the current arc considered.">arc_</a> != <a class="code" href="classoperations__research_1_1EbertGraph.html#2cf0a089f017042eef0262e2ae0ef9a4" title="The index of the &amp;#39;nil&amp;#39; arc in the graph.">kNilArc</a>; }
<a name="l00294"></a>00294 
<a name="l00295"></a>00295     <span class="comment">// Advances the current incoming arc index.</span>
<a name="l00296"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#990956dd2efa1a5adc2f513eea31b426">00296</a>     <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#990956dd2efa1a5adc2f513eea31b426" title="Advances the current incoming arc index.">Next</a>() {
<a name="l00297"></a>00297       <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#215f7861c1898160c972c09283e95a88" title="The index of the current arc considered.">arc_</a> = <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#0cb2bb210dc8794af575fa04cfc9edae" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#420a9d5c7ac48df506a22cc88aaab8b7" title="Returns the incoming arc following the argument in the adjacency list.">NextIncomingArc</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#215f7861c1898160c972c09283e95a88" title="The index of the current arc considered.">arc_</a>);
<a name="l00298"></a>00298       DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#73b439d221abc894dfecb3332280f9e3" title="Returns true if the invariant for the iterator is verified.">CheckInvariant</a>());
<a name="l00299"></a>00299     }
<a name="l00300"></a>00300 
<a name="l00301"></a>00301     <span class="comment">// Returns the index of the arc currently pointed to by the iterator.</span>
<a name="l00302"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#319db558d0b05ca7a972c099d9c7e1da">00302</a>     <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#319db558d0b05ca7a972c099d9c7e1da" title="Returns the index of the arc currently pointed to by the iterator.">Index</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#215f7861c1898160c972c09283e95a88" title="The index of the current arc considered.">arc_</a>; }
<a name="l00303"></a>00303 
<a name="l00304"></a>00304    <span class="keyword">private</span>:
<a name="l00305"></a>00305     <span class="comment">// Returns true if the invariant for the iterator is verified.</span>
<a name="l00306"></a>00306     <span class="comment">// To be used in a DCHECK.</span>
<a name="l00307"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#73b439d221abc894dfecb3332280f9e3">00307</a>     <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#73b439d221abc894dfecb3332280f9e3" title="Returns true if the invariant for the iterator is verified.">CheckInvariant</a>()<span class="keyword"> const </span>{
<a name="l00308"></a>00308       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#215f7861c1898160c972c09283e95a88" title="The index of the current arc considered.">arc_</a> == <a class="code" href="classoperations__research_1_1EbertGraph.html#2cf0a089f017042eef0262e2ae0ef9a4" title="The index of the &amp;#39;nil&amp;#39; arc in the graph.">kNilArc</a>) {
<a name="l00309"></a>00309         <span class="keywordflow">return</span> <span class="keyword">true</span>;  <span class="comment">// This occurs when the iterator has reached the end.</span>
<a name="l00310"></a>00310       }
<a name="l00311"></a>00311       CHECK(<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#0cb2bb210dc8794af575fa04cfc9edae" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#be70a6c29fa628e81ac7c5012d36c673" title="Returns true if arc is incoming to node.">IsIncoming</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#215f7861c1898160c972c09283e95a88" title="The index of the current arc considered.">arc_</a>, <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#88cdcf106362d9ea55136db55b260f6b" title="The index of the node on which arcs are iterated.">node_</a>));
<a name="l00312"></a>00312       <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00313"></a>00313     }
<a name="l00314"></a>00314     <span class="comment">// A reference to the current EbertGraph considered.</span>
<a name="l00315"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#0cb2bb210dc8794af575fa04cfc9edae">00315</a>     <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1EbertGraph.html">EbertGraph</a>&amp; <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#0cb2bb210dc8794af575fa04cfc9edae" title="A reference to the current EbertGraph considered.">graph_</a>;
<a name="l00316"></a>00316 
<a name="l00317"></a>00317     <span class="comment">// The index of the node on which arcs are iterated.</span>
<a name="l00318"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#88cdcf106362d9ea55136db55b260f6b">00318</a>     <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a>         <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#88cdcf106362d9ea55136db55b260f6b" title="The index of the node on which arcs are iterated.">node_</a>;
<a name="l00319"></a>00319 
<a name="l00320"></a>00320     <span class="comment">// The index of the current arc considered.</span>
<a name="l00321"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#215f7861c1898160c972c09283e95a88">00321</a>     <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a>          <a class="code" href="classoperations__research_1_1EbertGraph_1_1IncomingArcIterator.html#215f7861c1898160c972c09283e95a88" title="The index of the current arc considered.">arc_</a>;
<a name="l00322"></a>00322   };
<a name="l00323"></a>00323 
<a name="l00324"></a>00324   <span class="comment">// Iterator class for traversing the outgoing arcs associated to a given node.</span>
<a name="l00325"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html">00325</a>   <span class="keyword">class </span><a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html" title="Iterator class for traversing the outgoing arcs associated to a given node.">OutgoingArcIterator</a> {
<a name="l00326"></a>00326    <span class="keyword">public</span>:
<a name="l00327"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#65fe3003782bd43632580eba07d409b1">00327</a>     <a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#65fe3003782bd43632580eba07d409b1">OutgoingArcIterator</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1EbertGraph.html">EbertGraph</a>&amp; graph, <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node)
<a name="l00328"></a>00328         : <a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#22f39d927b94009fadbf1d1fc6ad8fc9" title="A reference to the current EbertGraph considered.">graph_</a>(graph),
<a name="l00329"></a>00329           <a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#00348d0ecc71cd23f7c01d21268be0e1" title="The index of the node on which arcs are iterated.">node_</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#22f39d927b94009fadbf1d1fc6ad8fc9" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#25f0ee816a76a3438adee2621d40a07a" title="Returns kNilNode if the graph has no nodes or node if it has at least one node.">StartNode</a>(node)),
<a name="l00330"></a>00330           <a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#15d36c6fd29cdf038e2ba784a0e4f627" title="The index of the current arc considered.">arc_</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#22f39d927b94009fadbf1d1fc6ad8fc9" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#e4492415fdc63edb1d091a6921a7d9a7" title="Returns kNilArc if the graph has no arcs arc if it has at least one arc.">StartArc</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#22f39d927b94009fadbf1d1fc6ad8fc9" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#a809b3a25c2ed29322972a08af352c1e" title="Returns the first outgoing arc for node.">FirstOutgoingArc</a>(node))) {
<a name="l00331"></a>00331       DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#ef2dcd34b4faede90442bfe1f7410e3d" title="Returns true if the invariant for the iterator is verified.">CheckInvariant</a>());
<a name="l00332"></a>00332     }
<a name="l00333"></a>00333 
<a name="l00334"></a>00334     <span class="comment">// This constructor takes an arc as extra argument and makes the iterator</span>
<a name="l00335"></a>00335     <span class="comment">// start at arc.</span>
<a name="l00336"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#506b88c4fdaf8a420acdcc6e69c36b71">00336</a>     <a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#65fe3003782bd43632580eba07d409b1">OutgoingArcIterator</a>(<span class="keyword">const</span> <a class="code" href="classoperations__research_1_1EbertGraph.html">EbertGraph</a>&amp; graph, <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node, <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc)
<a name="l00337"></a>00337         : <a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#22f39d927b94009fadbf1d1fc6ad8fc9" title="A reference to the current EbertGraph considered.">graph_</a>(graph),
<a name="l00338"></a>00338           <a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#00348d0ecc71cd23f7c01d21268be0e1" title="The index of the node on which arcs are iterated.">node_</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#22f39d927b94009fadbf1d1fc6ad8fc9" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#25f0ee816a76a3438adee2621d40a07a" title="Returns kNilNode if the graph has no nodes or node if it has at least one node.">StartNode</a>(node)),
<a name="l00339"></a>00339           <a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#15d36c6fd29cdf038e2ba784a0e4f627" title="The index of the current arc considered.">arc_</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#22f39d927b94009fadbf1d1fc6ad8fc9" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#e4492415fdc63edb1d091a6921a7d9a7" title="Returns kNilArc if the graph has no arcs arc if it has at least one arc.">StartArc</a>(arc)) {
<a name="l00340"></a>00340       DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#ef2dcd34b4faede90442bfe1f7410e3d" title="Returns true if the invariant for the iterator is verified.">CheckInvariant</a>());
<a name="l00341"></a>00341     }
<a name="l00342"></a>00342 
<a name="l00343"></a>00343     <span class="comment">// Returns true unless all the outgoing arcs have been traversed.</span>
<a name="l00344"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#7c533b769ad9f4f6ecb05a234c7a8e36">00344</a>     <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#7c533b769ad9f4f6ecb05a234c7a8e36" title="Returns true unless all the outgoing arcs have been traversed.">Ok</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#15d36c6fd29cdf038e2ba784a0e4f627" title="The index of the current arc considered.">arc_</a> != <a class="code" href="classoperations__research_1_1EbertGraph.html#2cf0a089f017042eef0262e2ae0ef9a4" title="The index of the &amp;#39;nil&amp;#39; arc in the graph.">kNilArc</a>; }
<a name="l00345"></a>00345 
<a name="l00346"></a>00346     <span class="comment">// Advances the current outgoing arc index.</span>
<a name="l00347"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#a5c5d5c6bf7a26c4e45882c6b3224248">00347</a>     <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#a5c5d5c6bf7a26c4e45882c6b3224248" title="Advances the current outgoing arc index.">Next</a>() {
<a name="l00348"></a>00348       <a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#15d36c6fd29cdf038e2ba784a0e4f627" title="The index of the current arc considered.">arc_</a> = <a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#22f39d927b94009fadbf1d1fc6ad8fc9" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#deadd5532b72461f6db6695b6ad01d07" title="Returns the outgoing arc following the argument in the adjacency list.">NextOutgoingArc</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#15d36c6fd29cdf038e2ba784a0e4f627" title="The index of the current arc considered.">arc_</a>);
<a name="l00349"></a>00349       DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#ef2dcd34b4faede90442bfe1f7410e3d" title="Returns true if the invariant for the iterator is verified.">CheckInvariant</a>());
<a name="l00350"></a>00350     }
<a name="l00351"></a>00351 
<a name="l00352"></a>00352     <span class="comment">// Returns the index of the arc currently pointed to by the iterator.</span>
<a name="l00353"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#e287a34fee9dd62bc6fd9402ac7e47d1">00353</a>     <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#e287a34fee9dd62bc6fd9402ac7e47d1" title="Returns the index of the arc currently pointed to by the iterator.">Index</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#15d36c6fd29cdf038e2ba784a0e4f627" title="The index of the current arc considered.">arc_</a>; }
<a name="l00354"></a>00354    <span class="keyword">private</span>:
<a name="l00355"></a>00355     <span class="comment">// Returns true if the invariant for the iterator is verified.</span>
<a name="l00356"></a>00356     <span class="comment">// To be used in a DCHECK.</span>
<a name="l00357"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#ef2dcd34b4faede90442bfe1f7410e3d">00357</a>     <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#ef2dcd34b4faede90442bfe1f7410e3d" title="Returns true if the invariant for the iterator is verified.">CheckInvariant</a>()<span class="keyword"> const </span>{
<a name="l00358"></a>00358       <span class="keywordflow">if</span> (<a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#15d36c6fd29cdf038e2ba784a0e4f627" title="The index of the current arc considered.">arc_</a> == <a class="code" href="classoperations__research_1_1EbertGraph.html#2cf0a089f017042eef0262e2ae0ef9a4" title="The index of the &amp;#39;nil&amp;#39; arc in the graph.">kNilArc</a>) {
<a name="l00359"></a>00359         <span class="keywordflow">return</span> <span class="keyword">true</span>;  <span class="comment">// This occurs when the iterator has reached the end.</span>
<a name="l00360"></a>00360       }
<a name="l00361"></a>00361       CHECK(<a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#22f39d927b94009fadbf1d1fc6ad8fc9" title="A reference to the current EbertGraph considered.">graph_</a>.<a class="code" href="classoperations__research_1_1EbertGraph.html#31a64d5833308a3ab468c73eb3a66c37" title="Returns true if arc is outgoing from node.">IsOutgoing</a>(<a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#15d36c6fd29cdf038e2ba784a0e4f627" title="The index of the current arc considered.">arc_</a>, <a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#00348d0ecc71cd23f7c01d21268be0e1" title="The index of the node on which arcs are iterated.">node_</a>));
<a name="l00362"></a>00362       <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00363"></a>00363     }
<a name="l00364"></a>00364 
<a name="l00365"></a>00365     <span class="comment">// A reference to the current EbertGraph considered.</span>
<a name="l00366"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#22f39d927b94009fadbf1d1fc6ad8fc9">00366</a>     <span class="keyword">const</span> <a class="code" href="classoperations__research_1_1EbertGraph.html">EbertGraph</a>&amp; <a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#22f39d927b94009fadbf1d1fc6ad8fc9" title="A reference to the current EbertGraph considered.">graph_</a>;
<a name="l00367"></a>00367 
<a name="l00368"></a>00368     <span class="comment">// The index of the node on which arcs are iterated.</span>
<a name="l00369"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#00348d0ecc71cd23f7c01d21268be0e1">00369</a>     <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a>         <a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#00348d0ecc71cd23f7c01d21268be0e1" title="The index of the node on which arcs are iterated.">node_</a>;
<a name="l00370"></a>00370 
<a name="l00371"></a>00371     <span class="comment">// The index of the current arc considered.</span>
<a name="l00372"></a><a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#15d36c6fd29cdf038e2ba784a0e4f627">00372</a>     <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a>          <a class="code" href="classoperations__research_1_1EbertGraph_1_1OutgoingArcIterator.html#15d36c6fd29cdf038e2ba784a0e4f627" title="The index of the current arc considered.">arc_</a>;
<a name="l00373"></a>00373   };
<a name="l00374"></a>00374 
<a name="l00375"></a>00375   <span class="comment">// Utility function to check that an arc index is within the bounds.</span>
<a name="l00376"></a>00376   <span class="comment">// It is exported so that users of the EbertGraph class can use it.</span>
<a name="l00377"></a>00377   <span class="comment">// To be used in a DCHECK.</span>
<a name="l00378"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#4ead8d1d7c8e60af02501896c08f8774">00378</a>   <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#4ead8d1d7c8e60af02501896c08f8774" title="Utility function to check that an arc index is within the bounds.">CheckArcBounds</a>(<span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc)<span class="keyword"> const </span>{
<a name="l00379"></a>00379     DCHECK_LE(-<a class="code" href="classoperations__research_1_1EbertGraph.html#fe61810391f03e206808f69a58fe7cf8" title="The maximum number of arcs that the graph can hold.">max_num_arcs_</a>, arc);
<a name="l00380"></a>00380     DCHECK_GE(<a class="code" href="classoperations__research_1_1EbertGraph.html#fe61810391f03e206808f69a58fe7cf8" title="The maximum number of arcs that the graph can hold.">max_num_arcs_</a>, arc);
<a name="l00381"></a>00381     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00382"></a>00382   }
<a name="l00383"></a>00383 
<a name="l00384"></a>00384   <span class="comment">// Utility function to check that an arc index is within the bounds AND</span>
<a name="l00385"></a>00385   <span class="comment">// different from kNilArc.</span>
<a name="l00386"></a>00386   <span class="comment">// It is exported so that users of the EbertGraph class can use it.</span>
<a name="l00387"></a>00387   <span class="comment">// To be used in a DCHECK.</span>
<a name="l00388"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#8d6877ac937a2ce4159ccf05f16f50f5">00388</a>   <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#8d6877ac937a2ce4159ccf05f16f50f5" title="Utility function to check that an arc index is within the bounds AND different from...">CheckArcValidity</a>(<span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc)<span class="keyword"> const </span>{
<a name="l00389"></a>00389     DCHECK_NE(<a class="code" href="classoperations__research_1_1EbertGraph.html#2cf0a089f017042eef0262e2ae0ef9a4" title="The index of the &amp;#39;nil&amp;#39; arc in the graph.">kNilArc</a>, arc);
<a name="l00390"></a>00390     DCHECK_LE(-<a class="code" href="classoperations__research_1_1EbertGraph.html#fe61810391f03e206808f69a58fe7cf8" title="The maximum number of arcs that the graph can hold.">max_num_arcs_</a>, arc);
<a name="l00391"></a>00391     DCHECK_GE(<a class="code" href="classoperations__research_1_1EbertGraph.html#fe61810391f03e206808f69a58fe7cf8" title="The maximum number of arcs that the graph can hold.">max_num_arcs_</a>, arc);
<a name="l00392"></a>00392     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00393"></a>00393   }
<a name="l00394"></a>00394 
<a name="l00395"></a>00395   <span class="comment">// Utility function to check that a node index is within the bounds AND</span>
<a name="l00396"></a>00396   <span class="comment">// different from kNilNode.</span>
<a name="l00397"></a>00397   <span class="comment">// It is exported so that users of the EbertGraph class can use it.</span>
<a name="l00398"></a>00398   <span class="comment">// To be used in a DCHECK.</span>
<a name="l00399"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#030c3a4f45285c50055081871ddc07e3">00399</a>   <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#030c3a4f45285c50055081871ddc07e3" title="Utility function to check that a node index is within the bounds AND different from...">CheckNodeValidity</a>(<span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node)<span class="keyword"> const </span>{
<a name="l00400"></a>00400     DCHECK_LE(<a class="code" href="classoperations__research_1_1EbertGraph.html#9004d9c1fbac4c326f21f90bdc3e3434" title="The index of the first node in the graph.">kFirstNode</a>, node);
<a name="l00401"></a>00401     DCHECK_GE(<a class="code" href="classoperations__research_1_1EbertGraph.html#7f1010c890d39db72bb5f9e66d0c4de1" title="The maximum number of nodes that the graph can hold.">max_num_nodes_</a>, node);
<a name="l00402"></a>00402     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00403"></a>00403   }
<a name="l00404"></a>00404 
<a name="l00405"></a>00405   <span class="comment">// Returns the tail or start-node of arc.</span>
<a name="l00406"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#21c07d3ab7fafc0491811a56be3745db">00406</a>   <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#21c07d3ab7fafc0491811a56be3745db" title="Returns the tail or start-node of arc.">Tail</a>(<span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc)<span class="keyword"> const </span>{
<a name="l00407"></a>00407     DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph.html#8d6877ac937a2ce4159ccf05f16f50f5" title="Utility function to check that an arc index is within the bounds AND different from...">CheckArcValidity</a>(arc));
<a name="l00408"></a>00408     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#cf38430d9d1c654d14649edf210ee63a" title="Array of node indices. node_[i] contains the tail node of arc i.">node_</a>[<a class="code" href="classoperations__research_1_1EbertGraph.html#9bc601f3ee5f7ab92cf17716f35f19a5" title="Returns the opposite arc, i.e the direct arc is the arc is in reverse direction,...">Opposite</a>(arc)];
<a name="l00409"></a>00409   }
<a name="l00410"></a>00410 
<a name="l00411"></a>00411   <span class="comment">// Returns the head or end-node of arc.</span>
<a name="l00412"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#6ca23f1eb0648002884ecca3852c1de9">00412</a>   <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#6ca23f1eb0648002884ecca3852c1de9" title="Returns the head or end-node of arc.">Head</a>(<span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc)<span class="keyword"> const </span>{
<a name="l00413"></a>00413     DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph.html#8d6877ac937a2ce4159ccf05f16f50f5" title="Utility function to check that an arc index is within the bounds AND different from...">CheckArcValidity</a>(arc));
<a name="l00414"></a>00414     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#cf38430d9d1c654d14649edf210ee63a" title="Array of node indices. node_[i] contains the tail node of arc i.">node_</a>[arc];
<a name="l00415"></a>00415   }
<a name="l00416"></a>00416 
<a name="l00417"></a>00417   <span class="comment">// Returns the tail or start-node of arc if it is positive</span>
<a name="l00418"></a>00418   <span class="comment">// (i.e. it is taken in the direction it was entered in the graph),</span>
<a name="l00419"></a>00419   <span class="comment">// and the head or end-node otherwise. 'This' in Ebert's paper.</span>
<a name="l00420"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#359e73457dbafbddade9a925d24b3acb">00420</a>   <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#359e73457dbafbddade9a925d24b3acb" title="Returns the tail or start-node of arc if it is positive (i.e.">DirectArcTail</a>(<span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc)<span class="keyword"> const </span>{
<a name="l00421"></a>00421     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#21c07d3ab7fafc0491811a56be3745db" title="Returns the tail or start-node of arc.">Tail</a>(<a class="code" href="classoperations__research_1_1EbertGraph.html#e77772321156de163c63904d64260e6e" title="Returns the arc in normal/direct direction.">DirectArc</a>(arc));
<a name="l00422"></a>00422   }
<a name="l00423"></a>00423 
<a name="l00424"></a>00424   <span class="comment">// Returns the head or end-node of arc if it is positive</span>
<a name="l00425"></a>00425   <span class="comment">// (i.e. it is taken in the direction it was entered in the graph),</span>
<a name="l00426"></a>00426   <span class="comment">// and the tail or start-node otherwise. 'That' in Ebert's paper.</span>
<a name="l00427"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#4da67ae42f8806026ca7dd3a4bfcd007">00427</a>   <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#4da67ae42f8806026ca7dd3a4bfcd007" title="Returns the head or end-node of arc if it is positive (i.e.">DirectArcHead</a>(<span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc)<span class="keyword"> const </span>{
<a name="l00428"></a>00428     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#6ca23f1eb0648002884ecca3852c1de9" title="Returns the head or end-node of arc.">Head</a>(<a class="code" href="classoperations__research_1_1EbertGraph.html#e77772321156de163c63904d64260e6e" title="Returns the arc in normal/direct direction.">DirectArc</a>(arc));
<a name="l00429"></a>00429   }
<a name="l00430"></a>00430 
<a name="l00431"></a>00431   <span class="comment">// Returns the arc in normal/direct direction.</span>
<a name="l00432"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#e77772321156de163c63904d64260e6e">00432</a>   <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#e77772321156de163c63904d64260e6e" title="Returns the arc in normal/direct direction.">DirectArc</a>(<span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc)<span class="keyword"> const </span>{
<a name="l00433"></a>00433     DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph.html#8d6877ac937a2ce4159ccf05f16f50f5" title="Utility function to check that an arc index is within the bounds AND different from...">CheckArcValidity</a>(arc));
<a name="l00434"></a>00434     <span class="keywordflow">return</span> max(arc, <a class="code" href="classoperations__research_1_1EbertGraph.html#9bc601f3ee5f7ab92cf17716f35f19a5" title="Returns the opposite arc, i.e the direct arc is the arc is in reverse direction,...">Opposite</a>(arc));  <span class="comment">// abs(arc)</span>
<a name="l00435"></a>00435   }
<a name="l00436"></a>00436 
<a name="l00437"></a>00437   <span class="comment">// Returns the arc in reverse direction.</span>
<a name="l00438"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#ac886e865a014f803674b1626c058dbf">00438</a>   <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#ac886e865a014f803674b1626c058dbf" title="Returns the arc in reverse direction.">ReverseArc</a>(<span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc)<span class="keyword"> const </span>{
<a name="l00439"></a>00439     DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph.html#8d6877ac937a2ce4159ccf05f16f50f5" title="Utility function to check that an arc index is within the bounds AND different from...">CheckArcValidity</a>(arc));
<a name="l00440"></a>00440     <span class="keywordflow">return</span> min(arc, <a class="code" href="classoperations__research_1_1EbertGraph.html#9bc601f3ee5f7ab92cf17716f35f19a5" title="Returns the opposite arc, i.e the direct arc is the arc is in reverse direction,...">Opposite</a>(arc));  <span class="comment">// -abs(arc)</span>
<a name="l00441"></a>00441   }
<a name="l00442"></a>00442 
<a name="l00443"></a>00443   <span class="comment">// Returns the opposite arc, i.e the direct arc is the arc is in reverse</span>
<a name="l00444"></a>00444   <span class="comment">// direction, and the reverse arc if the arc is direct.</span>
<a name="l00445"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#9bc601f3ee5f7ab92cf17716f35f19a5">00445</a>   <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#9bc601f3ee5f7ab92cf17716f35f19a5" title="Returns the opposite arc, i.e the direct arc is the arc is in reverse direction,...">Opposite</a>(<span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc)<span class="keyword"> const </span>{
<a name="l00446"></a>00446     DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph.html#8d6877ac937a2ce4159ccf05f16f50f5" title="Utility function to check that an arc index is within the bounds AND different from...">CheckArcValidity</a>(arc));
<a name="l00447"></a>00447     <span class="keywordflow">return</span> -arc;
<a name="l00448"></a>00448   }
<a name="l00449"></a>00449 
<a name="l00450"></a>00450   <span class="comment">// Returns true if the arc is direct.</span>
<a name="l00451"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#4116c129c76be001d4db8e0649a108af">00451</a>   <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#4116c129c76be001d4db8e0649a108af" title="Returns true if the arc is direct.">IsDirect</a>(<span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc)<span class="keyword"> const </span>{
<a name="l00452"></a>00452     DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph.html#8d6877ac937a2ce4159ccf05f16f50f5" title="Utility function to check that an arc index is within the bounds AND different from...">CheckArcValidity</a>(arc));
<a name="l00453"></a>00453     <span class="keywordflow">return</span> arc &gt; 0;
<a name="l00454"></a>00454   }
<a name="l00455"></a>00455 
<a name="l00456"></a>00456   <span class="comment">// Returns true if the arc is in the reverse direction.</span>
<a name="l00457"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#1e8af5a7ef389f87e10e28713aa9bec3">00457</a>   <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#1e8af5a7ef389f87e10e28713aa9bec3" title="Returns true if the arc is in the reverse direction.">IsReverse</a>(<span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc)<span class="keyword"> const </span>{
<a name="l00458"></a>00458     DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph.html#8d6877ac937a2ce4159ccf05f16f50f5" title="Utility function to check that an arc index is within the bounds AND different from...">CheckArcValidity</a>(arc));
<a name="l00459"></a>00459     <span class="keywordflow">return</span> arc &lt; 0;
<a name="l00460"></a>00460   }
<a name="l00461"></a>00461 
<a name="l00462"></a>00462   <span class="comment">// Returns true if arc is incident to node.</span>
<a name="l00463"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#010008ecaf23112b48b2ea1cb10bcc38">00463</a>   <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#010008ecaf23112b48b2ea1cb10bcc38" title="Returns true if arc is incident to node.">IsIncident</a>(<a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc, <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node)<span class="keyword"> const </span>{
<a name="l00464"></a>00464     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#be70a6c29fa628e81ac7c5012d36c673" title="Returns true if arc is incoming to node.">IsIncoming</a>(arc, node) || <a class="code" href="classoperations__research_1_1EbertGraph.html#31a64d5833308a3ab468c73eb3a66c37" title="Returns true if arc is outgoing from node.">IsOutgoing</a>(arc, node);
<a name="l00465"></a>00465   }
<a name="l00466"></a>00466 
<a name="l00467"></a>00467   <span class="comment">// Returns true if arc is incoming to node.</span>
<a name="l00468"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#be70a6c29fa628e81ac7c5012d36c673">00468</a>   <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#be70a6c29fa628e81ac7c5012d36c673" title="Returns true if arc is incoming to node.">IsIncoming</a>(<a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc, <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node)<span class="keyword"> const </span>{
<a name="l00469"></a>00469     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#4da67ae42f8806026ca7dd3a4bfcd007" title="Returns the head or end-node of arc if it is positive (i.e.">DirectArcHead</a>(arc) == node;
<a name="l00470"></a>00470   }
<a name="l00471"></a>00471 
<a name="l00472"></a>00472   <span class="comment">// Returns true if arc is outgoing from node.</span>
<a name="l00473"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#31a64d5833308a3ab468c73eb3a66c37">00473</a>   <span class="keywordtype">bool</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#31a64d5833308a3ab468c73eb3a66c37" title="Returns true if arc is outgoing from node.">IsOutgoing</a>(<a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc, <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node)<span class="keyword"> const </span>{
<a name="l00474"></a>00474     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#359e73457dbafbddade9a925d24b3acb" title="Returns the tail or start-node of arc if it is positive (i.e.">DirectArcTail</a>(arc) == node;
<a name="l00475"></a>00475   }
<a name="l00476"></a>00476 
<a name="l00477"></a>00477   <span class="comment">// Recreates the next_adjacent_arc_ and first_incident_arc_ variables from</span>
<a name="l00478"></a>00478   <span class="comment">// the array node_  in O(n + m) time.</span>
<a name="l00479"></a>00479   <span class="comment">// This is useful if node_ array has been sorted according to a given</span>
<a name="l00480"></a>00480   <span class="comment">// criterion, for example.</span>
<a name="l00481"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#9d2c8512a500ca40a0d66ac74d9426ff">00481</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#9d2c8512a500ca40a0d66ac74d9426ff" title="Recreates the next_adjacent_arc_ and first_incident_arc_ variables from the array...">BuildRepresentation</a>() {
<a name="l00482"></a>00482     <a class="code" href="classoperations__research_1_1EbertGraph.html#31b3b4a27154937a171d8e38c1cfd94c" title="Array of arc indices.">first_incident_arc_</a>.Assign(0);
<a name="l00483"></a>00483     <span class="keywordflow">for</span> (<a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc = <a class="code" href="classoperations__research_1_1EbertGraph.html#d9d4850075f504fd32254b980aaaf2f4" title="The index of the first arc in the graph.">kFirstArc</a>; arc &lt;= <a class="code" href="classoperations__research_1_1EbertGraph.html#fe61810391f03e206808f69a58fe7cf8" title="The maximum number of arcs that the graph can hold.">max_num_arcs_</a>; ++arc) {
<a name="l00484"></a>00484       <a class="code" href="classoperations__research_1_1EbertGraph.html#8fd6178befb631f3bcf5175f0264d447" title="Utility method to attach a new arc.">Attach</a>(arc);
<a name="l00485"></a>00485     }
<a name="l00486"></a>00486   }
<a name="l00487"></a>00487 
<a name="l00488"></a>00488   <span class="comment">// Returns a debug string containing all the information contained in the</span>
<a name="l00489"></a>00489   <span class="comment">// data structure in raw form.</span>
<a name="l00490"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#c27e127d1c62902f8625de2d1061210b">00490</a>   <span class="keywordtype">string</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#c27e127d1c62902f8625de2d1061210b" title="Returns a debug string containing all the information contained in the data structure...">DebugString</a>()<span class="keyword"> const </span>{
<a name="l00491"></a>00491     <span class="keywordtype">string</span> result = <span class="stringliteral">"Arcs:(node, next arc) :\n"</span>;
<a name="l00492"></a>00492     <span class="keywordflow">for</span> (int64 arc = -<a class="code" href="classoperations__research_1_1EbertGraph.html#c6aa41f3d68e44b807ed078401a68b8f" title="The current number of arcs held by the graph.">num_arcs_</a>; arc &lt;= <a class="code" href="classoperations__research_1_1EbertGraph.html#c6aa41f3d68e44b807ed078401a68b8f" title="The current number of arcs held by the graph.">num_arcs_</a>; ++arc) {
<a name="l00493"></a>00493       StringAppendF(&amp;result, <span class="stringliteral">" %lld:(%lld,%lld)\n"</span>,
<a name="l00494"></a>00494                              arc,
<a name="l00495"></a>00495                              static_cast&lt;int64&gt;(<a class="code" href="classoperations__research_1_1EbertGraph.html#cf38430d9d1c654d14649edf210ee63a" title="Array of node indices. node_[i] contains the tail node of arc i.">node_</a>[arc]),
<a name="l00496"></a>00496                              static_cast&lt;int64&gt;(<a class="code" href="classoperations__research_1_1EbertGraph.html#6704d5c5af83afe2a704a1293ede71db" title="Array of next indices.">next_adjacent_arc_</a>[arc]));
<a name="l00497"></a>00497     }
<a name="l00498"></a>00498     result += <span class="stringliteral">"Node:First arc :\n"</span>;
<a name="l00499"></a>00499     <span class="keywordflow">for</span> (int64 node = <a class="code" href="classoperations__research_1_1EbertGraph.html#9004d9c1fbac4c326f21f90bdc3e3434" title="The index of the first node in the graph.">kFirstNode</a>; node &lt;= <a class="code" href="classoperations__research_1_1EbertGraph.html#2090056b33518cb093678d881e80062a" title="The maximum index of the node currently held by the graph.">num_nodes_</a>; ++node) {
<a name="l00500"></a>00500       StringAppendF(&amp;result, <span class="stringliteral">" %lld:%lld\n"</span>, node,
<a name="l00501"></a>00501                              static_cast&lt;int64&gt;(<a class="code" href="classoperations__research_1_1EbertGraph.html#31b3b4a27154937a171d8e38c1cfd94c" title="Array of arc indices.">first_incident_arc_</a>[node]));
<a name="l00502"></a>00502     }
<a name="l00503"></a>00503     <span class="keywordflow">return</span> result;
<a name="l00504"></a>00504   }
<a name="l00505"></a>00505 
<a name="l00506"></a>00506  <span class="keyword">private</span>:
<a name="l00507"></a>00507   <span class="comment">// The index of the first node in the graph.</span>
<a name="l00508"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#9004d9c1fbac4c326f21f90bdc3e3434">00508</a>   <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#9004d9c1fbac4c326f21f90bdc3e3434" title="The index of the first node in the graph.">kFirstNode</a>;
<a name="l00509"></a>00509 
<a name="l00510"></a>00510   <span class="comment">// The index of the first arc in the graph.</span>
<a name="l00511"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#d9d4850075f504fd32254b980aaaf2f4">00511</a>   <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#d9d4850075f504fd32254b980aaaf2f4" title="The index of the first arc in the graph.">kFirstArc</a>;
<a name="l00512"></a>00512 
<a name="l00513"></a>00513   <span class="comment">// Returns kNilNode if the graph has no nodes or node if it has at least one</span>
<a name="l00514"></a>00514   <span class="comment">// node. Useful for initializing iterators correctly in the case of empty</span>
<a name="l00515"></a>00515   <span class="comment">// graphs.</span>
<a name="l00516"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#25f0ee816a76a3438adee2621d40a07a">00516</a>   <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#25f0ee816a76a3438adee2621d40a07a" title="Returns kNilNode if the graph has no nodes or node if it has at least one node.">StartNode</a>(<a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node)<span class="keyword"> const </span>{
<a name="l00517"></a>00517     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#2090056b33518cb093678d881e80062a" title="The maximum index of the node currently held by the graph.">num_nodes_</a> == 0 ? <a class="code" href="classoperations__research_1_1EbertGraph.html#719bc0f1c611924f2a295e6d13906190" title="The index of the &amp;#39;nil&amp;#39; node in the graph.">kNilNode</a> : node;
<a name="l00518"></a>00518   }
<a name="l00519"></a>00519 
<a name="l00520"></a>00520   <span class="comment">// Returns kNilArc if the graph has no arcs arc if it has at least one arc.</span>
<a name="l00521"></a>00521   <span class="comment">// Useful for initializing iterators correctly in the case of empty graphs.</span>
<a name="l00522"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#e4492415fdc63edb1d091a6921a7d9a7">00522</a>   <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#e4492415fdc63edb1d091a6921a7d9a7" title="Returns kNilArc if the graph has no arcs arc if it has at least one arc.">StartArc</a>(<a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc)<span class="keyword"> const </span>{
<a name="l00523"></a>00523     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#c6aa41f3d68e44b807ed078401a68b8f" title="The current number of arcs held by the graph.">num_arcs_</a> == 0 ? <a class="code" href="classoperations__research_1_1EbertGraph.html#2cf0a089f017042eef0262e2ae0ef9a4" title="The index of the &amp;#39;nil&amp;#39; arc in the graph.">kNilArc</a> : arc;
<a name="l00524"></a>00524   }
<a name="l00525"></a>00525 
<a name="l00526"></a>00526   <span class="comment">// Returns the first outgoing arc for node.</span>
<a name="l00527"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#a809b3a25c2ed29322972a08af352c1e">00527</a>   <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#a809b3a25c2ed29322972a08af352c1e" title="Returns the first outgoing arc for node.">FirstOutgoingArc</a>(<span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node)<span class="keyword"> const </span>{
<a name="l00528"></a>00528     DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph.html#030c3a4f45285c50055081871ddc07e3" title="Utility function to check that a node index is within the bounds AND different from...">CheckNodeValidity</a>(node));
<a name="l00529"></a>00529     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#5eba6a5e46d2af6c1cc7a5a50f3f3204" title="Utility method that finds the next outgoing arc.">FindNextOutcomingArc</a>(<a class="code" href="classoperations__research_1_1EbertGraph.html#d706c6970f41577e4bea98d5d04678fc" title="Returns the first arc in node&amp;#39;s incidence list.">FirstIncidentArc</a>(node));
<a name="l00530"></a>00530   }
<a name="l00531"></a>00531 
<a name="l00532"></a>00532   <span class="comment">// Returns the outgoing arc following the argument in the adjacency list.</span>
<a name="l00533"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#deadd5532b72461f6db6695b6ad01d07">00533</a>   <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#deadd5532b72461f6db6695b6ad01d07" title="Returns the outgoing arc following the argument in the adjacency list.">NextOutgoingArc</a>(<span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc)<span class="keyword"> const </span>{
<a name="l00534"></a>00534     DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph.html#8d6877ac937a2ce4159ccf05f16f50f5" title="Utility function to check that an arc index is within the bounds AND different from...">CheckArcValidity</a>(arc));
<a name="l00535"></a>00535     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#5eba6a5e46d2af6c1cc7a5a50f3f3204" title="Utility method that finds the next outgoing arc.">FindNextOutcomingArc</a>(<a class="code" href="classoperations__research_1_1EbertGraph.html#0f821f30efa8b6b4c5f9d1bcf32c11ca" title="Returns the next arc following the passed argument in its adjacency list.">NextAdjacentArc</a>(<a class="code" href="classoperations__research_1_1EbertGraph.html#e77772321156de163c63904d64260e6e" title="Returns the arc in normal/direct direction.">DirectArc</a>(arc)));
<a name="l00536"></a>00536   }
<a name="l00537"></a>00537 
<a name="l00538"></a>00538   <span class="comment">// Returns the first incoming arc for node.</span>
<a name="l00539"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#8314f0f15a93eb16adbeee93602545ab">00539</a>   <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#8314f0f15a93eb16adbeee93602545ab" title="Returns the first incoming arc for node.">FirstIncomingArc</a>(<span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node)<span class="keyword"> const </span>{
<a name="l00540"></a>00540     DCHECK_LE(<a class="code" href="classoperations__research_1_1EbertGraph.html#9004d9c1fbac4c326f21f90bdc3e3434" title="The index of the first node in the graph.">kFirstNode</a>, node);
<a name="l00541"></a>00541     DCHECK_GE(<a class="code" href="classoperations__research_1_1EbertGraph.html#7f1010c890d39db72bb5f9e66d0c4de1" title="The maximum number of nodes that the graph can hold.">max_num_nodes_</a>, node);
<a name="l00542"></a>00542     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#927248fca1c689e14e89a0097afc3bc2" title="Utility method that finds the next incoming arc.">FindNextIncomingArc</a>(<a class="code" href="classoperations__research_1_1EbertGraph.html#d706c6970f41577e4bea98d5d04678fc" title="Returns the first arc in node&amp;#39;s incidence list.">FirstIncidentArc</a>(node));
<a name="l00543"></a>00543   }
<a name="l00544"></a>00544 
<a name="l00545"></a>00545   <span class="comment">// Returns the incoming arc following the argument in the adjacency list.</span>
<a name="l00546"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#420a9d5c7ac48df506a22cc88aaab8b7">00546</a>   <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#420a9d5c7ac48df506a22cc88aaab8b7" title="Returns the incoming arc following the argument in the adjacency list.">NextIncomingArc</a>(<span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc)<span class="keyword"> const </span>{
<a name="l00547"></a>00547     DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph.html#8d6877ac937a2ce4159ccf05f16f50f5" title="Utility function to check that an arc index is within the bounds AND different from...">CheckArcValidity</a>(arc));
<a name="l00548"></a>00548     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#927248fca1c689e14e89a0097afc3bc2" title="Utility method that finds the next incoming arc.">FindNextIncomingArc</a>(<a class="code" href="classoperations__research_1_1EbertGraph.html#0f821f30efa8b6b4c5f9d1bcf32c11ca" title="Returns the next arc following the passed argument in its adjacency list.">NextAdjacentArc</a>(<a class="code" href="classoperations__research_1_1EbertGraph.html#ac886e865a014f803674b1626c058dbf" title="Returns the arc in reverse direction.">ReverseArc</a>(arc)));
<a name="l00549"></a>00549   }
<a name="l00550"></a>00550 
<a name="l00551"></a>00551   <span class="comment">// Returns the first arc in node's incidence list.</span>
<a name="l00552"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#d706c6970f41577e4bea98d5d04678fc">00552</a>   <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#d706c6970f41577e4bea98d5d04678fc" title="Returns the first arc in node&amp;#39;s incidence list.">FirstIncidentArc</a>(<span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node)<span class="keyword"> const </span>{
<a name="l00553"></a>00553     DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph.html#030c3a4f45285c50055081871ddc07e3" title="Utility function to check that a node index is within the bounds AND different from...">CheckNodeValidity</a>(node));
<a name="l00554"></a>00554     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#31b3b4a27154937a171d8e38c1cfd94c" title="Array of arc indices.">first_incident_arc_</a>[node];
<a name="l00555"></a>00555   }
<a name="l00556"></a>00556 
<a name="l00557"></a>00557   <span class="comment">// Returns the next arc following the passed argument in its adjacency list.</span>
<a name="l00558"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#0f821f30efa8b6b4c5f9d1bcf32c11ca">00558</a>   <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#0f821f30efa8b6b4c5f9d1bcf32c11ca" title="Returns the next arc following the passed argument in its adjacency list.">NextAdjacentArc</a>(<span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc)<span class="keyword"> const </span>{
<a name="l00559"></a>00559     DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph.html#8d6877ac937a2ce4159ccf05f16f50f5" title="Utility function to check that an arc index is within the bounds AND different from...">CheckArcValidity</a>(arc));
<a name="l00560"></a>00560     <span class="keywordflow">return</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#6704d5c5af83afe2a704a1293ede71db" title="Array of next indices.">next_adjacent_arc_</a>[arc];
<a name="l00561"></a>00561   }
<a name="l00562"></a>00562 
<a name="l00563"></a>00563   <span class="comment">// Returns the node following the argument in the graph.</span>
<a name="l00564"></a>00564   <span class="comment">// Returns kNilNode (= end) if the range of nodes has been exhausted.</span>
<a name="l00565"></a>00565   <span class="comment">// It is called by NodeIterator::Next() and as such does not expect do be</span>
<a name="l00566"></a>00566   <span class="comment">// passed an argument equal to kNilNode.</span>
<a name="l00567"></a>00567   <span class="comment">// This is why the return line is simplified from</span>
<a name="l00568"></a>00568   <span class="comment">// return ( node == kNilNode || node &gt;= num_nodes_) ? kNilNode : node + 1;</span>
<a name="l00569"></a>00569   <span class="comment">// to</span>
<a name="l00570"></a>00570   <span class="comment">// return node &gt;= num_nodes_ ? kNilNode : node + 1;</span>
<a name="l00571"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#9cfc4062b49eb3757818e487683eb06d">00571</a>   <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#9cfc4062b49eb3757818e487683eb06d" title="Returns the node following the argument in the graph.">NextNode</a>(<span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> node)<span class="keyword"> const </span>{
<a name="l00572"></a>00572     DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph.html#030c3a4f45285c50055081871ddc07e3" title="Utility function to check that a node index is within the bounds AND different from...">CheckNodeValidity</a>(node));
<a name="l00573"></a>00573     <span class="keywordflow">return</span> node &gt;= <a class="code" href="classoperations__research_1_1EbertGraph.html#2090056b33518cb093678d881e80062a" title="The maximum index of the node currently held by the graph.">num_nodes_</a> ? <a class="code" href="classoperations__research_1_1EbertGraph.html#719bc0f1c611924f2a295e6d13906190" title="The index of the &amp;#39;nil&amp;#39; node in the graph.">kNilNode</a> : node + 1;
<a name="l00574"></a>00574   }
<a name="l00575"></a>00575 
<a name="l00576"></a>00576   <span class="comment">// Returns the arc following the argument in the graph.</span>
<a name="l00577"></a>00577   <span class="comment">// Returns kNilArc (= end) if the range of arcs has been exhausted.</span>
<a name="l00578"></a>00578   <span class="comment">// It is called by ArcIterator::Next() and as such does not expect do be</span>
<a name="l00579"></a>00579   <span class="comment">// passed an argument equal to kNilArc.</span>
<a name="l00580"></a>00580   <span class="comment">// This is why the return line is simplified from</span>
<a name="l00581"></a>00581   <span class="comment">// return ( arc == kNilArc || arc &gt;= num_arcs_) ? kNilArc : arc + 1;</span>
<a name="l00582"></a>00582   <span class="comment">// to</span>
<a name="l00583"></a>00583   <span class="comment">// return arc &gt;= num_arcs_ ? kNilArc : arc + 1;</span>
<a name="l00584"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#2ba4161520deaf8d59b4a99baae5df69">00584</a>   <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#2ba4161520deaf8d59b4a99baae5df69" title="Returns the arc following the argument in the graph.">NextArc</a>(<span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc)<span class="keyword"> const </span>{
<a name="l00585"></a>00585     DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph.html#8d6877ac937a2ce4159ccf05f16f50f5" title="Utility function to check that an arc index is within the bounds AND different from...">CheckArcValidity</a>(arc));
<a name="l00586"></a>00586     <span class="keywordflow">return</span> arc &gt;= <a class="code" href="classoperations__research_1_1EbertGraph.html#c6aa41f3d68e44b807ed078401a68b8f" title="The current number of arcs held by the graph.">num_arcs_</a> ? <a class="code" href="classoperations__research_1_1EbertGraph.html#2cf0a089f017042eef0262e2ae0ef9a4" title="The index of the &amp;#39;nil&amp;#39; arc in the graph.">kNilArc</a> : arc + 1;
<a name="l00587"></a>00587   }
<a name="l00588"></a>00588 
<a name="l00589"></a>00589   <span class="comment">// Utility method to attach a new arc.</span>
<a name="l00590"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#8fd6178befb631f3bcf5175f0264d447">00590</a>   <span class="keywordtype">void</span> <a class="code" href="classoperations__research_1_1EbertGraph.html#8fd6178befb631f3bcf5175f0264d447" title="Utility method to attach a new arc.">Attach</a>(<a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc) {
<a name="l00591"></a>00591     DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph.html#8d6877ac937a2ce4159ccf05f16f50f5" title="Utility function to check that an arc index is within the bounds AND different from...">CheckArcValidity</a>(arc));
<a name="l00592"></a>00592     <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> tail = <a class="code" href="classoperations__research_1_1EbertGraph.html#cf38430d9d1c654d14649edf210ee63a" title="Array of node indices. node_[i] contains the tail node of arc i.">node_</a>[<a class="code" href="classoperations__research_1_1EbertGraph.html#9bc601f3ee5f7ab92cf17716f35f19a5" title="Returns the opposite arc, i.e the direct arc is the arc is in reverse direction,...">Opposite</a>(arc)];
<a name="l00593"></a>00593     DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph.html#030c3a4f45285c50055081871ddc07e3" title="Utility function to check that a node index is within the bounds AND different from...">CheckNodeValidity</a>(tail));
<a name="l00594"></a>00594     <a class="code" href="classoperations__research_1_1EbertGraph.html#6704d5c5af83afe2a704a1293ede71db" title="Array of next indices.">next_adjacent_arc_</a>.Set(arc, <a class="code" href="classoperations__research_1_1EbertGraph.html#31b3b4a27154937a171d8e38c1cfd94c" title="Array of arc indices.">first_incident_arc_</a>[tail]);
<a name="l00595"></a>00595     <a class="code" href="classoperations__research_1_1EbertGraph.html#31b3b4a27154937a171d8e38c1cfd94c" title="Array of arc indices.">first_incident_arc_</a>.Set(tail, arc);
<a name="l00596"></a>00596     <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> head = <a class="code" href="classoperations__research_1_1EbertGraph.html#cf38430d9d1c654d14649edf210ee63a" title="Array of node indices. node_[i] contains the tail node of arc i.">node_</a>[arc];
<a name="l00597"></a>00597     DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph.html#030c3a4f45285c50055081871ddc07e3" title="Utility function to check that a node index is within the bounds AND different from...">CheckNodeValidity</a>(head));
<a name="l00598"></a>00598     <a class="code" href="classoperations__research_1_1EbertGraph.html#6704d5c5af83afe2a704a1293ede71db" title="Array of next indices.">next_adjacent_arc_</a>.Set(<a class="code" href="classoperations__research_1_1EbertGraph.html#9bc601f3ee5f7ab92cf17716f35f19a5" title="Returns the opposite arc, i.e the direct arc is the arc is in reverse direction,...">Opposite</a>(arc), <a class="code" href="classoperations__research_1_1EbertGraph.html#31b3b4a27154937a171d8e38c1cfd94c" title="Array of arc indices.">first_incident_arc_</a>[head]);
<a name="l00599"></a>00599     <a class="code" href="classoperations__research_1_1EbertGraph.html#31b3b4a27154937a171d8e38c1cfd94c" title="Array of arc indices.">first_incident_arc_</a>.Set(head, <a class="code" href="classoperations__research_1_1EbertGraph.html#9bc601f3ee5f7ab92cf17716f35f19a5" title="Returns the opposite arc, i.e the direct arc is the arc is in reverse direction,...">Opposite</a>(arc));
<a name="l00600"></a>00600   }
<a name="l00601"></a>00601 
<a name="l00602"></a>00602   <span class="comment">// Utility method that finds the next outgoing arc.</span>
<a name="l00603"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#5eba6a5e46d2af6c1cc7a5a50f3f3204">00603</a>   <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#5eba6a5e46d2af6c1cc7a5a50f3f3204" title="Utility method that finds the next outgoing arc.">FindNextOutcomingArc</a>(<a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc)<span class="keyword"> const </span>{
<a name="l00604"></a>00604     DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph.html#4ead8d1d7c8e60af02501896c08f8774" title="Utility function to check that an arc index is within the bounds.">CheckArcBounds</a>(arc));
<a name="l00605"></a>00605     <span class="keywordflow">while</span> (arc &lt; 0) {
<a name="l00606"></a>00606       arc = <a class="code" href="classoperations__research_1_1EbertGraph.html#0f821f30efa8b6b4c5f9d1bcf32c11ca" title="Returns the next arc following the passed argument in its adjacency list.">NextAdjacentArc</a>(arc);
<a name="l00607"></a>00607       DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph.html#4ead8d1d7c8e60af02501896c08f8774" title="Utility function to check that an arc index is within the bounds.">CheckArcBounds</a>(arc));
<a name="l00608"></a>00608     }
<a name="l00609"></a>00609     <span class="keywordflow">return</span> arc;
<a name="l00610"></a>00610   }
<a name="l00611"></a>00611 
<a name="l00612"></a>00612   <span class="comment">// Utility method that finds the next incoming arc.</span>
<a name="l00613"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#927248fca1c689e14e89a0097afc3bc2">00613</a>   <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#927248fca1c689e14e89a0097afc3bc2" title="Utility method that finds the next incoming arc.">FindNextIncomingArc</a>(<a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> arc)<span class="keyword"> const </span>{
<a name="l00614"></a>00614     DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph.html#4ead8d1d7c8e60af02501896c08f8774" title="Utility function to check that an arc index is within the bounds.">CheckArcBounds</a>(arc));
<a name="l00615"></a>00615     <span class="keywordflow">while</span> (arc &gt; 0) {
<a name="l00616"></a>00616       arc = <a class="code" href="classoperations__research_1_1EbertGraph.html#0f821f30efa8b6b4c5f9d1bcf32c11ca" title="Returns the next arc following the passed argument in its adjacency list.">NextAdjacentArc</a>(arc);
<a name="l00617"></a>00617       DCHECK(<a class="code" href="classoperations__research_1_1EbertGraph.html#4ead8d1d7c8e60af02501896c08f8774" title="Utility function to check that an arc index is within the bounds.">CheckArcBounds</a>(arc));
<a name="l00618"></a>00618     }
<a name="l00619"></a>00619     <span class="keywordflow">return</span> arc;
<a name="l00620"></a>00620   }
<a name="l00621"></a>00621 
<a name="l00622"></a>00622   <span class="comment">// The maximum number of nodes that the graph can hold.</span>
<a name="l00623"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#7f1010c890d39db72bb5f9e66d0c4de1">00623</a>   <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#7f1010c890d39db72bb5f9e66d0c4de1" title="The maximum number of nodes that the graph can hold.">max_num_nodes_</a>;
<a name="l00624"></a>00624 
<a name="l00625"></a>00625   <span class="comment">// The maximum number of arcs that the graph can hold.</span>
<a name="l00626"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#fe61810391f03e206808f69a58fe7cf8">00626</a>   <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#fe61810391f03e206808f69a58fe7cf8" title="The maximum number of arcs that the graph can hold.">max_num_arcs_</a>;
<a name="l00627"></a>00627 
<a name="l00628"></a>00628   <span class="comment">// The maximum index of the node currently held by the graph.</span>
<a name="l00629"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#2090056b33518cb093678d881e80062a">00629</a>   <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#2090056b33518cb093678d881e80062a" title="The maximum index of the node currently held by the graph.">num_nodes_</a>;
<a name="l00630"></a>00630 
<a name="l00631"></a>00631   <span class="comment">// The current number of arcs held by the graph.</span>
<a name="l00632"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#c6aa41f3d68e44b807ed078401a68b8f">00632</a>   <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html#c6aa41f3d68e44b807ed078401a68b8f" title="The current number of arcs held by the graph.">num_arcs_</a>;
<a name="l00633"></a>00633 
<a name="l00634"></a>00634   <span class="comment">// Array of node indices. node_[i] contains the tail node of arc i.</span>
<a name="l00635"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#cf38430d9d1c654d14649edf210ee63a">00635</a>   PackedArray&lt;NodeIndexSize&gt; <a class="code" href="classoperations__research_1_1EbertGraph.html#cf38430d9d1c654d14649edf210ee63a" title="Array of node indices. node_[i] contains the tail node of arc i.">node_</a>;
<a name="l00636"></a>00636 
<a name="l00637"></a>00637   <span class="comment">// Array of next indices.</span>
<a name="l00638"></a>00638   <span class="comment">// next_adjacent_arc_[i] contains the next arc in the adjacency list of arc i.</span>
<a name="l00639"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#6704d5c5af83afe2a704a1293ede71db">00639</a>   PackedArray&lt;ArcIndexSize&gt; <a class="code" href="classoperations__research_1_1EbertGraph.html#6704d5c5af83afe2a704a1293ede71db" title="Array of next indices.">next_adjacent_arc_</a>;
<a name="l00640"></a>00640 
<a name="l00641"></a>00641   <span class="comment">// Array of arc indices. first_incident_arc_[i] contains the first arc</span>
<a name="l00642"></a>00642   <span class="comment">// incident to node i.</span>
<a name="l00643"></a><a class="code" href="classoperations__research_1_1EbertGraph.html#31b3b4a27154937a171d8e38c1cfd94c">00643</a>   PackedArray&lt;ArcIndexSize&gt; <a class="code" href="classoperations__research_1_1EbertGraph.html#31b3b4a27154937a171d8e38c1cfd94c" title="Array of arc indices.">first_incident_arc_</a>;
<a name="l00644"></a>00644 };
<a name="l00645"></a>00645 
<a name="l00646"></a>00646 <span class="keyword">template</span>&lt;<span class="keywordtype">int</span> NodeIndexSize, <span class="keywordtype">int</span> ArcIndexSize&gt;
<a name="l00647"></a>00647 <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html">EbertGraph&lt;NodeIndexSize, ArcIndexSize&gt;::kNilNode</a> = 0;
<a name="l00648"></a>00648 <span class="keyword">template</span>&lt;<span class="keywordtype">int</span> NodeIndexSize, <span class="keywordtype">int</span> ArcIndexSize&gt;
<a name="l00649"></a>00649 <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html">EbertGraph&lt;NodeIndexSize, ArcIndexSize&gt;::kNilArc</a> = 0;
<a name="l00650"></a>00650 <span class="keyword">template</span>&lt;<span class="keywordtype">int</span> NodeIndexSize, <span class="keywordtype">int</span> ArcIndexSize&gt;
<a name="l00651"></a>00651 <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#bd22b9920b8b8f150cc9263533cebe1b">NodeIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html">EbertGraph&lt;NodeIndexSize, ArcIndexSize&gt;::kFirstNode</a> = 1;
<a name="l00652"></a>00652 <span class="keyword">template</span>&lt;<span class="keywordtype">int</span> NodeIndexSize, <span class="keywordtype">int</span> ArcIndexSize&gt;
<a name="l00653"></a>00653 <span class="keyword">const</span> <a class="code" href="namespaceoperations__research.html#6f44eda801f15f3cd9de08a5860bb5d6">ArcIndex</a> <a class="code" href="classoperations__research_1_1EbertGraph.html">EbertGraph&lt;NodeIndexSize, ArcIndexSize&gt;::kFirstArc</a> = 1;
<a name="l00654"></a>00654 
<a name="l00655"></a>00655 <span class="comment">// Standard definition of the star representation of a graph, that makes it</span>
<a name="l00656"></a>00656 <span class="comment">// possible to address all the physical memory on a 2010 machine, while keeping</span>
<a name="l00657"></a>00657 <span class="comment">// the sizes of arcs and nodes reasonable. For most purposes it is sufficient</span>
<a name="l00658"></a>00658 <span class="comment">// to use this class.</span>
<a name="l00659"></a><a class="code" href="namespaceoperations__research.html#95c8c3167a0caffc6f615bc28f674ff2">00659</a> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespaceoperations__research.html#95c8c3167a0caffc6f615bc28f674ff2" title="Standard definition of the star representation of a graph, that makes it possible...">kStarGraphNodeIndexSize</a> = 5;
<a name="l00660"></a><a class="code" href="namespaceoperations__research.html#6fe2703e317fb0eaa16d155ae7a6ddba">00660</a> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespaceoperations__research.html#6fe2703e317fb0eaa16d155ae7a6ddba">kStarGraphArcIndexSize</a> = 5;
<a name="l00661"></a><a class="code" href="namespaceoperations__research.html#ed5bb564de2974655b4759919bdadc10">00661</a> <span class="keyword">typedef</span> <a class="code" href="classoperations__research_1_1EbertGraph.html">EbertGraph&lt;kStarGraphNodeIndexSize, kStarGraphArcIndexSize&gt;</a> <a class="code" href="classoperations__research_1_1EbertGraph.html">StarGraph</a>;
<a name="l00662"></a><a class="code" href="namespaceoperations__research.html#416534efbfb6234f89dd9f9053e9232a">00662</a> <span class="keyword">typedef</span> PackedArray&lt;kStarGraphNodeIndexSize&gt; <a class="code" href="namespaceoperations__research.html#416534efbfb6234f89dd9f9053e9232a">NodeIndexArray</a>;
<a name="l00663"></a><a class="code" href="namespaceoperations__research.html#fb1f6bf36479d8f859d80a984fb2e391">00663</a> <span class="keyword">typedef</span> PackedArray&lt;kStarGraphArcIndexSize&gt; <a class="code" href="namespaceoperations__research.html#fb1f6bf36479d8f859d80a984fb2e391">ArcIndexArray</a>;
<a name="l00664"></a>00664 }  <span class="comment">// namespace operations_research</span>
<a name="l00665"></a>00665 
<a name="l00666"></a>00666 <span class="preprocessor">#endif  // GRAPH_EBERT_GRAPH_H_</span>
</pre></div></div>

  <!-- Start of footer. -->
  <table width=100% cellpadding=0 cellspacing=0 border=0>
    <tr valign=top>
      <td colspan=2 height=10></td>
    </tr>
    <tr valign=top>
      <td colspan=2 bgcolor=#389613 height=3></td>
    </tr>
  </table>

  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
  <br /><br />

  
  </body>
</html>
