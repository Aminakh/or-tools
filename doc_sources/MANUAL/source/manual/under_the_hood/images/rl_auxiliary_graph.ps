%!PS-Adobe-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: job-001.dvi
%%CreationDate: Wed Nov 21 22:09:34 2012
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 155 3065 346 3230
%%DocumentFonts: SFRM1200
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips job-001.dvi -o job-001.dvips.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2012.11.21:2209
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: SFRM1200
%!FontType1-1.0: SFRM1200 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1200, tcrm1200, larm1200, lbrm1200, lcrm1200, rxrm1200.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM1200 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-185 -320 1420 942}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839DFD4B92DF049F26DBA77FA20B6513D
285BE588908C3BAD6A1BF20F213E587F1372774EF31D66B237AD60712D60BCFA
83574CC5F88A6B4676356ABC2DCCBA498F4272476923789659CA8836F2FDA94D
38271FA2CA8B77D7099705602FEB41085F6674B7AA0DC588C9ABCCBD9115601F
CDFBCD7A8E3CFC8B1E718E576254F5F05FAB25DC253CB561EC3604749243AED5
76898EC99BDB1760B0CA75CEAE3FE6FFF1700F64F585BE9267ACBD5F155F3122
732792E17022F23B1F46FEFB0696E5C2B78DE0479F09B6512035B9C488042B62
98525003ACCAB6C8F36BBDDBF6E82F5CFCCB418706BBEC1D4E42086E70847405
3ADD1383ADD34574F2C6C64907B0561F107A259A649BB525F0B74CC3B1F42412
C4F81A7ACDC6A3F37DE7FC06DEF21B9821DD39D75432AE3881E431569A012092
38FCECF1BE90B0B199DC4D56EE18658B2818B69FB6836486BA302CE7F6EB18CD
7AC5AC6648097F65C8AB851E9BD1696B9703230711F68FD82E1DF92936A4B1A2
CCE51645573EB0E762D68A417AB6C0A2EC8756FC9BFE5972DFC4C794E948A970
918BBB1BD7B31F9B1B323EB2AF8D41A153CB1B1511F43560825DB6ECE30C16E4
902BFD1EFF59F06984F36F284553AB3F2C7901B37ECE058F5E477EC9C629847E
1C7A3628DB7C47C099A0DF53F05ABEF94A760232985AEDEEB7AA05C95273179F
8A1AEA30BE626653D22F7725C28498D776493AF6DEBC59D44A2F6F26E5DA1A77
7B9EB9D897130FB3F6017F80AF21E4FDB73CD96834152BA948E1EC4765B253A6
565F51A1ED2AC8374CF4DB767E7F3FAF13F0A1198110F554CB6735D3C2DABCF4
0C0A431D263F22D091D0F560ABF5968868126430A293C6E8A6A87593E580B110
E15A84AE30E4846980EC5C1FB6D4037D7E1DE8CF57B6A60DD4DDF422075F85BB
0B1411164E99A03A3591915372454A70C8CC75EEE08AF87D35032DFBFD61A4E9
F968D1F514A69D62B30B89F47FCD45A41B423664A7862A1246B6D7C5E2B352E3
D5428D2B6677D38729C5752DF835EAA366A11F6C7564C80EB1E0A3EE9990ED0F
520EB2AC073E63DD9C935504D14BAB14A4305B3D64638B6D952333CFB7CC93CA
D84B6DE80B35AC82623BE64BB6C1DF9165E00D29054A5911CEBE09A2054EB39A
7894F49184B672F4AA1143A2633647BCF502A77F12506C02F1A78AE9061F1497
CABDF651CF5ECC83877724A90D67D660CD4C54EFB79F9A6C1DC8EBDB66E8D709
D4C0A81E7C7EDB6CF1E266B753AF6BD100261A6CDA280902D3F0D15EF4042F54
5586901E870F2A99727E9B64147EC20330C3E54FE01AEA9875DFAEC86A0B6F39
D89E035185C3A6B25CBE093FA5C7BDCF99E5C68A9EBBABB3D61A6AB4F30B4D7F
94F4B4DD1AAB6C22FC9A18BF46B81CB362B87BB87E9552402C35490285FB83C5
EA4825225DCC23DF406DC5CE8E67FFB64DAFA43E89D6C65BA6C0F41AA44EECFB
DB8B9ACF11B6ADE903B6EB177A00E2B22593F7EDADA3A7DD72A3BE1D488E5BEA
BB9327D8B0187CC87BFD35F4591D3F63B87490338692E1E8CBC869CA13C68761
6276CF2A654946B67B1885F915E2D53E923D1A7B9D373539E8AD0C47731B05B1
7E627B68C4C1C9FBEDD4234643720D3A7EE90502081339CDBD455004D38302E0
FA91517F04289EEB213EA283590D0EEA039CA3BA5694C0DB35F68EDDE43F0CC9
DE58D2EFEF8E3D81853BFAA0BFB73296E70ABAEB606ADCCEFE9AC3EC7736215C
B144B249E1FCF4A66590502254335D9505C9A962FF3A7D45FF770DB07AB439DA
BBF81F0F47330560107A6101A5C76F54C285DDAD4E7817C6B93392DF83CF924E
00DCD4DD8BEF1136AFB87E24A20883FF87DD69789556A974B8807C5F8030CA58
5301124D8A96D5B23FFD181D66140874153114B81A52D69164014ABE126D1E47
6752720C0CEDC0AAE2EAE314CF25CA05C3D569CE8871B49AAF2F371CE632A913
4E4735863644E0B7B8CCDD82F1709F81DBA6440AD57B94A928E1F15D948C7EA4
105A252E3AFCEB539773BDCC8FE919D55E1351579EC5C3EBD311A8EE9A9373EF
934E4C61DED60F0FB051231ACAE4E12B03013D7B9BFE305B9AA54B0AEC8BDADA
C3FBFD3A4ABFA43D98F2991894B0E1EA7FCEA4843CB86FC4DABEE41F24ADD548
82C163617B77D65D423C565647491E885469725CF356762F01753FE97CA9643D
7EEE4365D5C807298D61C1250921C4F14BDBF39D08F3896967A5C9BF25113779
7C1909EAD87BF0D60C43F1AE79FFB1A23620EF2C324D5E6F6D00CBB22BE70E0B
AF849544750046F6031B872CEA4F6843BC35E05C73313978F2D74A52F2D52095
25947CFBD1D90A82EEFAF5750631A17DB096B594B6C033ADC43EB9328B5366C0
A8B7DAA7048C0028AFD0E17D3A435C530ADF039B402213DF9BB13372632469D8
568F819DF9554C1930B7B3C6FAC84650AD5454E5C0DBDF10DAF451A8D99640A3
00550839FB6356827BBB65B73F31051792CDE85D8598F0825CDC92D8957797F6
0CA60789EF683AD4C7D307304177D48E8515FD26575A917C9E7333337E070509
2783D66F0F50B55270EC8C75BBE78CB32E0133765517039417C35C57DE3B0D45
97863BDB6F0216EC699AB82DA5AE17C56E64998CBEA5DA56916984CAD87625ED
98355974A608CB758F2FB28EE42A76F11607C84F944D3FE51263A8DBA84E93A7
BF7BB6DF9EA825E6DD1B38F09E0010533BC14E56C291413C50141070B380466E
377DE82A00329C607B7DB839267F83EC08B4819411F01130BCD93B9C2448D878
FA41518DBFB8817CEBBB0FA2A3A4A0341C5BC4571A31096F341A0800454E7455
74255A02CD28BA9E87AC9AFC2A7EBD517C7E93896335DCACBC34A1743D5A1564
B5EBFE988742ED8B0A251EAF8FC3754387F5237044496B3FC3D430A28CDAD9E7
4EB97606906EC0CF858FD8ABEBE66AEE30F62253BC1178890D6AB614FCA9FF17
924B6F0B4432A66990C1D701A498C911031A22BBC60D8D893ECA20F660AECFC1
74B5E419A5779E7E9A79D38141A4D34CE51645DBBB7C726B5C20BE1D5A364A21
361D9B6A7B9CFDC36B946446052A40AEDEE2FAD548E3AEE8B3FC81D6FFA0A37F
3407A02B06A2A3339854CAEDC5440F281F9B75C6BE3F8948E5A8CB3F4A75E17B
FA9563DD08C137E45A5A679000AD3F556DB2D3EC30C2E710CA128E8B9C060E48
6A72E422BA7BC619CD202D499070ACC0CE8ED9357229E58E8388BBF04AFE158F
EFB01BC9D5DAC2DE1A980B02E56CECC8F1F65A358A6D9B700D894DA78FD0AA95
96C1268E645AAAEC5692F3A9206A85A4ADBD8C93E822FB322869936078AF2252
858B3183913A0BB0660FD8836DD2E0C3327CFFEE26673BBC2C5502E960074098
EE208170447AEFC43ACB5569CEDF46D479F1361AF8C49EE51DD153D03D65DABF
DA2A44FAD2EF1016D652A58E1D271FF6EE621B77F5441CD9AFEE797F31CF6C2D
709DDC52E527C49A2843B1F40FC33D0F1A05C2437133F753DEF24BDEECA9FD01
DFE44D65B758F97102E7A86D610A4B7B3EDF4F9D3C175F633645BCB35871C931
4D59DA9E625DA7395222C1E9BB70B005836CBE4227D96FF00DF7716B8B14AA1F
ABFFED13FC6652F9082D979BF4D846922C4683804E388C98F2BC6BA89DA2FF2E
98B2A22E6F40D0F7E435E4AB844D83D12EB45C39C551E53DB065BD8CEEDB908D
61DC7424A5461320067CB0789CB14C82E7EFA02DCE2D37710B70F0361CE951AF
FDF4C04A1EFFA9FBC7935837113A363C387D55650E78400F4C45F4EFFBE43DFB
BBDDB4E3D6D9170F363918FB10C82BFEC6CFA8CD74B34B93D1931E5FCB41F254
2DDAC0E9456D4AA23E399629F084B3E5824DD9EF586021779CA07475972A7B60
645B1535CF943BF2862E7DA32DD1AB9FA58208E092CBDCB2E42C04E3ED3E6A33
45316A2EBC2106C9A4C737E5A4BA649BD0EF852EB0AF79A5EB6A574B199F1773
D02D36C09D3484710193D79B9B3EACAA1456951632B40E85F393B0CD06FC306E
65B890BE05070F67D839C7BA77F888E53B9AFF03701E4A1945E305952357899B
311D5021E640F33D69D02627465E8326ACE6F0EE598A5D79A5BDEE7B07BA3E87
D05609F98B80860AABA6921E161C6C6D4FC06E57BCE9D9AE159AA59C2FF42B77
43FC27B43A9CFE756EFAE0900E12C339FCEBDCBE9300AA28279DA8602C91496E
B3EEC816430F8B44004E105F7D1FBD0A60B14F481665CDC62F4AE6888F635636
90FB763DB09DF2B07BBE67E397FC2A7EBD517C7E93896335DCACBC3C32964975
51B7324751F5E3B2AAFD32A729D1734301DCC4ECB8228A7D9FC213A1475ED7C7
5978263612A2B969E2120540E9B650E20DD78A189EBD2A1990FD2BB1C155658B
B79D3FF159171D6532306F07A1188ACC084D5E2836C37C6F591B11725547E880
21B3BEA53BCBAE7450A0E486FBFF4A5199B53F278437C43D7E2AAFF3887EB839
F7A2A9E0DD6EB5EA622C5BEEC735AFD8BF715E80C511A96F064244637BBBBA65
94469B724EBFBD5F449C3B2F07027ED594D5FF033724D4D9EFD3BF41EED24401
A9458D10A5C0052237C6351B52D109D3A493CA9307301C2ECBD26AB364535467
4E8D1E3CEE6C21EA9667D6B02309230CD3D27AFAB14DE187F45F8C75DDF3742B
6FF2695DDA75E791EF3D8B4489F084A0A1C31B8CFDA9568B3B836A9477F6D147
4831DABAF873C5D6DBF2F7E039F5B0DCCE57E1D7BBD15535E200142A969283EE
75607631CAAB9AD5C6995D1971CD164A00901B7C75ED7CA325F98155AD174D38
A746B3286F3EA1D67C96F492A3755FE79334D07D65FE355B1BA190E9598324D4
264B30F3A03F597602AE501A231D325357A24634E75EC2676122F9ADD82472F4
1110CB02E02FB33648DC7DE0B00405EED3798EDA35F2E7C81F4B455984FB0216
9213214E89E0209DD873557C08C564985D464F639D0B81E85E7AFEE08C99FDF1
EB77AEDEFEDAB18C6800D32086FCE519E27F26A8144C7D576228C102B51935C1
1E6A1B3FFF2E10DA7F6F6E80F5360573AC236E17EE5F7F1A518EADDF9D8A1C8F
B1108673D867B3930FC9BE78B784D786FC209C014B7E2F1B6809B55EA360648B
7B4C01658E4E2822748AEAE48E2D6E752348C545B345B17C9E77BF875D7087C1
2FC6CB4050BFC255644B6AA755A5367DB884D5015928243B9E13FE68AEE2F5C1
0C10A144EE909743EB7746AAC3E9E93C8DF81947C8D2FD6B15B6ADC4529EF672
21876312E3B633E947302946316432A9C52A86F39355479C01500B01C7229F68
E7C55F697AE4AB8F9BD3F364DBE539F7BC5ED468E6CDB3089611AA932E55B0EA
4A0495CB2CF6F647E0A7EE9BC7B7B45778DC84A513F352B2484B2BB3A9F2389C
26E590F80B927A12716D38ED5CA52D6FF10DCDD39DB33173FF835914FF0482F4
8D86E13709D75DDA67480BEA1F545F5959E806B7DDCED2CC26324BACBEF8D0ED
348181B8A842FF8B0BA42807334F42EA60FBFD10B89D0E8AE7041F52C6FCFA64
D6CFB1D9703F1A17E3776FE26688D3A4AF6F94555F9610FA63248A467785F345
1297BEC0B7B03808FFE6EC885C0B9D3C86AC30B21F3090AFF572C7CCFDD71A37
921E6A8A38F39D3B2FB467D74C35A99620B27508D3CC7041E3062B67193F4965
A00712528976DA15412A161D64154D62E52F4B02A5C1A6048FE72F1C35C614E8
EF883AF97D367F69DBF734BB2A148A7B61C78BF7FB2277C6E81ED035F7969DDA
F35765327871EA80F02CEDA213E925728EB3D1369EC18B8B1BF27FD0BA060D3E
3FF5EAF38E35BDEFE3E244247E1F7276515015C511250DFFAEFF60809202734E
D86FFE50F7406524570EA79340CFF5DDB768507DA2CF9AB31CFF42FE6B4F00B4
4AC8BE64E4B919C5A575977FEDD0B1D1B89089EDD9D9E9C4C2F81B812A11DD51
20003EEB6A54C48062E65752300EFDB996858AE9B81C81D94101F851C9ADF7D0
CD1C6C5650027C399BCF9B1CCED2DC1EFB27931D52D022D2AF881C608322E2F1
C8DE42D0C0DF0B44B96396F92CAB0A4930567A877DB9FB7B18039707275C7B2D
D301B647DA52C80B89D0E0251C397DE74657E3F58DB7AC65BD5B8339011DBB61
B5F320965C5833867CFA739E65121B53C83E7B9A1A5E93702BF3826D5712D175
CCF9A789028D97F4F7D30CEDEE24E262B087FB0031D90BB7149E3C385D96A76F
CB6F8A806E061403C4ACB7DAD37B57B9D7F9B92860C21F0C4FEA515F629C9A8F
9326A2D989A86EACFA14221F9ACC5C474E3A51F1FD15B89234A997054D54BEB0
0D5F64484C414BE3368980755318BB1AECA0053CFC1235AF90051CDB190E4D00
40FFF70435C6DE67B8A5E1C114B6FC7CDCB05C7A0C332FB91C70591A71A951CC
34EED0406AB81B6A6F803474FA564202DE1BE4788A2E35A3973F350FBFD52A17
7BE84F2C5061FA927A69F6A4973668749143D43EE23F12315665CF631D705A9B
7A591230B56C94DC1783A8D9487AFDB79F3F5783DB2AA4FCACC8DE9CDC3C861F
663350128178A0F799A66101D740462B21BB06A88DC601CE3DA156C806C815E3
DBBADC3D3C24FC9806591084BED3F82E41AA559382E3A39F91D15855705CE225
B83D27A8918B4DA11DBBF343AF52C66D1327FF21FE901B3E17A24453CA546C83
963DB12AC04CF58ED84FB32709CC538DB2D3F82E41AA559382E3A39F91D15855
71088091059589398323EDB1EF54E133B6DF46430EC56A8C17BDCDA17F711169
3802518E1F3E3A25A9CBA3A0F8E5789F7B233FA7705F34F80EAD8A2BD4C29C79
E4F150DF66DEB7A3AF751CC15ACF3E0F23129000327C2092232623355EFED73A
F0A20E27F578F3A3F6E2178D61B6228B16640E4A8594A1702F6F3D52DA94FF37
C018A5211FAE935F18C710C2CDDE6A14700276649D850B6E23AD0A136470CE35
EFB6C124DC09FC9C27F6CD85560D1A731400CEEA260E50B4D1E4650CFC122B77
18D07DB30A93DDDC1EA9AE9660D3465059E7002AFC5AC62E5002D7CC41EEA18B
EFA9519370DFA82577AB923333891496CECA8C3ACE05DE85878654392450EBF5
4B9DC8441FBAB5BD7E68C13693EC4D92D2D33DC9298BF525779471C771ACF32E
6207F1D0D76FD6B5946579F0110AB4DCFB32E891C4797601B3B3D420CCEEB0FA
4D0BB8CFC08D05A32D1DA61A2D6C657518624A1CBF85DAB9EF379F7525591FE3
CA232E5EC3A95199084885C14341D8A12A491E774EB948D28D1DF98ED24161F8
2CEC0550084F40A4A161FD347082724CB5A62A4BD7C5BD44875A55897D2B532E
906D7FADF57D33E98FFF6D8B1053474E7BE21AD9383E09BECC1731700FC34FB6
670259FA6A218720C44A3BC393291FF022C62806730BE7A6FC13C4EDCF1C3FDB
4BC86873D179D88A0A94D2B63DF5CB351BE00F3685CA11D23B413805A02B2701
FE46253F1C58B4498D025DCE099BF4D8AF0916FC6BB84952274B94BEAF0EB7F6
1772338C083C728998BD1AC0D43F1AA653A237DDC1FA62A818A0423C40DF4E03
CF604FF7DAD557479E6FE5E9DD147DA54DB76A17466BF5692B5FA291DCD6D06C
DD3378331B86077B661662FF2163F242E2782FED4D6C76201C4BB0531D4F5306
89167B7DCE2516D380B8F938F2C8E60B6162FDB3B1963A9B05FB073A407C9EF6
D513E132472DDC7BAFC5E508E692B3E5C8C505EF874F28F29A45C95A24DD663D
7CA52551DD10E2B4D77154B67E516CABCDF5A6914FD502AEF1F6F53B839803D7
3D02D85863468D175D44E71807D35A8BB16DA3E011FA2B757F02EF6276E28FCD
D9F6B54BF1CC6B9FB9A5C5F4347030843DD8467139DFFA34C959CBFB2869B4CC
380B1BEA33070791A9CB5904A2D372030412C2AD833EC1C574E79475F889B9CE
9F35493A1B4F76D10B138C09D4D34B30CA2D6B37572F5CD259B75400B09FFCC8
DDD98DB99CA1C54D3B05D60B0EB6EA44A0C27A8483109B33B185AF2472E5C865
FAADFA4BF11B743CCF6AF25C1047871E270F4981DA77BE6DA75EB8A93867EDAB
C048370EAB4E1A29F597157BB0FB68345A5FBA715467566EFFDA01F6CADFE62C
391F52BBEBC870F8159BC0DD744F393CA13D56C501F630BA5060DB4162EE184A
D04DE7A33D11323133199750DFAE3058A6A578FFE769BDE940DC77868621EB03
235FB9C69EE955D8FB17FDB11F8C0150170A486455EFCEBDCDD341E13F8472FC
0CE8CE250FAD72B8A85B7F11B8834650E77F722C72A8B3658327026CCE185EAE
AF8A8A15901A2BD2F718B80798D95D2F9B88DE2367C2F5F4AB7DEDE41D893F7E
391F2645B71A5048635018363AB00180088C865AD41F59EF9D9F2C27836B4AD4
8DBD82A2B7F4238976835D94E3FE783FCE22A6D0C85F77BEE044E0E82F9A0DBE
6FF93851388315DD9132698163478EF7BA1AE7539D1F6F70E6740EEFB890F022
E645A523BEC12B758EB7287A4496727CCAD7B7A27B364F8E151CFFD75466F1B5
0E3F6143EB935D04BBCA17933E808D983730D40FD0515F26D772C5164C1FB86D
4090A78AD11778C8BECAB67C4ED2AACF65D8C837F4CE15FFCE716511D20567A2
6DC69F2A262E91F195D2981591A75E1E7718EED1319B8ADBA151201C9120AEA3
A55701EC10BF053CB470C7B462C654AF5FB352854792C3AE8C708FB02B9C55E9
18E23EFB32956A7D1BC11C9D09BAD69D46B5B00567877BFA0B92F5C428BC938B
B98855DC92073B0FCA30A71BCE06C6DDBEBC18AB27295641C5D5055483EA3436
AE9A03BFF61E7F460B4ED9469130589751E161B5EAB590C0A2FC62EADAB37213
0BB195AD7D1232978841DA122921ACF25BBE46B960987BF974A9096C79C90820
512DBF2B045770D4104835AFD491F98D85C9E59B0B3F6C528F618077F413E946
59865E2906639056CF5387A943013E88F84D2CB8B828E9D1B42A9C58F93B1268
4ACFD587E12ED82154CF43A63B9E656CE876F818C7179C52119180E38CB77311
1DA5BF089894BDC1BCC5FE46C75BA73CAC565C2897CA1EBA45535A25C922AD1F
F7BC48E61A0981301CEA8573FC804919E0EE4C1808EF9229C04D4C6E22290921
1E814F9C663B0EEB6818F0D49C2BC23208ED4C0449646D764ED501A6A18C229F
A83A47EBD7357146FEEA876A3AAD2947EF117AFA0B674043C32CB14CDC13CE03
3E1E7EF980861FFC8E5812C803FA8DAC277F3583821D40C1D0F95CEB4E07689D
C619AD0B6904B356AB82BD49EDAF7C1EEBBAF7E1CC252451C2EF788A4E5D4ABD
82B2D67A1F3D5558C1AAF8DBCD398761BE75D3065EB24DF1604FE15491D7B66E
583FD6532E87B80604576980386AA6BB05062BA3BBA2174F6F439B77E4D415EE
314143DCE6B389149BA88D8A9C09E1D95EEB271B48E1BE9F377BE6985D203CDE
87B872129CFF76089F2CEE01CEE868EAD1D764716CDBEF5AAB2428202F6F0788
60F5CA6C63D7ACF3495D20AF3D45202B15658C19E3245DC2311B6B59B33F6487
18216AD662812F049EA44CD7DC6F714656E4561EEDA5ECA140A59593042533CD
81A1A85E7496EDB4748F0FEFE2E46CC68078DDCD29320F71DBCFF8143E0BEA69
CE67770410F53858F972B851DBA214DE190F010647319AAAE6FA6A38ACF4C250
0D5E50634A491C54D636A9CD78A2C85AD36C26513246E2E7929CC252C377E7DC
5EBCEA17E949ECCC20D07D571FB57B9BE088728150E0A2C215611570E53AD0B0
C0E85C96E6B1D0A098DB87BD9A39A5092CDE38413EC544BD31F8A19D5B2D4EAF
61C588EBD478D1FC534C1F062889C6EBAACA336C378E1C5DC3B29A1E35BF602C
8DDBB2E6B432F8F51FF93DA9079E7D58A418A6D8C031B46A6B1906D47C2577DA
0476E3B2491626CA7407E2FF56014214CA66D8D374C64C19D1C5D13508AF40E0
DEB38D7DA36C627E909E57392327D0FB6795119498A473CFD941638E08348C18
770DCA514BB9806884E084BDDE7F81A801CC74BFADD691CF5997AB0BDE26EDF4
9BD16583F2B256DD12BBA280B3FA8711C8C079A3EB39A63B93F359409B9F98DB
15F51F913902BE373769E6B9DB3E905068EAB269B796D1AE07864314B9EF98E4
A6DCDB538FA59F017CD31E4F0F306941A5D5C49AB45310891C6104967DD9157E
3EF7EA316BC949275E376FBFF3DD2C978561DE4AFFE20479ED81767ADBA230CE
A0F5B5092556F0E1A4656E90C77DC50966B9A2828B355C951B6F4B4A868E118F
8AE0E11915A9ADE7183B11962A40F23501866DDBB2E9D768935DC194CE1531F2
DF116AB4C81C19346F8D8A1B849F6CDB0C43B3590D1F350296EDD5351F5C77F7
5206023DF38C6954DA675BA8D269F4CD60147C6D2C1E13D2E6E0C385B301C999
456A8F6AB15A39F8910D086479FD6AFCADF079CD1B8D9EB331CD0C7DA4853E7B
A577729133EC6886F40EB540CD50DE3FD15AD97EDEE0807726DF59815F41936C
A484E08294E0401FC5ABB1C39D7B72329F99969E39510DA4C360B0F46EE6DC5B
559EAD6B19DB4034A6E26E9097BBF995895E8A59F10B0978B9C17AA0BDF094E6
D53F23D223E80E9761166AE0FC4EDD40053E91811343141AD506661CFB72E3EB
BD5CA2346D200F807E8B596F0E61E8D325E4F0660D6951A8FB96744B995EDE3A
DE08B95255E29EC52D992A8A6438AAAC7324595A421931A89EF08F9B10025C66
C271A95898634CB76DD78F6AF2B1C075B113EBF929B568E9ADFA98D7465059E7
002AFC5AC62E5002D7CC479E98B56118C8785F8C3792689724B632436CA0F0EF
CFFEAF39F9C9EC92F1DDB6F6D7506A8068F92EA79BFC91EA5246A71EE8305A35
BB6582BDEB2B13D50A6A198BE7715E380D4E7DC5DC98C743A4ACBA2B6C5C5405
EC6B93A63DCC7E9DCB4E021603C7E52243305C547E6AD9B24A0A08AA00186A7C
0EF831803E3212F6B35E750A0311A0D89DF6A1D052881B85E359A65F981841EE
4F938CF5B5620D291692421A9757C9B29841F7FBD86464E925E3E263AC7648B4
302DFE08F4F49FBF611DBE01673A1A38FEB9506009F2CE9D025BB9B7C4F11E48
BB6D5ED9A3FC6EFC69EA1CA34430E58501284F589BCAE3FF3A7F77691670F5D4
2E29A509EFD1DE47A642BD89869C16344DAF4D57F69EAF2C9D88C6E8F2AC449E
B7280F87A1E63212A166F28348A0E756CDAF8A040110D3161CCC195E842E2E1D
B7DBB662927CFAA66508B2900DEC3147ACCB854A74DEB5C646318674EE324013
58A2D5AA8BA1EBE320853CF9382928C2BC7E69E9BC41279EB86D0C2F54961DAC
E07D8D2981261CEA37E2940A4E81AF64FE471295148DA7DEC0DEF583D73EC28F
FBF32747B8EE8F495EAB058950420006CE3E9BFE96DD1A16D73FEC45A40348FC
8DA1BA1E800443E4D2EBD7151E2289759D88CA1555438A439840827375492BE3
CC821786A49AB115A20B4161DB56890F7612865BBD9A1517F46B0A00ECC14BCA
53DDA2F5CE9E6EBA4CFF3F44CDE174513001FEB070116A145DDBA938361E21F8
54BD89CEAF1BEAEAA1AFB0ACE9B1A6ABB6A93E5EEAB482DD5F38B726B5572B15
A250EE1F2EA065FA81E7E1BEA47570A60A63AC690BE80EB8A243246AA869CB90
6DC9E9849D674A1F8DA25604625B07BD1DBEDA64BCE4148D378FD275AF7721F0
2506758066FB3667FE44858DF52A90A41D2D28B2A8A83E323316657A3E5681C4
DB9AEE6BE96268611C1C54AA679008383EEAF0BADBC51037DDD271CA84FF1C64
CCD5E7D86AA3D18EFD237CDA518DD2B3BFD99F2DADD5AD8283DC9CD1C81B96C2
67EBAFF185F16CFD4621575F712148853B1DDB2CBAD9EAE38BDB414649B94426
25F953C9877459E17F98A36A628FFCB7CDA7ED2CB3089618B36005FE626630A6
8D7D5B2CC0457F4F22E4AE235EF7D346DE3E01DD59FA5062A8A3828F73A1A449
4C1B514EA6D15D7499A52D6EB6C1B74A091CAEAC8D1B4426BF5DCBB68BC537FC
3F1E7D04513F0DA513AB2E735BA99883C04E8D702007937BAC5970AE06F95915
2B597AE244F71424AABDA395BA484231C9B7493CF2A9FEE4159BE3BE50D98DF7
50790838FDF8C1055665585A92935368E4CE7B0444E459CEA88CCE5B79650B71
67D564D4AD768535EC2DD30B9D9C3A09A43319BF4709D642B23BC007F534491A
E05E832DB6EE7224E66D6241D713E51B0C8061B665107E4CD2902073A5FBF9F2
7E941898DECB8205C7F9F15728751331D96F7B4EC637724FEBFC2C90381236C4
7E45C293D1A9639FDCDA3491CC164D07F2F4BB8BB787F69F677BD2CC94A7F802
46F4CC8AF74C2B3205F4911DF3C24C45535EB920357D4A09F1F894D5740CF84C
A98EA819BCA489F536A2A2784558510FDF7FC059FDF1792F7308A5B457AAF17C
0B903C55D1075B6C249D03A07B47558EB409FEBC95E755B0C72E8B0135C80742
E7CD00DD9F520D6F44AC1C81941640FAE5CAFB1E25B8B7A26FF50945BF81024D
A99E76416E7339222BC8F3001AA4D4D0F843E616DDEC48873C1E1900E0370C9D
A12ADCE4F6CAD515667BC689CB2AD8F968A7A22B9D3357A0CA8032B72C34EB5A
0D86A3187D26F9183D81C39A0CAF0B2CEA8C36E945B51006DE85D26A58DE78D6
A65C1C167DF97439215C7F715C1CD466145F55867C08D68E1A58B08D6256019D
D02DD963B25D0B92557611A04680CD1049EE3C408E4CC2537AC2B29B27BB6830
0E0B119549127CB423211A102450123EB7502DAE7A2CD731CBFB391842067E86
DA1619E09C929ADAF8158B07DAAC0DEFA64F762A9B14F260612BD09BBCD159B9
9D5E28675511A2F2E779A595BCCDF91AA918766C82A978B7313920136B6D72E5
9CCEADD4EFE91D35DF767EFBEA71E88167339A5C647A2DD635CA720E82D224F4
8D08FD6FC7CEC53D591648D3371C295573B72AC403274C694E5D0DA086416E55
615B62AEF4154AA985454E2578A3ABF3E84683E13F89FAE4EC3D3E9D91804969
247CED47FF824A9F0C86A27F05D2FCB1190A50CBDC31EDEA9474963E4C8155F7
13F9F5133667719C38886EBE0F7A0BD7526BC9D3758E8635437549A943D248CD
123E24A709B82AA734B191EF21C8448562ED00E193DBD41E32155699A9300A69
D2BEE293F0C3B0E84685D87C1736690F7BE1E1B9D9BA4C3C65004DD3BA19EBB9
EA2FE992CB567AE0C7EF96229D937DD85018920ED5912F1893B71A1E42444449
F88F0040F2E6F98A03A3CD4511A9CDD5F2054FC981961832D290183B9362E7D5
F93A478D1D444E0C94062901BCD353B32110DAC577635B3D502C79016A6E85A0
2FBAE39DF1DDABE78870DDCF65DEF83BF23406B1B4D77F3597ADBCBF4B595CFA
380C76DA55522BC499AB974AC2C5B18A481291782DBB30B62315BC7E0BC1B282
E3347BA8A151DEACBF7B76E20F137498042A2509204701D348ECE5DAC1F2184F
8AD515F1F5C198F7B5A18B025AEF26B79B73E4A236113D463DB49809344766A5
E52C3F7530BF5100F8FAC36C3C60552ACEEBF2095A00325C11F6039F60816D45
36C12E501BD69267B82D4FF32A9F888C82FA4B8561BE11E57C0B7AE1754470DA
C5A87B52EF8A45E34A49ADB7B589803F13CD84DDF83CE6BC979ECCBDC9D16E2D
A7CB1B0B2E65DFCD8BC763A3DA0EC5F29686DC81ABCAB9B82B777FBE2B9C04DC
5CF3C1C273AF5539FB0DF85F286FF5F99734D0302E3023EF48F9C3DA9ACF9307
910C104FB46F55D36D16E1840A7BDD5624ACC6F992BA5D7F5BF06AF4CA14D5B7
C8AFEBF41AC876F6449AEB30836CDFBC5A873E23FA9287DF80B4B0703E070BAE
12FFB08716CA31D096F1C7A3F82526449FEFB751FEB97858184693E311D612DF
932CC0A6C26C470067244D562AB43DD031966CC35671698D9578AA0E9A27B9F4
76F52A0BC71F41E601E638B636F65222D0FBD61F947E7CEC74DEACFFF4128D67
ACD0CDC46E4D5B8EB9A7B8B65962A8C2C56296207A939C3872CFC6D1B904E1BB
C5ED50D3298508CC4AD1E404F78598287D798F1058483FA75292E7B5BFA3816B
3959F9095A953425C8F4182ECBDED49621667A431358DB124971E927EABC54BD
A5FA79409009056CD3941F83F3511423F8F1F033B04EFF8F09AEE11480BE112A
B4D7D6CB81F1D1C5D03DBA11CDDAB88183C56CBC4E2F75B087002737AD243343
BFD8B231C087AEF78833EA9527FB3A9FAD3D122B46921DF4B23934ECB63FF6A6
96E761043E454A19E5E11EB30353AEE5B4BBB484C74FFFDCCF6618D7A190D7BB
2946C9A139DCAB0EE9D3C266940535A7CE7F22464A53BC64154115CBD0093270
786CA9A9FB28190C632305EC9372068D6CBA9C3C0FFE89C42167345906FF01D2
4F2F895E0796ED3B1D7E64C2CD14DC157D389927597234EBFE9596DE58DD5FAD
0A5F6BC045760BA2EAE1A79CE02643D05F1C4C9FA4D841109B0E87A33A63AB9B
0EA2D4702886C41B44582BB4DC9755001782FD34EF5982DA0F461B4AF5BBDBDE
2A30228891CE5D7C4E736F8C32145E26924F2AC89EB6DFB260E11D6342DF37C7
1640FA97A54BF386A8FA5D495482F91AF9D38C6A2C9142A6C7EDA56047E8E08C
8C3E01DEFAA505BB9E49EE6A4C30225C11CC7269D5FE84EE34E748F9F734C2EC
456A2DB4C6E129D48595EB2A7992FE03DDDABE835018174E7BA2A5D62DB322F5
89A048F0C7D23DD4B11E6F59A9573658EFDD32862914E3C279EB87475FF18708
81D8F1635B6A80F5C513B622E9B12A2A50732A1949AC1E744E8DE57956361F69
968BAFB0B90BFB8260CDE867EA8E0C73496C8B9154D67C5F2FFB4165D8E446A8
BB0824F1CFF040D5AB5101006E428E095104FF0D9A201BABAACB628D3E04E1A0
3433E8A3380B28A96B4D0F58F06026F18A992AB47E5D011CF021412310E9EEC6
343D616B8EA3274B6F488757A7615E5F01C6D45CDD566CFBE96ACED7FC9FA9CD
6155702E80EC2CCB3EE74AB0C181AAC25E3489DFA7DF5B60CBF72097DBF8A500
4237AA174DA71CA0BBC5A2AFF1742CA96CC19294DBEF87023496DAF1EA2D070A
9CA39FF0BE09AB4C30842B9B2D6C71ADE0085B0565709C207CF9E674371F39F8
B045DEBB10F29E58E264623FB7E3F9A86D88E57B25440D3E8E1DDC3ED60AA11D
2373C42445533AAA273E1760747D23AA12F909E46BEB631DD730F4E970352BAD
D422004B906EC23C470FD411416DC3977FA0B5936721663B5D50D7EC751FA142
9BD0E01CB5177CD0AA15DB43A333002955686EB86076D2141C5F37543851E425
58665F194B92D6EDD4ED72F479C6DC687BC2C5AB96BEB6747A16F71109D8BAEF
2FAB2AF2A45643F6031E51CDC75BB9E76737DEA5C4E075DD0672A698E6CB9015
D4B953548D8F698F0B6E3C815D9335CE70AD5C7B84D535CED162B65CDE6FC010
EFFA4F41E5B8A485BEDF1D6F0D83E9F90F04C460A367505B3851DFB2176CD83E
4CFC024130CEFAAA3B56848BA94427863AC57098CA7B1654A1ABEC93E854BF58
B2881D358B4368ED76CAE56C845A41274463FF34A91270D01548C18F2EAC97AB
0570581EFB1031D18656BA938F8082538B8D756E2430D4D93C7CDC3359187946
79393920FCED806F99FE08FAC21AFAEDB2481889C8C2A702797184020E242DE9
827D8592F26BFE4ABD17740CE8E043B65FA26155C2B74210DD5E12742000AB03
451EE466967076A26A1676748D6F7DA19F96B7867581A1DC27E148BE669BEF68
F640108C76DE61EFA9A9D580395C0AFAA5C871D0BA5E76FBE3D3DD3AAB61E294
C3A04F708558236C732BC3D8BDC82E71CE5594D0BD7ADDECDE80BCDBC59DCAEA
0D9B38D460A7281F645FFA51282163FB56D13EA2FECA20395AEAAC38FAD76397
FF95DBCA192E7F3472CAEEB51F8B00002760DA3B49F0012D35A33494A12AE957
D7CBFEC5C434980BC346DDAC31B276247869F13462DB05580F3DB8D133EB67C7
699E0EDCF6E74003373EC112AD08568970B3B238B000A5BB82A9581F33610646
410B37807B8074D91F0DDEB073698D969FBAC80727ECDDB9EAC8C2432C5E2DBA
0A9C07E2F8C1F0E3761CAEB614571AB32662E97AAB87C87A02DE6B140DCEBA5B
CF54B4E46E4C8B915A8877C9C6E3233EBD11A563A2A754DFDFF6A68AFF4A8650
1E604B75143340EDFB43B146864CC45919C89507DD08791629A6EFA7136BD3FA
F4EB5EF92438948389F9B86429FA1316437D638F81DBEBA34469EBF3E13B6920
51844BAF5F2C3E5946FC71DBD9CDB5A162A1478A104FA1C015BDC39438C8C92D
6B4AA19491DEEB617593AF2EA391CBD0BFB6A8647A23CC164CBBCC991728AB57
157A4F23730F461328B8756B9B6296ACB53B0B2B67E323314AA8943E42584F46
57300643668BB539FB1102AB4F4B3199AC0A62A732EDFA3697A3061B2510B271
A783CE5826791F7C7049CEF6F316BDB2261888B7F27BF2668B69ABC60AD22BC7
6773C14FE559277CDE15A98A629F4F33D34FB73DE87A663E067E7F76A823F4FB
0F98249030F3AA9F2219BB4B41655DF48C3D759A322AFFA4DE8268FE22AA597C
62FAA392F690FEF55F4A1B5573C62149AF23687A86FEAB1188D7B2CA8BB0DB99
9EC1884BF6A7A9DAE32CE082569DAF274429587A6EAC861B434718E19E86C89C
D298927D32D4DB5F3EAF8044DB90A680AEEA2C1F8165B19B466922F977224D98
1FFFB77A676581BD520A7A9A3E98B00955C782039BD0FCD014B4FEE8EEE843E2
09E6CBAED061E0B283AB9B9022011D95D5A1E251E6AA87F2A650BC48D6C88536
6443F86573634E0097A512550687852014C1757354906210A18264DD5160DA36
2C497BC78A4DE70C67011D192A3C199F792C59A977A12AEFF48B3603A1C713F7
CC8CF26989B6F0A7867958408D6FD7A6D8B552F0C9BBDA8A152D4C97A5076E4C
6FB1768811825F5F36FCB4C289FC8F17359EE0EED56878A3B809E5507100BF7E
70A3FCB18E3223B4144D091B2329A85B143A048BC114030AE10DD77056CB43CC
1D782DFBB6EC025028DEB333DAC22B00D1087086A29E8B9CCFF0B326DF0E05FB
DED68F3FDF2778B27A64850EC82FBD690CC7AEB2AFDBAFC4DCD7A8412B611C7E
0425703C18177A8946DDCCC6F6EC834BD0375D7480506633C0841E82C7F6ED4D
CEC2315BD8465C6AAA6D194526FC1EC87FC2D90A4317A48A201ECFADAD9C62CE
4D41EF059F5BA92E8D7C7038398B0E2C0D4155EE873D993C4489F67D53C5D5EE
71F32F052FE0BDE612CBC9CD64D08E7F1AF7847DB594D2B582406C386C17BF67
A311C134B42BEAEE09418FD54292F2018C17EC9F6C751FA03503962B37B3A2A4
C595F4D60479F0E93ED74DF19F7674D13B0BCC5825AE5A566F2DC04BB5F2D33F
91BD8ECC2596D1089ADFDB6BFE9C2852C0222B3FDF98A110AAA15047395BC8A0
3D5173F7E99069EE0C4ADA06171976BC8614BB9EB5C372F6F6E128C3BA9C04BD
EF39C5D427CD66EAFFFAFD4935D0557D6234B34F81ACF88F4B735CAAE381AD06
0B3382DB6A079E084A00808F6EF3895509740904B37C6C3D68B6A41B172BE1EB
D82304B01B8E767225E6CF9FE3861D78619A1D99139D13D90B33499A66E01688
3DA0A1CE1DD1D303B7B9A5375305E6ADF2B2CDC70FB76B5AC436B89F40648114
724AA3711B853DC7DCDD370EFB6ACE21028C3CA8D5AEC5AF9425268D8EC7B7B6
24112608D647C2646095631E1590982050E2E31E0F19B50882F11BD8E7727CF6
CA9A1CC2EC74BA83CD11F1D086FFB8525B24453E89443928588F7B38CEB97E37
847B8F304E803F941D6A973047292234EBD67138A73C3C1D5F4523D4CFF22635
17D2C735CF5EE3D751887DE8D4CFCDF4BB94B0FE9DA626527E6603703F355CA9
810461CF9395AF212CF216849DF967B90BE3CF2435B90F35F9D927574A21EC4A
CCA79D3024D60DD3ACF911CD4E9AC7A02CBFCA683E72CA9C8BC9331343671293
B3988FB15D30063B4BD742BCA2BD6A57041F9F8B51A919C19D66EC352A44F344
029F773CF537E3D07710CC0AB9086AAE7C0106F1AF033077BAA65DBA5337C0E9
675FED4C90A0EFB8F001401C49552E5C8F6B959E6E5DED0B65A3FBFEF402C565
8B1277A21059F8A659DD801832673D1A3F1CCC7D1EF136198728EF2DAA7CDB57
A9787B8DFE84304D9D84855C0741826F61304E62FB990887C2F355E586026F9F
92DBD7B6CD1BCBC6AC58D8DE29C66884ACF987F32B0524EFF329D3C11A64994F
770FC8E164B407E956A5F16FE0C47909BA4E1408AFC7BF3CC6FF2082F733AF11
7225E8B84D21E30C4E12E80173AC1801186FCCD2BDEA09A2B177C0781F0E2099
429169BB60BD0966FCC967CCB094DEE8C1609437E761FF6320D2934F13FB6F13
9FFBC25807E5107273B22528364E9A55827144BC430E6C738F3DA412AEB087CE
F514FF781709A3739AAADBC754D2FCCD1B23C58FBC0E1D7DA57A1A74C366217B
E59372A8CF7EFA14D58B533DBD419E44CE08C6B147201FBA11C7BB22D6AFF60E
BA2D11D34285F5F7ECD18F1AADB8467E194D9A6DFD171918BE0FA8B8AA183242
999AE0DC426A0EE97B0C7DD2C818DAF47CD7C732307646B0D1F53DA8D57F0B74
0F3BFBB5DD47AA8660E1C0487D43A25BF79CD43BF8D4EE1DAD612BB5EB714DE2
BE20578964D918246C1DAC384386AA09FF3FD3625DC54B75A4EE8CA6070BAB6F
F6AA85BDA3948E2AD5EA8083625D2C5712F85DF4F6141A55F97B3E058AE2697A
61BAEAD306B7976AABB603D33BF4926C74166A1DD9A60DC0C7F5AF7E0FF7F0F9
198E3144A8F02A0250E019AEF7AC43A4B05F3572D3C58A4193090FFCBA9BE152
86E9EE15713AC64A0FC34AA14BB30422D2320C51F0B73D3A43AC471631090410
69BCDB45BEC4C9CF1471AD546BFCD2E53D11DD6CD2BB744B428263BCC652EEFE
6795ED75AE566B453BB2DD4A5EA4293D729B02C73CE8146728D79E0E532872B4
9509EC09391E594DDB4DA25DB9CBE8CFB867A812F8A377544930C2A053A12E7D
61ACA2F3CAE07085B4B8701251A3036E6ACA73A6E2C7C7C2EB7B8F4980063901
88EFCAAAFBBDDC1DA612464E58A021E1EABFBF06EEAB6B2185D6AD84F642BE7A
42ABE30BAEA89912E2BCC8533F0AA178EBE77AF9993BF55CDB391B1D7FCA0E89
176FF82547F2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 156819571 221710428 1000 600 600 (job-001.dvi)
@start /Fa 139[38 38 38 1[54 49 54 4[27 1[49 1[43 54
2[49 12[70 54 13[66 12[49 49 49 49 49 49 49 49 49 48[{
T1Encoding ReEncodeFont}23 99.6264 /SFRM1200 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop Black Black 706 1943 a @beginspecial
0 @llx 0 @lly 192 @urx 164 @ury 1920 @rwi @setspecial
%%BeginDocument: job-001.fig2dev.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: job-001.fig
%%Creator: fig2dev Version 3.2 Patchlevel 5c
%%CreationDate: Wed Nov 21 22:09:34 2012
%%BoundingBox: 155 3065 346 3230
%Magnification: 1.0000
%%EndComments
%%BeginProlog
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index oldshow	% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proc char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% this is the pattern fill program from the Second edition Reference Manual
% with changes to call the above pattern fill
% left30
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 16 true [ 32 0 0 -16 0 16 ]
	{<c000c000300030000c000c000300030000c000c000300030
	000c000c00030003c000c000300030000c000c0003000300
	00c000c000300030000c000c00030003>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P1 exch def

% right45
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 20 20 true [ 20 0 0 -20 0 20 ]
	{<0040100080200100400200800401000802001004
	0020080040100080200000401000802001004002
	0080040100080200100400200800401000802000>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P5 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

/pageheader {
save
newpath 0 164 moveto 0 0 lineto 192 0 lineto 192 164 lineto closepath clip newpath
-54.2 205.0 translate
1 -1 scale
$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06299 0.06299 sc
} bind def
/pagefooter {
$F2psEnd
restore
} bind def
%%EndProlog
pageheader
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Ellipse
7.500 slw
n 1890 990 64 64 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 2520 990 64 64 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 2520 1800 64 64 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 3150 1800 64 64 0 360 DrawEllipse gs /PC [[1.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 205.73 115.73] PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 1890 1440 64 64 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 3627 1326 64 64 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 1170 990 64 64 0 360 DrawEllipse gs col1 1.00 shd ef gr gs col0 s gr

% Ellipse
n 1530 2610 64 64 0 360 DrawEllipse gs /PC [[1.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 97.73 169.73] PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 1530 2340 64 64 0 360 DrawEllipse gs col1 1.00 shd ef gr gs col0 s gr

% Ellipse
n 1530 3150 64 64 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 1530 2880 64 64 0 360 DrawEllipse gs /PC [[0.00 1.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P5 [16 0 0 -16 97.73 187.73] PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 1350 1916 64 64 0 360 DrawEllipse gs col1 1.00 shd ef gr gs col0 s gr

% Ellipse
n 1080 1710 64 64 0 360 DrawEllipse gs col1 1.00 shd ef gr gs col0 s gr

% Ellipse
n 2970 926 64 64 0 360 DrawEllipse gs /PC [[1.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 193.73 57.47] PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 3060 1260 64 64 0 360 DrawEllipse gs /PC [[1.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 199.73 79.73] PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 3240 1080 64 64 0 360 DrawEllipse gs col1 1.00 shd ef gr gs col0 s gr

% Ellipse
n 3330 1736 64 64 0 360 DrawEllipse gs /PC [[1.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 217.73 111.47] PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
 [15 45] 45 sd
1 slc
n 3220 1769 292 292 0 360 DrawEllipse gs col0 s gr
 [] 0 sd
% Ellipse
 [15 45] 45 sd
n 3126 1024 356 356 0 360 DrawEllipse gs col0 s gr
 [] 0 sd
% Ellipse
 [15 45] 45 sd
n 1202 1821 334 334 0 360 DrawEllipse gs col0 s gr
 [] 0 sd
% here ends figure;
pagefooter
showpage
%%Trailer
end
%EOF

%%EndDocument
 @endspecial 0 0 0 TeXcolorrgb 849 697 a Fa(1)p Black
0 0 0 TeXcolorrgb 1220 933 a(5)p Black 0 0 0 TeXcolorrgb
1555 1122 a(6)p Black 0 0 0 TeXcolorrgb 285 w(7)p Black
0 0 0 TeXcolorrgb 1562 704 a(2)p Black 0 0 0 TeXcolorrgb
1885 697 a(4)p Black 0 0 0 TeXcolorrgb 1224 701 a(0)p
Black 0 0 0 TeXcolorrgb 2143 874 a(8)p Black 0 0 0 TeXcolorrgb
1152 1510 a(Starting)32 b(dep)s(ot)p Black 0 0 0 TeXcolorrgb
1152 1652 a(Ending)h(dep)s(ot)p Black 0 0 0 TeXcolorrgb
1152 1793 a(Starting)f(and)h(ending)g(dep)s(ot)p Black
0 0 0 TeXcolorrgb 1152 1935 a(T)-8 b(ransit)33 b(no)s(de)p
Black 0 0 0 TeXcolorrgb 908 1138 a(3)p Black Black Black
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
