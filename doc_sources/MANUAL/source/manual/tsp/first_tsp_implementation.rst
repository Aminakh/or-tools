..  _first_tsp_implementation:

The TSP in or-tools
------------------------------------

..  only:: draft

    We have implemented a basic program to solve the TSP but before we discuss it, let's have a look at a 
    minimalist implementation (see :file:`simple_tsp.cc`). 
    You can solve the TSP in a few lines of code with the help of the RL:
    
    ..  code-block:: c++
    
        #include <iostream>
        #include "constraint_solver/routing.h"
        
        using operations_research;

        //  Cost function
        int64 MyCost(RoutingModel::NodeIndex from, RoutingModel::NodeIndex to) {
          ...
          return ...;
        }
        
        int main(int argc, char **argv) {
          RoutingModel TSP(42, 1);// 42 nodes, 1 vehicle
          TSP.SetCost(NewPermanentCallback(MyCost));

          const Assignment * solution = TSP.Solve();

          //  Solution inspection
          if (solution != NULL) {
            std::cout << "Cost: " << solution->ObjectiveValue() << std::endl;
            for (int64 index = TSP.Start(0); !TSP.IsEnd(index); 
                              index = solution->Value(TSP.NextVar(index))) {
              std::cout << TSP.IndexToNode(index) << " ";
            }
            std::cout << std::endl;
          } else {
            std::cout << "No solution found" << std::endl;
          }
          return 0;
        }


Basic implementation
^^^^^^^^^^^^^^^^^^^^^

..  only:: draft

    You can find the code in the file :file:`tsp.cc`. 
    
    ..  only:: html 
    
        This time we use the ``TSPData`` (see :ref:`tspdata_class`) and ``TSPEpixData``
        (see :ref:`section_visualization_epix_tsp`) classes to 
        read TSP instances and write TSP solutions in ``TSPLIB`` format.
    
    ..  raw:: latex
    
        This time we use the \code{TSPData} (see~\ref{manual/tsp/tsp:tspdata-class}) and \code{TSPEpixData}
        (see~\ref{manual/tsp/tsp:section-visualization-epix-tsp}) classes to 
        read TSP instances and write TSP solutions in \code{TSPLIB} format.

To set the depot
""""""""""""""""""""

..  only:: draft

    Thetsp_depot

Command line parameters read from a file
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

..  only:: draft

    When parameters start to pile up, writing them every time on the command line isn't very practical. The ``gflags``
    library provides the possibility to load the parameters from a text file. For instance, a parameters file
    ``tsp_parameters.txt`` for our
    ``TSPData`` class might look like this:
    
    ..  code-block:: text
    
        --deterministic_random_seed=true
        --use_symmetric_distances=true
        --min_distance=23
        --max_distance=748

    You provide this file with the ``flagfile`` flag:
    
    ..  code-block:: bash
    
        ./tsp --flagfile=tsp_parameters.txt
        
    which gives the following file :file:`tsp_sol.txt` on our system:
    
    ..  code-block:: text
    
        NAME : tsp_sol.txt
        COMMENT : Automatically generated by TSPData (obj: 3948)
        TYPE : TOUR
        DIMENSION : 101
        TOUR_SECTION
        2
        14
        63
        ...
        33
        44
        -1

..  _tsp_avoid_some_edges:

How to avoid some edges?
^^^^^^^^^^^^^^^^^^^^^^^^


..  raw:: html
    
    <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
    <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>

